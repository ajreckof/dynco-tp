<https://api.github.com/repos/w3c/json-ld-syntax> <http://example.com/ns#issue> <https://api.github.com/repos/w3c/json-ld-syntax/issues/365> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/365> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/365"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/365> <http://schema.org/identifier> "365"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/365> <http://schema.org/name> "Updates to accommodate ReSpec changes and subsequent issues found post-REC." .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/365> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/365> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/365> <http://schema.org/startDate> "2020-11-12T23:03:22Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/365> <http://schema.org/endDate> "2020-11-14T18:47:49Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/365> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/pulls/365> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/365"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/365> <http://example.com/ns#pullRequest> <https://api.github.com/repos/w3c/json-ld-syntax/pulls/365> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/365> <http://schema.org/description> "* Use respec-w3c instead of respec-w3c-comman.\n* Update playground links to not be flagged by ReSpec.\n* Update ReSpec configuration to use group: \"wg/json-ld\" instead of separate wg* attributes.\n* Remove old dependence on ReSpec definition list and non-existant \"end\" subscription.\n* Miscellaneous spelling and grammar fixes suggested by @shujikamitsuna.\n\nFixes #364.\n\n\n<!--\n    This comment and the below content is programatically generated.\n    You may add a comma-separated list of anchors you'd like a\n    direct link to below (e.g. #idl-serializers, #idl-sequence):\n\n    Don't remove this comment or modify anything below this line.\n    If you don't want a preview generated for this pull request,\n    just replace the whole of this comment's content by \"no preview\"\n    and remove what's below.\n-->\n***\n<a href=\"https://pr-preview.s3.amazonaws.com/w3c/json-ld-syntax/pull/365.html\" title=\"Last updated on Nov 13, 2020, 10:50 PM UTC (ac5839f)\">Preview</a> | <a href=\"https://pr-preview.s3.amazonaws.com/w3c/json-ld-syntax/365/87b7069...ac5839f.html\" title=\"Last updated on Nov 13, 2020, 10:50 PM UTC (ac5839f)\">Diff</a>" .
<https://api.github.com/repos/w3c/json-ld-syntax> <http://example.com/ns#issue> <https://api.github.com/repos/w3c/json-ld-syntax/issues/364> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/364> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/364"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/364> <http://schema.org/identifier> "364"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/364> <http://schema.org/name> "Possible typos in Json-ld 1.1" .
<https://api.github.com/users/shujikamitsuna> <http://schema.org/accountId> "shujikamitsuna" .
<https://api.github.com/users/shujikamitsuna> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/26715144?v=4" .
<https://api.github.com/users/shujikamitsuna> <http://schema.org/url> "https://github.com/shujikamitsuna"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/shujikamitsuna> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/364> <http://schema.org/creator> <https://api.github.com/users/shujikamitsuna> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/Editorial> <http://schema.org/name> "Editorial" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/Editorial> <http://schema.org/color> "ff0000" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/Editorial> <http://schema.org/description> "Used by the errata management" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/364> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/Editorial> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/Errata> <http://schema.org/name> "Errata" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/Errata> <http://schema.org/color> "ff0000" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/Errata> <http://schema.org/description> "Used by the errata management" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/364> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/Errata> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/364> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/364> <http://example.com/ns#assignee> <https://api.github.com/users/gkellogg> .
<https://api.github.com/users/pchampin> <http://schema.org/accountId> "pchampin" .
<https://api.github.com/users/pchampin> <http://schema.org/image> "https://avatars1.githubusercontent.com/u/304612?v=4" .
<https://api.github.com/users/pchampin> <http://schema.org/url> "https://github.com/pchampin"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/pchampin> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/364> <http://example.com/ns#assignee> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/364> <http://schema.org/startDate> "2020-11-11T03:57:28Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/364> <http://schema.org/endDate> "2020-11-14T18:47:49Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/364> <http://example.com/ns#authorAssociation> "NONE" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/364> <http://schema.org/description> "Hi. This is KAMITSUNA Shuji @ Japan.\r\nI'm translating the Json-ld 1.1 into Japanese and found possible typos below.\r\n\r\n1) Sec. 1.3, in the description of \"markup definition reference\": \"A references\" might be \"A reference\" or \"References\".\r\n2) Sec. 1.4, in the description of \"embedded context\": \"a nested properties\" might be \"a nested property\" or \"nested properties\".\r\n3) Sec. 1.4, in the description of \"graph object\": \"it it\" might be \"if it\".\r\n4) Sec. 1.4, in the description of \"language map\": \"An language\" might be \"A language\".\r\n5) Sec. 1.6, in the third paragraph: \"kinds of resource\" might be \"kinds of resources\".\r\n6) Sec. 4.1.2, in the paragraph below ex. 24: \"an map\" might be \"a map\".\r\n7) Sec. 4.1.5, in the paragraph above NOTE: \"a expanded\" might be \"an expanded\" - same expression can be found in the sec. 4.1.6, and 9.16.\r\n8) Sec. 4.1.8, in the paragraph below ex.46: \"calls for\" might be \"call for\".\r\n9) Sec. 4.2.4, in the paragraph below ex.68: period (.) might be missing after \"with the two strings 花澄 and 科学者\".\r\n10) Sec. 4.3, in the NOTE below ex. 79: \"generates\" might be \"generate\".\r\n11) Sec. 4.3.1, in the paragraph below ex.84: \"includes\" might be \"include\".\r\n12) Sec. 4.6, in the second paragraph: \"iterating though\" might be \"iterating through\".\r\n13) Sec. 8, in the sentence above ex.149: \"an property\" might be \"a property\".\r\n14) Sec. 8: \"Data Round Tripping) in\" might be \"Data Round Tripping in\" - closing bracket might be unnecessary.\r\n15) Sec. 9.10, in the first sentence: \"were\" might be \"where\".\r\n16) Sec. 9.12, in the second paragraph: \"is contains\" might be \"contains\" or \"is\".\r\n17) Sec. 9.16, in the second paragraph: \"MAY NOT used\" might be \"MAY NOT be used\".\r\n18) Sec. A.1, in the description of \"weiblich | de\" and \"female | en\": \"an language-tagged\" might be \"a language-tagged\".\r\n19) Sec. A.1: the latter description of \"http://example.com/graphs/1\" might be \"http://example.com/graphs/2\".\r\n\r\nThank you very much for the great specification!\r\n\r\nBest regards," .
<https://api.github.com/repos/w3c/json-ld-syntax> <http://example.com/ns#issue> <https://api.github.com/repos/w3c/json-ld-syntax/issues/363> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/363> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/363"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/363> <http://schema.org/identifier> "363"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/363> <http://schema.org/name> "Clarification: prefix definition in @context using relative IRI?" .
<https://api.github.com/users/alexkreidler> <http://schema.org/accountId> "alexkreidler" .
<https://api.github.com/users/alexkreidler> <http://schema.org/image> "https://avatars1.githubusercontent.com/u/11166947?v=4" .
<https://api.github.com/users/alexkreidler> <http://schema.org/url> "https://github.com/alexkreidler"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/alexkreidler> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/363> <http://schema.org/creator> <https://api.github.com/users/alexkreidler> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/363> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/363> <http://schema.org/startDate> "2020-10-01T18:33:19Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/363> <http://schema.org/endDate> "2020-10-02T18:17:53Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/363> <http://example.com/ns#authorAssociation> "NONE" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/363> <http://schema.org/description> "I have a document that looks like this at `/home`:\r\n```json\r\n{\r\n    \"@context\": \"/context\",\r\n    \"id\": \"/home\",\r\n    \"title\": \"Example People API Server\",\r\n    \"description\": \"Using the people Hydra ontology\",\r\n    \"people\": {\r\n        \"@id\": \"/people\"\r\n    }\r\n}\r\n```\r\nThat fetches the following at `/context`\r\n```json\r\n{\r\n        \"@context\": [\r\n            {\r\n                \"ppl\": \"/onto/\",\r\n                \"schema\": \"http://schema.org/\",\r\n                \"hydra\": \"http://www.w3.org/ns/hydra/core#\",\r\n                \"people\": {\r\n                    \"@id\": \"ppl:people\",\r\n                    \"@type\": \"@id\"\r\n                }\r\n            },\r\n            \"https://www.w3.org/ns/hydra/context.jsonld\"\r\n        ]\r\n}\r\n```\r\n\r\nI then got an error from the [`jsonld` library](https://github.com/digitalbazaar/jsonld.js):\r\n`Invalid JSON-LD syntax; a @context @id value must be an absolute IRI, a blank node identifier, or a keyword.`.\r\n\r\n`@context` itself can be a remote resource as illustrated in the first example. \r\n\r\nI did see this note:\r\n>Properties, values of `@type`, and values of properties with a term definition that defines them as being relative to the vocabulary mapping, may have the form of a relative IRI reference, but are resolved using the vocabulary mapping, and not the base IRI.\r\n\r\nThus it makes sense that there might be an error if trying to use the `ppl` prefix in a property, like `ppl:knows`. \r\n\r\nI looked through the spec though and couldn't find any explicit answer to whether relative prefixes are allowed in the context, so I'm hoping one of you here could answer that.\r\n\r\nIt likely would be a helpful option for those serving ontologies from test/local servers." .
<https://api.github.com/repos/w3c/json-ld-syntax> <http://example.com/ns#issue> <https://api.github.com/repos/w3c/json-ld-syntax/issues/362> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/362> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/362"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/362> <http://schema.org/identifier> "362"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/362> <http://schema.org/name> "New feature: `@template`" .
<https://api.github.com/users/pchampin> <http://schema.org/accountId> "pchampin" .
<https://api.github.com/users/pchampin> <http://schema.org/image> "https://avatars1.githubusercontent.com/u/304612?v=4" .
<https://api.github.com/users/pchampin> <http://schema.org/url> "https://github.com/pchampin"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/pchampin> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/362> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/362> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#OpenIssue> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/362> <http://schema.org/startDate> "2020-09-24T09:22:30Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/362> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/362> <http://schema.org/description> "Here is a feature that I discussed with some colleagues, and that we really would like to see in a future version of JSON-LD.\r\n\r\n## Use cases\r\nConsider the following example JSON, as would be produced by a Web API\r\n```json\r\n{\r\n    \"id\": 1234,\r\n    \"name\": \"Alice\",\r\n    \"bday\": \"1987-04-01\",\r\n    \"height\": 168\r\n}\r\n```\r\nWe know from the API documentation that `id` is a unique local identifier for this entity, whose corresponding IRI is `http://example.org/users/1234`. Unfortunately, there are two problems with the current spec:\r\n\r\n* a property mapped to `@id` accepts only strings;\r\n* even if `1234` was replaced with `\"1234\"`, it would be resolved against the `@base` of the context; setting the base to `http://example.org/users/` for the sole purpose of this property would not always be appropriate.\r\n\r\nWe also know from the API documentation that `height` is expressed in centimetres. We would like to map it using the [`cdt:ucum`](https://ci.mines-stetienne.fr/lindt/v3/custom_datatypes#ucum) datatype, i.e. into `\"168 cm\"^^cdt:ucum\"`.\r\n\r\n## Proposed solution\r\n\r\n* add a `@template` keyword that can appear in a term definition; the value is a string containing a single placeholder `{}`, for example `http://example.org/users/{}` or `{} cm`;\r\n* during expansion, and before any other step, the value of a property matching this term definition is replaced by the value of the template, replacing the placeholder with the canonical representation of the value;\r\n* during compaction, a term definition with a `@template` attribute is usable only if the `@id` or `@value` \"matches\" the template. Its value is then replaced by extracting the substring corresponding to the placeholder.\r\n\r\nAn example context for the use-case above would then look like\r\n```json\r\n{\"@context\": {\r\n    \"id\": {\r\n        \"@id\": \"@id\",\r\n        \"@template\": \"http://example.org/users/{}\"\r\n    },\r\n    \"height\": {\r\n        \"@id\": \"http://example.org/ont/height\",\r\n        \"@type\": \"https://ci.mines-stetienne.fr/lindt/v3/custom_datatypes#ucum\",\r\n        \"@template\": \"{} cm\"\r\n    }\r\n}}\r\n```\r\n\r\n## Remaining issues\r\n* Is `{}` the best choice for the placeholder?\r\n* Do we need a way to escape the placeholder in the template?\r\n* Do we want to allow some formatting options in the template (minimum number of digits, hexadecimal, ...) or more complex transformation (computation...)? I suggest we keep things simple.\r\n* Do we reserve the use of `@template` for number values, or do we also use it with strings? There would possibly be useful use-cases with strings as well, but then compaction would have to decide whether to produce a string or a number (at least when the value *can* be parsed as a number)\r\n\r\n\r\n" .
<https://api.github.com/repos/w3c/json-ld-syntax> <http://example.com/ns#issue> <https://api.github.com/repos/w3c/json-ld-syntax/issues/361> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/361> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/361"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/361> <http://schema.org/identifier> "361"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/361> <http://schema.org/name> "Support non-propagating protected terms" .
<https://api.github.com/users/Fak3> <http://schema.org/accountId> "Fak3" .
<https://api.github.com/users/Fak3> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/991641?v=4" .
<https://api.github.com/users/Fak3> <http://schema.org/url> "https://github.com/Fak3"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/Fak3> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/361> <http://schema.org/creator> <https://api.github.com/users/Fak3> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/needs%20discussion> <http://schema.org/name> "needs discussion" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/needs%20discussion> <http://schema.org/color> "c5def5" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/needs%20discussion> <http://schema.org/description> "" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/361> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/needs%20discussion> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:enhancement> <http://schema.org/name> "spec:enhancement" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:enhancement> <http://schema.org/color> "c11537" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:enhancement> <http://schema.org/description> "" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/361> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:enhancement> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/361> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#OpenIssue> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/361> <http://schema.org/startDate> "2020-07-18T14:39:42Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/361> <http://example.com/ns#authorAssociation> "CONTRIBUTOR" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/361> <http://schema.org/description> "I bumped into a practical limitation of json-ld with [Verifiable credentials data model](https://www.w3.org/TR/vc-data-model/)\r\n\r\nVC context defines few protected terms at the top level of the json object - namely _issuer_ and _credentialSubject_. According to the spec, ids of those properties must be protected, and the content that goes under them is left for the users of the spec to be changed (mostly) freely. But unfortunately json-ld 1.1 protected terms prevent users from modifying property-scoped context of protected term:\r\n\r\n```json\r\n{\r\n  \"@context\": [\r\n   {\r\n      \"@protected\": true,\r\n      \"issuer\": { \"@id\": \"https://www.w3.org/2018/credentials#issuer\", \"@type\": \"@id\" }\r\n   },\r\n   {\r\n      \"issuer\": {\r\n        \"@id\": \"https://www.w3.org/2018/credentials#issuer\", \"@type\": \"@id\",\r\n        \"@context\": { \"name\": \"http://example.org/name\" }  // This raises error - modifying protected `issuer` term is not allowed\r\n      }\r\n   }\r\n  ],\r\n  \"type\": [\"VerifiableCredential\"],\r\n  \"issuer\": {\r\n    \"name\": \"My issuer\"\r\n  }\r\n}\r\n```\r\n\r\nThis ticked is moved from https://github.com/digitalbazaar/jsonld.js/issues/404\r\n\r\n> @dlongley  wrote: this use case was something that was discussed in the JSON-LD WG, but we couldn't find a way to support it given the time constraints. I also wanted this use case supported. Something similar would have been very useful for \"credentialSubject\" as well.\r\n\r\n> The alternative here is to define a type instead -- and use a type-scoped context. Like this:\r\n> ```json\r\n> \"issuer\": {\r\n>    \"type\": \"MyIssuerType\",\r\n> }\r\n> ```\r\n\r\nThe workaround suggested by @dlongley works, but I wonder if there might be better way to handle this usecase in the next version of json-ld spec.\r\n\r\nSomething that comes to mind is to use \"@protected\" keyword inside a property-scoped context of a protected term to allow its redefinition:\r\n```\r\n   {\r\n      \"@protected\": true,\r\n      \"issuer\": { \r\n         \"@id\": \"https://www.w3.org/2018/credentials#issuer\", \"@type\": \"@id\" ,\r\n         \"@context\": { \"@protected\": false }  // Indicates that property-scoped context of this protected term can be overriden.\r\n      }\r\n   },\r\n```" .
<https://api.github.com/repos/w3c/json-ld-syntax> <http://example.com/ns#issue> <https://api.github.com/repos/w3c/json-ld-syntax/issues/360> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/360> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/360"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/360> <http://schema.org/identifier> "360"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/360> <http://schema.org/name> "Finalize dates on the errata page" .
<https://api.github.com/users/iherman> <http://schema.org/accountId> "iherman" .
<https://api.github.com/users/iherman> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/520723?v=4" .
<https://api.github.com/users/iherman> <http://schema.org/url> "https://github.com/iherman"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/iherman> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/360> <http://schema.org/creator> <https://api.github.com/users/iherman> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/360> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/360> <http://schema.org/startDate> "2020-07-08T12:26:03Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/360> <http://schema.org/endDate> "2020-09-04T11:22:22Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/360> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/pulls/360> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/360"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/360> <http://example.com/ns#pullRequest> <https://api.github.com/repos/w3c/json-ld-syntax/pulls/360> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/360> <http://schema.org/description> "This should be merged when the final document is published" .
<https://api.github.com/repos/w3c/json-ld-syntax> <http://example.com/ns#issue> <https://api.github.com/repos/w3c/json-ld-syntax/issues/355> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/355> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/355"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/355> <http://schema.org/identifier> "355"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/355> <http://schema.org/name> "Kill \"IRI\"?" .
<https://api.github.com/users/dhh1128> <http://schema.org/accountId> "dhh1128" .
<https://api.github.com/users/dhh1128> <http://schema.org/image> "https://avatars1.githubusercontent.com/u/2208904?v=4" .
<https://api.github.com/users/dhh1128> <http://schema.org/url> "https://github.com/dhh1128"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/dhh1128> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/355> <http://schema.org/creator> <https://api.github.com/users/dhh1128> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/ErratumRaised> <http://schema.org/name> "ErratumRaised" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/ErratumRaised> <http://schema.org/color> "ff0000" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/ErratumRaised> <http://schema.org/description> "Used by the errata management" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/355> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/ErratumRaised> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/355> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#OpenIssue> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/355> <http://schema.org/startDate> "2020-06-24T17:17:14Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/355> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/355> <http://schema.org/description> "The heavy use of \"IRI\" as terminology in the spec, referencing RFC 3987, raises a number of thorny issues and actually makes JSON-LD out-of-sync with the latest developments at W3C. See https://www.w3.org/International/wiki/IRIStatus. (Also, the status of RFC 3987 has never moved past PROPOSED.)\r\n\r\nIf the spec continues to use the term, then there should probably be a section added to the spec to explain how JSON-LD proposes to solve the IRI problems such as inconsistent use of punycode and percent encoding. I suspect it would be simpler to use \"URL\" everywhere, per W3C recommendations, with a simple (foot)note explaining that the intent of \"URL\" is to encompass internationalization as originally envisioned by the IRI effort, but will track the work of the new URL working group for the particulars." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/687084872> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/360#issuecomment-687084872"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/360> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/687084872> .
<https://api.github.com/users/iherman> <http://schema.org/accountId> "iherman" .
<https://api.github.com/users/iherman> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/520723?v=4" .
<https://api.github.com/users/iherman> <http://schema.org/url> "https://github.com/iherman"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/iherman> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/687084872> <http://schema.org/creator> <https://api.github.com/users/iherman> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/687084872> <http://schema.org/startDate> "2020-09-04T11:22:22Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/687084872> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/687084872> <http://schema.org/description> "Did it by hand, not realizing that this PR is here..." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/698240185> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/362#issuecomment-698240185"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/362> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/698240185> .
<https://api.github.com/users/iherman> <http://schema.org/accountId> "iherman" .
<https://api.github.com/users/iherman> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/520723?v=4" .
<https://api.github.com/users/iherman> <http://schema.org/url> "https://github.com/iherman"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/iherman> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/698240185> <http://schema.org/creator> <https://api.github.com/users/iherman> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/698240185> <http://schema.org/startDate> "2020-09-24T09:49:00Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/698240185> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/698240185> <http://schema.org/description> "Specifically for URL-s there is a [URI Template](https://tools.ietf.org/html/rfc6570) RFC document. I know we referred to it in the CSVW work, but that is something that @gkellogg knows way better. I do not know whether it is too much for what we want, whether it is also usable for non-URL purposes, etc. But it has the advantage of being documented and would avoid reinventing the wheel..." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/698241063> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/362#issuecomment-698241063"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/362> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/698241063> .
<https://api.github.com/users/pietercolpaert> <http://schema.org/accountId> "pietercolpaert" .
<https://api.github.com/users/pietercolpaert> <http://schema.org/image> "https://avatars1.githubusercontent.com/u/347073?v=4" .
<https://api.github.com/users/pietercolpaert> <http://schema.org/url> "https://github.com/pietercolpaert"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/pietercolpaert> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/698241063> <http://schema.org/creator> <https://api.github.com/users/pietercolpaert> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/698241063> <http://schema.org/startDate> "2020-09-24T09:50:45Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/698241063> <http://example.com/ns#authorAssociation> "NONE" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/698241063> <http://schema.org/description> "I like the proposal. `{}` is a good suggestion, but if we would like to support more transformations, we could take inspiration from: \r\n * printf in python/bash/C\r\n * string handling in Bash4\r\n * regular expression variables and their flags\r\n\r\nProbably `@datatype` in your last example is a typo and you meant `@type` though?\r\n\r\nA little bit related: the Hydra explicit and basic variable representations for URI templates: https://www.hydra-cg.com/spec/latest/core/#example-22-the-different-variable-representations" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/698254282> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/362#issuecomment-698254282"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/362> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/698254282> .
<https://api.github.com/users/asbjornu> <http://schema.org/accountId> "asbjornu" .
<https://api.github.com/users/asbjornu> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/12283?v=4" .
<https://api.github.com/users/asbjornu> <http://schema.org/url> "https://github.com/asbjornu"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/asbjornu> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/698254282> <http://schema.org/creator> <https://api.github.com/users/asbjornu> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/698254282> <http://schema.org/startDate> "2020-09-24T10:17:59Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/698254282> <http://example.com/ns#authorAssociation> "NONE" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/698254282> <http://schema.org/description> "I really like the idea, and agree that for URIs, @iherman's suggestion on using URI Templates is the definitive way to go. I don't think URI Templates can (or should) be used for non-URI data, though. At least not without defining some clear processing rules (perhaps some inspiration can be sourced from [RFC 5229](https://tools.ietf.org/html/rfc5229)).\r\n\r\nSomething I believe is going to surface as a need almost immediately after `@template` is released, is the ability to interpolate the value of other properties from the document into the result of the templated strings. So something like `{otherProperty}` is a good idea to support from the get-go.\r\n\r\n…Which begs the question: How should `otherProperty` be resolved? Are only sibling properties to the templated property allowed? If not, should [JSON Pointer](https://tools.ietf.org/html/rfc6901) or [JSON Path](https://goessner.net/articles/JsonPath/) be supported? This is a slippery slope unless we pin the syntax against a stable, ratified specification." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/698297883> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/362#issuecomment-698297883"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/362> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/698297883> .
<https://api.github.com/users/pchampin> <http://schema.org/accountId> "pchampin" .
<https://api.github.com/users/pchampin> <http://schema.org/image> "https://avatars1.githubusercontent.com/u/304612?v=4" .
<https://api.github.com/users/pchampin> <http://schema.org/url> "https://github.com/pchampin"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/pchampin> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/698297883> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/698297883> <http://schema.org/startDate> "2020-09-24T11:58:10Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/698297883> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/698297883> <http://schema.org/description> "@pietercolpaert \r\n> Probably @datatype in your last example is a typo and you meant @type though?\r\n\r\nYes, thanks for spotting it. That's fixed" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/698309810> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/362#issuecomment-698309810"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/362> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/698309810> .
<https://api.github.com/users/azaroth42> <http://schema.org/accountId> "azaroth42" .
<https://api.github.com/users/azaroth42> <http://schema.org/image> "https://avatars3.githubusercontent.com/u/871868?v=4" .
<https://api.github.com/users/azaroth42> <http://schema.org/url> "https://github.com/azaroth42"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/azaroth42> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/698309810> <http://schema.org/creator> <https://api.github.com/users/azaroth42> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/698309810> <http://schema.org/startDate> "2020-09-24T12:23:42Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/698309810> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/698309810> <http://schema.org/description> "I'm not convinced, I'm afraid.\r\n\r\nThis is even more complex than the frequently requested ability to change datatypes / add classes with `@type` in a context (#31, #76, etc).  Instead this does additional data transformation by introducing new content in a context document, something we have previously decided is out of scope for a context. \r\n\r\nThe data would not round-trip, as the template would not be reversible. Once the context has been applied, it cannot be unapplied. Even worse, once it was applied, it could then be applied again if it could be used with strings, resulting in (e.g.) \"168 cm cm cm cm cm\". The template pattern is not idempotent, and there's no way to know when to apply it and when it has already been applied.\r\n\r\nSo I'm :-1: on the feature in its current state" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/698313755> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/362#issuecomment-698313755"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/362> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/698313755> .
<https://api.github.com/users/filip26> <http://schema.org/accountId> "filip26" .
<https://api.github.com/users/filip26> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/340018?v=4" .
<https://api.github.com/users/filip26> <http://schema.org/url> "https://github.com/filip26"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/filip26> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/698313755> <http://schema.org/creator> <https://api.github.com/users/filip26> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/698313755> <http://schema.org/startDate> "2020-09-24T12:31:53Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/698313755> <http://example.com/ns#authorAssociation> "NONE" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/698313755> <http://schema.org/description> "I agree with @azaroth42 Beside a lot of unresolved issues this feature brings, the current complexity of JSON-LD is quite big. \r\n\r\nThere are plenty of syntax description formats (OAS, RAML, etc.) that can be used as a source for a preprocessor to transform an input into hypermedia format before passing it to JSON-LD processor." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/698315992> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/355#issuecomment-698315992"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/355> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/698315992> .
<https://api.github.com/users/azaroth42> <http://schema.org/accountId> "azaroth42" .
<https://api.github.com/users/azaroth42> <http://schema.org/image> "https://avatars3.githubusercontent.com/u/871868?v=4" .
<https://api.github.com/users/azaroth42> <http://schema.org/url> "https://github.com/azaroth42"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/azaroth42> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/698315992> <http://schema.org/creator> <https://api.github.com/users/azaroth42> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/698315992> <http://schema.org/startDate> "2020-09-24T12:36:30Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/698315992> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/698315992> <http://schema.org/description> "+1 to @iherman. This isn't a technical error in the specification and thus does not deserve an errata. It was considered during the WG and IRI was the resolution. The resolution is here:  https://www.w3.org/2018/json-ld-wg/Meetings/Minutes/2019/2019-02-08-json-ld#section5-4\r\n\r\nI propose that the errata be marked as considered, and `defer-future-version` and `blocked` (by a new version of RDF)." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/698371392> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/362#issuecomment-698371392"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/362> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/698371392> .
<https://api.github.com/users/pchampin> <http://schema.org/accountId> "pchampin" .
<https://api.github.com/users/pchampin> <http://schema.org/image> "https://avatars1.githubusercontent.com/u/304612?v=4" .
<https://api.github.com/users/pchampin> <http://schema.org/url> "https://github.com/pchampin"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/pchampin> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/698371392> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/698371392> <http://schema.org/startDate> "2020-09-24T14:12:44Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/698371392> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/698371392> <http://schema.org/description> "@iherman @asbjornu \r\nIt seems to me that URL templates are both too much (supporting multiple placeholders) and not enough (supporting only URLs).\r\n\r\n@pietercolpaert @asbjornu \r\nI really want to keep the system as simple as possible, in particular because the inability to round-trip would be a deal-breaker (see @azaroth42's comment).\r\n\r\n@azaroth42 \r\nI don't think my initial proposal above \"transforms\" data much more than `\"@language\": \"fr\"` or `\"@type\": \"xsd:date\"` (used in a context), really. As for round-tripping, I do believe that this proposal supports it. I may have overlooked some edge-cases, but overall I think it is achievable. That is, *if we refrain from adding complex pre-processing on the value* besides injecting it in the template.\r\nMaybe it will require that templates are only applied to numbers, not strings. But numeric IDs are really pervasive, so that use-case alone would make templates useful, I believe.\r\n\r\n@filip26 \r\nYes of course, pre-processing is an option, but then we lose the nice round-tripping feature that JSON-LD offers. And again, I do believe that `@template` can be made to round-trip." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/698545213> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/362#issuecomment-698545213"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/362> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/698545213> .
<https://api.github.com/users/azaroth42> <http://schema.org/accountId> "azaroth42" .
<https://api.github.com/users/azaroth42> <http://schema.org/image> "https://avatars3.githubusercontent.com/u/871868?v=4" .
<https://api.github.com/users/azaroth42> <http://schema.org/url> "https://github.com/azaroth42"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/azaroth42> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/698545213> <http://schema.org/creator> <https://api.github.com/users/azaroth42> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/698545213> <http://schema.org/startDate> "2020-09-24T19:33:40Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/698545213> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/698545213> <http://schema.org/description> "Okay, if it only works for numeric data (by which I mean `r/-?[0-9.]+/`) then reversing the template seems easy enough for compaction to handle.  And if you don't compact with the same context that you used to expand, then you shouldn't expect to get the same results.\r\n\r\nI have use cases for this too, FWIW. We have information systems that naively use an incrementing integer as the core identity for records describing objects, people, places and events. If `@id` could use a `@template`, then we would drop that integer in and use the template to expand to the full URI.\r\n\r\nFor example: http://vocab.getty.edu/aat/300194222 could have:  `\"id\": 300194222` which would make people happy.\r\nOr (in my new institution): https://collection.britishart.yale.edu/id/page/object/1084 would have `\"id\": 1084`\r\n \r\nWith those caveats to ensure round tripping, I'm a definite +0" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/698576512> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/362#issuecomment-698576512"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/362> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/698576512> .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/698576512> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/698576512> <http://schema.org/startDate> "2020-09-24T20:39:08Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/698576512> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/698576512> <http://schema.org/description> "For values of `@id`, I agree that we should be able to interpret other primitive types, such as number, as suitable for IRI expansion.\r\n\r\nWe did use the URI templates mechanism for CSVW, and it can do everything we want, and probably needs some more consideration to see how it adapts to creating URIs from values. Something like `@template` in a term definition that specifies the URI template to use would be good.\r\n\r\nOne of the issues we've encountered recently, though, is that URI templates end up escaping non-ASCII data. I believe that you can uniformly decode the value of the template transformation without messing up any legitimate data, which we'd need to be sure to allow for.\r\n\r\nAs @asbjornu says, a URI template can interpret other variable values, which could potentially come from other properties of the node, but this adds substantial complexity, and I would suggest we constrain ourselves to \"the simplest thing which could possibly work\", and see where that gets us. In this case, limiting ourselves to only the value of the `@id` key (when it is a primitive type).\r\n\r\nRegarding non-IRI values, CSVW also considered using [`{{mustache}}`](https://mustache.github.io), but it is inadequately specified and would add even more complexity, so no good solution there, I'm afraid. I've often thought that a URI Template-like mechanism that could be extended to literal values would be useful, but alas ..." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/698582969> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/362#issuecomment-698582969"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/362> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/698582969> .
<https://api.github.com/users/ajs6f> <http://schema.org/accountId> "ajs6f" .
<https://api.github.com/users/ajs6f> <http://schema.org/image> "https://avatars1.githubusercontent.com/u/110994?v=4" .
<https://api.github.com/users/ajs6f> <http://schema.org/url> "https://github.com/ajs6f"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/ajs6f> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/698582969> <http://schema.org/creator> <https://api.github.com/users/ajs6f> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/698582969> <http://schema.org/startDate> "2020-09-24T20:53:49Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/698582969> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/698582969> <http://schema.org/description> "Would this not work for more general alphanumeric identifiers? There are plenty in wide use (e.g. UUIDs). The restriction to a single use of a single value is what seems to me to make it feasible, but perhaps I'm missing something. " .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/698601743> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/362#issuecomment-698601743"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/362> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/698601743> .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/698601743> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/698601743> <http://schema.org/startDate> "2020-09-24T21:36:50Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/698601743> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/698601743> <http://schema.org/description> "It should work for any URI, and with unescaping, IRI. It is just restricted to generate URIs, not general string literals." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/698800521> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/362#issuecomment-698800521"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/362> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/698800521> .
<https://api.github.com/users/pchampin> <http://schema.org/accountId> "pchampin" .
<https://api.github.com/users/pchampin> <http://schema.org/image> "https://avatars1.githubusercontent.com/u/304612?v=4" .
<https://api.github.com/users/pchampin> <http://schema.org/url> "https://github.com/pchampin"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/pchampin> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/698800521> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/698800521> <http://schema.org/startDate> "2020-09-25T08:33:39Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/698800521> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/698800521> <http://schema.org/description> "@ajs6f \r\n> Would this not work for more general alphanumeric identifiers?\r\n\r\nThe problem is: if you try to compact `http://ex.co/id/1234` through template `http://ex.com/id/{}`, should you produce the string `\"1234\"` or the number `1234`? If we restrict templates to numbers, there is no ambiguity.\r\n\r\nAlso, canonical numbers representations can (I think) be inserted into IRIs without any escaping/encoding, while other characters may need this.\r\n\r\n@gkellogg \r\n> It is just restricted to generate URIs, not general string literals.\r\n\r\nWell, the second use case is important for us too...\r\n\r\n> Regarding non-IRI values, CSVW also considered using {{mustache}}, but it is inadequately specified and would add even more complexity, so no good solution there, I'm afraid.\r\n\r\nThis is why I was *not* suggesting to design a complex formatting mechanism, just dead-simple substitution -- or, more precisely: concatenating something before and after the original value. This also makes \"unapplying\" the template easy.\r\n\r\nShould the template fail to \"unapply\" during compaction (either because the expanded value does not match the prefix or suffix of the template, or because the substring in between does not parse to a number), the term definition will not apply. This is the same thing that happens when a term definition specifies a `\"@language\"` ([example in the playground](https://tinyurl.com/y2pblzxr)).\r\n\r\n" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/702561544> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/363#issuecomment-702561544"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/363> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/702561544> .
<https://api.github.com/users/pchampin> <http://schema.org/accountId> "pchampin" .
<https://api.github.com/users/pchampin> <http://schema.org/image> "https://avatars1.githubusercontent.com/u/304612?v=4" .
<https://api.github.com/users/pchampin> <http://schema.org/url> "https://github.com/pchampin"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/pchampin> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/702561544> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/702561544> <http://schema.org/startDate> "2020-10-02T06:55:35Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/702561544> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/702561544> <http://schema.org/description> "The paragraph you quote means that properties (among other things) are \"resolved\" against `@vocab` instead of `@base`. You have a default `@base` in your context (the URL from which it was retrieved) but no `@vocab`, hence the error.\r\n[Add a `@vocab`] and the error disappears. And actually the `@vocab` *can be relative* (to the `@base`, either implicit or explicit), so you can [use `\"@vocab\"=\"\"`] to force `ppl` to resolve agains the base. Well, sort of!...\r\n\r\nSort of, because in JSON-LD, \"resolved using the vocabulary mapping\" (i.e. using `@vocab`) works *differently* from resolving using a base IRI: you simply concatenate the \"relative\" term to the `@vocab` IRI. See in [this example] how the `../` in `ppl` is kept in the expanded IRI. So that does not really solve your problem, I'm afraid.\r\n\r\nThen let me try to convince you that this is no really a problem :wink:\r\n\r\n> It likely would be a helpful option for those serving ontologies from test/local servers.\r\n\r\nIn Linked Data, IRIs are identifiers (1st [principle]) *before* being addresses (2nd [principle]). Being a *shared* vocabulary, an ontology (and all its terms) must have the same IRI everywhere they are used, even on a test server. So my advice is to decide on an absolute IRI where your ontolgy will be published, and use that absolute IRI in your context, even while testing your API on `localhost`. The fact that, during tests, these IRIs are not consistent with the location where the ontology is served (e.g. `localhost/onto`) , is secondary – and not really a problem.\r\n\r\nThink about it this way: the client consuming your JSON-LD will look for a property it knows. If it consumes the JSON directly (trusting the context), it will look for the `people` attribute. If it first expands it to an RDF graph, it will look for an arc with some absolute IRI that it *knows in advance* from the shared vocabulary. Otherwise, how could your client code know that `http://localhost:1234/test/onto/people`, `http://localhost:5678/onto/people` and ``http://example.org/api/onto/people` have the same semantics? This would require [tight coupling] between the client and the service, which something that Linked Data aims to avoid.\r\n\r\n[Add a `@vocab`]: https://json-ld.org/playground/#startTab=tab-expanded&json-ld=%7B%22%40context%22%3A%5B%7B%22%40vocab%22%3A%22http%3A%2F%2Fexample.org%2F%22%2C%22ppl%22%3A%22%2Fonto%2F%22%2C%22schema%22%3A%22http%3A%2F%2Fschema.org%2F%22%2C%22hydra%22%3A%22http%3A%2F%2Fwww.w3.org%2Fns%2Fhydra%2Fcore%23%22%2C%22people%22%3A%7B%22%40id%22%3A%22ppl%3Apeople%22%2C%22%40type%22%3A%22%40id%22%7D%7D%2C%22https%3A%2F%2Fwww.w3.org%2Fns%2Fhydra%2Fcontext.jsonld%22%5D%2C%22id%22%3A%22%2Fhome%22%2C%22title%22%3A%22Example%20People%20API%20Server%22%2C%22description%22%3A%22Using%20the%20people%20Hydra%20ontology%22%2C%22people%22%3A%7B%22%40id%22%3A%22%2Fpeople%22%7D%7D\r\n[use `\"@vocab\"=\"\"`]: https://json-ld.org/playground/#startTab=tab-expanded&json-ld=%7B%22%40context%22%3A%5B%7B%22%40vocab%22%3A%22%22%2C%22ppl%22%3A%22%2Fonto%2F%22%2C%22schema%22%3A%22http%3A%2F%2Fschema.org%2F%22%2C%22hydra%22%3A%22http%3A%2F%2Fwww.w3.org%2Fns%2Fhydra%2Fcore%23%22%2C%22people%22%3A%7B%22%40id%22%3A%22ppl%3Apeople%22%2C%22%40type%22%3A%22%40id%22%7D%7D%2C%22https%3A%2F%2Fwww.w3.org%2Fns%2Fhydra%2Fcontext.jsonld%22%5D%2C%22id%22%3A%22%2Fhome%22%2C%22title%22%3A%22Example%20People%20API%20Server%22%2C%22description%22%3A%22Using%20the%20people%20Hydra%20ontology%22%2C%22people%22%3A%7B%22%40id%22%3A%22%2Fpeople%22%7D%7D\r\n[this example]: https://json-ld.org/playground/#startTab=tab-expanded&json-ld=%7B%22%40context%22%3A%7B%22%40vocab%22%3A%22http%3A%2F%2Fexample.org%2Fapi%2F%22%2C%22ppl%22%3A%22..%2Fonto%2F%22%7D%2C%22ppl%3Apeople%22%3A%22test%22%7D\r\n\r\n[principle]: https://www.w3.org/DesignIssues/LinkedData.html\r\n\r\n[tight coupling]: https://en.wikipedia.org/wiki/Service_loose_coupling_principle" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/702884906> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/363#issuecomment-702884906"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/363> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/702884906> .
<https://api.github.com/users/alexkreidler> <http://schema.org/accountId> "alexkreidler" .
<https://api.github.com/users/alexkreidler> <http://schema.org/image> "https://avatars1.githubusercontent.com/u/11166947?v=4" .
<https://api.github.com/users/alexkreidler> <http://schema.org/url> "https://github.com/alexkreidler"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/alexkreidler> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/702884906> <http://schema.org/creator> <https://api.github.com/users/alexkreidler> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/702884906> <http://schema.org/startDate> "2020-10-02T18:17:52Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/702884906> <http://example.com/ns#authorAssociation> "NONE" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/702884906> <http://schema.org/description> "Thanks a lot for the great explanation and examples. I'll close the issue.\r\n\r\nThe following are some details about my specific situation/a response to the second piece.\r\n\r\nI totally recognize that for people building ontologies for others to consume that appropriate identifiers are key and should be the same across environments, even in testing.\r\n\r\nIn fact, for my example ontology, since it relies on schema.org, which recently dropped builtin support for content negotiation, I'm overriding DNS using `/etc/hosts` entry pointing schema.org to localhost, where I'm running a custom server serving the ontology. The server is a modified version of actix-web with content negotiation (https://github.com/actix/actix-web/pull/1719). This allows clients to still use and understand schema.org as if it were the same, but makes the client experience better. Hopefully at some point I can help schema.org figure out a way to bring back content negotiation to their actual site.\r\n\r\nHowever, my ontologies are primarily for testing software I'm working on for frontend developers working with linked data. Additionally, the software itself is pretty generic, and will try to dereference and fetch some vary basic things like rdfs:label, etc, so it doesn't depend on the details of the ontologies. Therefore it doesn't really make a difference whether it is using `http://localhost:1234/test/onto/people` or `http://localhost:5678/onto/people`. However it is unlikely I'd need two servers for the same ontology. It's more likely I'd end up with something like `http://localhost:1234/test/onto/people` and `http://localhost:5678/onto/events`. Who knows, I might end up serving them all from the same server.\r\n\r\nIt's also just partly convenience: being able to say serve on localhost:4000 instead of localhost:9090, for example, with out having to replace the ID in multiple places. For example, I've been using [json-server](https://github.com/typicode/json-server) to serve the data: [here](https://github.com/alexkreidler/hydraserver/blob/master/db.json), and it's more convenient to use relative IRIs because like I mentioned I can change which port I'm serving on.\r\n\r\nI guess for my situation there are a few options:\r\n\r\n1. use relative IRIs using the solution you mentioned above, but accept their limitations\r\n2. be comfortable using a bunch of absolute IRIs that look like `http://localhost:<someport>/something`\r\n3. use fake IRIs like `http://ontology.nosuchdomain` or even semi real ones (e.g. a domain I could publish to) that I haven't published yet. Since I've rarely seen production IRIs with ports, I would add a proxy like Nginx to listen on port 80 and use the Host header to route to various localhost:<someport> locations. This is similar to what I'm doing with schema.org right now, but would add a bit more complexity if I need more ontology servers to manage the nginx config.\r\n\r\nMaybe there'd even be another option in another version of JSON-LD, something like `@replace`, a map of absolute IRIs to other absolute IRIs, which expands the document and does the replacements. This would allow people to use something like `http://unpublished.my.ontology.domain/ns/` for IRIs and replace it with `localhost:9000` in different environments. This would have to only happen at the very end of other processing, and thus there could only be one `@replace` in however many contexts are linked. It could add a lot of potential complexity for compacting replaced documents, etc.\r\n\r\nMaybe that's not even something for JSON-LD to deal with, rather to do using RDF libraries. I think type of feature is slightly related to some discussions I've seen in the schema.org repositories about providing backup URLs for remote context documents https://github.com/schemaorg/schemaorg/issues/2578#issuecomment-698757364. I think I've seen some related things here: https://github.com/w3c/json-ld-syntax/issues/108#issuecomment-447629312, https://github.com/w3c/json-ld-syntax/issues/9.\r\n\r\nI think there is a need to deal with the reliability of remote contexts, but I'm not sure if anything above would work." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/702905199> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/363#issuecomment-702905199"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/363> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/702905199> .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/702905199> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/702905199> <http://schema.org/startDate> "2020-10-02T19:00:36Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/702905199> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/702905199> <http://schema.org/description> "> In fact, for my example ontology, since it relies on schema.org, which recently dropped builtin support for content negotiation, I'm overriding DNS using `/etc/hosts` entry pointing schema.org to localhost, where I'm running a custom server serving the ontology. The server is a modified version of actix-web with content negotiation ([actix/actix-web#1719](https://github.com/actix/actix-web/pull/1719)). This allows clients to still use and understand schema.org as if it were the same, but makes the client experience better. Hopefully at some point I can help schema.org figure out a way to bring back content negotiation to their actual site.\r\n\r\n\r\nschema.org replaced content-negotiation with using the rel=alternate link header to point to the context. This is provided for in the spec, and conforming implementations will retrieve the document from that location. You might see if the processor your using conforms to JSON-LD 1.1.\r\n\r\n> However, my ontologies are primarily for testing software I'm working on for frontend developers working with linked data. Additionally, the software itself is pretty generic, and will try to dereference and fetch some vary basic things like rdfs:label, etc, so it doesn't depend on the details of the ontologies. Therefore it doesn't really make a difference whether it is using `http://localhost:1234/test/onto/people` or `http://localhost:5678/onto/people`. However it is unlikely I'd need two servers for the same ontology. It's more likely I'd end up with something like `http://localhost:1234/test/onto/people` and `http://localhost:5678/onto/events`. Who knows, I might end up serving them all from the same server.\r\n\r\nFor testing purposes, some tests will set `\"@vocab\": \"http://example.org/\"`, which at least allows for proper expansion of relative vocabulary terms. There's also a provision to make the vocabulary document relative (e.g., `\"@vocab\": \"#\"`). Generally, prefer to use a well-defined ontology, but it's not uncommon to use document-relative URIs for properties.\r\n" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/702951037> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/363#issuecomment-702951037"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/363> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/702951037> .
<https://api.github.com/users/alexkreidler> <http://schema.org/accountId> "alexkreidler" .
<https://api.github.com/users/alexkreidler> <http://schema.org/image> "https://avatars1.githubusercontent.com/u/11166947?v=4" .
<https://api.github.com/users/alexkreidler> <http://schema.org/url> "https://github.com/alexkreidler"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/alexkreidler> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/702951037> <http://schema.org/creator> <https://api.github.com/users/alexkreidler> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/702951037> <http://schema.org/startDate> "2020-10-02T20:49:19Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/702951037> <http://example.com/ns#authorAssociation> "NONE" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/702951037> <http://schema.org/description> "@gkellogg Yeah the processors are compliant and they do get sent to the appropriate context location. \r\n\r\nHowever the context only defines terms in the vocabulary, it doesn't include any actual triples about classes or properties (e.g. labels and descriptions, which I'm interested in).\r\n\r\nThere was a feature a added to schema.org a while back that supported content negotiation to actually send different representations in various RDF serializations of each class and property. E.g. for https://schema.org/Person, it would return all the triples of the form `schema:Person ?p ?o`, and `?pred ?p ?o where ?pred schema:domainIncludes schema:Person`, etc and so on, basically providing all the information listed on the webpage in machine-readable format. \r\n\r\nI've built a simple version of that [here](https://github.com/alexkreidler/ontorender), which doesn't support the `subClassOf` relation yet, or `schema:rangeIncludes` as I was getting some weird cyclic bug when I tried the latter one." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/702957573> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/363#issuecomment-702957573"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/363> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/702957573> .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/702957573> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/702957573> <http://schema.org/startDate> "2020-10-02T21:05:34Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/702957573> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/702957573> <http://schema.org/description> "Okay, not familiar with that aspect of schema.org, but you might try checking on their forum.\r\n\r\nI do know that the publish the vocabulary (RDFS equivalent) in a number of different formats, but their naming has changed in version 1.0. You can try https://schema.org/version/latest/schemaorg-all-http.jsonld for example." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/719115829> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/361#issuecomment-719115829"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/361> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/719115829> .
<https://api.github.com/users/TallTed> <http://schema.org/accountId> "TallTed" .
<https://api.github.com/users/TallTed> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/2559602?v=4" .
<https://api.github.com/users/TallTed> <http://schema.org/url> "https://github.com/TallTed"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/TallTed> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/719115829> <http://schema.org/creator> <https://api.github.com/users/TallTed> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/719115829> <http://schema.org/startDate> "2020-10-30T01:30:34Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/719115829> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/719115829> <http://schema.org/description> "I have no input for this issue at the moment, but noticed a typo in the issue title which deserves correction -- `proteced` should be `protected`." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/725585107> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/364#issuecomment-725585107"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/364> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/725585107> .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/725585107> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/725585107> <http://schema.org/startDate> "2020-11-11T18:24:28Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/725585107> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/725585107> <http://schema.org/description> "@shujikamitsuna Thanks for noticing these; some of them indirectly relate to the other documents as well.\r\n\r\nIn starting to work on them, I see that ReSpec has (of course) changed, and is highlighting other issues with our (ab-)use of ReSpec, which I'll also need to address.\r\n\r\nIt's great that you're working on a Japanese translation of this, and please reach out for any other issues or clarifications." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/726398779> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/365#issuecomment-726398779"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/365> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/726398779> .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/726398779> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/726398779> <http://schema.org/startDate> "2020-11-12T23:13:45Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/726398779> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/726398779> <http://schema.org/description> "The update to ReSpec caused a bunch of changes, and we lost the (probably already broken) ability to filter out unused definitions, but we should be less subject to changes to ReSpec internals, going forward.\r\n\r\nSee also w3c/respec#2767 for future reference." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/726864772> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/365#issuecomment-726864772"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/365> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/726864772> .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/726864772> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/726864772> <http://schema.org/startDate> "2020-11-13T16:36:05Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/726864772> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/726864772> <http://schema.org/description> "> 1. Why was this removed from the status section?\r\n> \r\n> > Alternatively, you can send comments to our mailing list. Please send them to [public-json-ld-wg@w3.org](mailto:public-json-ld-wg@w3.org) ( archives ). Please see the Working Group's implementation report .\r\n> \r\n> I do not think we should do this, at least not in this change. Such a change would require a WG resolution.\r\n\r\nReSpec needed me to replace the wg* configuration variables, that would have included the mailing list with a “group” variable that takes the information from the WG info (someplace). Perhaps something is missing there. I can look into the ReSpec source to try to find this.\r\n\r\n> 1. Once this is merged, I think it would be good to record the reference of the change in the original errata comment, so that it stays on record in the generated errata.\r\n\r\nNot sure specifically what should be referenced, or where it should go.\r\n\r\n" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/726880746> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/365#issuecomment-726880746"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/365> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/726880746> .
<https://api.github.com/users/iherman> <http://schema.org/accountId> "iherman" .
<https://api.github.com/users/iherman> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/520723?v=4" .
<https://api.github.com/users/iherman> <http://schema.org/url> "https://github.com/iherman"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/iherman> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/726880746> <http://schema.org/creator> <https://api.github.com/users/iherman> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/726880746> <http://schema.org/startDate> "2020-11-13T17:06:43Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/726880746> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/726880746> <http://schema.org/description> "> Not sure specifically what should be referenced, or where it should go.\r\n\r\nIssue #364 is now an official erratum, listed in https://w3c.github.io/json-ld-syntax/errata/. If, once this is all merged, there is a comment added to that erratum with a 'Summary:', that becomes part of the errata page. That is what I was referring to." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/727002220> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/365#issuecomment-727002220"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/365> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/727002220> .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/727002220> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/727002220> <http://schema.org/startDate> "2020-11-13T19:58:42Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/727002220> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/727002220> <http://schema.org/description> "I added back the wgPublicList, and ReSpec didn't complain. The sentence came back; It seems to me that it should have picked it up automatically, but I can't see the code responsible for doing this." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/727057415> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/365#issuecomment-727057415"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/365> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/727057415> .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/727057415> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/727057415> <http://schema.org/startDate> "2020-11-13T22:01:02Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/727057415> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/727057415> <http://schema.org/description> "@iherman also note that the `processVersion` was ignored, it was 2018. It's now using the 2020 process; can we use this without WG action? It's set automatically,, so I can't really override it." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/727249550> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/365#issuecomment-727249550"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/365> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/727249550> .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/727249550> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/727249550> <http://schema.org/startDate> "2020-11-14T18:48:24Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/727249550> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/727249550> <http://schema.org/description> "Sorry @TallTed I was too quick, I'll merge your changes into master." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/727249613> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/364#issuecomment-727249613"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/364> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/727249613> .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/727249613> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/727249613> <http://schema.org/startDate> "2020-11-14T18:48:52Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/727249613> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/727249613> <http://schema.org/description> "Summary: Miscellaneous spelling and grammar fixes suggested by @shujikamitsuna." .

