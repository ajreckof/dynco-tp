<https://api.github.com/repos/w3c/json-ld-syntax> <http://example.com/ns#issue> <https://api.github.com/repos/w3c/json-ld-syntax/issues/215> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/215> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/215"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/215> <http://schema.org/identifier> "215"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/215> <http://schema.org/name> "Update restrictReferences logic for removing unused definitions." .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/215> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/215> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/215> <http://schema.org/startDate> "2019-08-27T22:56:36Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/215> <http://schema.org/endDate> "2019-08-27T22:56:44Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/215> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/pulls/215> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/215"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/215> <http://example.com/ns#pullRequest> <https://api.github.com/repos/w3c/json-ld-syntax/pulls/215> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/215> <http://schema.org/description> "Remove unused definitions not defined in this spec.\n\n\n<!--\n    This comment and the below content is programatically generated.\n    You may add a comma-separated list of anchors you'd like a\n    direct link to below (e.g. #idl-serializers, #idl-sequence):\n\n    Don't remove this comment or modify anything below this line.\n    If you don't want a preview generated for this pull request,\n    just replace the whole of this comment's content by \"no preview\"\n    and remove what's below.\n-->\n***\n<a href=\"https://pr-preview.s3.amazonaws.com/w3c/json-ld-syntax/pull/215.html\" title=\"Last updated on Aug 27, 2019, 10:56 PM UTC (512ca06)\">Preview</a> | <a href=\"https://pr-preview.s3.amazonaws.com/w3c/json-ld-syntax/215/413ebc8...512ca06.html\" title=\"Last updated on Aug 27, 2019, 10:56 PM UTC (512ca06)\">Diff</a>" .
<https://api.github.com/repos/w3c/json-ld-syntax> <http://example.com/ns#issue> <https://api.github.com/repos/w3c/json-ld-syntax/issues/214> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/214> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/214"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/214> <http://schema.org/identifier> "214"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/214> <http://schema.org/name> "Encapsulate HTML processing" .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/214> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/214> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/214> <http://schema.org/startDate> "2019-08-19T23:31:37Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/214> <http://schema.org/endDate> "2019-08-26T18:01:39Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/214> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/pulls/214> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/214"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/214> <http://example.com/ns#pullRequest> <https://api.github.com/repos/w3c/json-ld-syntax/pulls/214> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/214> <http://schema.org/description> "Update Embedding JSON-LD in HTML Documents to reference the \"HTML script extraction\" feature that processors may implement. Also, removes processor levels describing this as a processor supporting \"HTML script extraction\".\n\nFor #213.\n\n\n<!--\n    This comment and the below content is programatically generated.\n    You may add a comma-separated list of anchors you'd like a\n    direct link to below (e.g. #idl-serializers, #idl-sequence):\n\n    Don't remove this comment or modify anything below this line.\n    If you don't want a preview generated for this pull request,\n    just replace the whole of this comment's content by \"no preview\"\n    and remove what's below.\n-->\n***\n<a href=\"https://pr-preview.s3.amazonaws.com/w3c/json-ld-syntax/pull/214.html\" title=\"Last updated on Aug 19, 2019, 11:31 PM UTC (d1250fa)\">Preview</a> | <a href=\"https://pr-preview.s3.amazonaws.com/w3c/json-ld-syntax/214/f1f4efe...d1250fa.html\" title=\"Last updated on Aug 19, 2019, 11:31 PM UTC (d1250fa)\">Diff</a>" .
<https://api.github.com/repos/w3c/json-ld-syntax> <http://example.com/ns#issue> <https://api.github.com/repos/w3c/json-ld-syntax/issues/213> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/213> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/213"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/213> <http://schema.org/identifier> "213"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/213> <http://schema.org/name> "Reconsider Processing Levels" .
<https://api.github.com/users/BigBlueHat> <http://schema.org/accountId> "BigBlueHat" .
<https://api.github.com/users/BigBlueHat> <http://schema.org/image> "https://avatars1.githubusercontent.com/u/43209?v=4" .
<https://api.github.com/users/BigBlueHat> <http://schema.org/url> "https://github.com/BigBlueHat"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/BigBlueHat> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/213> <http://schema.org/creator> <https://api.github.com/users/BigBlueHat> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/needs%20discussion> <http://schema.org/name> "needs discussion" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/needs%20discussion> <http://schema.org/color> "c5def5" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/needs%20discussion> <http://schema.org/description> "" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/213> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/needs%20discussion> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/213> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/213> <http://schema.org/startDate> "2019-08-15T15:55:16Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/213> <http://schema.org/endDate> "2019-08-26T18:26:28Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/213> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/213> <http://schema.org/description> "[Extracting JSON-LD from HTML (in the API spec)](https://w3c.github.io/json-ld-api/#html-content-algorithms) is the one distinct feature between the two defined [Processor Levels](https://w3c.github.io/json-ld-syntax/#processor-levels): \"full\" vs. \"pure JSON.\"\r\n\r\nGiven the solution Link header solution proposed for #204 and the way it solves for #172, we should reconsider whether extracting JSON-LD from HTML is the role of a JSON-LD processor or rather the role of something run prior to JSON-LD processing (i.e. a [data block extractor](https://github.com/WileyLabs/data-block-extract)).\r\n\r\nThe steps for [embedding HTML and referencing specific JSON-LD data blocks](https://w3c.github.io/json-ld-syntax/#embedding-json-ld-in-html-documents) could remain normative--in as much as they are [expressions of HTML data blocks](https://html.spec.whatwg.org/multipage/scripting.html#data-block) and `id`-based fragment identifiers." .
<https://api.github.com/repos/w3c/json-ld-syntax> <http://example.com/ns#issue> <https://api.github.com/repos/w3c/json-ld-syntax/issues/212> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/212> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/212"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/212> <http://schema.org/identifier> "212"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/212> <http://schema.org/name> "Remove \"Using an HTML document as a Context section." .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/212> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/212> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/212> <http://schema.org/startDate> "2019-08-13T20:11:25Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/212> <http://schema.org/endDate> "2019-08-16T17:31:27Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/212> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/pulls/212> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/212"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/212> <http://example.com/ns#pullRequest> <https://api.github.com/repos/w3c/json-ld-syntax/pulls/212> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/212> <http://schema.org/description> "This reverts w3c/json-ld-api#66, which we can do because of #204.\n\n\n<!--\n    This comment and the below content is programatically generated.\n    You may add a comma-separated list of anchors you'd like a\n    direct link to below (e.g. #idl-serializers, #idl-sequence):\n\n    Don't remove this comment or modify anything below this line.\n    If you don't want a preview generated for this pull request,\n    just replace the whole of this comment's content by \"no preview\"\n    and remove what's below.\n-->\n***\n<a href=\"https://pr-preview.s3.amazonaws.com/w3c/json-ld-syntax/pull/212.html\" title=\"Last updated on Aug 13, 2019, 8:11 PM UTC (fc9215c)\">Preview</a> | <a href=\"https://pr-preview.s3.amazonaws.com/w3c/json-ld-syntax/212/d3c8b8f...fc9215c.html\" title=\"Last updated on Aug 13, 2019, 8:11 PM UTC (fc9215c)\">Diff</a>" .
<https://api.github.com/repos/w3c/json-ld-syntax> <http://example.com/ns#issue> <https://api.github.com/repos/w3c/json-ld-syntax/issues/211> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/211> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/211"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/211> <http://schema.org/identifier> "211"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/211> <http://schema.org/name> "Add containing section on Modifying Behavior with Link Relationships" .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/211> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/211> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/211> <http://schema.org/startDate> "2019-08-13T00:36:38Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/211> <http://schema.org/endDate> "2019-08-16T17:28:46Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/211> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/pulls/211> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/211"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/211> <http://example.com/ns#pullRequest> <https://api.github.com/repos/w3c/json-ld-syntax/pulls/211> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/211> <http://schema.org/description> "…and add an Alternate Document Location section.\n\nFor #204.\n\n\n<!--\n    This comment and the below content is programatically generated.\n    You may add a comma-separated list of anchors you'd like a\n    direct link to below (e.g. #idl-serializers, #idl-sequence):\n\n    Don't remove this comment or modify anything below this line.\n    If you don't want a preview generated for this pull request,\n    just replace the whole of this comment's content by \"no preview\"\n    and remove what's below.\n-->\n***\n<a href=\"https://pr-preview.s3.amazonaws.com/w3c/json-ld-syntax/pull/211.html\" title=\"Last updated on Aug 14, 2019, 4:33 PM UTC (dc5855e)\">Preview</a> | <a href=\"https://pr-preview.s3.amazonaws.com/w3c/json-ld-syntax/211/6dc0e7e...dc5855e.html\" title=\"Last updated on Aug 14, 2019, 4:33 PM UTC (dc5855e)\">Diff</a>" .
<https://api.github.com/repos/w3c/json-ld-syntax> <http://example.com/ns#issue> <https://api.github.com/repos/w3c/json-ld-syntax/issues/210> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/210> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/210"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/210> <http://schema.org/identifier> "210"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/210> <http://schema.org/name> "Update definition for _vocabulary mapping_" .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/210> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:editorial> <http://schema.org/name> "spec:editorial" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:editorial> <http://schema.org/color> "58820a" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:editorial> <http://schema.org/description> "" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/210> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:editorial> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/210> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/210> <http://schema.org/startDate> "2019-08-06T21:30:17Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/210> <http://schema.org/endDate> "2019-08-07T17:39:48Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/210> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/pulls/210> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/210"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/210> <http://example.com/ns#pullRequest> <https://api.github.com/repos/w3c/json-ld-syntax/pulls/210> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/210> <http://schema.org/description> "to specifically allow compact IRI and term.\n\nFixes w3c/json-ld-syntax#184.\n\n\n<!--\n    This comment and the below content is programatically generated.\n    You may add a comma-separated list of anchors you'd like a\n    direct link to below (e.g. #idl-serializers, #idl-sequence):\n\n    Don't remove this comment or modify anything below this line.\n    If you don't want a preview generated for this pull request,\n    just replace the whole of this comment's content by \"no preview\"\n    and remove what's below.\n-->\n***\n<a href=\"https://pr-preview.s3.amazonaws.com/w3c/json-ld-syntax/pull/210.html\" title=\"Last updated on Aug 7, 2019, 5:22 PM UTC (35e044c)\">Preview</a> | <a href=\"https://pr-preview.s3.amazonaws.com/w3c/json-ld-syntax/210/48beb5c...35e044c.html\" title=\"Last updated on Aug 7, 2019, 5:22 PM UTC (35e044c)\">Diff</a>" .
<https://api.github.com/repos/w3c/json-ld-syntax> <http://example.com/ns#issue> <https://api.github.com/repos/w3c/json-ld-syntax/issues/209> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/209> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/209"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/209> <http://schema.org/identifier> "209"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/209> <http://schema.org/name> "Added the example for bushes" .
<https://api.github.com/users/iherman> <http://schema.org/accountId> "iherman" .
<https://api.github.com/users/iherman> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/520723?v=4" .
<https://api.github.com/users/iherman> <http://schema.org/url> "https://github.com/iherman"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/iherman> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/209> <http://schema.org/creator> <https://api.github.com/users/iherman> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/209> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/209> <http://schema.org/startDate> "2019-08-01T10:18:26Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/209> <http://schema.org/endDate> "2019-08-01T20:38:28Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/209> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/pulls/209> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/209"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/209> <http://example.com/ns#pullRequest> <https://api.github.com/repos/w3c/json-ld-syntax/pulls/209> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/209> <http://schema.org/description> "(I hope this PR for a PR works:-)\n\nI have made a change on the section of `@included` to emphasize the simple bush feature, but also maintaining the original example. I am sure the text needs harmonization as for the style.\n\nI was also not sure about the paragraph on the JSON API; I have never used that thing, so I cannot comment on it. I am actually not sure it is worth keeping it here; it is not necessarily relevant imho. (or should be put as a note if we really want to keep to it).\n\n\n<!--\n    This comment and the below content is programatically generated.\n    You may add a comma-separated list of anchors you'd like a\n    direct link to below (e.g. #idl-serializers, #idl-sequence):\n\n    Don't remove this comment or modify anything below this line.\n    If you don't want a preview generated for this pull request,\n    just replace the whole of this comment's content by \"no preview\"\n    and remove what's below.\n-->\n***\n<a href=\"https://pr-preview.s3.amazonaws.com/w3c/json-ld-syntax/pull/209.html\" title=\"Last updated on Aug 1, 2019, 8:34 PM UTC (eea1017)\">Preview</a> | <a href=\"https://pr-preview.s3.amazonaws.com/w3c/json-ld-syntax/209/4068a74...eea1017.html\" title=\"Last updated on Aug 1, 2019, 8:34 PM UTC (eea1017)\">Diff</a>" .
<https://api.github.com/repos/w3c/json-ld-syntax> <http://example.com/ns#issue> <https://api.github.com/repos/w3c/json-ld-syntax/issues/208> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/208> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/208"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/208> <http://schema.org/identifier> "208"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/208> <http://schema.org/name> "Describe included blocks." .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/208> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/208> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/208> <http://schema.org/startDate> "2019-07-30T23:19:10Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/208> <http://schema.org/endDate> "2019-08-02T18:41:34Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/208> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/pulls/208> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/208"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/208> <http://example.com/ns#pullRequest> <https://api.github.com/repos/w3c/json-ld-syntax/pulls/208> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/208> <http://schema.org/description> "For #19.\n\n\n<!--\n    This comment and the below content is programatically generated.\n    You may add a comma-separated list of anchors you'd like a\n    direct link to below (e.g. #idl-serializers, #idl-sequence):\n\n    Don't remove this comment or modify anything below this line.\n    If you don't want a preview generated for this pull request,\n    just replace the whole of this comment's content by \"no preview\"\n    and remove what's below.\n-->\n***\n<a href=\"https://pr-preview.s3.amazonaws.com/w3c/json-ld-syntax/pull/208.html\" title=\"Last updated on Aug 2, 2019, 5:28 PM UTC (809409a)\">Preview</a> | <a href=\"https://pr-preview.s3.amazonaws.com/w3c/json-ld-syntax/208/ab5050d...809409a.html\" title=\"Last updated on Aug 2, 2019, 5:28 PM UTC (809409a)\">Diff</a>" .
<https://api.github.com/repos/w3c/json-ld-syntax> <http://example.com/ns#issue> <https://api.github.com/repos/w3c/json-ld-syntax/issues/207> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/207> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/207"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/207> <http://schema.org/identifier> "207"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/207> <http://schema.org/name> "Describe included maps with examples." .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/207> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/207> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/207> <http://schema.org/startDate> "2019-07-25T23:18:31Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/207> <http://schema.org/endDate> "2019-07-31T19:07:03Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/207> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/pulls/207> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/207"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/207> <http://example.com/ns#pullRequest> <https://api.github.com/repos/w3c/json-ld-syntax/pulls/207> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/207> <http://schema.org/description> "For #19.\n\n\n<!--\n    This comment and the below content is programatically generated.\n    You may add a comma-separated list of anchors you'd like a\n    direct link to below (e.g. #idl-serializers, #idl-sequence):\n\n    Don't remove this comment or modify anything below this line.\n    If you don't want a preview generated for this pull request,\n    just replace the whole of this comment's content by \"no preview\"\n    and remove what's below.\n-->\n***\n<a href=\"https://pr-preview.s3.amazonaws.com/w3c/json-ld-syntax/pull/207.html\" title=\"Last updated on Jul 25, 2019, 11:36 PM UTC (69f234d)\">Preview</a> | <a href=\"https://pr-preview.s3.amazonaws.com/w3c/json-ld-syntax/207/7fc9975...69f234d.html\" title=\"Last updated on Jul 25, 2019, 11:36 PM UTC (69f234d)\">Diff</a>" .
<https://api.github.com/repos/w3c/json-ld-syntax> <http://example.com/ns#issue> <https://api.github.com/repos/w3c/json-ld-syntax/issues/206> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/206> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/206"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/206> <http://schema.org/identifier> "206"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/206> <http://schema.org/name> "Terms update" .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/206> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:editorial> <http://schema.org/name> "spec:editorial" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:editorial> <http://schema.org/color> "58820a" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:editorial> <http://schema.org/description> "" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/206> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:editorial> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/206> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/206> <http://schema.org/startDate> "2019-07-18T21:41:38Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/206> <http://schema.org/endDate> "2019-07-22T22:22:02Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/206> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/pulls/206> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/206"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/206> <http://example.com/ns#pullRequest> <https://api.github.com/repos/w3c/json-ld-syntax/pulls/206> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/206> <http://schema.org/description> "* Reorganize and re-introduce terms.\n* Add explicit `data-cite` on all defined terms, to localize them to a particular spec.\n* Simplifies some imported terms.\n\n@pchampin see if this is what you had in mind. We could consolidate all imported terms.\n\n@marcoscaceres this adds a `data-cite` to each shared term we define, which seems like what we need to do.\n\nFixes #185.\n\n\n<!--\n    This comment and the below content is programatically generated.\n    You may add a comma-separated list of anchors you'd like a\n    direct link to below (e.g. #idl-serializers, #idl-sequence):\n\n    Don't remove this comment or modify anything below this line.\n    If you don't want a preview generated for this pull request,\n    just replace the whole of this comment's content by \"no preview\"\n    and remove what's below.\n-->\n***\n<a href=\"https://pr-preview.s3.amazonaws.com/w3c/json-ld-syntax/pull/206.html\" title=\"Last updated on Jul 20, 2019, 9:54 PM UTC (1121d34)\">Preview</a> | <a href=\"https://pr-preview.s3.amazonaws.com/w3c/json-ld-syntax/206/cadf696...1121d34.html\" title=\"Last updated on Jul 20, 2019, 9:54 PM UTC (1121d34)\">Diff</a>" .
<https://api.github.com/repos/w3c/json-ld-syntax> <http://example.com/ns#issue> <https://api.github.com/repos/w3c/json-ld-syntax/issues/205> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/205> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/205"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/205> <http://schema.org/identifier> "205"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/205> <http://schema.org/name> "Example of using xref" .
<https://api.github.com/users/marcoscaceres> <http://schema.org/accountId> "marcoscaceres" .
<https://api.github.com/users/marcoscaceres> <http://schema.org/image> "https://avatars1.githubusercontent.com/u/870154?v=4" .
<https://api.github.com/users/marcoscaceres> <http://schema.org/url> "https://github.com/marcoscaceres"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/marcoscaceres> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/205> <http://schema.org/creator> <https://api.github.com/users/marcoscaceres> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/205> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/205> <http://schema.org/startDate> "2019-07-18T00:19:06Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/205> <http://schema.org/endDate> "2019-07-21T18:39:47Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/205> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/pulls/205> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/205"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/205> <http://example.com/ns#pullRequest> <https://api.github.com/repos/w3c/json-ld-syntax/pulls/205> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/205> <http://schema.org/description> "(don't merge this :) ... just examples) " .
<https://api.github.com/repos/w3c/json-ld-syntax> <http://example.com/ns#issue> <https://api.github.com/repos/w3c/json-ld-syntax/issues/204> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/204> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/204"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/204> <http://schema.org/identifier> "204"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/204> <http://schema.org/name> "Link header for HTML and JSON-LD" .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/204> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/204> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/204> <http://schema.org/startDate> "2019-07-13T01:11:56Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/204> <http://schema.org/endDate> "2019-08-16T17:26:42Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/204> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/204> <http://schema.org/description> "If we remove support for context extraction from HTML, we might want to consider broadening the Link Header to be able to specify the context location, which might help @danbri. We also might want to revisit whether it can bu used for JSON-LD files as wee, as it’s currently restricted to just plain JSON. " .
<https://api.github.com/repos/w3c/json-ld-syntax> <http://example.com/ns#issue> <https://api.github.com/repos/w3c/json-ld-syntax/issues/203> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/203> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/203"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/203> <http://schema.org/identifier> "203"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/203> <http://schema.org/name> "Context definitions" .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/203> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:editorial> <http://schema.org/name> "spec:editorial" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:editorial> <http://schema.org/color> "58820a" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:editorial> <http://schema.org/description> "" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/203> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:editorial> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/203> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/203> <http://schema.org/startDate> "2019-07-12T22:53:54Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/203> <http://schema.org/endDate> "2019-07-12T23:41:51Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/203> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/pulls/203> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/203"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/203> <http://example.com/ns#pullRequest> <https://api.github.com/repos/w3c/json-ld-syntax/pulls/203> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/203> <http://schema.org/description> "Use type-scoped and property-scoped terms, and take advantage of \"context definition\" as the shape of a map used as a context.\n\n\n<!--\n    This comment and the below content is programatically generated.\n    You may add a comma-separated list of anchors you'd like a\n    direct link to below (e.g. #idl-serializers, #idl-sequence):\n\n    Don't remove this comment or modify anything below this line.\n    If you don't want a preview generated for this pull request,\n    just replace the whole of this comment's content by \"no preview\"\n    and remove what's below.\n-->\n***\n<a href=\"https://pr-preview.s3.amazonaws.com/w3c/json-ld-syntax/pull/203.html\" title=\"Last updated on Jul 12, 2019, 11:00 PM UTC (2cf0188)\">Preview</a> | <a href=\"https://pr-preview.s3.amazonaws.com/w3c/json-ld-syntax/203/7023fd1...2cf0188.html\" title=\"Last updated on Jul 12, 2019, 11:00 PM UTC (2cf0188)\">Diff</a>" .
<https://api.github.com/repos/w3c/json-ld-syntax> <http://example.com/ns#issue> <https://api.github.com/repos/w3c/json-ld-syntax/issues/202> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/202> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/202"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/202> <http://schema.org/identifier> "202"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/202> <http://schema.org/name> "Add Dave Longley as an editor." .
<https://api.github.com/users/dlongley> <http://schema.org/accountId> "dlongley" .
<https://api.github.com/users/dlongley> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/168137?v=4" .
<https://api.github.com/users/dlongley> <http://schema.org/url> "https://github.com/dlongley"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/dlongley> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/202> <http://schema.org/creator> <https://api.github.com/users/dlongley> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/202> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/202> <http://schema.org/startDate> "2019-07-12T16:07:31Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/202> <http://schema.org/endDate> "2019-07-12T16:33:05Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/202> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/pulls/202> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/202"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/202> <http://example.com/ns#pullRequest> <https://api.github.com/repos/w3c/json-ld-syntax/pulls/202> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/202> <http://schema.org/description> "\n\n\n<!--\n    This comment and the below content is programatically generated.\n    You may add a comma-separated list of anchors you'd like a\n    direct link to below (e.g. #idl-serializers, #idl-sequence):\n\n    Don't remove this comment or modify anything below this line.\n    If you don't want a preview generated for this pull request,\n    just replace the whole of this comment's content by \"no preview\"\n    and remove what's below.\n-->\n***\n<a href=\"https://pr-preview.s3.amazonaws.com/w3c/json-ld-syntax/pull/202.html\" title=\"Last updated on Jul 12, 2019, 4:07 PM UTC (e8840fa)\">Preview</a> | <a href=\"https://pr-preview.s3.amazonaws.com/w3c/json-ld-syntax/202/f5741e4...e8840fa.html\" title=\"Last updated on Jul 12, 2019, 4:07 PM UTC (e8840fa)\">Diff</a>" .
<https://api.github.com/repos/w3c/json-ld-syntax> <http://example.com/ns#issue> <https://api.github.com/repos/w3c/json-ld-syntax/issues/201> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/201> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/201"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/201> <http://schema.org/identifier> "201"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/201> <http://schema.org/name> "Add sourced context section." .
<https://api.github.com/users/dlongley> <http://schema.org/accountId> "dlongley" .
<https://api.github.com/users/dlongley> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/168137?v=4" .
<https://api.github.com/users/dlongley> <http://schema.org/url> "https://github.com/dlongley"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/dlongley> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/201> <http://schema.org/creator> <https://api.github.com/users/dlongley> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/201> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/201> <http://schema.org/startDate> "2019-07-12T15:32:18Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/201> <http://schema.org/endDate> "2019-07-12T15:58:30Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/201> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/pulls/201> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/201"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/201> <http://example.com/ns#pullRequest> <https://api.github.com/repos/w3c/json-ld-syntax/pulls/201> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/201> <http://schema.org/description> "\n\n\n<!--\n    This comment and the below content is programatically generated.\n    You may add a comma-separated list of anchors you'd like a\n    direct link to below (e.g. #idl-serializers, #idl-sequence):\n\n    Don't remove this comment or modify anything below this line.\n    If you don't want a preview generated for this pull request,\n    just replace the whole of this comment's content by \"no preview\"\n    and remove what's below.\n-->\n***\n<a href=\"https://pr-preview.s3.amazonaws.com/w3c/json-ld-syntax/pull/201.html\" title=\"Last updated on Jul 12, 2019, 3:56 PM UTC (804c257)\">Preview</a> | <a href=\"https://pr-preview.s3.amazonaws.com/w3c/json-ld-syntax/201/39ca24f...804c257.html\" title=\"Last updated on Jul 12, 2019, 3:56 PM UTC (804c257)\">Diff</a>" .
<https://api.github.com/repos/w3c/json-ld-syntax> <http://example.com/ns#issue> <https://api.github.com/repos/w3c/json-ld-syntax/issues/200> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/200> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/200"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/200> <http://schema.org/identifier> "200"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/200> <http://schema.org/name> "Add section for `@propagate` and stub for `@import`." .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/200> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/200> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/200> <http://schema.org/startDate> "2019-07-11T23:50:31Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/200> <http://schema.org/endDate> "2019-07-12T21:08:37Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/200> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/pulls/200> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/200"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/200> <http://example.com/ns#pullRequest> <https://api.github.com/repos/w3c/json-ld-syntax/pulls/200> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/200> <http://schema.org/description> "Fixes #174.\n\n(Still requires description of `@source`. Examples will fail until changes made to Ruby implementation, pending agreement on this and w3c/api#112.\n\n\n<!--\n    This comment and the below content is programatically generated.\n    You may add a comma-separated list of anchors you'd like a\n    direct link to below (e.g. #idl-serializers, #idl-sequence):\n\n    Don't remove this comment or modify anything below this line.\n    If you don't want a preview generated for this pull request,\n    just replace the whole of this comment's content by \"no preview\"\n    and remove what's below.\n-->\n***\n<a href=\"https://pr-preview.s3.amazonaws.com/w3c/json-ld-syntax/pull/200.html\" title=\"Last updated on Jul 12, 2019, 3:58 PM UTC (0384304)\">Preview</a> | <a href=\"https://pr-preview.s3.amazonaws.com/w3c/json-ld-syntax/200/f5741e4...0384304.html\" title=\"Last updated on Jul 12, 2019, 3:58 PM UTC (0384304)\">Diff</a>" .
<https://api.github.com/repos/w3c/json-ld-syntax> <http://example.com/ns#issue> <https://api.github.com/repos/w3c/json-ld-syntax/issues/199> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/199> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/199"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/199> <http://schema.org/identifier> "199"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/199> <http://schema.org/name> "Consider Infra spec for describing primitive types" .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/199> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:editorial> <http://schema.org/name> "spec:editorial" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:editorial> <http://schema.org/color> "58820a" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:editorial> <http://schema.org/description> "" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/199> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:editorial> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/199> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/users/dlongley> <http://schema.org/accountId> "dlongley" .
<https://api.github.com/users/dlongley> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/168137?v=4" .
<https://api.github.com/users/dlongley> <http://schema.org/url> "https://github.com/dlongley"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/dlongley> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/199> <http://example.com/ns#assignee> <https://api.github.com/users/dlongley> .
<https://api.github.com/users/pchampin> <http://schema.org/accountId> "pchampin" .
<https://api.github.com/users/pchampin> <http://schema.org/image> "https://avatars1.githubusercontent.com/u/304612?v=4" .
<https://api.github.com/users/pchampin> <http://schema.org/url> "https://github.com/pchampin"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/pchampin> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/199> <http://example.com/ns#assignee> <https://api.github.com/users/pchampin> .
<https://api.github.com/users/iherman> <http://schema.org/accountId> "iherman" .
<https://api.github.com/users/iherman> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/520723?v=4" .
<https://api.github.com/users/iherman> <http://schema.org/url> "https://github.com/iherman"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/iherman> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/199> <http://example.com/ns#assignee> <https://api.github.com/users/iherman> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/199> <http://schema.org/startDate> "2019-07-05T16:55:08Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/199> <http://schema.org/endDate> "2019-07-09T21:36:05Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/199> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/199> <http://schema.org/description> "@marcoscaceres pointed out the [Infra Spec](https://infra.spec.whatwg.org) (another What WG product) that exists as a way of describing some fundamental types, such as those we use. Currently, we use a combination of ECMASCRIPT and WebIDL to describe things like strings, numbers, booleans, and objects/dictionaries, which isn't entirely satisfying. Infra might be a better way to go, but would likely require some large changes to the text.\r\n\r\nIn 1.1 we (I) made a change from describing changes to objects to dictionaries, because JSON objects are serialization artifacts of an internal structure and it doesn't make sense to describe updating them. Also, we were trying to abstract away from JSON for describing API operations.\r\n\r\nWe're currently updating our terminology (see PR #198) and now might be a time to consider such a change.\r\n\r\nOther than changing definition references, Infra uses the concept of a [Set](https://infra.spec.whatwg.org/#sets) and [Map](https://infra.spec.whatwg.org/#maps) (with [entries](https://infra.spec.whatwg.org/#map-entry))  in deference to our [array](https://www.w3.org/TR/json-ld11/#dfn-array) and [dictionary](https://heycam.github.io/webidl/#dfn-dictionary) (with [members](https://heycam.github.io/webidl/#dfn-dictionary-member))." .
<https://api.github.com/repos/w3c/json-ld-syntax> <http://example.com/ns#issue> <https://api.github.com/repos/w3c/json-ld-syntax/issues/198> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/198> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/198"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/198> <http://schema.org/identifier> "198"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/198> <http://schema.org/name> "Respec updates" .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/198> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:editorial> <http://schema.org/name> "spec:editorial" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:editorial> <http://schema.org/color> "58820a" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:editorial> <http://schema.org/description> "" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/198> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:editorial> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/198> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/198> <http://schema.org/startDate> "2019-07-04T19:29:26Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/198> <http://schema.org/endDate> "2019-07-09T20:47:59Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/198> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/pulls/198> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/198"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/198> <http://example.com/ns#pullRequest> <https://api.github.com/repos/w3c/json-ld-syntax/pulls/198> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/198> <http://schema.org/description> "This mirrors changes to the API document, but also attempts to clean up our shared terms to reference outside specs as much as possible.\n\nNote that there is still some overlap between WebIDL definitions and ECMASCRIPT, particularly for _dictionary_ and _dictionary member_.\n\n\n<!--\n    This comment and the below content is programatically generated.\n    You may add a comma-separated list of anchors you'd like a\n    direct link to below (e.g. #idl-serializers, #idl-sequence):\n\n    Don't remove this comment or modify anything below this line.\n    If you don't want a preview generated for this pull request,\n    just replace the whole of this comment's content by \"no preview\"\n    and remove what's below.\n-->\n***\n<a href=\"https://pr-preview.s3.amazonaws.com/w3c/json-ld-syntax/pull/198.html\" title=\"Last updated on Jul 9, 2019, 8:37 PM UTC (0f6e413)\">Preview</a> | <a href=\"https://pr-preview.s3.amazonaws.com/w3c/json-ld-syntax/198/3ed3de7...0f6e413.html\" title=\"Last updated on Jul 9, 2019, 8:37 PM UTC (0f6e413)\">Diff</a>" .
<https://api.github.com/repos/w3c/json-ld-syntax> <http://example.com/ns#issue> <https://api.github.com/repos/w3c/json-ld-syntax/issues/197> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/197> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/197"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/197> <http://schema.org/identifier> "197"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/197> <http://schema.org/name> "Remove index.html.orig." .
<https://api.github.com/users/davidlehn> <http://schema.org/accountId> "davidlehn" .
<https://api.github.com/users/davidlehn> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/109587?v=4" .
<https://api.github.com/users/davidlehn> <http://schema.org/url> "https://github.com/davidlehn"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/davidlehn> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/197> <http://schema.org/creator> <https://api.github.com/users/davidlehn> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/197> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/197> <http://schema.org/startDate> "2019-06-21T16:50:34Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/197> <http://schema.org/endDate> "2019-06-21T19:31:16Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/197> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/pulls/197> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/197"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/197> <http://example.com/ns#pullRequest> <https://api.github.com/repos/w3c/json-ld-syntax/pulls/197> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/197> <http://schema.org/description> "@BigBlueHat Looks like the `index.html.orig` slipped in a commit by mistake:\r\nhttps://github.com/w3c/json-ld-syntax/commit/5acab54b1868a68397dcfaf043fad4ea9bdc49c6" .
<https://api.github.com/repos/w3c/json-ld-syntax> <http://example.com/ns#issue> <https://api.github.com/repos/w3c/json-ld-syntax/issues/196> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/196> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/196"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/196> <http://schema.org/identifier> "196"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/196> <http://schema.org/name> "Add a Loading Documents section." .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/196> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:editorial> <http://schema.org/name> "spec:editorial" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:editorial> <http://schema.org/color> "58820a" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:editorial> <http://schema.org/description> "" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/196> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:editorial> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/196> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/196> <http://schema.org/startDate> "2019-06-19T19:16:02Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/196> <http://schema.org/endDate> "2019-06-21T17:12:04Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/196> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/pulls/196> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/196"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/196> <http://example.com/ns#pullRequest> <https://api.github.com/repos/w3c/json-ld-syntax/pulls/196> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/196> <http://schema.org/description> "Fixes #149.\n\n\n<!--\n    This comment and the below content is programatically generated.\n    You may add a comma-separated list of anchors you'd like a\n    direct link to below (e.g. #idl-serializers, #idl-sequence):\n\n    Don't remove this comment or modify anything below this line.\n    If you don't want a preview generated for this pull request,\n    just replace the whole of this comment's content by \"no preview\"\n    and remove what's below.\n-->\n***\n<a href=\"https://pr-preview.s3.amazonaws.com/w3c/json-ld-syntax/pull/196.html\" title=\"Last updated on Jun 19, 2019, 11:09 PM UTC (373d32c)\">Preview</a> | <a href=\"https://pr-preview.s3.amazonaws.com/w3c/json-ld-syntax/196/16c60eb...373d32c.html\" title=\"Last updated on Jun 19, 2019, 11:09 PM UTC (373d32c)\">Diff</a>" .
<https://api.github.com/repos/w3c/json-ld-syntax> <http://example.com/ns#issue> <https://api.github.com/repos/w3c/json-ld-syntax/issues/195> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/195> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/195"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/195> <http://schema.org/identifier> "195"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/195> <http://schema.org/name> "Describe that type-scoped contexts are only in affect on the node objects in which they're used" .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/195> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/195> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/195> <http://schema.org/startDate> "2019-06-19T18:44:53Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/195> <http://schema.org/endDate> "2019-06-20T20:34:23Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/195> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/pulls/195> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/195"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/195> <http://example.com/ns#pullRequest> <https://api.github.com/repos/w3c/json-ld-syntax/pulls/195> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/195> <http://schema.org/description> "Add changes for type-scoped contexts.\n\nFixes #174.\n\n\n<!--\n    This comment and the below content is programatically generated.\n    You may add a comma-separated list of anchors you'd like a\n    direct link to below (e.g. #idl-serializers, #idl-sequence):\n\n    Don't remove this comment or modify anything below this line.\n    If you don't want a preview generated for this pull request,\n    just replace the whole of this comment's content by \"no preview\"\n    and remove what's below.\n-->\n***\n<a href=\"https://pr-preview.s3.amazonaws.com/w3c/json-ld-syntax/pull/195.html\" title=\"Last updated on Jun 19, 2019, 11:14 PM UTC (08b3a1c)\">Preview</a> | <a href=\"https://pr-preview.s3.amazonaws.com/w3c/json-ld-syntax/195/16c60eb...08b3a1c.html\" title=\"Last updated on Jun 19, 2019, 11:14 PM UTC (08b3a1c)\">Diff</a>" .
<https://api.github.com/repos/w3c/json-ld-syntax> <http://example.com/ns#issue> <https://api.github.com/repos/w3c/json-ld-syntax/issues/194> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/194> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/194"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/194> <http://schema.org/identifier> "194"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/194> <http://schema.org/name> "Add version list of lists" .
<https://api.github.com/users/aljones15> <http://schema.org/accountId> "aljones15" .
<https://api.github.com/users/aljones15> <http://schema.org/image> "https://avatars2.githubusercontent.com/u/278280?v=4" .
<https://api.github.com/users/aljones15> <http://schema.org/url> "https://github.com/aljones15"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/aljones15> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/194> <http://schema.org/creator> <https://api.github.com/users/aljones15> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/194> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/194> <http://schema.org/startDate> "2019-06-14T23:37:07Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/194> <http://schema.org/endDate> "2019-06-17T20:11:29Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/194> <http://example.com/ns#authorAssociation> "CONTRIBUTOR" .
<https://api.github.com/repos/w3c/json-ld-syntax/pulls/194> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/194"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/194> <http://example.com/ns#pullRequest> <https://api.github.com/repos/w3c/json-ld-syntax/pulls/194> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/194> <http://schema.org/description> "Example 71 for recursive lists is a feature on version 1.1.\nso added a version tag to the example.\n\n```\n\"@context\": {\n      \"@version\": 1.1,\n      \"@vocab\": \"https://purl.org/geojson/vocab#\"\n}\n```\n\n\n<!--\n    This comment and the below content is programatically generated.\n    You may add a comma-separated list of anchors you'd like a\n    direct link to below (e.g. #idl-serializers, #idl-sequence):\n\n    Don't remove this comment or modify anything below this line.\n    If you don't want a preview generated for this pull request,\n    just replace the whole of this comment's content by \"no preview\"\n    and remove what's below.\n-->\n***\n<a href=\"https://pr-preview.s3.amazonaws.com/aljones15/json-ld-syntax/pull/194.html\" title=\"Last updated on Jun 14, 2019, 11:50 PM UTC (8ea845d)\">Preview</a> | <a href=\"https://pr-preview.s3.amazonaws.com/w3c/json-ld-syntax/194/16c60eb...aljones15:8ea845d.html\" title=\"Last updated on Jun 14, 2019, 11:50 PM UTC (8ea845d)\">Diff</a>" .
<https://api.github.com/repos/w3c/json-ld-syntax> <http://example.com/ns#issue> <https://api.github.com/repos/w3c/json-ld-syntax/issues/193> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/193> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/193"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/193> <http://schema.org/identifier> "193"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/193> <http://schema.org/name> "clarifications as suggested in #170 and w3c/json-ld-wg#85" .
<https://api.github.com/users/pchampin> <http://schema.org/accountId> "pchampin" .
<https://api.github.com/users/pchampin> <http://schema.org/image> "https://avatars1.githubusercontent.com/u/304612?v=4" .
<https://api.github.com/users/pchampin> <http://schema.org/url> "https://github.com/pchampin"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/pchampin> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/193> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/193> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/193> <http://schema.org/startDate> "2019-06-13T15:40:52Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/193> <http://schema.org/endDate> "2019-06-13T18:44:58Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/193> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/pulls/193> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/193"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/193> <http://example.com/ns#pullRequest> <https://api.github.com/repos/w3c/json-ld-syntax/pulls/193> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/193> <http://schema.org/description> "as per my action\n\n\n<!--\n    This comment and the below content is programatically generated.\n    You may add a comma-separated list of anchors you'd like a\n    direct link to below (e.g. #idl-serializers, #idl-sequence):\n\n    Don't remove this comment or modify anything below this line.\n    If you don't want a preview generated for this pull request,\n    just replace the whole of this comment's content by \"no preview\"\n    and remove what's below.\n-->\n***\n<a href=\"https://pr-preview.s3.amazonaws.com/w3c/json-ld-syntax/pull/193.html\" title=\"Last updated on Jun 13, 2019, 4:22 PM UTC (6ea443e)\">Preview</a> | <a href=\"https://pr-preview.s3.amazonaws.com/w3c/json-ld-syntax/193/c13919d...6ea443e.html\" title=\"Last updated on Jun 13, 2019, 4:22 PM UTC (6ea443e)\">Diff</a>" .
<https://api.github.com/repos/w3c/json-ld-syntax> <http://example.com/ns#issue> <https://api.github.com/repos/w3c/json-ld-syntax/issues/192> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/192> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/192"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/192> <http://schema.org/identifier> "192"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/192> <http://schema.org/name> "Add feature frozen text to README" .
<https://api.github.com/users/BigBlueHat> <http://schema.org/accountId> "BigBlueHat" .
<https://api.github.com/users/BigBlueHat> <http://schema.org/image> "https://avatars1.githubusercontent.com/u/43209?v=4" .
<https://api.github.com/users/BigBlueHat> <http://schema.org/url> "https://github.com/BigBlueHat"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/BigBlueHat> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/192> <http://schema.org/creator> <https://api.github.com/users/BigBlueHat> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/192> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/192> <http://schema.org/startDate> "2019-06-12T13:43:26Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/192> <http://schema.org/endDate> "2019-06-12T13:51:04Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/192> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/pulls/192> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/192"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/192> <http://example.com/ns#pullRequest> <https://api.github.com/repos/w3c/json-ld-syntax/pulls/192> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/192> <http://schema.org/description> "Solves for https://github.com/w3c/json-ld-wg/issues/84" .
<https://api.github.com/repos/w3c/json-ld-syntax> <http://example.com/ns#issue> <https://api.github.com/repos/w3c/json-ld-syntax/issues/191> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/191> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/191"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/191> <http://schema.org/identifier> "191"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/191> <http://schema.org/name> "Compact IRI expansion support for non-trivial prefix term definitions" .
<https://api.github.com/users/iridiankin> <http://schema.org/accountId> "iridiankin" .
<https://api.github.com/users/iridiankin> <http://schema.org/image> "https://avatars3.githubusercontent.com/u/16244827?v=4" .
<https://api.github.com/users/iridiankin> <http://schema.org/url> "https://github.com/iridiankin"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/iridiankin> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/191> <http://schema.org/creator> <https://api.github.com/users/iridiankin> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/defer-future-version> <http://schema.org/name> "defer-future-version" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/defer-future-version> <http://schema.org/color> "000000" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/defer-future-version> <http://schema.org/description> "Defer this issue until a future version of JSON-LD" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/191> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/defer-future-version> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:enhancement> <http://schema.org/name> "spec:enhancement" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:enhancement> <http://schema.org/color> "c11537" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:enhancement> <http://schema.org/description> "" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/191> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:enhancement> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/191> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#OpenIssue> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/191> <http://schema.org/startDate> "2019-06-01T09:51:41Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/191> <http://example.com/ns#authorAssociation> "NONE" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/191> <http://schema.org/description> "This enhancement proposal presents two use cases which suggest extending term definition semantics to also prefix-expanded terms.\r\n\r\nAs it is now the term definition semantics only apply during expansion to node dictionary keys which are exact matches to an extended term definition. Only the \"@id\" member is semantically meaningful when a term is used as a prefix.\r\n\r\nA limited form of this proposal specific to \"@container\": \"@list\" [can be found on the json-ld-api github](https://github.com/w3c/json-ld-api/issues/94)\r\n\r\nThis enhancement is not targeted at 1.1 and as such does not make final syntactic proposals but focuses on describing the use cases for consideration. If the proposal is considered essentially sane then further experimentation is expected to yield more concrete suggestions.\r\n\r\n\r\n# 1. Documentation JSON interchange format\r\n\r\nA complex Javascript-based ecosystem exists with many semantically different places where documentation needs to be embedded and cross-referenced. HTML is too cumbersome and  format such as Markdown is a convenient solution only in some situations, but requires source-code introspection and is not machine-readable. \r\nA unified JSON interchange format is preferred which satisfies following criteria:\r\n\r\n1. Easy to write manually, with minimal boilerplate. The more boilerplate, the higher the threshold to writing docs.\r\n2. Programmatically manipulable. Complex array and other wrapper nestings make both programmatic introspection and emission cumbersome and errorprone.\r\n3. Has a generic underlying object model. Documentation evolves; it is useful to be able to identify sections globally and not just by their relative brittle position in a JSON document.\r\n\r\nAny two of the criteria are easy to achieve with little effort. Criteria 3 suggests JSON-LD but there are shortcomings. \r\n\r\nLet's consider a hypothetical function 'doTheThing' documentation block (with explanatory, self-referential bogus text content):\r\n```\r\nconst doc = {\r\n  \"name\": \"doTheThing\",\r\n  \"s:#name-0\": [\r\n    \"This is a generic section typically containing text.\",\r\n    \"The suffix fragment 'name-0' not just positions this section lexically after 'name'\",\r\n    \"but also gives this section a stable identity ('name-0') within the document.\"\r\n    \"\"\r\n    \"Sections are separated by empty strings.\",\r\n    [\"Or alternatively as lists of lists.\"],\r\n    \"\",\r\n    \"This section contains\", { \"d:text\": \"an external link\" \"d:href\": \"foo.org\" }, \".\",\r\n  ],\r\n  \"s:bulleted#name-1\": [\r\n    \"The first line of a named bullet list\",\r\n    [\"Second line\", { \"d:text#ref-1\": \"with embedded named link\", \"d:href\": \"target.org\" }],\r\n  ],\r\n  \"s:#name-3\": [\r\n    \"More text with an embedded unnamed numbered list\", { \"s:numbered\": [\"one\", \"two\"] }\r\n  ],\r\n  \"arguments\": {\r\n    \"d:after\": \"name\", \r\n    \"some_arg\": {}, \"other_arg\": {}\r\n  },\r\n  \"s:#arguments-0\": [\r\n    \"More text which positioned after arguments section, with arguments\",\r\n    \"section itself explicitly positioned after 'name' section.\"\r\n  ]\r\n}\r\n```\r\n\r\nCriteria 1 is satisfied by relying on two principles: writer only needs to understand section (`s:*`) primitives, and how the fragment is used for relative positioning and section identification.\r\n\r\nCriteria 2 is satisfied by on one hand `doc.name` and `doc.arguments.some_arg` being intuitive to access and how numbered and bulleted list contents are flat, easily programmatically accessible and emittable arrays.\r\n\r\nCriteria 3 is achievable by JSON-LD in the general case only if complex suffixes, specifically \"@container\": \"@list\" is supported:\r\n\r\n```\r\n{\r\n  \"@context\": {\r\n    \"d\": \"http://example.org/doc/primitive/\",\r\n    \"s\": { \"@id\": \"http://example.org/doc/section/\", \"@container\": \"@list\" }\r\n  }\r\n}\r\n```\r\n\r\nAs of now the default container type is @set, which loses both ordering and duplicates, both of which are critical. Necessitating the various suffixes to be explicitly declared in the @context loses generality.\r\n\r\nA playground example [demonstrating the set/list issue](http://tinyurl.com/y3aq8kht). Both \"p\" and \"p:s\" should yield list triples, but only \"p\" does.\r\n\r\nThere are variations on how to ideally meet the desired criteria. This variant was chosen to demonstrate how a minimal, universal @context combined allows the prefix:suffix to pull a lot of weight, to a point where addition of new doc primitives can be done without touching already deployed @context code in the wild. \r\n\r\n# 2. RDF serialization of 'freeform' named, ordered sequences\r\n\r\nConsider an object model with named, unordered, many-to-'any' mappings called 'Properties' and named, ordered many-to-many mappings called 'Relations', where the namespaces of Properties and Relations are disjoint. The names of these mappings are mutable, ad hoc, even application private in nature, so they can't be expected to have ontology definitions. Nevertheless the object model has a need for universal serialization which allows reasoning: a JSON serialization format with RDF correspondence makes sense.\r\n\r\nA reasonable JSON serialization of such an object might be:\r\n```\r\n{\r\n  \"stringValue\": \"http://this.uri.is.not.an/object.reference\",\r\n  \"toThing\": { \"@id\": \"http://some.thing/#this.is.an.object.reference\" },\r\n  \"Relation:ROOMS\": [\"http://some.thing/room#3\", \"http://some.thing/room#4\"],\r\n  \"Relation:SENSORS\": [\"http://some.thing/sensor#1\", \"http://some.thing/sensor#2\"]\r\n}\r\n```\r\n\r\nSimilar to case 1, a generic context\r\n```\r\n{\r\n  \"@context\": {\r\n    \"@vocab\": \"http://example.org/Property/\",\r\n    \"Relation\": { \r\n      \"@id\": \"http://example.org/Relation/\",\r\n      \"@type\": \"@id\",\r\n      \"@container\": \"@list\",\r\n      \"@prefix\": true\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nwould be 'future proof' and allow emitting reasonable and relatively simple RDF triple graphs. Here the need is to have prefix support for \"@type\": \"@id\" as well in addition to \"@container\": \"@list\", as per the proposal.\r\n" .
<https://api.github.com/repos/w3c/json-ld-syntax> <http://example.com/ns#issue> <https://api.github.com/repos/w3c/json-ld-syntax/issues/190> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/190> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/190"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/190> <http://schema.org/identifier> "190"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/190> <http://schema.org/name> "Protected terms can be redefined, if identical" .
<https://api.github.com/users/pchampin> <http://schema.org/accountId> "pchampin" .
<https://api.github.com/users/pchampin> <http://schema.org/image> "https://avatars1.githubusercontent.com/u/304612?v=4" .
<https://api.github.com/users/pchampin> <http://schema.org/url> "https://github.com/pchampin"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/pchampin> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/190> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/190> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/190> <http://schema.org/startDate> "2019-05-30T16:20:50Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/190> <http://schema.org/endDate> "2019-06-13T16:42:38Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/190> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/pulls/190> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/190"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/190> <http://example.com/ns#pullRequest> <https://api.github.com/repos/w3c/json-ld-syntax/pulls/190> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/190> <http://schema.org/description> "\n\n\n<!--\n    This comment and the below content is programatically generated.\n    You may add a comma-separated list of anchors you'd like a\n    direct link to below (e.g. #idl-serializers, #idl-sequence):\n\n    Don't remove this comment or modify anything below this line.\n    If you don't want a preview generated for this pull request,\n    just replace the whole of this comment's content by \"no preview\"\n    and remove what's below.\n-->\n***\n<a href=\"https://pr-preview.s3.amazonaws.com/w3c/json-ld-syntax/pull/190.html\" title=\"Last updated on Jun 10, 2019, 10:28 PM UTC (a63b99c)\">Preview</a> | <a href=\"https://pr-preview.s3.amazonaws.com/w3c/json-ld-syntax/190/22176e9...a63b99c.html\" title=\"Last updated on Jun 10, 2019, 10:28 PM UTC (a63b99c)\">Diff</a>" .
<https://api.github.com/repos/w3c/json-ld-syntax> <http://example.com/ns#issue> <https://api.github.com/repos/w3c/json-ld-syntax/issues/189> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/189> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/189"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/189> <http://schema.org/identifier> "189"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/189> <http://schema.org/name> "Update example to indicate inputs and results" .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/189> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:editorial> <http://schema.org/name> "spec:editorial" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:editorial> <http://schema.org/color> "58820a" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:editorial> <http://schema.org/description> "" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/189> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:editorial> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/189> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/189> <http://schema.org/startDate> "2019-05-28T22:36:26Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/189> <http://schema.org/endDate> "2019-06-10T16:54:38Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/189> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/pulls/189> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/189"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/189> <http://example.com/ns#pullRequest> <https://api.github.com/repos/w3c/json-ld-syntax/pulls/189> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/189> <http://schema.org/description> "and change to show the result of compaction where appropriate.\n\nFixes #179.\n\ncc/ @kasei\n\n\n<!--\n    This comment and the below content is programatically generated.\n    You may add a comma-separated list of anchors you'd like a\n    direct link to below (e.g. #idl-serializers, #idl-sequence):\n\n    Don't remove this comment or modify anything below this line.\n    If you don't want a preview generated for this pull request,\n    just replace the whole of this comment's content by \"no preview\"\n    and remove what's below.\n-->\n***\n<a href=\"https://pr-preview.s3.amazonaws.com/w3c/json-ld-syntax/pull/189.html\" title=\"Last updated on May 29, 2019, 7:23 PM UTC (62ddac6)\">Preview</a> | <a href=\"https://pr-preview.s3.amazonaws.com/w3c/json-ld-syntax/189/c13919d...62ddac6.html\" title=\"Last updated on May 29, 2019, 7:23 PM UTC (62ddac6)\">Diff</a>" .
<https://api.github.com/repos/w3c/json-ld-syntax> <http://example.com/ns#issue> <https://api.github.com/repos/w3c/json-ld-syntax/issues/188> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/188> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/188"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/188> <http://schema.org/identifier> "188"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/188> <http://schema.org/name> "Update example label styling (for contexts, etc.) and invert tabs for example 26/27" .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/188> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/188> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/188> <http://schema.org/startDate> "2019-05-27T18:42:39Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/188> <http://schema.org/endDate> "2019-05-29T16:49:24Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/188> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/pulls/188> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/188"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/188> <http://example.com/ns#pullRequest> <https://api.github.com/repos/w3c/json-ld-syntax/pulls/188> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/188> <http://schema.org/description> "Fixes #178.\n\nIf this is acceptable, will apply stying changes to API and Framing docs.\n\n\n<!--\n    This comment and the below content is programatically generated.\n    You may add a comma-separated list of anchors you'd like a\n    direct link to below (e.g. #idl-serializers, #idl-sequence):\n\n    Don't remove this comment or modify anything below this line.\n    If you don't want a preview generated for this pull request,\n    just replace the whole of this comment's content by \"no preview\"\n    and remove what's below.\n-->\n***\n<a href=\"https://pr-preview.s3.amazonaws.com/w3c/json-ld-syntax/pull/188.html\" title=\"Last updated on May 27, 2019, 6:51 PM UTC (22d0b4f)\">Preview</a> | <a href=\"https://pr-preview.s3.amazonaws.com/w3c/json-ld-syntax/188/a3a0224...22d0b4f.html\" title=\"Last updated on May 27, 2019, 6:51 PM UTC (22d0b4f)\">Diff</a>" .
<https://api.github.com/repos/w3c/json-ld-syntax> <http://example.com/ns#issue> <https://api.github.com/repos/w3c/json-ld-syntax/issues/187> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/187> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/187"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/187> <http://schema.org/identifier> "187"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/187> <http://schema.org/name> "Be more clear about literals as value objects" .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/187> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/187> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/187> <http://schema.org/startDate> "2019-05-27T18:13:44Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/187> <http://schema.org/endDate> "2019-05-29T16:48:43Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/187> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/pulls/187> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/187"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/187> <http://example.com/ns#pullRequest> <https://api.github.com/repos/w3c/json-ld-syntax/pulls/187> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/187> <http://schema.org/description> "It wasn't a typo, but could be more complete.\r\n\r\n\"An object expressed as a value such as a string, number or in expanded form **as a value object**.\"\r\n\r\ncc/@kasei\r\n\r\nFixes #176." .
<https://api.github.com/repos/w3c/json-ld-syntax> <http://example.com/ns#issue> <https://api.github.com/repos/w3c/json-ld-syntax/issues/186> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/186> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/186"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/186> <http://schema.org/identifier> "186"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/186> <http://schema.org/name> "Specs have references to themselves." .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/186> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:editorial> <http://schema.org/name> "spec:editorial" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:editorial> <http://schema.org/color> "58820a" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:editorial> <http://schema.org/description> "" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/186> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:editorial> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/186> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#OpenIssue> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/186> <http://schema.org/startDate> "2019-05-24T15:13:37Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/186> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/186> <http://schema.org/description> "For example, there’s a reference to [JSON-LD11], which shouldn’t be there. This is due to some change in ReSpec." .
<https://api.github.com/repos/w3c/json-ld-syntax> <http://example.com/ns#issue> <https://api.github.com/repos/w3c/json-ld-syntax/issues/185> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/185> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/185"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/185> <http://schema.org/identifier> "185"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/185> <http://schema.org/name> "Misleading introductory text in \"Terminology\" subsection" .
<https://api.github.com/users/pchampin> <http://schema.org/accountId> "pchampin" .
<https://api.github.com/users/pchampin> <http://schema.org/image> "https://avatars1.githubusercontent.com/u/304612?v=4" .
<https://api.github.com/users/pchampin> <http://schema.org/url> "https://github.com/pchampin"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/pchampin> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/185> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:editorial> <http://schema.org/name> "spec:editorial" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:editorial> <http://schema.org/color> "58820a" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:editorial> <http://schema.org/description> "" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/185> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:editorial> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/185> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/185> <http://example.com/ns#assignee> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/185> <http://schema.org/startDate> "2019-05-24T14:31:41Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/185> <http://schema.org/endDate> "2019-07-22T22:22:02Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/185> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/185> <http://schema.org/description> "The [\"Terminology\" subsection](https://w3c.github.io/json-ld-syntax/#terminology) starts with a sentence saying:\r\n> This document uses the following terms as defined in JSON [RFC8259]. Refer to the JSON Grammar section in [RFC8259] for formal definitions.\r\n\r\nWhile this was true in the 1.0 spec, this section has been augmented with many terms that are *not* defined in JSON, but are specific to JSON-LD.\r\n\r\nI would recommend rewriting `common/terms.html` to split it into two separate subsubsections, one with \"borrowed\" terms from RFC8259, and one with original terms.\r\n\r\nNB: this also applies to other specs (API, Framing)." .
<https://api.github.com/repos/w3c/json-ld-syntax> <http://example.com/ns#issue> <https://api.github.com/repos/w3c/json-ld-syntax/issues/184> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/184> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/184"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/184> <http://schema.org/identifier> "184"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/184> <http://schema.org/name> "Inconsistencies in how @vocab is specified" .
<https://api.github.com/users/pchampin> <http://schema.org/accountId> "pchampin" .
<https://api.github.com/users/pchampin> <http://schema.org/image> "https://avatars1.githubusercontent.com/u/304612?v=4" .
<https://api.github.com/users/pchampin> <http://schema.org/url> "https://github.com/pchampin"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/pchampin> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/184> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:editorial> <http://schema.org/name> "spec:editorial" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:editorial> <http://schema.org/color> "58820a" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:editorial> <http://schema.org/description> "" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/184> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:editorial> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/184> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/184> <http://schema.org/startDate> "2019-05-21T19:20:50Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/184> <http://schema.org/endDate> "2019-08-07T11:12:57Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/184> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/184> <http://schema.org/description> "Section 9.15 (normative) specifies that `@vocab`'s value\r\n>  MUST be a absolute IRI, a relative IRI, a compact IRI, a blank node identifier, an empty string (\"\"), a term, or null. \r\n\r\n* The empty string is a special case of a relative IRI → suggest to remove.\r\n\r\n* Furthermore, I don't understand what it would mean to have compact IRIs and terms as `@vocab`. Anyway, they are undistinguishable from IRIs (absolute and relative, respectively) → suggest to remove (but I may be missing something).\r\n\r\nSection 1.4 (non-normative) defines \"vocabulary mapping\" as\r\n> using the @vocab key whose value MUST be an IRI or null.\r\n\r\n* I don't know if \"IRI\" is supposed to encompass terms and compact IRIs -- but assuming that I was right above, this does not matter anymore.\r\n\r\n* However; this definition does not mention blank node identifiers, which are normatively allowed by section 9.15. It may be a mistake, or a deliberate decision since this is non-normative text and blank node IDs as vocab are [discouraged in the API document](https://w3c.github.io/json-ld-api/#h-issue-0). However, I think it is a bad idea to have two parts of the document contradicting each other → suggest to add \"or blank node identifier\".\r\n\r\nFinally, the \"Changes\" section of the API document says\r\n> The empty string (\"\") has been added as a possible value for @vocab in a context. \r\n\r\n* In the meantime, we have extended this to allowing any relative IRI → suggest to change\r\n\r\nI consider those changes to be editorial, so they may not need a resolution, but I would rather have a second opinion before submitting the changes." .
<https://api.github.com/repos/w3c/json-ld-syntax> <http://example.com/ns#issue> <https://api.github.com/repos/w3c/json-ld-syntax/issues/183> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/183> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/183"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/183> <http://schema.org/identifier> "183"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/183> <http://schema.org/name> "Use of `\"@vocab\": \"_:\"` in ActivityStreams 2.0 (at least)" .
<https://api.github.com/users/BigBlueHat> <http://schema.org/accountId> "BigBlueHat" .
<https://api.github.com/users/BigBlueHat> <http://schema.org/image> "https://avatars1.githubusercontent.com/u/43209?v=4" .
<https://api.github.com/users/BigBlueHat> <http://schema.org/url> "https://github.com/BigBlueHat"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/BigBlueHat> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/183> <http://schema.org/creator> <https://api.github.com/users/BigBlueHat> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/needs%20discussion> <http://schema.org/name> "needs discussion" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/needs%20discussion> <http://schema.org/color> "c5def5" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/needs%20discussion> <http://schema.org/description> "" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/183> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/needs%20discussion> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/183> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/183> <http://schema.org/startDate> "2019-05-20T18:33:28Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/183> <http://schema.org/endDate> "2019-06-28T17:32:42Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/183> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/183> <http://schema.org/description> "I've been digging through as many `@context` files as I can find \"in the wild\"--especially ones in wide/popular/deployed usage--in hopes of better informing our changes and \"upgrade\" planning.\r\n\r\nWhile digging, I uncovered this use of `@vocab` at the top of the [ActivityStreams](https://www.w3.org/ns/activitystreams.jsonld) context file:\r\n```json\r\n{\r\n  \"@context\": {\r\n    \"@vocab\": \"_:\",\r\n    \"...etc...\": \"...etc...\"\r\n  }\r\n}\r\n```\r\n\r\nThis ultimately means that anything not defined in [ActivityStreams 2.0's Vocabulary](https://www.w3.org/TR/activitystreams-vocabulary/) or not covered by an additional \"extension\" context definition will be mapped into a blank node.\r\n\r\nThere's some well informed discussion of the risks, rewards, and reasoning behind their choice:\r\nhttps://github.com/w3c/activitystreams-testing/issues/4\r\n(follow links there to past issues/resolutions).\r\n\r\nMost of the discussions center around extensibility and some of those issues relate to the current work going into `@protected` (and friends)." .
<https://api.github.com/repos/w3c/json-ld-syntax> <http://example.com/ns#issue> <https://api.github.com/repos/w3c/json-ld-syntax/issues/182> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/182> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/182"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/182> <http://schema.org/identifier> "182"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/182> <http://schema.org/name> "Update examples to either skip linting, or lint cleanly." .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/182> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/182> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/182> <http://schema.org/startDate> "2019-05-18T23:28:19Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/182> <http://schema.org/endDate> "2019-05-18T23:36:51Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/182> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/pulls/182> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/182"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/182> <http://example.com/ns#pullRequest> <https://api.github.com/repos/w3c/json-ld-syntax/pulls/182> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/182> <http://schema.org/description> "Add -l argument to just run example at line, instead of -n for exampl…e number.\n\nAdd linting of RDF results, unless data-no-lint is used.\n\nUpdate examples to either skip linting, or lint cleanly.\n\nFixes #180\n\n\n<!--\n    This comment and the below content is programatically generated.\n    You may add a comma-separated list of anchors you'd like a\n    direct link to below (e.g. #idl-serializers, #idl-sequence):\n\n    Don't remove this comment or modify anything below this line.\n    If you don't want a preview generated for this pull request,\n    just replace the whole of this comment's content by \"no preview\"\n    and remove what's below.\n-->\n***\n<a href=\"https://pr-preview.s3.amazonaws.com/w3c/json-ld-syntax/pull/182.html\" title=\"Last updated on May 18, 2019, 11:28 PM UTC (c46d443)\">Preview</a> | <a href=\"https://pr-preview.s3.amazonaws.com/w3c/json-ld-syntax/182/b36d185...c46d443.html\" title=\"Last updated on May 18, 2019, 11:28 PM UTC (c46d443)\">Diff</a>" .
<https://api.github.com/repos/w3c/json-ld-syntax> <http://example.com/ns#issue> <https://api.github.com/repos/w3c/json-ld-syntax/issues/181> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/181> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/181"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/181> <http://schema.org/identifier> "181"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/181> <http://schema.org/name> "Fix example title." .
<https://api.github.com/users/davidlehn> <http://schema.org/accountId> "davidlehn" .
<https://api.github.com/users/davidlehn> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/109587?v=4" .
<https://api.github.com/users/davidlehn> <http://schema.org/url> "https://github.com/davidlehn"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/davidlehn> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/181> <http://schema.org/creator> <https://api.github.com/users/davidlehn> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/181> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/181> <http://schema.org/startDate> "2019-05-17T19:04:08Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/181> <http://schema.org/endDate> "2019-05-18T19:04:43Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/181> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/pulls/181> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/181"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/181> <http://example.com/ns#pullRequest> <https://api.github.com/repos/w3c/json-ld-syntax/pulls/181> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/181> <http://schema.org/description> "This looks like just an oversight and title should match the example above.\n\n\n<!--\n    This comment and the below content is programatically generated.\n    You may add a comma-separated list of anchors you'd like a\n    direct link to below (e.g. #idl-serializers, #idl-sequence):\n\n    Don't remove this comment or modify anything below this line.\n    If you don't want a preview generated for this pull request,\n    just replace the whole of this comment's content by \"no preview\"\n    and remove what's below.\n-->\n***\n<a href=\"https://pr-preview.s3.amazonaws.com/w3c/json-ld-syntax/pull/181.html\" title=\"Last updated on May 17, 2019, 7:04 PM UTC (c18ae50)\">Preview</a> | <a href=\"https://pr-preview.s3.amazonaws.com/w3c/json-ld-syntax/181/06a9111...c18ae50.html\" title=\"Last updated on May 17, 2019, 7:04 PM UTC (c18ae50)\">Diff</a>" .
<https://api.github.com/repos/w3c/json-ld-syntax> <http://example.com/ns#issue> <https://api.github.com/repos/w3c/json-ld-syntax/issues/180> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/180> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/180"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/180> <http://schema.org/identifier> "180"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/180> <http://schema.org/name> "Should examples use IRIs in the foaf vocabulary that do not exist?" .
<https://api.github.com/users/kasei> <http://schema.org/accountId> "kasei" .
<https://api.github.com/users/kasei> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/4872?v=4" .
<https://api.github.com/users/kasei> <http://schema.org/url> "https://github.com/kasei"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/kasei> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/180> <http://schema.org/creator> <https://api.github.com/users/kasei> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:bug> <http://schema.org/name> "spec:bug" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:bug> <http://schema.org/color> "ba39ce" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:bug> <http://schema.org/description> "" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/180> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:bug> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:editorial> <http://schema.org/name> "spec:editorial" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:editorial> <http://schema.org/color> "58820a" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:editorial> <http://schema.org/description> "" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/180> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:editorial> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/180> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/180> <http://example.com/ns#assignee> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/180> <http://schema.org/startDate> "2019-05-15T17:25:50Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/180> <http://schema.org/endDate> "2019-05-18T23:36:51Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/180> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/180> <http://schema.org/description> "[Example 110](https://w3c.github.io/json-ld-syntax/#example-110-compacting-using-a-default-vocabulary) in the syntax document includes a `foaf:Restaurant` IRI that does not actually exist in the foaf vocabulary. Should this example use schema.org instead?" .
<https://api.github.com/repos/w3c/json-ld-syntax> <http://example.com/ns#issue> <https://api.github.com/repos/w3c/json-ld-syntax/issues/179> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/179> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/179"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/179> <http://schema.org/identifier> "179"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/179> <http://schema.org/name> "Syntax examples missing the result of compaction" .
<https://api.github.com/users/kasei> <http://schema.org/accountId> "kasei" .
<https://api.github.com/users/kasei> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/4872?v=4" .
<https://api.github.com/users/kasei> <http://schema.org/url> "https://github.com/kasei"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/kasei> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/179> <http://schema.org/creator> <https://api.github.com/users/kasei> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:editorial> <http://schema.org/name> "spec:editorial" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:editorial> <http://schema.org/color> "58820a" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:editorial> <http://schema.org/description> "" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/179> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:editorial> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/179> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/179> <http://example.com/ns#assignee> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/179> <http://schema.org/startDate> "2019-05-14T19:30:25Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/179> <http://schema.org/endDate> "2019-06-10T16:54:37Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/179> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/179> <http://schema.org/description> "The paragraph just above [example 77](https://w3c.github.io/json-ld-syntax/#example-77-defining-property-nesting) talks about what happens during compaction (in this case, nesting), but the example does not show results of that compaction process. (This happens repeatedly, including examples 86, 89, and 92.)\r\n\r\n> Similarly, term definitions may contain a @nest property referencing a term aliased to @nest which will cause such properties to be nested under that aliased term when compacting. In the example below, both main_label and other_label are defined with \"@nest\": \"labels\", which will cause them to be *serialized under labels when compacting*.\r\n\r\n(emphasis added)" .
<https://api.github.com/repos/w3c/json-ld-syntax> <http://example.com/ns#issue> <https://api.github.com/repos/w3c/json-ld-syntax/issues/178> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/178> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/178"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/178> <http://schema.org/identifier> "178"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/178> <http://schema.org/name> "Example editorial / styling issues in syntax" .
<https://api.github.com/users/azaroth42> <http://schema.org/accountId> "azaroth42" .
<https://api.github.com/users/azaroth42> <http://schema.org/image> "https://avatars3.githubusercontent.com/u/871868?v=4" .
<https://api.github.com/users/azaroth42> <http://schema.org/url> "https://github.com/azaroth42"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/azaroth42> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/178> <http://schema.org/creator> <https://api.github.com/users/azaroth42> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:editorial> <http://schema.org/name> "spec:editorial" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:editorial> <http://schema.org/color> "58820a" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:editorial> <http://schema.org/description> "" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/178> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:editorial> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/178> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/178> <http://schema.org/startDate> "2019-05-14T18:52:35Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/178> <http://schema.org/endDate> "2019-05-29T16:49:24Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/178> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/178> <http://schema.org/description> "\r\n- [ ] Example 4 has an errant \"Context\" appearing on the right hand side.\r\n\r\n![Screen Shot 2019-05-14 at 11 49 10 AM](https://user-images.githubusercontent.com/871868/57723891-80a72b80-763e-11e9-8163-8d5e601629ef.png)\r\n\r\n- [ ] Not all examples of instance data have the tabs for expanded form (etc), e.g. Example 26 does not have them, but 27 immediately following does.\r\n\r\n![Screen Shot 2019-05-14 at 11 51 33 AM](https://user-images.githubusercontent.com/871868/57723986-acc2ac80-763e-11e9-988d-7b30a13a9b85.png)\r\n\r\n/ht @kasei \r\n\r\n\r\n" .
<https://api.github.com/repos/w3c/json-ld-syntax> <http://example.com/ns#issue> <https://api.github.com/repos/w3c/json-ld-syntax/issues/177> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/177> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/177"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/177> <http://schema.org/identifier> "177"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/177> <http://schema.org/name> "Compact IRIs and URI schemes (not security)" .
<https://api.github.com/users/azaroth42> <http://schema.org/accountId> "azaroth42" .
<https://api.github.com/users/azaroth42> <http://schema.org/image> "https://avatars3.githubusercontent.com/u/871868?v=4" .
<https://api.github.com/users/azaroth42> <http://schema.org/url> "https://github.com/azaroth42"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/azaroth42> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/177> <http://schema.org/creator> <https://api.github.com/users/azaroth42> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:editorial> <http://schema.org/name> "spec:editorial" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:editorial> <http://schema.org/color> "58820a" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:editorial> <http://schema.org/description> "" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/177> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:editorial> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:enhancement> <http://schema.org/name> "spec:enhancement" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:enhancement> <http://schema.org/color> "c11537" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:enhancement> <http://schema.org/description> "" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/177> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:enhancement> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/177> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/177> <http://schema.org/startDate> "2019-05-10T23:02:37Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/177> <http://schema.org/endDate> "2019-06-28T00:01:49Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/177> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/177> <http://schema.org/description> "\r\nAs an email address is a URI, it would be `@type:@id` in the context.\r\nIf I define `mailto` as a prefix, I can manipulate the intended URI in the data. Whether that is for malicious purposes or not. Equally, `content`, `icon`, `data` are all URI schemes.\r\n\r\nFor example...\r\n\r\n```\r\n{\r\n  \"@context\": {\r\n    \"mailto\": \"http://my.email.stealing.service/thanks/\",\r\n    \"email\": {\"@id\": \"foaf:email_address\", \"@type\": \"@id\"},\r\n    \"Person\": \"foaf:Person\"\r\n  },\r\n  \"@id\": \"http://person.org/\",\r\n  \"@type\": \"Person\",\r\n  \"email\": \"mailto:person@person.org\"\r\n}\r\n```\r\n\r\nI know the answer is \"don't do that then\" ... but ... could we extend the benefits of `@protected` to cover explicitly NOT defining a term:\r\n\r\n```\r\n{\r\n \"@context\":\r\n  {\r\n    \"mailto\": {\"@id\": null, \"@protected\": true}\r\n  }\r\n}\r\n```\r\n\r\nThen contexts could protect the definition of URI schemes they expect to encounter in their data, without wholesale collision prevention of banning *every* scheme.\r\n\r\n(From discussion between @azaroth42 and @kasei)\r\n" .
<https://api.github.com/repos/w3c/json-ld-syntax> <http://example.com/ns#issue> <https://api.github.com/repos/w3c/json-ld-syntax/issues/176> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/176> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/176"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/176> <http://schema.org/identifier> "176"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/176> <http://schema.org/name> "Typo: Missing word in 1.4 definition of Literal" .
<https://api.github.com/users/azaroth42> <http://schema.org/accountId> "azaroth42" .
<https://api.github.com/users/azaroth42> <http://schema.org/image> "https://avatars3.githubusercontent.com/u/871868?v=4" .
<https://api.github.com/users/azaroth42> <http://schema.org/url> "https://github.com/azaroth42"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/azaroth42> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/176> <http://schema.org/creator> <https://api.github.com/users/azaroth42> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:editorial> <http://schema.org/name> "spec:editorial" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:editorial> <http://schema.org/color> "58820a" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:editorial> <http://schema.org/description> "" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/176> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:editorial> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/176> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/176> <http://example.com/ns#assignee> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/176> <http://schema.org/startDate> "2019-05-10T22:35:43Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/176> <http://schema.org/endDate> "2019-05-29T16:48:43Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/176> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/176> <http://schema.org/description> "\r\n> An object expressed as a value such as a string, number or in expanded form.\r\n\r\nor ... something... in expanded form.\r\n\r\n(Caught by @kasei)" .
<https://api.github.com/repos/w3c/json-ld-syntax> <http://example.com/ns#issue> <https://api.github.com/repos/w3c/json-ld-syntax/issues/175> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/175> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/175"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/175> <http://schema.org/identifier> "175"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/175> <http://schema.org/name> "Update ECHIDNA and travis configs for generating specs." .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/175> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/175> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/175> <http://schema.org/startDate> "2019-05-10T04:33:09Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/175> <http://schema.org/endDate> "2019-05-10T04:40:26Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/175> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/pulls/175> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/175"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/175> <http://example.com/ns#pullRequest> <https://api.github.com/repos/w3c/json-ld-syntax/pulls/175> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/175> <http://schema.org/description> "" .
<https://api.github.com/repos/w3c/json-ld-syntax> <http://example.com/ns#issue> <https://api.github.com/repos/w3c/json-ld-syntax/issues/174> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/174> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/174"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/174> <http://schema.org/identifier> "174"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/174> <http://schema.org/name> "Unexpected @type scope behavior (term definitions persist throughout JSON tree)" .
<https://api.github.com/users/dlongley> <http://schema.org/accountId> "dlongley" .
<https://api.github.com/users/dlongley> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/168137?v=4" .
<https://api.github.com/users/dlongley> <http://schema.org/url> "https://github.com/dlongley"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/dlongley> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/174> <http://schema.org/creator> <https://api.github.com/users/dlongley> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/propose%20closing> <http://schema.org/name> "propose closing" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/propose%20closing> <http://schema.org/color> "bf5315" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/propose%20closing> <http://schema.org/description> "" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/174> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/propose%20closing> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:enhancement> <http://schema.org/name> "spec:enhancement" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:enhancement> <http://schema.org/color> "c11537" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:enhancement> <http://schema.org/description> "" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/174> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:enhancement> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/174> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/174> <http://example.com/ns#assignee> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/174> <http://schema.org/startDate> "2019-05-08T15:11:03Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/174> <http://schema.org/endDate> "2019-07-12T21:08:37Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/174> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/174> <http://schema.org/description> "I was trying to use type-scoped contexts to define a `@context` and was surprised to discover that any type-scoped terms that get defined in the active context continue to be defined beyond the object with the matching `@type`. I think this is very unexpected behavior from an OOP modeling perspective. Also, it is very problematic for `@protected` terms, as it means that you can't model objects of one type that contain objects of another type when there is a commonly used JSON key (that may or may not have the same term definition) when terms are protected.\r\n\r\nA playground example:\r\n\r\n```js\r\n{\r\n  \"@context\": {\r\n    \"@version\": 1.1,\r\n    \"@vocab\": \"ex:\",\r\n    \"@protected\": true,\r\n    \"Library\": {\r\n      \"@context\": {\r\n        \"book\": \"library:book\",\r\n        \"name\": \"library:name\"\r\n      }\r\n    },\r\n    \"Person\": {\r\n      \"@context\": {\r\n        \"name\": \"person:name\"\r\n      }\r\n    }\r\n  },\r\n  \"@id\": \"the:library\",\r\n  \"@type\": \"Library\",\r\n  \"book\": {\r\n    \"@id\": \"the:book\",\r\n    \"about\": {\r\n      \"@id\": \"the:person\",\r\n      \"@type\": \"Person\",\r\n      \"name\": \"Oliver Twist\",\r\n      \"book\": \"unexpectedly defined as library:book!\"\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nProduces these quads:\r\n\r\n```\r\n<the:book> <ex:about> <the:person> .\r\n<the:library> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <ex:Library> .\r\n<the:library> <library:book> <the:book> .\r\n<the:person> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <ex:Person> .\r\n<the:person> <library:book> \"unexpectedly defined as library:book!\" .\r\n<the:person> <person:name> \"Oliver Twist\" .\r\n```\r\n\r\nhttp://tinyurl.com/y2x4szzb\r\n\r\nIf you use `@protected` here, you get an error (which I also find unexpected):\r\n\r\n```js\r\n{\r\n  \"@context\": {\r\n    \"@version\": 1.1,\r\n    \"@vocab\": \"ex:\",\r\n    \"@protected\": true,\r\n    \"Library\": {\r\n      \"@context\": {\r\n        \"@protected\": true,\r\n        \"book\": \"library:book\",\r\n        \"name\": \"library:name\"\r\n      }\r\n    },\r\n    \"Person\": {\r\n      \"@context\": {\r\n        \"@protected\": true,\r\n        \"name\": \"person:name\"\r\n      }\r\n    }\r\n  },\r\n  \"@id\": \"the:library\",\r\n  \"@type\": \"Library\",\r\n  \"book\": {\r\n    \"@id\": \"the:book\",\r\n    \"about\": {\r\n      \"@id\": \"the:person\",\r\n      \"@type\": \"Person\",\r\n      \"name\": \"Oliver Twist\",\r\n      \"book\": \"unexpectedly defined as library:book!\"\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nThat error happens *even if* `name` is defined the same way for both types.\r\n\r\nI suspect that type-scoped terms behave this way because it was easy to implement, but I think it is very surprising behavior that may not have been exposed yet due to limited examples.\r\n\r\nIt's possible that there's an easy fix for this. I think we should change this behavior so that we track whether a term definition in the active context was defined via a type-scoped context and whether or not it replaced a non-type-scoped term when it did so. Then, whenever traversing into one of the typed object's properties during processing, we revert all type-scoped terms to their previous definitions which may mean setting them to `null` (clearing them) if they were previously undefined. Then processing can continue as normal." .
<https://api.github.com/repos/w3c/json-ld-syntax> <http://example.com/ns#issue> <https://api.github.com/repos/w3c/json-ld-syntax/issues/173> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/173> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/173"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/173> <http://schema.org/identifier> "173"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/173> <http://schema.org/name> "Correct term assignment to proper IRI in example 42." .
<https://api.github.com/users/aljones15> <http://schema.org/accountId> "aljones15" .
<https://api.github.com/users/aljones15> <http://schema.org/image> "https://avatars2.githubusercontent.com/u/278280?v=4" .
<https://api.github.com/users/aljones15> <http://schema.org/url> "https://github.com/aljones15"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/aljones15> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/173> <http://schema.org/creator> <https://api.github.com/users/aljones15> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/173> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/173> <http://schema.org/startDate> "2019-05-07T02:14:13Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/173> <http://schema.org/endDate> "2019-05-07T20:07:38Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/173> <http://example.com/ns#authorAssociation> "CONTRIBUTOR" .
<https://api.github.com/repos/w3c/json-ld-syntax/pulls/173> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/173"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/173> <http://example.com/ns#pullRequest> <https://api.github.com/repos/w3c/json-ld-syntax/pulls/173> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/173> <http://schema.org/description> "This correction is for example 42 regarding scoped contexts:\n\n```\n{\n  \"@context\": {\n    \"@vocab\": \"http://example.com/vocab/\"\n    \"property\": {\n      \"@id\": \"http://example.com/vocab/property\",\n      \"@context\": {\n        \"term1\": \"http://example.com/vocab/term1\"\n         ↑ Scoped context for \"property\" defines term1\n      },\n    },\n    \"Type1\": {\n      \"@id\": \"http://example.com/vocab/Type1\",\n      \"@context\": {\n        \"term2\": \"http://example.com/vocab/term3\"\n         ↑ Scoped context for \"Type1\" defines term3\n      },\n    },\n    \"Type2\": {\n      \"@id\": \"http://example.com/vocab/Type2\",\n      \"@context\": {\n        \"term3\": \"http://example.com/vocab/term4\"\n         ↑ Scoped context for \"Type2\" defines term4\n      },\n    },\n  },\n  \"property\": {\n    \"@context\": {\n      \"term2\": \"http://example.com/vocab/term2\"\n         ↑ Embedded context defines term2\n    },\n    \"@type\": [\"Type2\", \"Type1\"],\n    \"term1\": \"a\",\n    \"term2\": \"b\",\n    \"term3\": \"c\",\n    \"term4\": \"d\",\n  }\n}\n```\nI am not sure if the point of this example is that term2 can refer to a different IRI in 2 different scoped contexts, however both the IRI for the first declaration of term2 and term3 both point at iris that don't coincide with their name.\n\n\n<!--\n    This comment and the below content is programatically generated.\n    You may add a comma-separated list of anchors you'd like a\n    direct link to below (e.g. #idl-serializers, #idl-sequence):\n\n    Don't remove this comment or modify anything below this line.\n    If you don't want a preview generated for this pull request,\n    just replace the whole of this comment's content by \"no preview\"\n    and remove what's below.\n-->\n***\n<a href=\"https://pr-preview.s3.amazonaws.com/aljones15/json-ld-syntax/pull/173.html\" title=\"Last updated on May 7, 2019, 2:14 AM UTC (7c78d39)\">Preview</a> | <a href=\"https://pr-preview.s3.amazonaws.com/w3c/json-ld-syntax/173/67d8926...aljones15:7c78d39.html\" title=\"Last updated on May 7, 2019, 2:14 AM UTC (7c78d39)\">Diff</a>" .
<https://api.github.com/repos/w3c/json-ld-syntax> <http://example.com/ns#issue> <https://api.github.com/repos/w3c/json-ld-syntax/issues/172> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/172> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/172"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/172> <http://schema.org/identifier> "172"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/172> <http://schema.org/name> "JSON-LD Context processing in HTML Documents" .
<https://api.github.com/users/msporny> <http://schema.org/accountId> "msporny" .
<https://api.github.com/users/msporny> <http://schema.org/image> "https://avatars3.githubusercontent.com/u/108611?v=4" .
<https://api.github.com/users/msporny> <http://schema.org/url> "https://github.com/msporny"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/msporny> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/172> <http://schema.org/creator> <https://api.github.com/users/msporny> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/172> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/172> <http://schema.org/startDate> "2019-05-05T17:45:30Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/172> <http://schema.org/endDate> "2019-08-16T17:27:35Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/172> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/172> <http://schema.org/description> "From this issue in the Verifiable Claims Working Group with regard to the new \"full Processor\" conformance class: https://github.com/w3c/vc-data-model/issues/585\r\n\r\n@gkellogg wrote:\r\n> > As this is something that may not be necessary in certain embedded environments, the notion of processor classes was introduced to allow a pure JSON Processor to conform without processing HTML. But, a full Processor is expected to do this.\r\n\r\n@msporny wrote: \r\n> To be clear, I really dislike this feature of JSON-LD 1.1 because it raises the burden of Full JSON-LD 1.1 processors to contain an HTML processor (which is a massive requirement) on top of doing JSON-LD processing. I also think this is going to really damage the adoption of JSON-LD 1.1 and make it so much easier for people to argue against it... hell, even I would argue against \"Full JSON-LD processors\" (and plan to if this feature goes to REC).\r\n\r\n@gkellogg wrote:\r\n> I appreciate your position, but JSON-LD in HTML is probably the biggest use case right now (although that will likely change with adoption of VC and WoT). JSON-LD in HTML is a reality that the spec needs to recognize and legitimize.\r\n\r\nI agree that processing JSON-LD content in HTML is a primary use case and the WG should support it.\r\n\r\nI disagree that people are publishing JSON-LD Contexts in HTML, that came out of nowhere. I can see what the WG is trying to do, but this issue is an example of my concern: https://github.com/w3c/vc-data-model/issues/585\r\n\r\nYou have someone suggesting that we pull in a JSON-LD Context file via an HTML document without understanding the technical burden in doing so. They don't understand that publishing a JSON-LD Context as an HTML document will not require ***full*** processors.\r\n\r\nI also note that expressing JSON-LD Contexts in HTML was not contemplated in any of the input documents to the JSON-LD WG and as such, the group is skirting very close to being in violation of their charter by adding this feature:\r\n\r\nhttps://www.w3.org/2018/03/jsonld-wg-charter.html\r\nhttps://github.com/json-ld/json-ld.org/wiki/Changes-in-Community-Group-Drafts-Targeted-for-1.1\r\nhttps://json-ld.org/presentations/JSON-LD-Update-TPAC-2017/assets/player/KeynoteDHTMLPlayer.html\r\n\r\nThere are two major issues with this new set of features:\r\n\r\n* Enabling JSON-LD Contexts in HTML documents will silently increase the burden of consuming JSON-LD by small form factor implementations (IoT, WoT, etc.). I haven't even considered the security implications here, but I can probably create something where a native JS processor uses a different JSON-LD Context than one that doesn't do DOM processing.\r\n* There is an implied hierarchy of \"good\" and \"not as good\" in the new conformance classes. For example, it sounds like having a \"full Processor\" would be better than having a \"pure JSON Processor\".\r\n\r\nMaking the following changes to the specification would be an improvement:\r\n\r\n* Rename \"full Processor\" to \"HTML Processor\".\r\n* Remove the ability to use text/html files as JSON-LD Contexts as pure JSON Processors are not capable of processing them, which will lead to a variety of issues related to developer ergonomics." .
<https://api.github.com/repos/w3c/json-ld-syntax> <http://example.com/ns#issue> <https://api.github.com/repos/w3c/json-ld-syntax/issues/171> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/171> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/171"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/171> <http://schema.org/identifier> "171"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/171> <http://schema.org/name> "Fix term-selection description for 1.0 mode, not JSON-LD 1.0 spec" .
<https://api.github.com/users/pchampin> <http://schema.org/accountId> "pchampin" .
<https://api.github.com/users/pchampin> <http://schema.org/image> "https://avatars1.githubusercontent.com/u/304612?v=4" .
<https://api.github.com/users/pchampin> <http://schema.org/url> "https://github.com/pchampin"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/pchampin> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/171> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/171> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/171> <http://schema.org/startDate> "2019-05-05T12:55:46Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/171> <http://schema.org/endDate> "2019-05-06T21:52:39Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/171> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/pulls/171> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/171"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/171> <http://example.com/ns#pullRequest> <https://api.github.com/repos/w3c/json-ld-syntax/pulls/171> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/171> <http://schema.org/description> "\n\n\n<!--\n    This comment and the below content is programatically generated.\n    You may add a comma-separated list of anchors you'd like a\n    direct link to below (e.g. #idl-serializers, #idl-sequence):\n\n    Don't remove this comment or modify anything below this line.\n    If you don't want a preview generated for this pull request,\n    just replace the whole of this comment's content by \"no preview\"\n    and remove what's below.\n-->\n***\n<a href=\"https://pr-preview.s3.amazonaws.com/w3c/json-ld-syntax/pull/171.html\" title=\"Last updated on May 6, 2019, 9:44 PM UTC (9bfbfe9)\">Preview</a> | <a href=\"https://pr-preview.s3.amazonaws.com/w3c/json-ld-syntax/171/6651b11...9bfbfe9.html\" title=\"Last updated on May 6, 2019, 9:44 PM UTC (9bfbfe9)\">Diff</a>" .
<https://api.github.com/repos/w3c/json-ld-syntax> <http://example.com/ns#issue> <https://api.github.com/repos/w3c/json-ld-syntax/issues/170> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/170> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/170"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/170> <http://schema.org/identifier> "170"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/170> <http://schema.org/name> "Suggestion: Expected behavior for profile URIs not listed in Appendix C?" .
<https://api.github.com/users/swickr> <http://schema.org/accountId> "swickr" .
<https://api.github.com/users/swickr> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/2146407?v=4" .
<https://api.github.com/users/swickr> <http://schema.org/url> "https://github.com/swickr"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/swickr> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/170> <http://schema.org/creator> <https://api.github.com/users/swickr> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:editorial> <http://schema.org/name> "spec:editorial" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:editorial> <http://schema.org/color> "58820a" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:editorial> <http://schema.org/description> "" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/170> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:editorial> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/wr:open> <http://schema.org/name> "wr:open" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/wr:open> <http://schema.org/color> "f7bbd1" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/wr:open> <http://schema.org/description> "" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/170> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/wr:open> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/170> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/170> <http://schema.org/startDate> "2019-05-02T19:35:44Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/170> <http://schema.org/endDate> "2019-06-14T05:07:33Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/170> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/170> <http://schema.org/description> "The specification of [application/ld+json](https://www.w3.org/TR/2018/WD-json-ld11-20181214/#iana-considerations) defines three profile URIs.   The expected behavior when some other URI is given appears to be unspecified.\r\n\r\nIf JSON-LD  were to specify that\r\n\r\n- JSON-LD 1.1 processors should ignore (*) any other URI appearing in a profile parameter and\r\n- profile URIs matching http://www.w3.org/ns/json-ld* are explicitly reserved for future JSON-LD specifications\r\n\r\nthis would provide an additional point of extensibility.\r\n\r\n(*) behave as if that URI were not present" .
<https://api.github.com/repos/w3c/json-ld-syntax> <http://example.com/ns#issue> <https://api.github.com/repos/w3c/json-ld-syntax/issues/169> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/169> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/169"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/169> <http://schema.org/identifier> "169"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/169> <http://schema.org/name> "Feedback: My Adventure In JSON-LD: Understanding @context Semantics" .
<https://api.github.com/users/cjslep> <http://schema.org/accountId> "cjslep" .
<https://api.github.com/users/cjslep> <http://schema.org/image> "https://avatars1.githubusercontent.com/u/2395575?v=4" .
<https://api.github.com/users/cjslep> <http://schema.org/url> "https://github.com/cjslep"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/cjslep> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/169> <http://schema.org/creator> <https://api.github.com/users/cjslep> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:wontfix> <http://schema.org/name> "spec:wontfix" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:wontfix> <http://schema.org/color> "2bafa2" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:wontfix> <http://schema.org/description> "" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/169> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:wontfix> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/169> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/169> <http://schema.org/startDate> "2019-05-01T08:43:20Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/169> <http://schema.org/endDate> "2019-05-07T19:27:58Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/169> <http://example.com/ns#authorAssociation> "NONE" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/169> <http://schema.org/description> "For go-fed/activity's `astool` (ActivityStreams tool, ActivityStreams is a JSON-LD vocabulary) it processes JSON-LD `@context` definitions in order to generate code that represents native types in Golang (along with all the serialization and deserialization code).\r\n\r\nAfter much discussion in an [issue there](https://github.com/w3c/activitystreams/issues/500), I've come to the personal conclusion that the existing [Context Processing algorithms](https://www.w3.org/TR/json-ld-api/#context-processing-algorithm) are inadequate for doing this level of understanding a `@context` document. It is, however, sufficient for the class of algorithms I colloquially call \"text transformations\" (expansion, compaction, normalization).\r\n\r\nTo go beyond just these textual transformations requires the processor knowing which IRI nodes represent entire further `@context` vocabularies to process and which IRIs are \"leaf nodes\" -- ones that actually represent a type. Current JSON-LD descriptions are insufficient and so go-fed `astool` tends to rely on careful convention.\r\n\r\nFurthermore, certain JSON-LD documents that are valid for text transformations introduce problems for semantic understanding. For example, ActivityStreams defines itself with a prefix within its own `@context` document which requires special care by a semantic understanding processor so that it is NOT to be recursively traversed (because the IRI Expansion algorithm is generally modified to recurse in this case, unlike the unmodified version).\r\n\r\nThe ultimate goal of a semantic understanding processor is to be able to identify and traverse IRIs that represent items requiring further understanding, and identifying but not traversing items that are types and can build cross-`@context` references between them. My particular use case for this reference graph was to automatically generate native Golang types.\r\n\r\nI don't really want to get involved in the JSON-LD 1.1 changes. Nor am I making concrete suggestions. I just wanted to make my voice heard for the record." .
<https://api.github.com/repos/w3c/json-ld-syntax> <http://example.com/ns#issue> <https://api.github.com/repos/w3c/json-ld-syntax/issues/168> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/168> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/168"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/168> <http://schema.org/identifier> "168"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/168> <http://schema.org/name> "ack script data and generated file" .
<https://api.github.com/users/iherman> <http://schema.org/accountId> "iherman" .
<https://api.github.com/users/iherman> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/520723?v=4" .
<https://api.github.com/users/iherman> <http://schema.org/url> "https://github.com/iherman"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/iherman> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/168> <http://schema.org/creator> <https://api.github.com/users/iherman> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/168> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/users/BigBlueHat> <http://schema.org/accountId> "BigBlueHat" .
<https://api.github.com/users/BigBlueHat> <http://schema.org/image> "https://avatars1.githubusercontent.com/u/43209?v=4" .
<https://api.github.com/users/BigBlueHat> <http://schema.org/url> "https://github.com/BigBlueHat"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/BigBlueHat> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/168> <http://example.com/ns#assignee> <https://api.github.com/users/BigBlueHat> .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/168> <http://example.com/ns#assignee> <https://api.github.com/users/gkellogg> .
<https://api.github.com/users/pchampin> <http://schema.org/accountId> "pchampin" .
<https://api.github.com/users/pchampin> <http://schema.org/image> "https://avatars1.githubusercontent.com/u/304612?v=4" .
<https://api.github.com/users/pchampin> <http://schema.org/url> "https://github.com/pchampin"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/pchampin> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/168> <http://example.com/ns#assignee> <https://api.github.com/users/pchampin> .
<https://api.github.com/users/azaroth42> <http://schema.org/accountId> "azaroth42" .
<https://api.github.com/users/azaroth42> <http://schema.org/image> "https://avatars3.githubusercontent.com/u/871868?v=4" .
<https://api.github.com/users/azaroth42> <http://schema.org/url> "https://github.com/azaroth42"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/azaroth42> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/168> <http://example.com/ns#assignee> <https://api.github.com/users/azaroth42> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/168> <http://schema.org/startDate> "2019-04-29T15:14:12Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/168> <http://schema.org/endDate> "2019-05-01T17:16:31Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/168> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/pulls/168> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/168"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/168> <http://example.com/ns#pullRequest> <https://api.github.com/repos/w3c/json-ld-syntax/pulls/168> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/168> <http://schema.org/description> "@gkellogg @BigBlueHat @azaroth42 \n\nI have generalized the acknowledgment generation script to configure it and run it more generally (it was, so far, tailored at the Web Publication document). The script itself is in its [own repo now](https://github.com/w3c/publ_ack). It is not yet final (and no documentation yet), but the essence is there.\n\n- There is a generic [configuration file](https://github.com/w3c/json-ld-wg/blob/master/assets/publ_ack_config.json). It currently has references to the files that I have created for the syntax document (and using the final URL-s as they will be, eventually). This will have to be extended to the framing and the api documents.\n- There are two files that are created for each document:\n  - the explicit list in `separate_acks.json` which lists those that are to be mentioned as really authors and contributors. I have created the file in this PR, listing all those who have been at least as one of our calls this year.\n  - a template file in `ack_pattern.html` that contains the slots for the two lists: the ones called out explicitly, and all the others. This will be documented, but it is fairly self-evident.\n- I have generated the file for this document in `acknowledgment.html`. This can then be included into the final document via respec, using:\n\n```\n<section id=\"ack\" data-include=\"common/ack-script/acknowledgements.html\" data-include-replace=\"true\"></section>\n```\n\nI am sure there are refinements to be done on the script, but the essence it there. I wanted to share it asap to get the feedbacks in time.\n\nIf you install this and want to run locally, two things to remember:\n\n- You will have to create a `~/.publ_ack.json` which should include, at the minimum, the `api_key` for accessing the W3C API-s that gives one access to these data (see https://w3c.github.io/w3c-api/).\n- If you run it, be patient. The script has to issue a sh...load of API calls to get everything; the API is not very optimal. I tried to use parallel promises wherever I could (and it does speed up a lot), but it takes its time...\n\n---\n\nI did not want to merge this 'just like that', though it does not affect any of the publication files...\n\n\n<!--\n    This comment and the below content is programatically generated.\n    You may add a comma-separated list of anchors you'd like a\n    direct link to below (e.g. #idl-serializers, #idl-sequence):\n\n    Don't remove this comment or modify anything below this line.\n    If you don't want a preview generated for this pull request,\n    just replace the whole of this comment's content by \"no preview\"\n    and remove what's below.\n-->\n***\n<a href=\"https://pr-preview.s3.amazonaws.com/w3c/json-ld-syntax/pull/168.html\" title=\"Last updated on May 1, 2019, 5:04 PM UTC (855c2c5)\">Preview</a> | <a href=\"https://pr-preview.s3.amazonaws.com/w3c/json-ld-syntax/168/449c65f...855c2c5.html\" title=\"Last updated on May 1, 2019, 5:04 PM UTC (855c2c5)\">Diff</a>" .
<https://api.github.com/repos/w3c/json-ld-syntax> <http://example.com/ns#issue> <https://api.github.com/repos/w3c/json-ld-syntax/issues/167> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/167> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/167"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/167> <http://schema.org/identifier> "167"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/167> <http://schema.org/name> "Add a section on using HTML documents for contexts (and frames)." .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/167> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/167> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/167> <http://schema.org/startDate> "2019-04-25T22:52:12Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/167> <http://schema.org/endDate> "2019-05-01T16:53:41Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/167> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/pulls/167> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/167"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/167> <http://example.com/ns#pullRequest> <https://api.github.com/repos/w3c/json-ld-syntax/pulls/167> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/167> <http://schema.org/description> "For w3c/json-ld-api#66.\n\n\n<!--\n    This comment and the below content is programatically generated.\n    You may add a comma-separated list of anchors you'd like a\n    direct link to below (e.g. #idl-serializers, #idl-sequence):\n\n    Don't remove this comment or modify anything below this line.\n    If you don't want a preview generated for this pull request,\n    just replace the whole of this comment's content by \"no preview\"\n    and remove what's below.\n-->\n***\n<a href=\"https://pr-preview.s3.amazonaws.com/w3c/json-ld-syntax/pull/167.html\" title=\"Last updated on Apr 30, 2019, 9:15 PM UTC (6a54179)\">Preview</a> | <a href=\"https://pr-preview.s3.amazonaws.com/w3c/json-ld-syntax/167/449c65f...6a54179.html\" title=\"Last updated on Apr 30, 2019, 9:15 PM UTC (6a54179)\">Diff</a>" .
<https://api.github.com/repos/w3c/json-ld-syntax> <http://example.com/ns#issue> <https://api.github.com/repos/w3c/json-ld-syntax/issues/159> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/159> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/159"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/159> <http://schema.org/identifier> "159"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/159> <http://schema.org/name> "Consistent use of Dublin Core prefixes" .
<https://api.github.com/users/pchampin> <http://schema.org/accountId> "pchampin" .
<https://api.github.com/users/pchampin> <http://schema.org/image> "https://avatars1.githubusercontent.com/u/304612?v=4" .
<https://api.github.com/users/pchampin> <http://schema.org/url> "https://github.com/pchampin"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/pchampin> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/159> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:editorial> <http://schema.org/name> "spec:editorial" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:editorial> <http://schema.org/color> "58820a" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:editorial> <http://schema.org/description> "" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/159> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:editorial> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:enhancement> <http://schema.org/name> "spec:enhancement" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:enhancement> <http://schema.org/color> "c11537" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:enhancement> <http://schema.org/description> "" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/159> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:enhancement> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/159> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/159> <http://schema.org/startDate> "2019-04-16T06:52:30Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/159> <http://schema.org/endDate> "2019-04-19T20:46:38Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/159> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/159> <http://schema.org/description> "In all examples using the Dublin Core vocabulary, the prefix is declared:\r\n```json\r\n\"dc\": \"http://purl.org/dc/terms/\",\r\n```\r\n\r\nwhile, in the [recommended context](https://github.com/w3c/json-ld-rc/blob/master/context.jsonld),\r\nthe following prefixes are defined:\r\n```json\r\n\"dc\": \"http://purl.org/dc/elements/1.1/\",\r\n\"dc11\": \"http://purl.org/dc/elements/1.1/\",\r\n\"dct\": \"http://purl.org/dc/terms/\",\r\n\"dcterms\": \"http://purl.org/dc/terms/\",\r\n```\r\n\r\nI suggest we align with the recommended context, for example by replacing prefix `dc` with `dct` in the examples of the Syntax document." .
<https://api.github.com/repos/w3c/json-ld-syntax> <http://example.com/ns#issue> <https://api.github.com/repos/w3c/json-ld-syntax/issues/155> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/155> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/155"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/155> <http://schema.org/identifier> "155"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/155> <http://schema.org/name> "IRIs are terms can be misdefined" .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/155> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/propose%20closing> <http://schema.org/name> "propose closing" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/propose%20closing> <http://schema.org/color> "bf5315" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/propose%20closing> <http://schema.org/description> "" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/155> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/propose%20closing> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/satisfied> <http://schema.org/name> "satisfied" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/satisfied> <http://schema.org/color> "4be23b" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/satisfied> <http://schema.org/description> "Requirement Satisfied" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/155> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/satisfied> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/security-tracker> <http://schema.org/name> "security-tracker" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/security-tracker> <http://schema.org/color> "ffff00" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/security-tracker> <http://schema.org/description> "Group bringing to attention of security, or tracked by the security Group but not needing response." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/155> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/security-tracker> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:bug> <http://schema.org/name> "spec:bug" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:bug> <http://schema.org/color> "ba39ce" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:bug> <http://schema.org/description> "" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/155> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:bug> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:enhancement> <http://schema.org/name> "spec:enhancement" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:enhancement> <http://schema.org/color> "c11537" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:enhancement> <http://schema.org/description> "" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/155> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:enhancement> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:substantive> <http://schema.org/name> "spec:substantive" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:substantive> <http://schema.org/color> "cff9a4" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:substantive> <http://schema.org/description> "" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/155> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:substantive> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/155> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/155> <http://example.com/ns#assignee> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/155> <http://schema.org/startDate> "2019-03-29T21:31:31Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/155> <http://schema.org/endDate> "2019-07-12T17:30:55Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/155> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/155> <http://schema.org/description> "JSON-LD provided no real limits on what can be defined as term. In fact, it's possible to define either a Compact IRI or an absolute IRI as a term which maps to something completely different, which is likely a security problem.\r\n\r\nThis  needs to be fixed in JSON-LD 1.1 and marked as an errata for JSON-LD 1.0.\r\n\r\nConsider the following document:\r\n\r\n```json\r\n{\r\n  \"@context\": {\r\n    \"schema\": \"http://schema.org/\",\r\n    \"foaf\": \"http://xmlns.com/foaf/0.1/\",\r\n    \"foaf:name\": {\"@id\": \"schema:name\"},\r\n    \"http://xmlns.com/foaf/0.1/Person\": {\"@id\": \"schema:Person\"}\r\n  },\r\n  \"@type\": \"http://xmlns.com/foaf/0.1/Person\",\r\n  \"foaf:name\": \"Danbri\"\r\n}\r\n```\r\n\r\nThis actually expands to the following:\r\n\r\n```json\r\n[\r\n  {\r\n    \"@type\": [\r\n      \"http://schema.org/Person\"\r\n    ],\r\n    \"http://schema.org/name\": [\r\n      {\r\n        \"@value\": \"Danbri\"\r\n      }\r\n    ]\r\n  }\r\n]\r\n```\r\n\r\nThe syntax document needs to place restrictions on terms which are compact IRI or absolute IRIs that they either do _not_ include `@id` in their definition, or that it expand to the same IRI as if there was no `@id` present. A term looking like a compact IRI without a corresponding prefix definition would be treated as an absolute IRI.\r\n\r\nMoreover, context processing should reject any term which looks like an absolute IRI (e.g., `http://xmlns.com/foaf/0.1/Person` above), as it opens another corner-case when compacting and no term is available to match the value to be compacted, which falls back to use the absolute IRI, but if that's defined as a term, it will be incorrect.\r\n\r\nGiven the following input document:\r\n\r\n```json\r\n{\r\n  \"@context\": {\r\n    \"schema\": \"http://schema.org/\",\r\n    \"foaf\": \"http://xmlns.com/foaf/0.1/\"\r\n  },\r\n  \"@type\": \"http://xmlns.com/foaf/0.1/Person\",\r\n  \"foaf:name\": \"Danbri\"\r\n}\r\n```\r\n\r\nand the following context:\r\n\r\n```json\r\n{\r\n  \"@context\": {\r\n    \"schema\": \"http://schema.org/\",\r\n    \"foaf\": \"http://xmlns.com/foaf/0.1/\",\r\n    \"foaf:name\": {\"@language\": \"de\"},\r\n    \"http://xmlns.com/foaf/0.1/name\": {\"@language\": \"en\"}\r\n  },\r\n  \"@type\": \"http://xmlns.com/foaf/0.1/Person\",\r\n  \"foaf:name\": \"Danbri\"\r\n}\r\n```\r\n\r\nThe result will be \r\n\r\n```json\r\n{\r\n  \"@context\": {\r\n    \"schema\": \"http://schema.org/\",\r\n    \"foaf\": \"http://xmlns.com/foaf/0.1/\",\r\n    \"foaf:name\": {\r\n      \"@language\": \"de\"\r\n    },\r\n    \"http://xmlns.com/foaf/0.1/name\": {\r\n      \"@language\": \"en\"\r\n    }\r\n  },\r\n  \"@type\": \"foaf:Person\",\r\n  \"http://xmlns.com/foaf/0.1/name\": \"Danbri\"\r\n}\r\n```\r\n\r\nBut, as `\"http://xmlns.com/foaf/0.1/name` is defined to have `@language: en`, expanding this won't get back to the original, it will add `@language: en` to the \"Danbri\" value object.\r\n\r\n```json\r\n[\r\n  {\r\n    \"@type\": [\r\n      \"http://xmlns.com/foaf/0.1/Person\"\r\n    ],\r\n    \"http://xmlns.com/foaf/0.1/name\": [\r\n      {\r\n        \"@language\": \"en\",\r\n        \"@value\": \"Danbri\"\r\n      }\r\n    ]\r\n  }\r\n]\r\n```" .
<https://api.github.com/repos/w3c/json-ld-syntax> <http://example.com/ns#issue> <https://api.github.com/repos/w3c/json-ld-syntax/issues/149> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/149> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/149"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/149> <http://schema.org/identifier> "149"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/149> <http://schema.org/name> "DocumentLoader should be more visible in the specs" .
<https://api.github.com/users/azaroth42> <http://schema.org/accountId> "azaroth42" .
<https://api.github.com/users/azaroth42> <http://schema.org/image> "https://avatars3.githubusercontent.com/u/871868?v=4" .
<https://api.github.com/users/azaroth42> <http://schema.org/url> "https://github.com/azaroth42"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/azaroth42> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/149> <http://schema.org/creator> <https://api.github.com/users/azaroth42> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/propose%20closing> <http://schema.org/name> "propose closing" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/propose%20closing> <http://schema.org/color> "bf5315" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/propose%20closing> <http://schema.org/description> "" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/149> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/propose%20closing> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:editorial> <http://schema.org/name> "spec:editorial" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:editorial> <http://schema.org/color> "58820a" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:editorial> <http://schema.org/description> "" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/149> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:editorial> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/149> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/149> <http://example.com/ns#assignee> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/149> <http://schema.org/startDate> "2019-03-22T18:43:53Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/149> <http://schema.org/endDate> "2019-06-20T20:36:59Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/149> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/149> <http://schema.org/description> "\r\nMany issues around resolution of contexts come down to a lack of understanding about the use of the documentLoader.  These questions might not come up as often if documentloader was more visible in the specifications, including in the syntax document even though it's an API feature.\r\n\r\nThe issue is editorial to try to explain why network/resolution related issues are the concern of the document loader. Related to #148, but not necessarily to security directly." .
<https://api.github.com/repos/w3c/json-ld-syntax> <http://example.com/ns#issue> <https://api.github.com/repos/w3c/json-ld-syntax/issues/148> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/148> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/148"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/148> <http://schema.org/identifier> "148"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/148> <http://schema.org/name> "Add security considerations section for URI schemes" .
<https://api.github.com/users/azaroth42> <http://schema.org/accountId> "azaroth42" .
<https://api.github.com/users/azaroth42> <http://schema.org/image> "https://avatars3.githubusercontent.com/u/871868?v=4" .
<https://api.github.com/users/azaroth42> <http://schema.org/url> "https://github.com/azaroth42"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/azaroth42> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/148> <http://schema.org/creator> <https://api.github.com/users/azaroth42> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/propose%20closing> <http://schema.org/name> "propose closing" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/propose%20closing> <http://schema.org/color> "bf5315" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/propose%20closing> <http://schema.org/description> "" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/148> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/propose%20closing> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/security-tracker> <http://schema.org/name> "security-tracker" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/security-tracker> <http://schema.org/color> "ffff00" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/security-tracker> <http://schema.org/description> "Group bringing to attention of security, or tracked by the security Group but not needing response." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/148> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/security-tracker> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:editorial> <http://schema.org/name> "spec:editorial" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:editorial> <http://schema.org/color> "58820a" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:editorial> <http://schema.org/description> "" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/148> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:editorial> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/148> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/148> <http://schema.org/startDate> "2019-03-22T18:37:49Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/148> <http://schema.org/endDate> "2019-07-12T17:29:37Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/148> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/148> <http://schema.org/description> "\r\nAs discussed at TPAC, there are no normative requirements about the URI schemes that are permitted in JSON-LD.  This means that `javascript:`, `tel:` and `data:` URIs are allowed. Combined with the string concatenation (see #147) it is very easy to construct malicious IRIs in several situations in JSON-LD.\r\n\r\nIt is the responsibility of the document loader to determine whether to try to resolve or process, and if so how, any given IRI. This needs to be called out in a security considerations section.\r\n\r\nOnce complete, the content should be flagged for security horizontal review." .
<https://api.github.com/repos/w3c/json-ld-syntax> <http://example.com/ns#issue> <https://api.github.com/repos/w3c/json-ld-syntax/issues/147> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/147> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/147"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/147> <http://schema.org/identifier> "147"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/147> <http://schema.org/name> "Add security consideration about IRI concatenation" .
<https://api.github.com/users/azaroth42> <http://schema.org/accountId> "azaroth42" .
<https://api.github.com/users/azaroth42> <http://schema.org/image> "https://avatars3.githubusercontent.com/u/871868?v=4" .
<https://api.github.com/users/azaroth42> <http://schema.org/url> "https://github.com/azaroth42"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/azaroth42> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/147> <http://schema.org/creator> <https://api.github.com/users/azaroth42> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/propose%20closing> <http://schema.org/name> "propose closing" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/propose%20closing> <http://schema.org/color> "bf5315" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/propose%20closing> <http://schema.org/description> "" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/147> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/propose%20closing> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/security-tracker> <http://schema.org/name> "security-tracker" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/security-tracker> <http://schema.org/color> "ffff00" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/security-tracker> <http://schema.org/description> "Group bringing to attention of security, or tracked by the security Group but not needing response." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/147> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/security-tracker> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:editorial> <http://schema.org/name> "spec:editorial" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:editorial> <http://schema.org/color> "58820a" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:editorial> <http://schema.org/description> "" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/147> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:editorial> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/147> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/147> <http://schema.org/startDate> "2019-03-22T18:32:59Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/147> <http://schema.org/endDate> "2019-07-12T17:29:17Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/147> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/147> <http://schema.org/description> "\r\nAs discussed at TPAC, we should warn about the dangers of constructing IRIs by simple string concatenation without any validation of the result. \r\n\r\nFor example, when string concatenation is used, then \r\n\r\nif you set `@vocab` to `../#` and the base is `https://example.org/ns` then you get `https://example.org/ns../#` not what might be expected via the relative IRI resolution rules.\r\nThus, it is possible to construct malicious IRIs without the usual backstop of the relative resolution rules.\r\n\r\nThis issue can be closed when there is a security considerations section that describes this, and every time there is string concatenation used, it references that section.\r\n \r\n" .
<https://api.github.com/repos/w3c/json-ld-syntax> <http://example.com/ns#issue> <https://api.github.com/repos/w3c/json-ld-syntax/issues/134> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/134> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/134"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/134> <http://schema.org/identifier> "134"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/134> <http://schema.org/name> "Does HTML's `<base>` effect `@context` IRI resolution?" .
<https://api.github.com/users/BigBlueHat> <http://schema.org/accountId> "BigBlueHat" .
<https://api.github.com/users/BigBlueHat> <http://schema.org/image> "https://avatars1.githubusercontent.com/u/43209?v=4" .
<https://api.github.com/users/BigBlueHat> <http://schema.org/url> "https://github.com/BigBlueHat"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/BigBlueHat> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/134> <http://schema.org/creator> <https://api.github.com/users/BigBlueHat> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:editorial> <http://schema.org/name> "spec:editorial" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:editorial> <http://schema.org/color> "58820a" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:editorial> <http://schema.org/description> "" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/134> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:editorial> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/134> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/134> <http://schema.org/startDate> "2019-02-20T18:40:11Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/134> <http://schema.org/endDate> "2019-05-03T16:51:51Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/134> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/134> <http://schema.org/description> "Our current draft explains how HTML's `<base>` tag relates to the `@base` value in JSON-LD--see [Section 7.1](https://w3c.github.io/json-ld-syntax/#inheriting-base-iri-from-html-s-base-element).\r\n\r\nHowever, we haven't yet discussed how `<base>` might effect `@context` IRI resolution. For example:\r\n\r\n```html\r\n<base href=\"http://cdn.example.com/\">\r\n<script type=\"application/ld+json\">\r\n{\r\n  \"@context\": \"context-file.jsonld\",\r\n  \"@id\": \"demo-page\",\r\n  \"@type\": \"WebPage\",\r\n  \"name\": \"Demo\"\r\n}\r\n</script>\r\n```\r\n\r\nCurrently we only specify how\r\n - `@id` would be expanded to `http://cdn.example.com/demo-page\"\r\n - `@type` (if `WebPage` was *not* defined in the context) would expand to `http://cdn.example.com/WebPage`\r\n\r\nWe do not yet explain how `context-file.jsonld` is resolved.\r\n\r\nIf the processing were done \"in page\" by a [jsonld.js](https://github.com/digitalbazaar/jsonld.js/), then the base URL would effect the resolution of `context-file.jsonld`. However, it's currently not stated how that same HTML processed via Python, PHP, Go, etc, would \"absolutize\" that context URL.\r\n\r\nOptions and scenarios include:\r\n - using the `<base>` tag\r\n - using the document URL (if still known)\r\n - using a filesystem path (if processing of disk with no URLs?)" .
<https://api.github.com/repos/w3c/json-ld-syntax> <http://example.com/ns#issue> <https://api.github.com/repos/w3c/json-ld-syntax/issues/128> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/128> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/128"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/128> <http://schema.org/identifier> "128"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/128> <http://schema.org/name> "TriG graphs in JSON-LD" .
<https://api.github.com/users/iherman> <http://schema.org/accountId> "iherman" .
<https://api.github.com/users/iherman> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/520723?v=4" .
<https://api.github.com/users/iherman> <http://schema.org/url> "https://github.com/iherman"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/iherman> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/128> <http://schema.org/creator> <https://api.github.com/users/iherman> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/128> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/128> <http://schema.org/startDate> "2019-02-06T00:31:22Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/128> <http://schema.org/endDate> "2019-08-02T17:10:38Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/128> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/128> <http://schema.org/description> "I just try to test my understanding...\r\n\r\nConsider the following TriG dataset:\r\n\r\n```\r\n@prefix a <http://example.org/a> .\r\n@prefix b <http://example.org/b> .\r\n@prefix c <http://example.org/c> .\r\n\r\n<http://example.org/gr1> {\r\n    a:something a:predicate \"value1\",\r\n                b:predicate c:something1 .\r\n}\r\n<http://example.org/gr2> {\r\n    a:something a:predicate \"value2\",\r\n                b:predicate c:something2 .\r\n}\r\n```\r\n\r\nThe only way to express this in JSON-LD to repeat a `@context`, i.e.,\r\n\r\n```json\r\n[\r\n    {\r\n        \"@context\" : {\r\n            \"a\": \"http://example.org/a\",\r\n            \"b\": \"http://example.org/b\",\r\n            \"c\":  \"http://example.org/c\",\r\n            \"b:predicate\" : { \"@type\" : \"@id\" }\r\n        },\r\n        \"@id\" : \"http://example.org/gr1\",\r\n        \"@graph\" : {\r\n            \"@id\" : \"a:something\",\r\n            \"a:predicate\" : \"value1\",\r\n            \"b:predicate\" : \"c:something1\"\r\n        }\r\n    },\r\n    {\r\n        \"@context\" : {\r\n            \"a\": \"http://example.org/a\",\r\n            \"b\": \"http://example.org/b\",\r\n            \"c\":  \"http://example.org/c\",\r\n            \"b:predicate\" : { \"@type\" : \"@id\" }\r\n        },\r\n        \"@id\" : \"http://example.org/gr2\",\r\n        \"@graph\" : {\r\n            \"@id\" : \"a:something\",\r\n            \"a:predicate\" : \"value2\",\r\n            \"b:predicate\" : \"c:something2\"\r\n        }\r\n    }\r\n]\r\n```\r\n\r\nI.e., the context must be repeated.; there is no way of using a \"global\" context. I am not sure whether this is a problem in practice, but it may become one if JSON-ID is used for large datasets. In any case, this may have to be documented somewhere because it may not be 100% obvious for a first-time reader (best practices document?).\r\n\r\n---\r\n\r\nThat being said: one way of handling that over the Web is if the server returns\r\n\r\n```\r\n[\r\n    {\r\n        \"@id\" : \"http://example.org/gr1\",\r\n        \"@graph\" : {\r\n            \"@id\" : \"a:something\",\r\n            \"a:predicate\" : \"value1\",\r\n            \"b:predicate\" : \"c:something1\"\r\n        }\r\n    },\r\n    {\r\n        \"@id\" : \"http://example.org/gr2\",\r\n        \"@graph\" : {\r\n            \"@id\" : \"a:something\",\r\n            \"a:predicate\" : \"value2\",\r\n            \"b:predicate\" : \"c:something2\"\r\n        }\r\n    }\r\n]\r\n```\r\n\r\nand the `@context` is returned via an HTTP Link. According to section 6, the processor is supposed to repeat the context for each element of the array... \r\n" .
<https://api.github.com/repos/w3c/json-ld-syntax> <http://example.com/ns#issue> <https://api.github.com/repos/w3c/json-ld-syntax/issues/116> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/116> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/116"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/116> <http://schema.org/identifier> "116"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/116> <http://schema.org/name> "Allow partial definition / redefinition of terms" .
<https://api.github.com/users/azaroth42> <http://schema.org/accountId> "azaroth42" .
<https://api.github.com/users/azaroth42> <http://schema.org/image> "https://avatars3.githubusercontent.com/u/871868?v=4" .
<https://api.github.com/users/azaroth42> <http://schema.org/url> "https://github.com/azaroth42"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/azaroth42> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/116> <http://schema.org/creator> <https://api.github.com/users/azaroth42> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/propose%20closing> <http://schema.org/name> "propose closing" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/propose%20closing> <http://schema.org/color> "bf5315" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/propose%20closing> <http://schema.org/description> "" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/116> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/propose%20closing> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/satisfied> <http://schema.org/name> "satisfied" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/satisfied> <http://schema.org/color> "4be23b" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/satisfied> <http://schema.org/description> "Requirement Satisfied" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/116> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/satisfied> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/116> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/116> <http://schema.org/startDate> "2019-01-18T20:09:28Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/116> <http://schema.org/endDate> "2019-03-22T17:59:43Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/116> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/116> <http://schema.org/description> "From #20, there is the notion of partially defining or redefining terms in separate contexts.\r\n\r\nFor example, removing the sealing from the picture, ...\r\n\r\n```\r\n{\r\n  \"@context\": [\r\n    {\"wild_west\": {\"@id\": \"eg:playground\"}},\r\n    {\"wild_west\": {\"@context\": \"http://schema.org\"}}\r\n  ]\r\n}\r\n```\r\n\r\nShould set the scoped context for `wild_west` to schema.org in the second context of the list, without resetting the predicate defined in the first.\r\n" .
<https://api.github.com/repos/w3c/json-ld-syntax> <http://example.com/ns#issue> <https://api.github.com/repos/w3c/json-ld-syntax/issues/115> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/115> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/115"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/115> <http://schema.org/identifier> "115"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/115> <http://schema.org/name> "Enable @context to map a property differently depending on its hierarchical path" .
<https://api.github.com/users/dbooth-boston> <http://schema.org/accountId> "dbooth-boston" .
<https://api.github.com/users/dbooth-boston> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/5123226?v=4" .
<https://api.github.com/users/dbooth-boston> <http://schema.org/url> "https://github.com/dbooth-boston"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/dbooth-boston> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/115> <http://schema.org/creator> <https://api.github.com/users/dbooth-boston> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/satisfied> <http://schema.org/name> "satisfied" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/satisfied> <http://schema.org/color> "4be23b" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/satisfied> <http://schema.org/description> "Requirement Satisfied" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/115> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/satisfied> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:duplicate> <http://schema.org/name> "spec:duplicate" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:duplicate> <http://schema.org/color> "e0082c" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:duplicate> <http://schema.org/description> "" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/115> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:duplicate> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/115> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/115> <http://schema.org/startDate> "2019-01-16T18:25:54Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/115> <http://schema.org/endDate> "2019-01-16T18:59:36Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/115> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/115> <http://schema.org/description> "In mapping a JSON property to an RDF URI, it is not currently possible (in JSON-LD 1.0) to use a single `@context` to map the same property name to different RDF URIs depending on that property's position in the JSON hierarchy.  It would be helpful to be able to do this, perhaps by using the hierarchical path of the property.  For example, in the following JSON, notice that the \"code\" property appears twice, at different levels of the hierarchy, and its value is an object in one case and a string in another.  (See [slide 9](http://dbooth.org/2015/fhir/json-ld/fhir-in-json-ld-OLD.pdf).)  \r\n\r\n```\r\n{ \"resourceType\": \"Observation\",\r\n  \"id\": \"example\",\r\n  \"code\": {\r\n    \"coding\": [\r\n      {\r\n        \"system\": \"http://loinc.org\",\r\n        \"code\": \"3141­9\",\r\n        \"display\": \"Weight Measured\"\r\n      }\r\n    ]\r\n  }\r\n```\r\n\r\nIf the `@context` could allow a path-dependent mapping, then this problem could have been solved.  For example, these two paths would allow the above \"code\" properties to be distinguished:\r\n\r\n```\r\ncode\r\ncode/coding/code\r\n```\r\n\r\n**BACKGROUND** This issue derives from an important use case that we faced in healthcare.  In 2015 as part of a collaboration between HL7 and W3C we were trying to figure out an acceptable way to provide a JSON-LD serialization for FHIR.  ([FHIR](http://build.fhir.org/) is the latest up-and-coming HL7 standard for exchanging healthcare data.)  FHIR already offered XML and plain JSON serializations, and the goal was to add support for RDF.  Since JSON-LD can be used either as plain JSON or as RDF, we were hoping that we could figure out a JSON-LD `@context` and serialization that would be friendly to plain JSON users but also provide the desired mapping to RDF.  We explored possibilities but reached a show-stopper when we discovered the above limitation, because the only work-arounds that we were able to figure out would have put too much burden on plain JSON users.   \r\n\r\nFor example, one potential work-around would have been to include an addition @context nested in the instance data whenever the nested use of the \"code\" property appears.  This would have achieved the RDF compatibility goal, but it would have been too onerous for plain JSON users who would have seen no good reason for having it there.\r\n\r\nAnother potential work-around would have been to change the JSON property names to make them unique, such as using \"code\" and \"codeValue\".  But the design philosophy of FHIR did not allow this much central control over different parts of a FHIR data object, and the FHIR/RDF camp did not have the clout to convince plain JSON users of the need, since we are far outnumbered.\r\n\r\nBecause of this limitation we had to abandon the option of using a single JSON-LD serialization for both plain JSON users and RDF users.  That seemed quite unfortunate given that a major goal of JSON-LD is to bridge these worlds.  We are hoping that this limitation can be addressed in the next version of JSON-LD." .
<https://api.github.com/repos/w3c/json-ld-syntax> <http://example.com/ns#issue> <https://api.github.com/repos/w3c/json-ld-syntax/issues/108> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/108> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/108"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/108> <http://schema.org/identifier> "108"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/108> <http://schema.org/name> "Consider context by reference with metadata" .
<https://api.github.com/users/azaroth42> <http://schema.org/accountId> "azaroth42" .
<https://api.github.com/users/azaroth42> <http://schema.org/image> "https://avatars3.githubusercontent.com/u/871868?v=4" .
<https://api.github.com/users/azaroth42> <http://schema.org/url> "https://github.com/azaroth42"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/azaroth42> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/108> <http://schema.org/creator> <https://api.github.com/users/azaroth42> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/defer-future-version> <http://schema.org/name> "defer-future-version" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/defer-future-version> <http://schema.org/color> "000000" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/defer-future-version> <http://schema.org/description> "Defer this issue until a future version of JSON-LD" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/108> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/defer-future-version> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/privacy-tracker> <http://schema.org/name> "privacy-tracker" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/privacy-tracker> <http://schema.org/color> "d4af37" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/privacy-tracker> <http://schema.org/description> "Group bringing to attention of Privacy, or tracked by the Privacy Group but not needing response." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/108> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/privacy-tracker> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/security-tracker> <http://schema.org/name> "security-tracker" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/security-tracker> <http://schema.org/color> "ffff00" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/security-tracker> <http://schema.org/description> "Group bringing to attention of security, or tracked by the security Group but not needing response." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/108> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/security-tracker> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/108> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#OpenIssue> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/108> <http://schema.org/startDate> "2018-12-14T22:34:26Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/108> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/108> <http://schema.org/description> "\r\nOn the call of 2018-12-14, we discussed (briefly) #20, #98, and #86. One realization that came out of the discussion was that we currently have two ways to refer to contexts - either by references as a single string (the URI of the context) or by value as a JSON object (the actual context). In order to have in-document metadata about the context, such as asserting fixity such as via the SRI specification, we would need to have a URI with additional metadata about it.\r\n\r\nQuestions that arise:\r\n\r\n* How to distinguish between a context by value JSON object and a context by reference with metadata JSON object?\r\n* As the version is in the context, and this functionality is only version 1.1, how would we signal the processing requirement - some sort of transclusion within a context that has the version?\r\n* Are metadata properties extensible or fixed in the specification? If they're extensible, we would need some sort of meta-context wherein the mapping is asserted. If they're fixed, we would need to be very careful to accommodate the various use cases otherwise the tendency will be to simply add in new keys regardless and hope for the best.\r\n\r\nFor example:\r\n\r\n```\r\n{\r\n  \"@context\": [\r\n    \"https://example.com/context-by-reference\",\r\n    {\"id\": \"@id\"},\r\n    {\"@version\": 1.1, \"@context\": \"https://example.com/context-with-metadata\", \"@sri\": \"sha256-abcd\"}\r\n  ]\r\n}\r\n```\r\n" .
<https://api.github.com/repos/w3c/json-ld-syntax> <http://example.com/ns#issue> <https://api.github.com/repos/w3c/json-ld-syntax/issues/103> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/103> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/103"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/103> <http://schema.org/identifier> "103"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/103> <http://schema.org/name> "what is null base URL for an embedded json-ld?" .
<https://api.github.com/users/iherman> <http://schema.org/accountId> "iherman" .
<https://api.github.com/users/iherman> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/520723?v=4" .
<https://api.github.com/users/iherman> <http://schema.org/url> "https://github.com/iherman"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/iherman> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/103> <http://schema.org/creator> <https://api.github.com/users/iherman> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:enhancement> <http://schema.org/name> "spec:enhancement" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:enhancement> <http://schema.org/color> "c11537" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:enhancement> <http://schema.org/description> "" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/103> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:enhancement> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/103> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/103> <http://schema.org/startDate> "2018-12-06T08:14:26Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/103> <http://schema.org/endDate> "2019-08-09T17:17:07Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/103> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/103> <http://schema.org/description> "This issue came up in the Publishing Working Group, see https://github.com/w3c/wpub/issues/374. The question is what exactly the JSON-LD processor's behavior should be if, for some reasons the `baseURI` value for the `<script>` element is null. An example for such a situation is in https://github.com/w3c/wpub/issues/374#issuecomment-444537196, brought up by @danielweck." .
<https://api.github.com/repos/w3c/json-ld-syntax> <http://example.com/ns#issue> <https://api.github.com/repos/w3c/json-ld-syntax/issues/98> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/98> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/98"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/98> <http://schema.org/identifier> "98"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/98> <http://schema.org/name> "Is there a scope context mechanism for clearing context definitions?" .
<https://api.github.com/users/dlongley> <http://schema.org/accountId> "dlongley" .
<https://api.github.com/users/dlongley> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/168137?v=4" .
<https://api.github.com/users/dlongley> <http://schema.org/url> "https://github.com/dlongley"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/dlongley> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/98> <http://schema.org/creator> <https://api.github.com/users/dlongley> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/satisfied> <http://schema.org/name> "satisfied" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/satisfied> <http://schema.org/color> "4be23b" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/satisfied> <http://schema.org/description> "Requirement Satisfied" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/98> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/satisfied> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/98> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/98> <http://schema.org/startDate> "2018-11-29T16:31:07Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/98> <http://schema.org/endDate> "2019-02-09T13:46:15Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/98> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/98> <http://schema.org/description> "Is there a way to use the scoped context mechanism to \"embed\" information in a JSON-LD document such that all term definitions are cleared? So, for example, suppose we had this:\r\n\r\n```js\r\n{\r\n  \"@context\": {\r\n    \"@version\": 1.1,\r\n    \"someTermToClear\": \"ex:someTermToClear\",\r\n    \"record\": {\"@id\": \"ex:record\", \"@container\": \"@graph\", \"@context\": null}\r\n  },\r\n  \"someTermToClear\": \"should be defined here\",\r\n  \"record\": {\r\n    \"@context\": {\r\n      \"someOtherStuff\": \"ex:someOtherStuff\"\r\n    },\r\n    \"@id\": \"ex:someId\",\r\n    \"someOtherStuff\": \"this should be defined here\",\r\n    \"someTermToClear\": \"this should NOT be defined here\"\r\n  }\r\n}\r\n```\r\n\r\nThe goal here is to avoid requiring the author of `record` value (or a user of it) to have to know to clear any terms in an \"outer container\". This may allow \"safer\" composition/embedding of JSON-LD documents." .
<https://api.github.com/repos/w3c/json-ld-syntax> <http://example.com/ns#issue> <https://api.github.com/repos/w3c/json-ld-syntax/issues/91> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/91> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/91"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/91> <http://schema.org/identifier> "91"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/91> <http://schema.org/name> "Allow @type for @none in Language Maps" .
<https://api.github.com/users/BigBlueHat> <http://schema.org/accountId> "BigBlueHat" .
<https://api.github.com/users/BigBlueHat> <http://schema.org/image> "https://avatars1.githubusercontent.com/u/43209?v=4" .
<https://api.github.com/users/BigBlueHat> <http://schema.org/url> "https://github.com/BigBlueHat"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/BigBlueHat> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/91> <http://schema.org/creator> <https://api.github.com/users/BigBlueHat> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:wontfix> <http://schema.org/name> "spec:wontfix" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:wontfix> <http://schema.org/color> "2bafa2" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:wontfix> <http://schema.org/description> "" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/91> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:wontfix> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/91> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/91> <http://schema.org/startDate> "2018-11-06T18:04:58Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/91> <http://schema.org/endDate> "2018-12-08T05:59:29Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/91> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/91> <http://schema.org/description> "Multilingual values in JSON-LD is currently best handled by using the `rdf:HTML` datatype on a value in JSON-LD. However, that currently cannot be used alongside language maps.\r\n\r\nThe following example is cribbed from https://github.com/w3c/wpub/issues/299 + the addition of `@none`:\r\n```json\r\n{\r\n  \"@context\": {\r\n    \"occupation\": { \"@id\": \"ex:occupation\", \"@container\": \"@language\" },\r\n    \"description\": \"ex:description\"\r\n  },\r\n  \"name\": \"Yagyū Muneyoshi\",\r\n  \"occupation\": {\r\n    \"ja\": \"忍者\",\r\n    \"en\": \"Ninja\",\r\n    \"cs\": \"Nindža\",\r\n    \"@none\": \"<span lang=en>Ninja in japanese: <span lang=jp>忍者</span>\"\r\n  }\r\n}\r\n```\r\n\r\nThe output n-quads looks like:\r\n```turtle\r\n_:b0 <ex:occupation> \"<span lang=en>Ninja in japanese: <span lang=jp>忍者</span>\" .\r\n_:b0 <ex:occupation> \"Nindža\"@cs .\r\n_:b0 <ex:occupation> \"Ninja\"@en .\r\n_:b0 <ex:occupation> \"忍者\"@ja .\r\n```\r\n\r\nIf the content is in fact multilingual, then that first triple should look like:\r\n```turtle\r\n_:b0 <ex:occupation> \"<span lang=en>Ninja in japanese: <span lang=jp>忍者</span>\" ^^rdf:HTML.\r\n```\r\n\r\nThe first alternative I tried to express this was:\r\n```json\r\n{\r\n  \"occupation\": {\r\n    \"ja\": \"忍者\",\r\n    \"en\": \"Ninja\",\r\n    \"cs\": \"Nindža\",\r\n    \"@none\": {\r\n      \"@value\": \"<span lang=en>Ninja in japanese: <span lang=jp>忍者</span>\",\r\n      \"@type\": \"rdf:HTML\"\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nWhich currently throws:\r\n```\r\njsonld.SyntaxError: Invalid JSON-LD syntax; language map values must be strings.\r\n```\r\n\r\nGiven that `rdf:HTML` is the current recommendation for multilingual content in RDF, JSON, YAML, etc, I'd propose we find ways to express `rdf:HTML` (and perhaps future datatypes) as the type of `@none` would found in a language map--at the `@context` level and/or within the data.\r\n\r\nCheers!\r\n🎩 " .
<https://api.github.com/repos/w3c/json-ld-syntax> <http://example.com/ns#issue> <https://api.github.com/repos/w3c/json-ld-syntax/issues/89> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/89> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/89"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/89> <http://schema.org/identifier> "89"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/89> <http://schema.org/name> "TAG Review Request: Base used to resolve relative URIs to absolute URIs in HTML5 data-blocks" .
<https://api.github.com/users/azaroth42> <http://schema.org/accountId> "azaroth42" .
<https://api.github.com/users/azaroth42> <http://schema.org/image> "https://avatars3.githubusercontent.com/u/871868?v=4" .
<https://api.github.com/users/azaroth42> <http://schema.org/url> "https://github.com/azaroth42"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/azaroth42> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/89> <http://schema.org/creator> <https://api.github.com/users/azaroth42> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/satisfied> <http://schema.org/name> "satisfied" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/satisfied> <http://schema.org/color> "4be23b" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/satisfied> <http://schema.org/description> "Requirement Satisfied" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/89> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/satisfied> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/89> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/89> <http://schema.org/startDate> "2018-10-26T14:56:57Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/89> <http://schema.org/endDate> "2018-10-28T16:02:11Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/89> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/89> <http://schema.org/description> "This issue is to create a TAG review issue. Partially filled template is below.\r\n\r\n---\r\n\r\nSalut TAG,\r\n\r\nI'm requesting a TAG review of:\r\n\r\n  - Name: JSON-LD embedded in HTML with relative URIs\r\n  - Specification URL: https://github.com/w3c/json-ld-syntax/issues/23 \r\n  - Explainer, Requirements Doc, or Example code: [url]\r\n  - Tests: [wpt folder(s), if available]\r\n  - Primary contacts: @azaroth42 @bigbluehat @iherman @gkellogg\r\n\r\nFurther details (optional):\r\n\r\n  - Relevant time constraints or deadlines: [please provide]\r\n  - [ ] I have read and filled out the [Self-Review Questionnaire on Security and Privacy](https://www.w3.org/TR/security-privacy-questionnaire/). The [assessment is here](url).\r\n  - [X] I have reviewed the TAG's [API Design Principles](https://w3ctag.github.io/design-principles/)\r\n\r\nWe'd prefer the TAG provide feedback as (please select one):\r\n\r\n  - [ ] open issues in our Github repo for each point of feedback\r\n  - [ ] open a single issue in our Github repo for the entire review\r\n  - [X] leave review feedback as a comment in this issue and @-notify @azaroth42 @bigbluehat @iherman @gkellogg\r\n\r\nYou should also know that...\r\n\r\n[please tell us anything you think is relevant to this review]\r\n\r\n\r\n\r\n\r\n--------------------------\r\n" .
<https://api.github.com/repos/w3c/json-ld-syntax> <http://example.com/ns#issue> <https://api.github.com/repos/w3c/json-ld-syntax/issues/86> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/86> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/86"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/86> <http://schema.org/identifier> "86"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/86> <http://schema.org/name> "Can SRI be used in JSON-LD and for which use cases?" .
<https://api.github.com/users/ajs6f> <http://schema.org/accountId> "ajs6f" .
<https://api.github.com/users/ajs6f> <http://schema.org/image> "https://avatars1.githubusercontent.com/u/110994?v=4" .
<https://api.github.com/users/ajs6f> <http://schema.org/url> "https://github.com/ajs6f"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/ajs6f> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/86> <http://schema.org/creator> <https://api.github.com/users/ajs6f> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/security-tracker> <http://schema.org/name> "security-tracker" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/security-tracker> <http://schema.org/color> "ffff00" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/security-tracker> <http://schema.org/description> "Group bringing to attention of security, or tracked by the security Group but not needing response." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/86> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/security-tracker> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/86> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/86> <http://schema.org/startDate> "2018-10-25T09:59:24Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/86> <http://schema.org/endDate> "2019-04-27T07:25:18Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/86> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/86> <http://schema.org/description> "[Subresource Integrity](https://www.w3.org/TR/SRI) can be used in HTML to provide integrity support for portions of HTML documents. It may be possible to reuse that pattern in JSON-LD, and it might support various use cases around integrity, but the basic question of whether it can be done in JSON-LD syntax is still open." .
<https://api.github.com/repos/w3c/json-ld-syntax> <http://example.com/ns#issue> <https://api.github.com/repos/w3c/json-ld-syntax/issues/82> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/82> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/82"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/82> <http://schema.org/identifier> "82"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/82> <http://schema.org/name> "Better styling on example buttons" .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/82> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:editorial> <http://schema.org/name> "spec:editorial" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:editorial> <http://schema.org/color> "58820a" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:editorial> <http://schema.org/description> "" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/82> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:editorial> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/82> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#OpenIssue> .
<https://api.github.com/users/BigBlueHat> <http://schema.org/accountId> "BigBlueHat" .
<https://api.github.com/users/BigBlueHat> <http://schema.org/image> "https://avatars1.githubusercontent.com/u/43209?v=4" .
<https://api.github.com/users/BigBlueHat> <http://schema.org/url> "https://github.com/BigBlueHat"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/BigBlueHat> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/82> <http://example.com/ns#assignee> <https://api.github.com/users/BigBlueHat> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/82> <http://schema.org/startDate> "2018-10-12T17:49:53Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/82> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/82> <http://schema.org/description> "Example buttons could be styled better, and the link to playground should look different from the others which serve to switch example views." .
<https://api.github.com/repos/w3c/json-ld-syntax> <http://example.com/ns#issue> <https://api.github.com/repos/w3c/json-ld-syntax/issues/81> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/81> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/81"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/81> <http://schema.org/identifier> "81"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/81> <http://schema.org/name> "Better styling of changes" .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/81> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/propose%20closing> <http://schema.org/name> "propose closing" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/propose%20closing> <http://schema.org/color> "bf5315" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/propose%20closing> <http://schema.org/description> "" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/81> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/propose%20closing> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:editorial> <http://schema.org/name> "spec:editorial" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:editorial> <http://schema.org/color> "58820a" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:editorial> <http://schema.org/description> "" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/81> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:editorial> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/81> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#OpenIssue> .
<https://api.github.com/users/BigBlueHat> <http://schema.org/accountId> "BigBlueHat" .
<https://api.github.com/users/BigBlueHat> <http://schema.org/image> "https://avatars1.githubusercontent.com/u/43209?v=4" .
<https://api.github.com/users/BigBlueHat> <http://schema.org/url> "https://github.com/BigBlueHat"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/BigBlueHat> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/81> <http://example.com/ns#assignee> <https://api.github.com/users/BigBlueHat> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/81> <http://schema.org/startDate> "2018-10-12T17:48:42Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/81> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/81> <http://schema.org/description> "All documents include classes that make it easy to see what's changed from 1.0. This could be styled better." .
<https://api.github.com/repos/w3c/json-ld-syntax> <http://example.com/ns#issue> <https://api.github.com/repos/w3c/json-ld-syntax/issues/76> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/76> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/76"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/76> <http://schema.org/identifier> "76"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/76> <http://schema.org/name> "Node Types in @context" .
<https://api.github.com/users/AtesComp> <http://schema.org/accountId> "AtesComp" .
<https://api.github.com/users/AtesComp> <http://schema.org/image> "https://avatars3.githubusercontent.com/u/23365631?v=4" .
<https://api.github.com/users/AtesComp> <http://schema.org/url> "https://github.com/AtesComp"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/AtesComp> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/76> <http://schema.org/creator> <https://api.github.com/users/AtesComp> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/out%20of%20scope:%20transformation> <http://schema.org/name> "out of scope: transformation" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/out%20of%20scope:%20transformation> <http://schema.org/color> "000000" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/out%20of%20scope:%20transformation> <http://schema.org/description> "" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/76> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/out%20of%20scope:%20transformation> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/propose%20closing> <http://schema.org/name> "propose closing" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/propose%20closing> <http://schema.org/color> "bf5315" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/propose%20closing> <http://schema.org/description> "" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/76> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/propose%20closing> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:editorial> <http://schema.org/name> "spec:editorial" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:editorial> <http://schema.org/color> "58820a" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:editorial> <http://schema.org/description> "" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/76> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:editorial> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/76> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/76> <http://schema.org/startDate> "2018-10-04T21:40:29Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/76> <http://schema.org/endDate> "2019-02-26T04:14:35Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/76> <http://example.com/ns#authorAssociation> "NONE" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/76> <http://schema.org/description> "So, reading the specification, I see the the line:\r\n  \"Specifically, @type cannot be used in a context to define a node's type.\"\r\nwhere I ask, WTF? Why not?  Why so short-sighted?  Why do node types need to be red-headed stepchildren?\r\n\r\nGiven conversions from JSON to JSON-LD , it would be **extremely** useful to apply type (coercion) to IRIs and blank nodes via @context.  Example:\r\n\r\nGiven\r\n```\r\n{\r\n  \"type\": \"indicator\",\r\n  \"id\": \"indicator--e2e1a340-4415-4ba8-9671-f7343fbf0836\",\r\n  \"external_references\": [\r\n    {\r\n      \"source_name\": \"veris\",\r\n      \"external_id\": \"0001AA7F-C601-424A-B2B8-BE6C9F5164E7\",\r\n      \"url\": \"https://github.com/vz-risk/VCDB/blob/master/data/json/0001AA7F-C601-424A-B2B8-BE6C9F5164E7.json\"\r\n    }\r\n  ]\r\n}\r\n```\r\nI can header the data with a context:\r\n```\r\n  \"@context\": {\r\n    \"@version\": 1.1,\r\n    \"@base\": \"http://purl.org/cyber/stix/identifier/\",\r\n    \"@vocab\": \"http://purl.org/cyber/stix/vocab/\",\r\n\r\n    \"stix\": \"http://purl.org/cyber/stix#\",\r\n    \"id\": \"@id\",\r\n    \"type\": \"@type\",\r\n    \"indicator\": \"stix:Indicator\",\r\n    \"external_references\": {\r\n      \"@type\": \"@id\",\r\n      \"@context\": {\r\n        \"url\": { \"@type\": \"@id\" }\r\n      }\r\n    }\r\n  },\r\n```\r\nwhich converts the data somewhat nicely.  Pop it into the JSON-LD 1.1 Playground and view the table.  I've severely limited the example for clarity.\r\n\r\nGenerally the properties \"external_references\", \"url\", and others would have ontology definitions to cast the un-typed nodes.  However, this is not always the case.  As an example, let's assume \"external_references\" does not cast to a single definitive node type.  The \"external_references\" structure will produce a blank node without type.  We have applications where a property key name may be used in different contexts (thanks for scoped @context !!!) and therefore may indicate different node types.  An ontology can define multiple types for a given property, but its not definitive.  The data may specify the definitive node type by context.  Without a method to type nodes in context, the specification severely limits the usefulness of the conversion.\r\n\r\nSUGGESTION:\r\n\r\nSince \"@type\" allows for all manner of data typing, why not allow \"@type\" to also provide node typing.  It seems a simple addition to the specification, such as:\r\n```\r\n  \"@type\": { \"@id\": \"http://my.friggin.org/has/class\" }\r\n```\r\nwhere we specify the context is a node, as before, with the addition of the node type(s) [sure, more than one node type using \"@id\": { \"nt1\", \"nt2\" } or maybe multiple \"@type\" statements, why not?].  I'm not saying we NEED multiple types for the specification.  Allowing for just one node type would be monumental.  In fact, \r\n```\r\n  \"@type\": { \"http://my.friggin.org/has/class\" }\r\n```\r\nmight be enough or a short form as it might imply \"@id\".  Or maybe add a specification for value types as well (just to be thoughtful about values):\r\n```\r\n  \"@type\": { \"@value\": \"http://my.friggin.org/has/valueType\" }\r\n```\r\nAhh, uniformity!  So, here are the different context types:\r\n```\r\n  \"@type\": valuetype\r\n  \"@type\": { \"@value\": valuetype }\r\n  \"@type\": \"@id\"\r\n  \"@type\": { \"@id\": nodetype }\r\n```\r\nNOTE: There was some discussion about allowing the value to be both a node type and a data type.  There is something very wrong about that kind of data pattern.\r\n\r\nThe above context would be modified as follows:\r\n```\r\n  \"@context\": {\r\n    \"@version\": 1.1,\r\n    \"@base\": \"http://purl.org/cyber/stix/identifier/\",\r\n    \"@vocab\": \"http://purl.org/cyber/stix/vocab/\",\r\n\r\n    \"stix\": \"http://purl.org/cyber/stix#\",\r\n    \"id\": \"@id\",\r\n    \"type\": \"@type\",\r\n    \"indicator\": \"stix:Indicator\",\r\n    \"external_references\": {\r\n      \"@type\": { \"@id\": \"stix:ExternalReference\" },\r\n      \"@context\": {\r\n        \"url\": { \"@type\": {\"@id\": \"stix:URL\"} }\r\n      }\r\n    }\r\n  },\r\n```\r\nNow, I could query for all things \"stix:ExternalReference\" or \"stix:URL\" without resorting to a bastardized conversion therapy." .
<https://api.github.com/repos/w3c/json-ld-syntax> <http://example.com/ns#issue> <https://api.github.com/repos/w3c/json-ld-syntax/issues/72> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/72> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/72"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/72> <http://schema.org/identifier> "72"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/72> <http://schema.org/name> "Allow relative IRIs for @vocab" .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/72> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/propose%20closing> <http://schema.org/name> "propose closing" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/propose%20closing> <http://schema.org/color> "bf5315" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/propose%20closing> <http://schema.org/description> "" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/72> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/propose%20closing> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/satisfied> <http://schema.org/name> "satisfied" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/satisfied> <http://schema.org/color> "4be23b" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/satisfied> <http://schema.org/description> "Requirement Satisfied" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/72> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/satisfied> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:editorial> <http://schema.org/name> "spec:editorial" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:editorial> <http://schema.org/color> "58820a" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:editorial> <http://schema.org/description> "" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/72> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:editorial> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:enhancement> <http://schema.org/name> "spec:enhancement" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:enhancement> <http://schema.org/color> "c11537" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:enhancement> <http://schema.org/description> "" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/72> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:enhancement> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/72> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/72> <http://example.com/ns#assignee> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/72> <http://schema.org/startDate> "2018-09-28T18:27:35Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/72> <http://schema.org/endDate> "2019-01-15T21:06:55Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/72> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/72> <http://schema.org/description> "JSON-LD separates handling of IRI conversions for document- and vocabulary-relative IRIs. At times, it is useful to have more vocabulary items be considered in the document space. A change was made to allow the empty string (\"\") as a value for `@vocab`, but this may not be adequate.\r\n\r\nIssue #56 somewhat complains about this, as does #37.\r\n\r\nCurrently, the Syntax document describes this in [§4.1.2.1 Using the Document Base as the Default Vocabulary](https://www.w3.org/TR/json-ld11/#using-the-document-base-as-the-default-vocabulary), but the use of a term `\"#breweats\"` is not a natural JSON property. If `@vocab` could be set to `\"#\"`, this would allow a more natural expression.\r\n\r\nThe API document has a carve-out for the empty string, but otherwise require `@vocab` to resolve to an absolute IRI:\r\n\r\n> Otherwise, if value is an _absolute IRI_ or _blank node identifier_, the vocabulary mapping of result is set to value. If it is not an _absolute IRI_, or a _blank node identifier_, an `invalid vocab mapping` error has been detected and processing is aborted.\r\n\r\nThe proposal would be to treat things that are not absolute IRIs as IRIs relative to the document base as does the current empty-string carveout:\r\n\r\n> Otherwise, if value the empty string (\"\"), the effective value is the current _base IRI_.\r\n\r\nResolving vocabulary-relative IRIs is done with simply concatenation, so the proposal would be to concatenate any non-absolute IRI value of `@vocab` to _base IRI_ by concatenating the value of `@vocab` to _base IRI_; if the result is not then a valid _absolute IRI_ we would continue to generate an `invalid vocab mapping` error. Note that this sill not invalidate any 1.0 documents, but will allow things which were previously not valid." .
<https://api.github.com/repos/w3c/json-ld-syntax> <http://example.com/ns#issue> <https://api.github.com/repos/w3c/json-ld-syntax/issues/66> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/66> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/66"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/66> <http://schema.org/identifier> "66"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/66> <http://schema.org/name> "Fragment identifiers with ':'" .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/66> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/satisfied> <http://schema.org/name> "satisfied" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/satisfied> <http://schema.org/color> "4be23b" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/satisfied> <http://schema.org/description> "Requirement Satisfied" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/66> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/satisfied> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:bug> <http://schema.org/name> "spec:bug" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:bug> <http://schema.org/color> "ba39ce" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:bug> <http://schema.org/description> "" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/66> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:bug> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:editorial> <http://schema.org/name> "spec:editorial" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:editorial> <http://schema.org/color> "58820a" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:editorial> <http://schema.org/description> "" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/66> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:editorial> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/66> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/66> <http://schema.org/startDate> "2018-09-17T20:34:08Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/66> <http://schema.org/endDate> "2018-10-04T20:05:49Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/66> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/66> <http://schema.org/description> "A bug was noted where the following was not expanded properly:\r\n\r\n```json\r\n{\r\n  \"@context\": {\r\n    \"@base\": \"https://ex.org/\",\r\n    \"u\": {\"@id\": \"urn:u:\", \"@type\": \"@id\"}\r\n  },\r\n  \"u\": [\"#Test\", \"#Test:2\"]\r\n}\r\n```\r\n\r\nThe issue is that the expand IRI algorithm splits \"#Test:2\" on the colon, where it is intended to be part of the fragment identifier, which is legal.\r\n\r\nEither the algorithm needs to be made more complex by detecting this, or we should explicitly say that fragment identifiers containing ':' are not supported.\r\n\r\ncc /@davidlehn " .
<https://api.github.com/repos/w3c/json-ld-syntax> <http://example.com/ns#issue> <https://api.github.com/repos/w3c/json-ld-syntax/issues/57> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/57> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/57"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/57> <http://schema.org/identifier> "57"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/57> <http://schema.org/name> "Make processing of embedded HTML normative" .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/57> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/satisfied> <http://schema.org/name> "satisfied" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/satisfied> <http://schema.org/color> "4be23b" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/satisfied> <http://schema.org/description> "Requirement Satisfied" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/57> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/satisfied> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:enhancement> <http://schema.org/name> "spec:enhancement" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:enhancement> <http://schema.org/color> "c11537" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:enhancement> <http://schema.org/description> "" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/57> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:enhancement> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/test:needs%20tests> <http://schema.org/name> "test:needs tests" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/test:needs%20tests> <http://schema.org/color> "e587ca" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/test:needs%20tests> <http://schema.org/description> "" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/57> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/test:needs%20tests> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/57> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/57> <http://schema.org/startDate> "2018-08-23T20:35:41Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/57> <http://schema.org/endDate> "2018-11-16T19:03:28Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/57> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/57> <http://schema.org/description> "Currently, [Embedding JSON-LD in HTML Documents](https://w3c.github.io/json-ld-syntax/#embedding-json-ld-in-html-documents) is entirely informative. We've discussed making this normative, requiring JSON-LD processors to be able to identify and extract JSON-LD from a script tag with type `application/ld+json` within the HTML document.\r\n\r\n* Given multiple such script tags, which one is used?\r\n* Should we define a parameterized content-type to allow the version to be specified (e.g., `application/ld+json;version=1.1`)\r\n* Does the current document base affect the base for JSON-LD processing?\r\n  * location of  HTML document\r\n  * `html>head>base@href`\r\n * `xml:base` of closest ancestor element\r\n* Does the document language affect the default language for JSON-LD processing?\r\n  * HTTP header- `Content-Language`\r\n  * `@lang`, `@xml:lang`\r\n\r\n" .
<https://api.github.com/repos/w3c/json-ld-syntax> <http://example.com/ns#issue> <https://api.github.com/repos/w3c/json-ld-syntax/issues/56> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/56> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/56"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/56> <http://schema.org/identifier> "56"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/56> <http://schema.org/name> "Expanding @vocab properties consistently" .
<https://api.github.com/users/pjohnston-wiley> <http://schema.org/accountId> "pjohnston-wiley" .
<https://api.github.com/users/pjohnston-wiley> <http://schema.org/image> "https://avatars2.githubusercontent.com/u/11592786?v=4" .
<https://api.github.com/users/pjohnston-wiley> <http://schema.org/url> "https://github.com/pjohnston-wiley"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/pjohnston-wiley> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/56> <http://schema.org/creator> <https://api.github.com/users/pjohnston-wiley> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/propose%20closing> <http://schema.org/name> "propose closing" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/propose%20closing> <http://schema.org/color> "bf5315" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/propose%20closing> <http://schema.org/description> "" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/56> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/propose%20closing> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:editorial> <http://schema.org/name> "spec:editorial" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:editorial> <http://schema.org/color> "58820a" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:editorial> <http://schema.org/description> "" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/56> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:editorial> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/56> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/users/pjohnston-wiley> <http://schema.org/accountId> "pjohnston-wiley" .
<https://api.github.com/users/pjohnston-wiley> <http://schema.org/image> "https://avatars2.githubusercontent.com/u/11592786?v=4" .
<https://api.github.com/users/pjohnston-wiley> <http://schema.org/url> "https://github.com/pjohnston-wiley"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/pjohnston-wiley> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/56> <http://example.com/ns#assignee> <https://api.github.com/users/pjohnston-wiley> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/56> <http://schema.org/startDate> "2018-08-22T22:56:20Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/56> <http://schema.org/endDate> "2018-12-08T05:52:58Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/56> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/56> <http://schema.org/description> "(I wasn't sure if this was a syntax or an API issue. If i got the wrong one, please let me know and i will refile)\r\n\r\nConsider the following:\r\n\r\n```json\r\n{\r\n  \"@context\": {\r\n    \"@base\": \"http://example1.com/\",\r\n    \"ex1\": \"http://example1.com/\",\r\n    \"ex2\": \"http://example2.com/\",\r\n    \"id\": \"@id\",\r\n    \"fred\": {\r\n      \"@id\": \"ex1:fred\",\r\n      \"@type\": \"@vocab\"\r\n    },\r\n    \"barney\": {\r\n      \"@id\": \"ex2:barney\"\r\n    },\r\n    \"mnemonic\": \"rdf:value\"\r\n  },\r\n  \"fred\": [\r\n    {\r\n      \"id\": \"barney\",\r\n      \"mnemonic\": \"the sidekick\"\r\n    },\r\n    \"barney\"\r\n  ]\r\n}\r\n```\r\n\r\nThe counterintuitive result of expansion is:\r\n\r\n```json\r\n[\r\n  {\r\n    \"http://example1.com/fred\": [\r\n      {\r\n        \"@id\": \"http://example1.com/barney\",\r\n        \"rdf:value\": [\r\n          {\r\n            \"@value\": \"the sidekick\"\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        \"@id\": \"http://example2.com/barney\"\r\n      }\r\n    ]\r\n  }\r\n]\r\n```\r\n\r\nIn other words, one `barney` registers as a result of the top-level `@vocab` declaration, while the other registers as a result of the specific `barney` alias against the `fred` property of type `@vocab`. \r\n\r\nI understand _why_ this happens, the spec has different algorithms for strings on the right of a property vs objects, but it's a bit odd. To the lay reader (i.e. me), it seems like an inconsistent application. If the IRI expansion algorithm were able to take into account explicit aliases for `@vocab` properties, it could be made consistent, and a similar application to compaction would deliver a symmetric behavior.\r\n\r\nThe context, in terms of practical application, is that we maintain an overarching RDF model to govern our data and i would like the folks implementing our APIs to know as little about the RDF-ness of it as possible, which is where JSON-LD comes in. By using `@vocab` i was able to get implementers to omit a namespace qualifier on plain taxonomy values (the second `barney` in the original example), but as soon as they want to include anything richer they have to qualify it. Using the same context, to guarantee semantic consistency the example would have to be written as:  \r\n\r\n```json\r\n{\r\n    \"fred\": [\r\n      \"barney\",\r\n      {\r\n         \"id\": \"ex2:barney\",\r\n         \"mnemonic\": \"the sidekick\"\r\n      }\r\n    ]\r\n}\r\n```\r\ni.e. we have to qualify the second `barney` with `ex2` for it to work consistently, which means exposing API developers to the RDF-ness of our model, or breaking the connection." .
<https://api.github.com/repos/w3c/json-ld-syntax> <http://example.com/ns#issue> <https://api.github.com/repos/w3c/json-ld-syntax/issues/42> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/42> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/42"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/42> <http://schema.org/identifier> "42"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/42> <http://schema.org/name> "Propose `@documentation` for providing URL of resource documenting context or frame" .
<https://api.github.com/users/tcole3> <http://schema.org/accountId> "tcole3" .
<https://api.github.com/users/tcole3> <http://schema.org/image> "https://avatars2.githubusercontent.com/u/7622978?v=4" .
<https://api.github.com/users/tcole3> <http://schema.org/url> "https://github.com/tcole3"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/tcole3> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/42> <http://schema.org/creator> <https://api.github.com/users/tcole3> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:enhancement> <http://schema.org/name> "spec:enhancement" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:enhancement> <http://schema.org/color> "c11537" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:enhancement> <http://schema.org/description> "" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/42> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:enhancement> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:wontfix> <http://schema.org/name> "spec:wontfix" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:wontfix> <http://schema.org/color> "2bafa2" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:wontfix> <http://schema.org/description> "" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/42> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:wontfix> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/42> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/42> <http://schema.org/startDate> "2018-08-07T16:31:13Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/42> <http://schema.org/endDate> "2018-08-13T20:06:16Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/42> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/42> <http://schema.org/description> "The discussion surrounding Issue #32 (Is there a way to define additional metadata in JSON-LD `@context`?) identified possible use cases for wanting to provide comments or documentation (e.g., metadata) about JSON-LD context and framing documents. The [JSON-LD 1.0 Recommendation](https://www.w3.org/TR/json-ld/#the-context) (and the [JSON-LD 1.1 Community Report](https://json-ld.org/spec/latest/json-ld/#the-context)) anticipate the value of `@context` documentation: \r\n\r\n> External JSON-LD context documents may contain extra information located outside of the `@context` key, such as documentation about the terms declared in the document. Information contained outside of the `@context` value is ignored when the document is used as an external JSON-LD context document. \r\n\r\nHowever, this method does not support documentation of context included inline in a JSON-LD instance, does not facilitate the reuse of pre-existing vocabulary and ontology documentation already available online, and does not provide an option for human-readable documentation of terms declared in the context document (or documentation of the associated ontology as a whole), nor for machine readable documentation in a format other than JSON-LD. Additionally, this mechanism is of no help for those wanting to describe the logic and flow of a framing document.\r\n\r\nAdding `@documentation` as a key (with range URL) available only in context and framing documents would allow including documentation by reference. Taking schema.org context document as an example, any of the following might be reasonable values for `@documentation`:\r\n\r\n- https://schema.org/docs/documents.html (incomplete, human-readable list of documentation)\r\n- https://schema.org/docs/full.html (human-readable hierarchy view with links to RDFa term descriptions)\r\n- https://schema.org/docs/schema_org_rdfa.html (RDFa documentation of schema.org vocabulary)\r\n- https://schema.org/version/3.4/schema.rdf (RDF/XML documentation of schema.org vocabulary)\r\n- https://schema.org/docs/schemaorg.owl (OWL documentation of schema.org vocabulary)\r\n\r\nThe latter 3 illustrations listed are all machine-actionable and provide (for example) domain and range information for each schema.org property, as well as sub-class relationships for schema.org Classes. \r\n\r\nGiven the variety of ways that semantics are documented today, if `@documentation` were adopted for 1.1, my suggestion would be to avoid over-specifying what precisely the URL value links to - in other words I would define this new key such that any of the above 5 illustrations would be allowable values for `@documentation`. We probably also would need to agree (or not) that the value of `@documentation` is unary (no arrays of URLs) and would need to identify any other constraints on its value.  \r\n\r\nNote, credit to @azaroth42 for suggesting `@documentation` in the course of issue #32 discussion, and please note that this issue is being raised concurrently with 2 or 3 other approaches, as an outgrowth of the decision to close issue #32.  " .
<https://api.github.com/repos/w3c/json-ld-syntax> <http://example.com/ns#issue> <https://api.github.com/repos/w3c/json-ld-syntax/issues/37> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/37> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/37"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/37> <http://schema.org/identifier> "37"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/37> <http://schema.org/name> "Consider obsoleting use of blank nodes for properties and \"generalized RDF\"" .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/37> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/needs%20discussion> <http://schema.org/name> "needs discussion" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/needs%20discussion> <http://schema.org/color> "c5def5" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/needs%20discussion> <http://schema.org/description> "" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/37> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/needs%20discussion> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/satisfied> <http://schema.org/name> "satisfied" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/satisfied> <http://schema.org/color> "4be23b" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/satisfied> <http://schema.org/description> "Requirement Satisfied" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/37> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/satisfied> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:editorial> <http://schema.org/name> "spec:editorial" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:editorial> <http://schema.org/color> "58820a" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:editorial> <http://schema.org/description> "" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/37> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:editorial> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/37> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/37> <http://schema.org/startDate> "2018-07-25T23:43:32Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/37> <http://schema.org/endDate> "2019-08-09T21:22:47Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/37> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/37> <http://schema.org/description> "This is one of the major things that makes JSON-LD out of step with the RDF data model, and it's not clear if the feature is used or valuable. IIRC, the original issue was making it easy to support mapping ad-hoc JSON structures without creating IRIs, but the use of `@vocab`, and document-relative IRIs for properties would seem to obviate the need for this.\r\n\r\nThis would likely prohibit the direct use of blank node identifiers in the property position, as well as the mapping of terms to blank node identifiers.\r\n\r\nDownsides: another area of potential incompatibility with JSON-LD 1.0. A backwards-compatible solution would be to preserve the feature, but mark it archaic. This might cause warnings to be generated if encountered with a processor running in 1.1 mode." .
<https://api.github.com/repos/w3c/json-ld-syntax> <http://example.com/ns#issue> <https://api.github.com/repos/w3c/json-ld-syntax/issues/36> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/36> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/36"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/36> <http://schema.org/identifier> "36"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/36> <http://schema.org/name> "Support recursive @list usage" .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/36> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/satisfied> <http://schema.org/name> "satisfied" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/satisfied> <http://schema.org/color> "4be23b" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/satisfied> <http://schema.org/description> "Requirement Satisfied" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/36> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/satisfied> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:enhancement> <http://schema.org/name> "spec:enhancement" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:enhancement> <http://schema.org/color> "c11537" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:enhancement> <http://schema.org/description> "" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/36> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:enhancement> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/36> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/36> <http://example.com/ns#assignee> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/36> <http://schema.org/startDate> "2018-07-25T23:33:45Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/36> <http://schema.org/endDate> "2018-08-11T21:49:28Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/36> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/36> <http://schema.org/description> "From [Should we support lists of lists?](https://github.com/json-ld/json-ld.org/issues/52)\r\n\r\nWe did not support recursive RDF lists in 1.0 due to perceived complexity and lack of a use case. Since then there are numerous use cases that can make use of recursive lists in JSON-LD, and it goes further towards full idiomatic support of RDF 1.1 in JSON-LD.\r\n\r\nChanges to the syntax document are minimal, there are substantial API implications." .
<https://api.github.com/repos/w3c/json-ld-syntax> <http://example.com/ns#issue> <https://api.github.com/repos/w3c/json-ld-syntax/issues/34> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/34> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/34"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/34> <http://schema.org/identifier> "34"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/34> <http://schema.org/name> "@type as @container:@set?" .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/34> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/satisfied> <http://schema.org/name> "satisfied" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/satisfied> <http://schema.org/color> "4be23b" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/satisfied> <http://schema.org/description> "Requirement Satisfied" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/34> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/satisfied> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:editorial> <http://schema.org/name> "spec:editorial" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:editorial> <http://schema.org/color> "58820a" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:editorial> <http://schema.org/description> "" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/34> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:editorial> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/test:needs%20tests> <http://schema.org/name> "test:needs tests" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/test:needs%20tests> <http://schema.org/color> "e587ca" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/test:needs%20tests> <http://schema.org/description> "" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/34> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/test:needs%20tests> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/34> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/34> <http://example.com/ns#assignee> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/34> <http://schema.org/startDate> "2018-07-08T21:36:11Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/34> <http://schema.org/endDate> "2018-10-03T17:30:13Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/34> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/34> <http://schema.org/description> "The purpose of the `@container:@set` functionality (AFAIU) is to ensure that the output is consistent in shape. Thus if there can ever be multiple values, the structure is always an array.\r\n\r\nThere are two situations in which this functionality could be desirable but is currently not possible:\r\n\r\n1.  `@type` As it's a keyword, we can only alias it (e.g. as `type`) but not define it to have `@container:@set` functionality. Meaning that there's a gotcha waiting to happen for ontologies that require or use multiple classes for a single resource instance. See [playground](https://json-ld.org/playground/#startTab=tab-compacted&json-ld=%7B%22%40context%22%3A%7B%22cls%22%3A%7B%22%40id%22%3A%22http%3A%2F%2Fexample.org%2Fclass%22%7D%2C%22type%22%3A%7B%22%40id%22%3A%22%40type%22%2C%22%40container%22%3A%22%40set%22%7D%7D%2C%22%40id%22%3A%22foo%22%2C%22type%22%3A%22cls%22%7D&context=%7B%22%40context%22%3A%7B%22cls%22%3A%7B%22%40id%22%3A%22http%3A%2F%2Fexample.org%2Fclass%22%7D%2C%22type%22%3A%7B%22%40id%22%3A%22%40type%22%2C%22%40container%22%3A%22%40set%22%7D%7D%7D)\r\n2.  `@context` Less useful, but `@context` will also compact to a single string/object when there might be multiple contexts.  See [playground](https://json-ld.org/playground/#startTab=tab-compacted&copyContext=true&json-ld=%7B%22%40context%22%3A%5B%7B%22cls%22%3A%7B%22%40id%22%3A%22http%3A%2F%2Fexample.org%2Fclass%22%7D%2C%22type%22%3A%7B%22%40id%22%3A%22%40type%22%2C%22%40container%22%3A%22%40set%22%7D%7D%5D%2C%22%40id%22%3A%22foo%22%2C%22type%22%3A%22cls%22%7D)\r\n\r\n`@context` modifying itself seems particularly strange, but the inconsistency for `@type` seems solvable if the restrictions in its definition were loosened?\r\n\r\nOriginal issue [@type as @container:@set? #512](https://github.com/json-ld/json-ld.org/issues/512).\r\n\r\n(Edit: Note that the playground links demonstrate that these do not work as one might expect, due to the keyword definitions of @type and @context)" .
<https://api.github.com/repos/w3c/json-ld-syntax> <http://example.com/ns#issue> <https://api.github.com/repos/w3c/json-ld-syntax/issues/32> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/32> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/32"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/32> <http://schema.org/identifier> "32"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/32> <http://schema.org/name> "Is there a way to define additional metadata in JSON-LD @context?" .
<https://api.github.com/users/jechterhoff> <http://schema.org/accountId> "jechterhoff" .
<https://api.github.com/users/jechterhoff> <http://schema.org/image> "https://avatars2.githubusercontent.com/u/4831647?v=4" .
<https://api.github.com/users/jechterhoff> <http://schema.org/url> "https://github.com/jechterhoff"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/jechterhoff> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/32> <http://schema.org/creator> <https://api.github.com/users/jechterhoff> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:duplicate> <http://schema.org/name> "spec:duplicate" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:duplicate> <http://schema.org/color> "e0082c" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:duplicate> <http://schema.org/description> "" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/32> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:duplicate> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:enhancement> <http://schema.org/name> "spec:enhancement" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:enhancement> <http://schema.org/color> "c11537" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:enhancement> <http://schema.org/description> "" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/32> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:enhancement> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:wontfix> <http://schema.org/name> "spec:wontfix" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:wontfix> <http://schema.org/color> "2bafa2" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:wontfix> <http://schema.org/description> "" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/32> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:wontfix> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/32> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/32> <http://schema.org/startDate> "2018-07-05T13:54:00Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/32> <http://schema.org/endDate> "2018-08-04T17:20:16Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/32> <http://example.com/ns#authorAssociation> "NONE" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/32> <http://schema.org/description> "Hello,\r\nI'm currently analysing JSON-LD 1.1 (reviewed the [Final Community Group Report](https://www.w3.org/2018/jsonld-cg-reports/json-ld)) with the goal of semantically enabling JSON data. Is there a way to define additional metadata in a JSON-LD context?\r\n\r\n(I hope it is ok to ask this question here. If I should ask somewhere else, for example the mailing list, let me know, please.)\r\n\r\nLet me explain what I mean with an example:\r\n```json\r\n{\r\n \"@context\": {\r\n  \"@base\": \"http://example.org/baumregister/\",\r\n  \"@version\": 1.1,\r\n  \"xsd\": \"http://www.w3.org/2001/XMLSchema#\",\r\n  \"geosparql\": \"http://www.opengis.net/ont/geosparql#\",\r\n  \"ex\": \"http://example.org/ontology/flora/\",\r\n  \"ort\": \"geosparql:hasGeometry\",\r\n  \"wkt\": {\r\n   \"@id\": \"geosparql:asWKT\",\r\n   \"@type\": \"geosparql:wktLiteral\"\r\n  },\r\n  \"eid\": \"@id\",\r\n  \"art\": \"@type\",\r\n  \"Eiche\": \"ex:oak\",\r\n  \"Walnuss\": \"ex:walnut\",\r\n  \"hoehe\": {   \r\n   \"@id\": \"ex:height\",\r\n   \"@type\": \"xsd:double\",\r\n   \"@derivedBy\": \"A specific description ...\",\r\n   \"uom\": \"m\"\r\n  },\r\n  \"alter\": {\r\n   \"@id\": \"ex:age\",\r\n   \"@type\": \"xsd:integer\"\r\n  }\r\n },\r\n \"art\": \"Eiche\",\r\n \"hoehe\": \"16\",\r\n \"eid\": \"08218adf-7947-4f28-bcaf-e069ef43e012\",\r\n \"alter\": 242,\r\n \"ort\": {\"wkt\": \"POINT(8.191035,51.899666)\"}\r\n}\r\n```\r\n\r\nIn this example, the key \"hoehe\" expands to the IRI http://example.org/ontology/flora/height. In addition, the value type is defined as http://www.w3.org/2001/XMLSchema#double. \r\n\r\nIn the example, I've added two keys as metadata to the definition of term \"hoehe\": \r\n\r\n* \"@derivedBy\" - The value is supposed to contain a textual description. I used the leading \"@\" on purpose for testing. \r\n* \"uom\" - An indication of the unit of measure for \"hoehe\".\r\n\r\nWhen I test this on the [JSON-LD dev playground](https://json-ld.org/playground-dev/) (a great tool, by the way - so helpful!), I get the following syntax errors:\r\n\r\n* For \"@derivedBy\": Invalid JSON-LD syntax; a term definition must not contain @derivedBy\r\n* For \"uom\": Invalid JSON-LD syntax; a term definition must not contain uom\r\n\r\nWhen the two keys are removed, the example \"works\".\r\nIn the JSON-LD 1.1 specification I find the following: \r\n\r\n> An expanded term definition MUST be a JSON object composed of zero or more keys from @id, @reverse, @type, @language, @context, @prefix, or @container. An expanded term definition SHOULD NOT contain any other keys.\r\n\r\nApparently I should not use the two additional keys, but they do not appear to be explicitly forbidden either. Now I am wondering if the dev playground is too strict or not. Can someone please enlighten me as to where in a JSON-LD context I can add custom keys - if at all - and what restrictions, if any, I need to be aware of? Any additional insight would be highly appreciated.\r\n\r\nI did come across the following two issues, which may be related to my question:\r\n\r\n* [Warn or error if non-keyword strings having \"@\" are encountered](https://github.com/w3c/json-ld-syntax/issues/16)\r\n* [Reserved keywords](https://github.com/json-ld/json-ld.org/issues/88)" .
<https://api.github.com/repos/w3c/json-ld-syntax> <http://example.com/ns#issue> <https://api.github.com/repos/w3c/json-ld-syntax/issues/23> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/23> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/23"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/23> <http://schema.org/identifier> "23"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/23> <http://schema.org/name> "What is 'base' for an embedded json-ld?" .
<https://api.github.com/users/iherman> <http://schema.org/accountId> "iherman" .
<https://api.github.com/users/iherman> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/520723?v=4" .
<https://api.github.com/users/iherman> <http://schema.org/url> "https://github.com/iherman"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/iherman> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/23> <http://schema.org/creator> <https://api.github.com/users/iherman> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/satisfied> <http://schema.org/name> "satisfied" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/satisfied> <http://schema.org/color> "4be23b" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/satisfied> <http://schema.org/description> "Requirement Satisfied" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/23> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/satisfied> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:enhancement> <http://schema.org/name> "spec:enhancement" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:enhancement> <http://schema.org/color> "c11537" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:enhancement> <http://schema.org/description> "" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/23> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:enhancement> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/23> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/23> <http://schema.org/startDate> "2018-07-01T04:50:55Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/23> <http://schema.org/endDate> "2018-11-16T19:03:29Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/23> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/23> <http://schema.org/description> "The definition of the [embedded JSON-LD](https://w3c.github.io/json-ld-syntax/#embedding-json-ld-in-html-documents) does not specify what the 'base' for that JSON-LD must be. It should specify it.\r\n\r\n(cf #22)" .
<https://api.github.com/repos/w3c/json-ld-syntax> <http://example.com/ns#issue> <https://api.github.com/repos/w3c/json-ld-syntax/issues/22> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/22> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/22"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/22> <http://schema.org/identifier> "22"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/22> <http://schema.org/name> "Normativeness of the embedded form of JSON-LD" .
<https://api.github.com/users/iherman> <http://schema.org/accountId> "iherman" .
<https://api.github.com/users/iherman> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/520723?v=4" .
<https://api.github.com/users/iherman> <http://schema.org/url> "https://github.com/iherman"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/iherman> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/22> <http://schema.org/creator> <https://api.github.com/users/iherman> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:duplicate> <http://schema.org/name> "spec:duplicate" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:duplicate> <http://schema.org/color> "e0082c" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:duplicate> <http://schema.org/description> "" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/22> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:duplicate> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:enhancement> <http://schema.org/name> "spec:enhancement" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:enhancement> <http://schema.org/color> "c11537" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:enhancement> <http://schema.org/description> "" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/22> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:enhancement> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/22> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/22> <http://schema.org/startDate> "2018-07-01T04:47:53Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/22> <http://schema.org/endDate> "2018-08-27T16:03:47Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/22> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/22> <http://schema.org/description> "Section [4.28](https://w3c.github.io/json-ld-syntax/#embedding-json-ld-in-html-documents) of the draft defines JSON-LD embedded in HTML via the `script` tag. However, the section is marked as 'non-normative'.\r\n\r\nIn view of the importance of that format (e.g., this is the main format accepted by schema.org processors these days) we should consider giving it a normative status." .
<https://api.github.com/repos/w3c/json-ld-syntax> <http://example.com/ns#issue> <https://api.github.com/repos/w3c/json-ld-syntax/issues/20> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/20> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/20"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/20> <http://schema.org/identifier> "20"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/20> <http://schema.org/name> "Introduce concept of \"sealed” contexts" .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/20> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/propose%20closing> <http://schema.org/name> "propose closing" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/propose%20closing> <http://schema.org/color> "bf5315" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/propose%20closing> <http://schema.org/description> "" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/20> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/propose%20closing> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/satisfied> <http://schema.org/name> "satisfied" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/satisfied> <http://schema.org/color> "4be23b" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/satisfied> <http://schema.org/description> "Requirement Satisfied" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/20> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/satisfied> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:enhancement> <http://schema.org/name> "spec:enhancement" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:enhancement> <http://schema.org/color> "c11537" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:enhancement> <http://schema.org/description> "" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/20> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:enhancement> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/20> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/20> <http://schema.org/startDate> "2018-06-30T16:31:51Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/20> <http://schema.org/endDate> "2019-02-26T04:15:00Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/20> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/20> <http://schema.org/description> "A number of standards track specifications use JSON-LD for extensibility but intentionally place limitations on overriding the terms defined in a core context. For example:\r\n\r\n> Implementations may augment the provided @context with additional @context definitions but must not override or change the normative context.\r\n\r\nhttps://www.w3.org/TR/activitystreams-core/#jsonld\r\n\r\n> Implementations MUST produce an error when an extension JSON-LD Context overrides the expanded URL for a term specified in the base JSON-LD Context (https://w3id.org/credentials/v1). To avoid the possibility of accidentally overriding terms, developers are urged to scope their extensions.\r\n\r\nhttps://w3c.github.io/vc-data-model/#extensibility\r\n\r\nIt seems like it would be a nice feature to allow enforcement of this desire by JSON-LD processors. Then authors could be assured that the interpretation of a context would be proper and properly implemented JSON-LD processors would throw errors if rules were violated.\r\n\r\nIn short, I propose we add a keyword with boolean value such as `\"@sealed\": true` (that could appear in contexts) to JSON-LD 1.1 that enables processors to enforce a desire to prevent defined terms from being redefined in subsequent contexts, but allows for new terms (aka extensions) to be defined.\r\n\r\nOriginal issue: [Introduce concept of \"sealed\" contexts #656](https://github.com/json-ld/json-ld.org/issues/656)\r\n" .
<https://api.github.com/repos/w3c/json-ld-syntax> <http://example.com/ns#issue> <https://api.github.com/repos/w3c/json-ld-syntax/issues/19> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/19> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/19"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/19> <http://schema.org/identifier> "19"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/19> <http://schema.org/name> "Indexing without a predicate" .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/19> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/propose%20closing> <http://schema.org/name> "propose closing" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/propose%20closing> <http://schema.org/color> "bf5315" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/propose%20closing> <http://schema.org/description> "" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/19> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/propose%20closing> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/satisfied> <http://schema.org/name> "satisfied" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/satisfied> <http://schema.org/color> "4be23b" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/satisfied> <http://schema.org/description> "Requirement Satisfied" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/19> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/satisfied> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:enhancement> <http://schema.org/name> "spec:enhancement" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:enhancement> <http://schema.org/color> "c11537" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:enhancement> <http://schema.org/description> "" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/19> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:enhancement> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:substantive> <http://schema.org/name> "spec:substantive" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:substantive> <http://schema.org/color> "cff9a4" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:substantive> <http://schema.org/description> "" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/19> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:substantive> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/19> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/users/workergnome> <http://schema.org/accountId> "workergnome" .
<https://api.github.com/users/workergnome> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/34536?v=4" .
<https://api.github.com/users/workergnome> <http://schema.org/url> "https://github.com/workergnome"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/workergnome> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/19> <http://example.com/ns#assignee> <https://api.github.com/users/workergnome> .
<https://api.github.com/users/azaroth42> <http://schema.org/accountId> "azaroth42" .
<https://api.github.com/users/azaroth42> <http://schema.org/image> "https://avatars3.githubusercontent.com/u/871868?v=4" .
<https://api.github.com/users/azaroth42> <http://schema.org/url> "https://github.com/azaroth42"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/azaroth42> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/19> <http://example.com/ns#assignee> <https://api.github.com/users/azaroth42> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/19> <http://schema.org/startDate> "2018-06-30T16:31:09Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/19> <http://schema.org/endDate> "2019-08-02T18:43:35Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/19> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/19> <http://schema.org/description> "For consideration by the JSON-LD 1.1 WG...\r\n\r\nAssuming a nested set of resources where leaf nodes are frequently repeated, it is difficult to find the definition of the node after compaction.  Imagine a classification that is used on the second item in a list, and again on the 26th.  It would be nice to have a place to look up the label for the classification, instead of repeating it on both 2 and 26.  Similarly, information about repeated people, services, or anything else could benefit from this pattern.\r\n\r\nAs prior art, and use case for inclusion, [JSON API](http://jsonapi.org/format/#document-top-level) has the notion of \"included\" -- a slot where you can put resources that are included in others, such that developers can always know where to find them.  In my work, this has come up with repeated services in IIIF, and classifications, people and places when describing the cultural heritage objects they relate to.\r\n\r\nThe identifier map pattern is already in this space, but insufficient as it requires a predicate to map to, and the relationship is to a resource somewhere nested in the data structure, not the top level resource. There would also need to be framing support as an extension to `@embed:@never` such that the inclusions were not embedded in the object data, but with a pointer to where they should go.\r\n\r\nExample data:\r\n\r\n```\r\n{\r\n  \"id\": \"1\",\r\n  \"type\": \"eg:Thing-with-Items\",\r\n  \"eg:items\": [\r\n    {\r\n      \"id\":\"2\",\r\n      \"classification\": \"enum:c6\",\r\n      \"service\": \"enum:s2\",\r\n    },\r\n    { \"id\": \"3...26 go here\", \"type\": \"eg:X\"}, \r\n    {\r\n      \"id\": \"27\",\r\n      \"classification\": \"enum:c6\"\r\n    }    \r\n  ],\r\n  \"included\": {\r\n    \"enum:c6\": {\"type\": \"eg:Type\", \"label\": \"Classification 6\"},\r\n    \"enum:p1\": {\"type\": \"eg:Person\", \"label\": \"Person 1\"},\r\n    \"enum:s2\": {\"type\": \"eg:Service\", \"label\": \"Login Service\"}\r\n  }  \r\n}\r\n```\r\n\r\nPlayground example with identifier map:  http://tinyurl.com/yd5z87xg\r\n\r\nThe inclusion term could either be a new keyword like `@id` (`@included` or `@inclusions`) that was then re-aliased in the context (to, e.g. `included`), or it could be a new keyword value for `@container` (`included: {@container: @included}`).  I think the former is the (slightly) better design, as it makes it more obviously a field rather than a data structure. It would only be usable in a resource that is not nested within other resources (e.g. the top level JSON object ... which might be in an array or @graph). Framing could then use the same keyword: `@embed: @included`.\r\n\r\nOriginal issue: [Indexing without a predicate #650](https://github.com/json-ld/json-ld.org/issues/650)\r\n" .
<https://api.github.com/repos/w3c/json-ld-syntax> <http://example.com/ns#issue> <https://api.github.com/repos/w3c/json-ld-syntax/issues/18> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/18> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/18"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/18> <http://schema.org/identifier> "18"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/18> <http://schema.org/name> "The absence of being" .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/18> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/out%20of%20scope:%20transformation> <http://schema.org/name> "out of scope: transformation" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/out%20of%20scope:%20transformation> <http://schema.org/color> "000000" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/out%20of%20scope:%20transformation> <http://schema.org/description> "" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/18> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/out%20of%20scope:%20transformation> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/propose%20closing> <http://schema.org/name> "propose closing" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/propose%20closing> <http://schema.org/color> "bf5315" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/propose%20closing> <http://schema.org/description> "" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/18> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/propose%20closing> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:enhancement> <http://schema.org/name> "spec:enhancement" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:enhancement> <http://schema.org/color> "c11537" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:enhancement> <http://schema.org/description> "" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/18> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:enhancement> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:wontfix> <http://schema.org/name> "spec:wontfix" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:wontfix> <http://schema.org/color> "2bafa2" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:wontfix> <http://schema.org/description> "" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/18> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:wontfix> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/18> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/18> <http://schema.org/startDate> "2018-06-30T16:30:33Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/18> <http://schema.org/endDate> "2018-10-18T22:10:51Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/18> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/18> <http://schema.org/description> "### A standard model of emptiness\r\n\r\nIn summary, it would be useful if JSON-LD recognized the quantum duality of the empty list, in that it can be both value (`rdf:nil`) and list (`[]`). I would propose:\r\n\r\n* Expansion standardizes what it does with empty lists whatever the form of the input. For consistency, `rdf:nil` might be best.\r\n* Framing adapts to the needs of the frame. My current half-baked thought would be if i say `\"hasValue\": {}` in my frame, and the input is `\"hasValue\": \"rdf:nil\"`, output would be a contextualized `rdf:nil`, unless `\"hasValue\": {\"@container\": \"@list\"}`, in which case output would be `[]`. I realize this likely brings up other issues.\r\n\r\nFinally, it would be good if the working group, once established, were to re-examine the definition of `@null` in the spec, or at least clarifies its relationship to RDF, and `rdf:nil` in particular. Currently, `rdf:nil` is not the same as `@null`, and framing treats `@null` as `null` in the output JSON, which is swallowed by at least Java deserializers, so just takes up space, and emptiness should never take up space. I touched on the this in [issue 641](https://github.com/json-ld/json-ld.org/issues/641): it would be better if a property were only set to `@null` if it actually meant something.\r\n\r\nOriginal issue [The absence of being #648](https://github.com/json-ld/json-ld.org/issues/648)\r\n" .
<https://api.github.com/repos/w3c/json-ld-syntax> <http://example.com/ns#issue> <https://api.github.com/repos/w3c/json-ld-syntax/issues/16> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/16> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/16"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/16> <http://schema.org/identifier> "16"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/16> <http://schema.org/name> "Warn or error if non-keyword strings having \"@\" are encountered" .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/16> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/satisfied> <http://schema.org/name> "satisfied" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/satisfied> <http://schema.org/color> "4be23b" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/satisfied> <http://schema.org/description> "Requirement Satisfied" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/16> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/satisfied> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:editorial> <http://schema.org/name> "spec:editorial" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:editorial> <http://schema.org/color> "58820a" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:editorial> <http://schema.org/description> "" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/16> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:editorial> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/16> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#OpenIssue> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/16> <http://schema.org/startDate> "2018-06-30T16:28:43Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/16> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/16> <http://schema.org/description> "Looking at a [schema.org example for ItemList](http://schema.org/ItemList#ItemList-gen-306), there is a JSON-LD example which includes the fictitious `@url` keyword, where they likely meant `@id`.\r\n\r\n```jsonld\r\n{\r\n  \"@context\": \"http://schema.org\",\r\n  \"@type\": \"ItemList\",\r\n  \"@url\": \"http://en.wikipedia.org/wiki/Billboard_200\",\r\n  \"name\": \"Top music artists\",\r\n  \"description\": \"The artists with the most cumulative weeks at number one according to Billboard 200\",\r\n  \"itemListElement\": [\r\n    {\r\n      \"@type\": \"ListItem\",\r\n      \"position\": 1,\r\n      \"item\": {\r\n        \"@type\": \"MusicGroup\",\r\n        \"name\": \"Beatles\"\r\n      }\r\n    },\r\n    {\r\n      \"@type\": \"ListItem\",\r\n      \"position\": 2,\r\n      \"item\": {\r\n        \"@type\": \"MusicGroup\",\r\n        \"name\": \"Elvis Presley\"\r\n      }\r\n    },\r\n    {\r\n      \"@type\": \"ListItem\",\r\n      \"position\": 3,\r\n      \"item\": {\r\n        \"@type\": \"MusicGroup\",\r\n        \"name\": \"Michael Jackson\"\r\n      }\r\n    },\r\n    {\r\n      \"@type\": \"ListItem\",\r\n      \"position\": 3,\r\n      \"item\": {\r\n        \"@type\": \"MusicGroup\",\r\n        \"name\": \"Garth Brooks\"\r\n      }\r\n    }\r\n  ]\r\n}\r\n```\r\n\r\nThere's nothing to signal an issue, and a JSON-LD processor will happily resolve this relative to `@vocab` as `http://schema.org/@url`. This creates a potential forward-compatibility issue if new keywords are introduced, as they are in 1.1. We might want to describe normative or suggested behavior if a processor encounters a string which could hold a keyword, but holds something else starting with `@`.\r\n\r\ncc/ @danbri\r\n\r\nOriginal issue: [Warn or error if non-keyword strings having \"@\" are encountered #598](https://github.com/json-ld/json-ld.org/issues/598)\r\n" .
<https://api.github.com/repos/w3c/json-ld-syntax> <http://example.com/ns#issue> <https://api.github.com/repos/w3c/json-ld-syntax/issues/14> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/14> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/14"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/14> <http://schema.org/identifier> "14"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/14> <http://schema.org/name> "\"Lax” IRIs" .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/14> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/propose%20closing> <http://schema.org/name> "propose closing" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/propose%20closing> <http://schema.org/color> "bf5315" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/propose%20closing> <http://schema.org/description> "" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/14> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/propose%20closing> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:wontfix> <http://schema.org/name> "spec:wontfix" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:wontfix> <http://schema.org/color> "2bafa2" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:wontfix> <http://schema.org/description> "" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/14> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:wontfix> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/14> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/14> <http://schema.org/startDate> "2018-06-30T16:26:55Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/14> <http://schema.org/endDate> "2018-07-30T20:28:24Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/14> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/14> <http://schema.org/description> "Allows arbitrary strings to be used as IRIs\r\n\r\nOriginal issue: [\"Lax\" IRIs #590](https://github.com/json-ld/json-ld.org/issues/590)\r\n" .
<https://api.github.com/repos/w3c/json-ld-syntax> <http://example.com/ns#issue> <https://api.github.com/repos/w3c/json-ld-syntax/issues/13> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/13> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/13"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/13> <http://schema.org/identifier> "13"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/13> <http://schema.org/name> "Allow @value, @language and @type simultaneously" .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/13> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:enhancement> <http://schema.org/name> "spec:enhancement" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:enhancement> <http://schema.org/color> "c11537" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:enhancement> <http://schema.org/description> "" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/13> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:enhancement> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:wontfix> <http://schema.org/name> "spec:wontfix" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:wontfix> <http://schema.org/color> "2bafa2" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:wontfix> <http://schema.org/description> "" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/13> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:wontfix> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/13> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/13> <http://schema.org/startDate> "2018-06-30T16:26:10Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/13> <http://schema.org/endDate> "2018-08-04T17:14:50Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/13> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/13> <http://schema.org/description> "It is currently not possible to have all three of `@value`, `@language` and `@type`.  Meaning that for text with embedded mark up, it is impossible to have both language and format (the datatype given in `@type`) ... neither of which can be reliably introspected from the value.\r\n\r\nAny time there is markdown, html, xml, json, yaml, latex, or any other formatting instructions beyond simply print the string to the user, this becomes extremely valuable. Given the usage of those formats on the web, it would enable appropriate management of internationalized texts.\r\n\r\nExample:\r\n```\r\n{\r\n  \"description\": {\r\n    \"@value\":\"<p>Some <b>description</b></p>\",\r\n    \"@type\": \"rdf:XMLLiteral\",\r\n    \"@language\" : \"en-latn\"\r\n  }\r\n}\r\n```\r\n\r\nReference: https://lists.w3.org/Archives/Public/public-linked-json/2014Aug/0031.html\r\nDoor-Opened-By: https://github.com/json-ld/json-ld.org/issues/583\r\n\r\nOriginal issue: [Allow @value, @language and @type simultaneously #585](https://github.com/json-ld/json-ld.org/issues/585)\r\n" .
<https://api.github.com/repos/w3c/json-ld-syntax> <http://example.com/ns#issue> <https://api.github.com/repos/w3c/json-ld-syntax/issues/11> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/11> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/11"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/11> <http://schema.org/identifier> "11"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/11> <http://schema.org/name> "Introducing @dir" .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/11> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/i18n-tracker> <http://schema.org/name> "i18n-tracker" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/i18n-tracker> <http://schema.org/color> "F9C9FF" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/i18n-tracker> <http://schema.org/description> "Group bringing to attention of Internationalization, or tracked by i18n but not needing response." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/11> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/i18n-tracker> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/propose%20closing> <http://schema.org/name> "propose closing" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/propose%20closing> <http://schema.org/color> "bf5315" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/propose%20closing> <http://schema.org/description> "" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/11> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/propose%20closing> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/satisfied> <http://schema.org/name> "satisfied" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/satisfied> <http://schema.org/color> "4be23b" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/satisfied> <http://schema.org/description> "Requirement Satisfied" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/11> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/satisfied> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:enhancement> <http://schema.org/name> "spec:enhancement" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:enhancement> <http://schema.org/color> "c11537" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:enhancement> <http://schema.org/description> "" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/11> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:enhancement> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/11> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#OpenIssue> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/11> <http://schema.org/startDate> "2018-06-30T16:23:41Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/11> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/11> <http://schema.org/description> "In some situations it is important/necessary to include the base direction of a text, alongside its language; see the [“Requirements for Language and Direction Metadata in Data Formats”](https://w3c.github.io/string-meta/) for further details. In practice, in a vanilla JSON, it would require something like:\r\n\r\n\r\n  ```\r\n  \"title\": [ { \"value\": \"Moby Dick\", \"lang\": \"en\" },\r\n	         { \"value\": \"موبي ديك\", \"lang\": \"ar\"  \"dir\": \"rtl\"}\r\n	       ]  \r\n  ```\r\n\r\n  (the example comes from that document).\r\n\r\n  At this moment, I believe the only way you can reasonably express that in JSON-LD is via cheating a bit:\r\n\r\n  ```\r\n  \"title\": [ { \"@value\": \"Moby Dick\", \"@language\": \"en\" },\r\n	         { \"@value\": \"موبي ديك\",  \"@language\": \"ar\"  \"dir\": \"rtl\"}\r\n	       ]  \r\n  ```\r\n\r\n  and making sure that the `dir` term is _not_ defined in the relevant `@context` so that, when generating the RDF output, that term is simply ignored. But that also means that there is no round-tripping, that term will disappear after expansion.\r\n\r\n  The difficulty lies in the RDF layer, in fact; RDF does not have any means (alas!) to express text direction. On the other hand, this missing feature is a general I18N problem whenever JSON-LD is used (there were issues when developing the Web Annotation Model, these issues are popping up in the Web Publication work, etc.).\r\n\r\n  Here is what I would propose as a non-complete solution\r\n\r\n  1. Let us introduce a `@dir` term, alongside `@language`. This means this term can be used in place of `dir` above, ie, it is a bona-fide part of a string representation, and would therefore be kept in the compaction/expansion steps, can also be used for framing.\r\n  2. In JSON-LD 1.1, `@dir` is _ignored_ when transforming into RDF. I.e., only the language tag would be used.\r\n  3. We _may_ initiate some work in the RDF community to solve this issue. There may be several ways, each of them require the RDF community to chime in\r\n  	3.1. Define a mechanism of \"parametrized\" standard datatypes that represent a (language,direction) pair. One would then get something like`[] ex:title \"موبي ديك\"^^rdf:internationalText(ar,rtl) ;`\r\n  	3.2. Go for a \"generalized\" RDF where strings can also appear as subjects (that has been a matter of dispute for a long time...). That would give the possibility to add such attribute to texts like directions\r\n  	3.3. Some other mechanisms that I cannot think about\r\n  4. In a future JSON-LD 1.* the `@dir` value can be properly mapped onto an RDF representing the right choices (if such choices are worked out)\r\n\r\nOriginal issue [Introducing @dir ? #583](https://github.com/json-ld/json-ld.org/issues/583)\r\n" .
<https://api.github.com/repos/w3c/json-ld-syntax> <http://example.com/ns#issue> <https://api.github.com/repos/w3c/json-ld-syntax/issues/10> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/10> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/10"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/10> <http://schema.org/identifier> "10"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/10> <http://schema.org/name> "Use version 2.0 instead of 1.1 " .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/10> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/propose%20closing> <http://schema.org/name> "propose closing" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/propose%20closing> <http://schema.org/color> "bf5315" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/propose%20closing> <http://schema.org/description> "" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/10> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/propose%20closing> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:wontfix> <http://schema.org/name> "spec:wontfix" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:wontfix> <http://schema.org/color> "2bafa2" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:wontfix> <http://schema.org/description> "" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/10> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:wontfix> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/10> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/10> <http://schema.org/startDate> "2018-06-30T16:21:36Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/10> <http://schema.org/endDate> "2018-07-30T20:29:19Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/10> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/10> <http://schema.org/description> "[Comments at TPAC](https://json-ld.org/minutes/2017-11-08/) suggested that as our work is a breaking change (causing 1.0 processors that are not 1.1 compatible to intentionally break when they see `\"@version\": 1.1`), [semantic versioning](http://semver.org) would suggest that we use a major release number, rather than a minor number.\r\n\r\nOriginal issue is [Use version 2.0 instead of 1.1 #548](https://github.com/json-ld/json-ld.org/issues/548)\r\n" .
<https://api.github.com/repos/w3c/json-ld-syntax> <http://example.com/ns#issue> <https://api.github.com/repos/w3c/json-ld-syntax/issues/9> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/9> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/9"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/9> <http://schema.org/identifier> "9"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/9> <http://schema.org/name> "Content addressable contexts" .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/9> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/propose%20closing> <http://schema.org/name> "propose closing" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/propose%20closing> <http://schema.org/color> "bf5315" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/propose%20closing> <http://schema.org/description> "" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/9> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/propose%20closing> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/satisfied> <http://schema.org/name> "satisfied" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/satisfied> <http://schema.org/color> "4be23b" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/satisfied> <http://schema.org/description> "Requirement Satisfied" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/9> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/satisfied> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/9> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/9> <http://schema.org/startDate> "2018-06-30T16:20:41Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/9> <http://schema.org/endDate> "2019-07-12T17:03:37Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/9> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/9> <http://schema.org/description> "Provide a means for refering to a remote context without without requiring it to be downloaded\r\n* HTML scribe integrity?\r\n* IPFS\r\n* `duri` or `tdb` schemes\r\n* “frozen” contexts\r\n\r\nOriginal issue [Content addressable contexts #547](https://github.com/json-ld/json-ld.org/issues/547)\r\n" .
<https://api.github.com/repos/w3c/json-ld-syntax> <http://example.com/ns#issue> <https://api.github.com/repos/w3c/json-ld-syntax/issues/8> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/8> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/8"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/8> <http://schema.org/identifier> "8"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/8> <http://schema.org/name> "HTTP parameters for specifying context or frame" .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/8> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/satisfied> <http://schema.org/name> "satisfied" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/satisfied> <http://schema.org/color> "4be23b" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/satisfied> <http://schema.org/description> "Requirement Satisfied" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/8> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/satisfied> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/security-tracker> <http://schema.org/name> "security-tracker" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/security-tracker> <http://schema.org/color> "ffff00" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/security-tracker> <http://schema.org/description> "Group bringing to attention of security, or tracked by the security Group but not needing response." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/8> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/security-tracker> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:enhancement> <http://schema.org/name> "spec:enhancement" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:enhancement> <http://schema.org/color> "c11537" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:enhancement> <http://schema.org/description> "" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/8> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:enhancement> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:substantive> <http://schema.org/name> "spec:substantive" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:substantive> <http://schema.org/color> "cff9a4" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:substantive> <http://schema.org/description> "" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/8> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:substantive> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/8> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/8> <http://example.com/ns#assignee> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/8> <http://schema.org/startDate> "2018-06-30T16:19:49Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/8> <http://schema.org/endDate> "2019-01-12T20:36:51Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/8> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/8> <http://schema.org/description> "  When requesting JSON-LD from an HTTP endpoint, it would be useful to provide a reference to a context or frame which should be used by the server to put the results into the proper format.\r\n  * Note that this could be an attack vector on the server, so some provision for white-listing may be in order.\r\n\r\n  Original issue is [JSON-LD 1.1 Feature Request : define how to specify the json-ld profile in a request to a server and include framing as an option #491](https://github.com/json-ld/json-ld.org/issues/491)\r\n" .
<https://api.github.com/repos/w3c/json-ld-syntax> <http://example.com/ns#issue> <https://api.github.com/repos/w3c/json-ld-syntax/issues/7> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/7> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/7"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/7> <http://schema.org/identifier> "7"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/7> <http://schema.org/name> "support @values for describing multidimensional containers" .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/7> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/out%20of%20scope:%20transformation> <http://schema.org/name> "out of scope: transformation" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/out%20of%20scope:%20transformation> <http://schema.org/color> "000000" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/out%20of%20scope:%20transformation> <http://schema.org/description> "" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/7> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/out%20of%20scope:%20transformation> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:substantive> <http://schema.org/name> "spec:substantive" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:substantive> <http://schema.org/color> "cff9a4" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:substantive> <http://schema.org/description> "" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/7> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:substantive> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:wontfix> <http://schema.org/name> "spec:wontfix" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:wontfix> <http://schema.org/color> "2bafa2" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:wontfix> <http://schema.org/description> "" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/7> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:wontfix> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/7> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/7> <http://schema.org/startDate> "2018-06-30T16:18:45Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/7> <http://schema.org/endDate> "2018-09-13T16:56:51Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/7> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/7> <http://schema.org/description> "Allows a term definition to include an `@values` block to describe structured values, such as for GeoJSON\r\n\r\n  ### Example\r\n\r\n  ``` json\r\n  {\r\n    \"@context\": {\r\n       \"coordinates\": {\r\n          \"@id\": \"geojson:coordinates\",\r\n          \"@container\" : \"@list\",\r\n          \"@values\" : { \r\n             \"@type\" : \"geojson:Coordinate\",\r\n             \"@container\" : \"@set\",\r\n             \"@values\" : [\r\n                 {\"@type\" : \"xsd:double\", \"@id\":\"geo:longitude\"},\r\n                 {\"@type\" : \"xsd:double\", \"@id\":\"geo:latitude\"}\r\n             ]\r\n          }\r\n       }\r\n    },\r\n    \"@graph\" : [{\r\n     \"@id\" : \"ex:LineString1\",\r\n      \"coordinates\" : [\r\n            [\r\n              3.1057405471801753,\r\n              51.064216229943476\r\n            ],\r\n            [\r\n              3.1056976318359375,\r\n              51.063434090307574\r\n            ]\r\n      ]\r\n    }]\r\n  }\r\n  ```\r\n\r\n  Would transform to (and vice versa):\r\n\r\n  ``` turtle\r\n  ex:LineString1 geojson:coordinates _:b0 .\r\n  _:b0 rdf:first _:b1 .\r\n  _:b1 a geojson:Coordinate ;\r\n        geo:longitude \"3.105740547180175E0\"^^xsd:double ;\r\n        geo:latitude \"5.106421622994348E1\"^^xsd:double .\r\n  _:b0 rdf:rest _:b2 .\r\n  _:b2 rdf:first a geojson:Coordinate ;\r\n        geo:longitude \"3.1056976318359375\"^^xsd:double ;\r\n        geo:latitude \"51.063434090307574\"^^xsd:double .\r\n  _:b2 rdf:rest rdf:nil .\r\n  ```\r\n\r\nOriginal issue is [JSON-LD 1.1 Feature Request: support @values for describing multidimensional containers (list of lists) #397](https://github.com/json-ld/json-ld.org/issues/397)\r\n" .
<https://api.github.com/repos/w3c/json-ld-syntax> <http://example.com/ns#issue> <https://api.github.com/repos/w3c/json-ld-syntax/issues/6> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/6> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/6"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/6> <http://schema.org/identifier> "6"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/6> <http://schema.org/name> "New @label keyword" .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/6> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/propose%20closing> <http://schema.org/name> "propose closing" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/propose%20closing> <http://schema.org/color> "bf5315" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/propose%20closing> <http://schema.org/description> "" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/6> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/propose%20closing> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:wontfix> <http://schema.org/name> "spec:wontfix" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:wontfix> <http://schema.org/color> "2bafa2" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:wontfix> <http://schema.org/description> "" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/6> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:wontfix> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/6> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/6> <http://schema.org/startDate> "2018-06-30T16:16:37Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/6> <http://schema.org/endDate> "2018-07-30T20:29:57Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/6> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/6> <http://schema.org/description> "Syntactic sugar for `schema:label` (which doesn’t exist).\r\n\r\nOriginal issue is [JSON-LD 1.1 Feature Request: New @label keyword #371](https://github.com/json-ld/json-ld.org/issues/371)\r\n" .
<https://api.github.com/repos/w3c/json-ld-syntax> <http://example.com/ns#issue> <https://api.github.com/repos/w3c/json-ld-syntax/issues/5> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/5> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/5"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/5> <http://schema.org/identifier> "5"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/5> <http://schema.org/name> "Object-level @language" .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/5> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/propose%20closing> <http://schema.org/name> "propose closing" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/propose%20closing> <http://schema.org/color> "bf5315" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/propose%20closing> <http://schema.org/description> "" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/5> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/propose%20closing> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:wontfix> <http://schema.org/name> "spec:wontfix" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:wontfix> <http://schema.org/color> "2bafa2" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:wontfix> <http://schema.org/description> "" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/5> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:wontfix> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/5> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/5> <http://schema.org/startDate> "2018-06-30T16:15:26Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/5> <http://schema.org/endDate> "2018-07-30T20:30:40Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/5> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/5> <http://schema.org/description> "Support the use of `”@language”: “foo”` as a shorthand for `{“@context”: {“@language”: “foo”}}`.\r\n\r\nOriginal issue is [JSON-LD 1.1 Feature Request: Object-level @language #368](https://github.com/json-ld/json-ld.org/issues/368)\r\n" .
<https://api.github.com/repos/w3c/json-ld-syntax> <http://example.com/ns#issue> <https://api.github.com/repos/w3c/json-ld-syntax/issues/4> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/4> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/4"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/4> <http://schema.org/identifier> "4"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/4> <http://schema.org/name> "Support JSON values that aren’t mapped" .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/4> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/propose%20closing> <http://schema.org/name> "propose closing" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/propose%20closing> <http://schema.org/color> "bf5315" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/propose%20closing> <http://schema.org/description> "" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/4> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/propose%20closing> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/satisfied> <http://schema.org/name> "satisfied" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/satisfied> <http://schema.org/color> "4be23b" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/satisfied> <http://schema.org/description> "Requirement Satisfied" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/4> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/satisfied> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:editorial> <http://schema.org/name> "spec:editorial" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:editorial> <http://schema.org/color> "58820a" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:editorial> <http://schema.org/description> "" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/4> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:editorial> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:enhancement> <http://schema.org/name> "spec:enhancement" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:enhancement> <http://schema.org/color> "c11537" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:enhancement> <http://schema.org/description> "" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/4> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:enhancement> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:substantive> <http://schema.org/name> "spec:substantive" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:substantive> <http://schema.org/color> "cff9a4" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:substantive> <http://schema.org/description> "" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/4> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:substantive> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/4> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/4> <http://schema.org/startDate> "2018-06-30T16:14:24Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/4> <http://schema.org/endDate> "2019-03-28T20:43:03Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/4> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/4> <http://schema.org/description> "* Consider using `”@type”: “@json” to describe native values in the compact form.\r\n* Native values should include all JSON types: strings, booleans, numbers, and _null_ as well as objects and arrays.\r\n* Expanded form can record these as values of `@value`.\r\n  * Does interfere with some use of `[]` and `{}` in framing\r\n\r\nOriginal issue is [Support JSON values that aren't mapped #333](https://github.com/json-ld/json-ld.org/issues/333)\r\n" .
<https://api.github.com/repos/w3c/json-ld-syntax> <http://example.com/ns#issue> <https://api.github.com/repos/w3c/json-ld-syntax/issues/3> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/3> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/3"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/3> <http://schema.org/identifier> "3"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/3> <http://schema.org/name> "Pick a better keyword for @nest" .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/3> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/propose%20closing> <http://schema.org/name> "propose closing" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/propose%20closing> <http://schema.org/color> "bf5315" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/propose%20closing> <http://schema.org/description> "" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/3> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/propose%20closing> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/satisfied> <http://schema.org/name> "satisfied" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/satisfied> <http://schema.org/color> "4be23b" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/satisfied> <http://schema.org/description> "Requirement Satisfied" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/3> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/satisfied> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/3> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/3> <http://schema.org/startDate> "2018-06-30T16:12:27Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/3> <http://schema.org/endDate> "2018-07-30T20:31:35Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/3> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/3> <http://schema.org/description> "People haven’t been satisfied with the @nest term for describing nested properties, although nothing better has come along.\r\n\r\nOriginal issue was [Ignoring semantically meaningless nesting #246](https://github.com/json-ld/json-ld.org/issues/246).\r\n" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/429470885> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/82#issuecomment-429470885"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/82> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/429470885> .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/429470885> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/429470885> <http://schema.org/startDate> "2018-10-12T21:43:03Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/429470885> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/429470885> <http://schema.org/description> "Generally, just better." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/488223518> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/168#issuecomment-488223518"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/168> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/488223518> .
<https://api.github.com/users/iherman> <http://schema.org/accountId> "iherman" .
<https://api.github.com/users/iherman> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/520723?v=4" .
<https://api.github.com/users/iherman> <http://schema.org/url> "https://github.com/iherman"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/iherman> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/488223518> <http://schema.org/creator> <https://api.github.com/users/iherman> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/488223518> <http://schema.org/startDate> "2019-05-01T07:05:04Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/488223518> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/488223518> <http://schema.org/description> "> \r\n> I've integrated it into the ReSpec doc for people to inspect in place.\r\n\r\nOnce this is accepted and merged, I will add the configuration files to the other repositories. I guess it will be all right to 'just' commit the changes without going through the PR phase, right?\r\n" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/488312207> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/168#issuecomment-488312207"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/168> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/488312207> .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/488312207> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/488312207> <http://schema.org/startDate> "2019-05-01T15:19:02Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/488312207> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/488312207> <http://schema.org/description> "> > I've integrated it into the ReSpec doc for people to inspect in place.\r\n> \r\n> Once this is accepted and merged, I will add the configuration files to the other repositories. I guess it will be all right to 'just' commit the changes without going through the PR phase, right?\r\n\r\nFine with me to do simple commit to master." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/488342588> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/159#issuecomment-488342588"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/159> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/488342588> .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/488342588> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/488342588> <http://schema.org/startDate> "2019-05-01T17:01:10Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/488342588> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/488342588> <http://schema.org/description> "Fixed in https://github.com/json-ld/json-ld.org/commit/2d0e5371f531d22d962a7ff6c02a3a1339c601b9." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/488347966> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/167#issuecomment-488347966"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/167> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/488347966> .
<https://api.github.com/users/pchampin> <http://schema.org/accountId> "pchampin" .
<https://api.github.com/users/pchampin> <http://schema.org/image> "https://avatars1.githubusercontent.com/u/304612?v=4" .
<https://api.github.com/users/pchampin> <http://schema.org/url> "https://github.com/pchampin"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/pchampin> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/488347966> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/488347966> <http://schema.org/startDate> "2019-05-01T17:19:39Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/488347966> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/488347966> <http://schema.org/description> "Isn't it a bit risky to have two normative definitions of the same terms live in two different files? I think we should at least have a comment in both files to remind our future selves (and future editors) that any update in one of the files should be reflected in the other... WDYT?" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/488363474> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/167#issuecomment-488363474"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/167> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/488363474> .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/488363474> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/488363474> <http://schema.org/startDate> "2019-05-01T18:10:54Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/488363474> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/488363474> <http://schema.org/description> "I can update the definitions in the context to reference the definitions in the syntax document easily enough. Doesn't change the way the text reads, but dereferences will go the the syntax versions." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/488365132> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/167#issuecomment-488365132"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/167> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/488365132> .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/488365132> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/488365132> <http://schema.org/startDate> "2019-05-01T18:16:11Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/488365132> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/488365132> <http://schema.org/description> "See https://github.com/w3c/json-ld-api/pull/84." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/488667945> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/167#issuecomment-488667945"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/167> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/488667945> .
<https://api.github.com/users/BigBlueHat> <http://schema.org/accountId> "BigBlueHat" .
<https://api.github.com/users/BigBlueHat> <http://schema.org/image> "https://avatars1.githubusercontent.com/u/43209?v=4" .
<https://api.github.com/users/BigBlueHat> <http://schema.org/url> "https://github.com/BigBlueHat"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/BigBlueHat> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/488667945> <http://schema.org/creator> <https://api.github.com/users/BigBlueHat> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/488667945> <http://schema.org/startDate> "2019-05-02T13:14:40Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/488667945> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/488667945> <http://schema.org/description> "@gkellogg sorry I missed reviewing this before the merge. I'm still concerned that we explain `@context` string values as de-reference-able URLs (vs. IRIs, URIs, identifiers which may or may not be dereferenced remotely). I realize this sections \"overhead\" is all about content negotiation and dealing with a non-JSON-LD media type...but if we could rephrase sentences like \"This string is interpreted as a URL to an external document from which the context is loaded\" to something that states that `@context` contains an \"identifier which may be derefenerced\" we may avoid continued criticism that we're 100% network dependent." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/488710786> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/167#issuecomment-488710786"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/167> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/488710786> .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/488710786> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/488710786> <http://schema.org/startDate> "2019-05-02T15:07:57Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/488710786> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/488710786> <http://schema.org/description> "I was also thinking to beef up the Document Loader section and move most of the logic there, having the document loader return the JSON structure resulting from dereferencing the document. This also provides a means of describing other ways a custom document loader might handle IRIs without actual dereference." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/488814657> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/170#issuecomment-488814657"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/170> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/488814657> .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/488814657> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/488814657> <http://schema.org/startDate> "2019-05-02T20:11:15Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/488814657> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/488814657> <http://schema.org/description> "Thanks @swickr. I agree in reserving the `json-ld*` namespace for this specification. But, other profile IRIs may be used by other specifications to define behavior specific to their use cases, which some processors may recognize. We should word your first point to allow for such extensions." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/489164558> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/134#issuecomment-489164558"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/134> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/489164558> .
<https://api.github.com/users/BigBlueHat> <http://schema.org/accountId> "BigBlueHat" .
<https://api.github.com/users/BigBlueHat> <http://schema.org/image> "https://avatars1.githubusercontent.com/u/43209?v=4" .
<https://api.github.com/users/BigBlueHat> <http://schema.org/url> "https://github.com/BigBlueHat"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/BigBlueHat> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/489164558> <http://schema.org/creator> <https://api.github.com/users/BigBlueHat> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/489164558> <http://schema.org/startDate> "2019-05-03T16:51:51Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/489164558> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/489164558> <http://schema.org/description> "Resolved via text in this section:\r\nhttps://w3c.github.io/json-ld-syntax/#inheriting-base-iri-from-html-s-base-element" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/489177900> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/19#issuecomment-489177900"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/19> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/489177900> .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/489177900> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/489177900> <http://schema.org/startDate> "2019-05-03T17:34:40Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/489177900> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/489177900> <http://schema.org/description> "See conversation in https://github.com/w3c/json-ld-wg/issues/52#issuecomment-488134519 about `@nest`, but on reflection, this may play out a bit differently.\r\n\r\nI suggest we do only the Expansion phase, where a property with `@container: @included` is expected to have one or more IRI values which are interpreted as references to a top-level `@included` (or alias) property, where those values are added as either values of the object, or as values of the property. If the property also have `@nest`, then adding the values of to that property would have the same affect as lifting them up to the object itself.\r\n\r\nIt's probably easier to simply _not_ involve `@nest`, and just add the values directly to the referencing object.\r\n\r\nWhen complete, the property referencing the included values would be removed.\r\n\r\nIs it an error to reference included IRIs which aren't present, or are they simply ignored?" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/489294568> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/19#issuecomment-489294568"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/19> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/489294568> .
<https://api.github.com/users/iherman> <http://schema.org/accountId> "iherman" .
<https://api.github.com/users/iherman> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/520723?v=4" .
<https://api.github.com/users/iherman> <http://schema.org/url> "https://github.com/iherman"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/iherman> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/489294568> <http://schema.org/creator> <https://api.github.com/users/iherman> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/489294568> <http://schema.org/startDate> "2019-05-04T05:05:00Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/489294568> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/489294568> <http://schema.org/description> "This issue was discussed in [a meeting](https://www.w3.org/2018/json-ld-wg/Meetings/Minutes/2019/2019-05-03-json-ld#section3-1).\r\n\r\n- No actions or resolutions\r\n<details><summary><i class=\"differentiate\">View the transcript</i></summary>\r\nIndexing without a predicate<br/>\r\nBenjamin Young: link: <a href=\"https://github.com/w3c/json-ld-syntax/issues/19\">https://github.com/w3c/json-ld-syntax/issues/19</a><br/>\r\nGregg Kellogg: Related <a href=\"https://github.com/w3c/json-ld-wg/issues/52\">https://github.com/w3c/json-ld-wg/issues/52</a><br/>\r\nBenjamin Young: this is issue is also known as @included<br/>\r\n… proposed by azaroth<br/>\r\n… there is a related proposal by gkellogg<br/>\r\nGregg Kellogg: there are several ways of doing something like id-ref<br/>\r\n… one of them would be to combine @nest and @container:@id<br/>\r\n… Rob’s proposal would better be handled in expansion (this is where syntactic sugar is removed).<br/>\r\n… Properties declared as e.g. @container:@include would look into a special @include container.<br/>\r\n… Problem with compaction, which can not easily reverse this kind of extension.<br/>\r\n… More appropriate in Framing.<br/>\r\n… Seems quite complex and convoluted, with a lot of corner cases.<br/>\r\n</details>" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/489432750> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/171#issuecomment-489432750"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/171> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/489432750> .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/489432750> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/489432750> <http://schema.org/startDate> "2019-05-05T14:42:16Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/489432750> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/489432750> <http://schema.org/description> "No, this is what @iherman discussed in a separate email, this is disucussing the errata on 1.0 that limits terms to be used for compact IRI sellection. We will need to change, but not this." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/489461555> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/171#issuecomment-489461555"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/171> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/489461555> .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/489461555> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/489461555> <http://schema.org/startDate> "2019-05-05T20:40:26Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/489461555> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/489461555> <http://schema.org/description> "@pchampin, apparently can't ask for your review. I believe this addresses @iherman's concerns about retroactively characterizing JSON-LD 1.0 behavior vs. describing how a processor operating in 1.0 mode should behave, along with a couple of clarifying examples." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/489522235> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/172#issuecomment-489522235"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/172> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/489522235> .
<https://api.github.com/users/pchampin> <http://schema.org/accountId> "pchampin" .
<https://api.github.com/users/pchampin> <http://schema.org/image> "https://avatars1.githubusercontent.com/u/304612?v=4" .
<https://api.github.com/users/pchampin> <http://schema.org/url> "https://github.com/pchampin"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/pchampin> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/489522235> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/489522235> <http://schema.org/startDate> "2019-05-06T07:19:28Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/489522235> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/489522235> <http://schema.org/description> ">Rename \"full Processor\" to \"HTML Processor\".\r\n\r\nI agree that the original naming may give the wrong impression (that other processors are somehow incomplete), and discourage some people from adopting JSON-LD. \"HTML Processor\" is a little misleading, but a better name could indeed be found.\r\n\r\n> Remove the ability to use text/html files as JSON-LD Contexts as pure JSON Processors are not capable of processing them, which will lead to a variety of issues related to developer ergonomics.\r\n\r\nThe argument was raised that JSON-LD Contexts are bona fide JSON-LD documents, and so it would be difficult to argue that a ~~Full~~ \"Extended\" processor could sometimes load JSON-LD from HTML, and sometimes not... I think this is a valid argument.\r\n\r\nThat being said, we could address your concern by replacing the Note, at the beginning of [section 7](https://w3c.github.io/json-ld-syntax/#embedding-json-ld-in-html-documents), by a Warning, stating \"not available in a Pure JSON-LD Processor\" rather than \"available in a Full Processor\". And possibly hinting that content-negotiation is a more \"portable\" solution?...\r\n" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/489625455> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/172#issuecomment-489625455"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/172> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/489625455> .
<https://api.github.com/users/dlongley> <http://schema.org/accountId> "dlongley" .
<https://api.github.com/users/dlongley> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/168137?v=4" .
<https://api.github.com/users/dlongley> <http://schema.org/url> "https://github.com/dlongley"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/dlongley> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/489625455> <http://schema.org/creator> <https://api.github.com/users/dlongley> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/489625455> <http://schema.org/startDate> "2019-05-06T13:44:08Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/489625455> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/489625455> <http://schema.org/description> "@pchampin,\r\n\r\n> And possibly hinting that content-negotiation is a more \"portable\" solution?...\r\n\r\nI don't think we should merely \"possibly hint\" at this; my preference would be to make it a requirement that you MUST make your `@context` available as JSON. But, short of my own preferences, we should be very clear that you SHOULD do so and that if you don't, your `@context` won't work with every JSON-LD processor, only those that add the extra HTML feature set. I think we should be strongly encouraging JSON over HTML, but allow HTML for documentation purposes." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/489633725> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/172#issuecomment-489633725"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/172> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/489633725> .
<https://api.github.com/users/msporny> <http://schema.org/accountId> "msporny" .
<https://api.github.com/users/msporny> <http://schema.org/image> "https://avatars3.githubusercontent.com/u/108611?v=4" .
<https://api.github.com/users/msporny> <http://schema.org/url> "https://github.com/msporny"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/msporny> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/489633725> <http://schema.org/creator> <https://api.github.com/users/msporny> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/489633725> <http://schema.org/startDate> "2019-05-06T14:07:43Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/489633725> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/489633725> <http://schema.org/description> "> And possibly hinting that content-negotiation is a more \"portable\" solution?...\r\n\r\nI feel stronger about this than @dlongley does... don't open up the Pandora's box of reading JSON-LD Context's from HTML. Remove the feature. The only argument that I can see for it is that it's a \"neat feature\" in the academic completeness sense... but JSON-LD was never meant to be an academically complete mechanism... it was supposed to help developers publish JSON-LD, but not become so complex that it blows your foot off when you try to use it. Having this feature means that developers will inevitably publish their JSON-LD Context as HTML only, which will cause a split in the ecosystem between \"We expect you to publish via HTML\" and \"We expect you to publish no via HTML\"." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/489636220> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/172#issuecomment-489636220"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/172> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/489636220> .
<https://api.github.com/users/msporny> <http://schema.org/accountId> "msporny" .
<https://api.github.com/users/msporny> <http://schema.org/image> "https://avatars3.githubusercontent.com/u/108611?v=4" .
<https://api.github.com/users/msporny> <http://schema.org/url> "https://github.com/msporny"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/msporny> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/489636220> <http://schema.org/creator> <https://api.github.com/users/msporny> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/489636220> <http://schema.org/startDate> "2019-05-06T14:14:42Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/489636220> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/489636220> <http://schema.org/description> "> \"HTML Processor\" is a little misleading, but a better name could indeed be found.\r\n\r\nIsn't the only feature that the \"full\" processor has over the JSON-only one the fact that it parses stuff from HTML?" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/489667697> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/172#issuecomment-489667697"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/172> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/489667697> .
<https://api.github.com/users/pchampin> <http://schema.org/accountId> "pchampin" .
<https://api.github.com/users/pchampin> <http://schema.org/image> "https://avatars1.githubusercontent.com/u/304612?v=4" .
<https://api.github.com/users/pchampin> <http://schema.org/url> "https://github.com/pchampin"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/pchampin> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/489667697> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/489667697> <http://schema.org/startDate> "2019-05-06T15:40:57Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/489667697> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/489667697> <http://schema.org/description> "> Isn't the only feature that the \"full\" processor has over the JSON-only one the fact that it parses stuff from HTML?\r\n\r\nYes, but \"HTML Processor\" makes it sound like it can *only* process HTML..." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/489793736> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/172#issuecomment-489793736"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/172> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/489793736> .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/489793736> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/489793736> <http://schema.org/startDate> "2019-05-06T21:41:03Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/489793736> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/489793736> <http://schema.org/description> "> > And possibly hinting that content-negotiation is a more \"portable\" solution?...\r\n> \r\n> I feel stronger about this than @dlongley does... don't open up the Pandora's box of reading JSON-LD Context's from HTML. Remove the feature. The only argument that I can see for it is that it's a \"neat feature\" in the academic completeness sense... but JSON-LD was never meant to be an academically complete mechanism... it was supposed to help developers publish JSON-LD, but not become so complex that it blows your foot off when you try to use it. Having this feature means that developers will inevitably publish their JSON-LD Context as HTML only, which will cause a split in the ecosystem between \"We expect you to publish via HTML\" and \"We expect you to publish no via HTML\".\r\n\r\nThis was not added because it's a \"neat feature\", but as a response to concerns raised in #43. If JSON had a built-in commenting feature, it would be likely not necessary.\r\n\r\nBecause of this, and the need to normatively describe the in-the-wild JSON-LD in HTML scenarios provided a mechanism to do this. Once you describe JSON-LD in HTML, then allowing that for contexts and frames is a logical progression, particularly when the extraction is described in the document loader, which is the standard way to fetch _all_ remote content.\r\n\r\nThe fact that it came up in w3c/vc-data-model#585 just goes to show a general need to be able to document contexts, and containing the context in the documenting HTML is likely a better way to keep them from diverging than using different resource formats.\r\n\r\nI agree with @dlongley that we should better describe the potential for splitting the eco-system by recommending (SHOULD) that publishers provide an `application/ld+json` version via content-negotiation and not depend on a processor's conformance with HTML processing." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/490003201> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/173#issuecomment-490003201"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/173> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/490003201> .
<https://api.github.com/users/iherman> <http://schema.org/accountId> "iherman" .
<https://api.github.com/users/iherman> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/520723?v=4" .
<https://api.github.com/users/iherman> <http://schema.org/url> "https://github.com/iherman"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/iherman> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/490003201> <http://schema.org/creator> <https://api.github.com/users/iherman> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/490003201> <http://schema.org/startDate> "2019-05-07T09:19:15Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/490003201> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/490003201> <http://schema.org/description> "Marked as non substantive for IPR from ash-nazg." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/490154254> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/173#issuecomment-490154254"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/173> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/490154254> .
<https://api.github.com/users/pchampin> <http://schema.org/accountId> "pchampin" .
<https://api.github.com/users/pchampin> <http://schema.org/image> "https://avatars1.githubusercontent.com/u/304612?v=4" .
<https://api.github.com/users/pchampin> <http://schema.org/url> "https://github.com/pchampin"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/pchampin> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/490154254> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/490154254> <http://schema.org/startDate> "2019-05-07T16:32:08Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/490154254> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/490154254> <http://schema.org/description> "Not sure what the original intent of the example was, but this fix looks relevant to me..." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/490223240> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/169#issuecomment-490223240"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/169> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/490223240> .
<https://api.github.com/users/BigBlueHat> <http://schema.org/accountId> "BigBlueHat" .
<https://api.github.com/users/BigBlueHat> <http://schema.org/image> "https://avatars1.githubusercontent.com/u/43209?v=4" .
<https://api.github.com/users/BigBlueHat> <http://schema.org/url> "https://github.com/BigBlueHat"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/BigBlueHat> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/490223240> <http://schema.org/creator> <https://api.github.com/users/BigBlueHat> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/490223240> <http://schema.org/startDate> "2019-05-07T19:27:58Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/490223240> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/490223240> <http://schema.org/description> "@cjslep it seems you got your answers in https://github.com/w3c/activitystreams/issues/500#issuecomment-488095045 and https://github.com/w3c/activitystreams/issues/500#issuecomment-489346727\r\n\r\nThe context processing algorithms result in IRIs (which may or may not be URLs)--i.e. they don't necessarily \"locate\" anything...they only identify). Essentially, the `@context` object is about mapping in-document terminology to global-world terminology...no more, no less.\r\n\r\nIf you need more complete vocabulary and ontology definitions, then [OWL](https://www.w3.org/TR/owl-syntax/) documents may provide what you want and/or [JSON Schema](https://json-schema.org/). Schema.org publishes [their ontology in OWL](https://github.com/schemaorg/schemaorg/blob/master/docs/schemaorg.owl) for example.\r\n\r\nLastly, Google's [Structured Data Testing Tool](https://search.google.com/structured-data/testing-tool) is currently limited by only processing `\"@context\": \"http://schema.org\"` definitions. Consequently, the [JSON-LD Playground](https://json-ld.org/playground/) would be a better testing tool for general JSON-LD needs and usage.\r\n\r\nIf you believe there's more we can clarify in either the [Syntax](https://w3c.github.io/json-ld-syntax/) or [API](https://w3c.github.io/json-ld-api/) documents, feel free to re-open this issue with requests.\r\n\r\nThanks!\r\n🎩 \r\nCo-Chair, JSON-LD WG" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/490236057> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/173#issuecomment-490236057"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/173> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/490236057> .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/490236057> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/490236057> <http://schema.org/startDate> "2019-05-07T20:07:33Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/490236057> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/490236057> <http://schema.org/description> "Thanks for the correction!" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/490242765> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/173#issuecomment-490242765"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/173> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/490242765> .
<https://api.github.com/users/aljones15> <http://schema.org/accountId> "aljones15" .
<https://api.github.com/users/aljones15> <http://schema.org/image> "https://avatars2.githubusercontent.com/u/278280?v=4" .
<https://api.github.com/users/aljones15> <http://schema.org/url> "https://github.com/aljones15"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/aljones15> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/490242765> <http://schema.org/creator> <https://api.github.com/users/aljones15> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/490242765> <http://schema.org/startDate> "2019-05-07T20:28:02Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/490242765> <http://example.com/ns#authorAssociation> "CONTRIBUTOR" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/490242765> <http://schema.org/description> "thanks for approving it." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/490527768> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/174#issuecomment-490527768"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/174> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/490527768> .
<https://api.github.com/users/dlongley> <http://schema.org/accountId> "dlongley" .
<https://api.github.com/users/dlongley> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/168137?v=4" .
<https://api.github.com/users/dlongley> <http://schema.org/url> "https://github.com/dlongley"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/dlongley> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/490527768> <http://schema.org/creator> <https://api.github.com/users/dlongley> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/490527768> <http://schema.org/startDate> "2019-05-08T15:14:57Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/490527768> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/490527768> <http://schema.org/description> "Also, if this fix works, I think the JSON-LD syntax spec should clarify that the changes to the active context that bring in type-scoped terms only apply for terms used on the object with the matching type." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/490566571> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/174#issuecomment-490566571"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/174> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/490566571> .
<https://api.github.com/users/dlongley> <http://schema.org/accountId> "dlongley" .
<https://api.github.com/users/dlongley> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/168137?v=4" .
<https://api.github.com/users/dlongley> <http://schema.org/url> "https://github.com/dlongley"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/dlongley> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/490566571> <http://schema.org/creator> <https://api.github.com/users/dlongley> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/490566571> <http://schema.org/startDate> "2019-05-08T16:57:44Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/490566571> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/490566571> <http://schema.org/description> "I've implemented the fix in a PR to jsonld.js here: https://github.com/digitalbazaar/jsonld.js/pull/312 and fixed tests and added two more in PR https://github.com/w3c/json-ld-api/pull/89.\r\n\r\nNote that if you define a `@type` scoped context that has property terms with their own scoped contexts, those will still be properly applied to deeply nested nodes within a type. This fix will only ensure that terms that are defined for objects with specific `@type` values won't leak to other nodes that don't have those types." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/490568792> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/174#issuecomment-490568792"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/174> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/490568792> .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/490568792> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/490568792> <http://schema.org/startDate> "2019-05-08T17:04:00Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/490568792> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/490568792> <http://schema.org/description> "Why is the expectation that type-scoped contexts are limited to the object containing the type different than for property-scoped contexts being limited to the object value of the property?\r\n\r\nI haven't looked at your PR, but it would seem that the expansion algorithm needs to maintain two different contexts, that it received (with possible update from property scoping), and those that come from `@type`. When an embedded context is encountered, it needs to update both the type-scoped copy and the passed in copy. This also needs to be reflected when handling nested properties.\r\n\r\nIt does dilute the message that property- and type-scoped contexts be have exactly as if they had appeared inline, as the type-scoped context would disappear when going deeper, while the property-scoped and any directly scoped contexts persist.\r\n\r\nAlso, what happens when a type-scoped contexts defines a term with an scoped context which is then used? As the algorithm is defined, the expansion algorithm won't see that scoped context, as it's not defined in the current context." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/490601302> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/174#issuecomment-490601302"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/174> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/490601302> .
<https://api.github.com/users/dlongley> <http://schema.org/accountId> "dlongley" .
<https://api.github.com/users/dlongley> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/168137?v=4" .
<https://api.github.com/users/dlongley> <http://schema.org/url> "https://github.com/dlongley"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/dlongley> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/490601302> <http://schema.org/creator> <https://api.github.com/users/dlongley> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/490601302> <http://schema.org/startDate> "2019-05-08T18:36:04Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/490601302> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/490601302> <http://schema.org/description> "@gkellogg,\r\n\r\n> Why is the expectation that type-scoped contexts are limited to the object containing the type different than for property-scoped contexts being limited to the object value of the property?\r\n\r\nI expect the primary audience for `@type`-scoped properties to be people that are using OOP modeling. This means defining a type and the properties you expect to see on that type. The \"scope\" is the object with a matching `@type`. If you move beyond that scope (into another object of another `@type`), it's quite unusual for the terms to be defined. This becomes even more obvious as you move into some deeply nested structure that has a variety of other typed objects along the way.\r\n\r\nThe primary audience for property-term scoped properties is one that is defining properties for different sections of their JSON tree. If you traverse into branch X of the document, then terms A, B, and C will be defined. This is also intuitive for the audience. I think having to redefine them when you're on the same branch (though you've gone deeper into it) would be quite unexpected. This is different from the `@type` situation because you change the `@type` scope when move deeper into a JSON branch (because `@type` itself doesn't persist), whereas the branch *does* persist, you're just further along the branch.\r\n\r\n> I haven't looked at your PR, but it would seem that the expansion algorithm needs to maintain two different contexts, that it received (with possible update from property scoping), and those that come from @type. When an embedded context is encountered, it needs to update both the type-scoped copy and the passed in copy. This also needs to be reflected when handling nested properties.\r\n\r\nYou don't need to maintain two different contexts, you create a new active context (a clone that removes the `@type`-scoped terms) when you recurse into the typed object (when you follow its properties to other objects).\r\n\r\n> Also, what happens when a type-scoped contexts defines a term with an scoped context which is then used? As the algorithm is defined, the expansion algorithm won't see that scoped context, as it's not defined in the current context.\r\n\r\nI have a test for this and it is seen. In that case, a term scoped context is created prior to recursing into the object (there is no change to the existing algorithm). Since it is a property-term-scoped context, it functions as expected (defining terms anywhere along the tree branch)." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/490605175> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/174#issuecomment-490605175"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/174> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/490605175> .
<https://api.github.com/users/dlongley> <http://schema.org/accountId> "dlongley" .
<https://api.github.com/users/dlongley> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/168137?v=4" .
<https://api.github.com/users/dlongley> <http://schema.org/url> "https://github.com/dlongley"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/dlongley> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/490605175> <http://schema.org/creator> <https://api.github.com/users/dlongley> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/490605175> <http://schema.org/startDate> "2019-05-08T18:47:25Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/490605175> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/490605175> <http://schema.org/description> "With the above changes, I was able to update the VC context to use type-scoped contexts with `@protected` terms:\r\n\r\nhttps://raw.githubusercontent.com/dlongley/vc-data-model/flatten-context/contexts/credentials/v1" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/490616599> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/174#issuecomment-490616599"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/174> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/490616599> .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/490616599> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/490616599> <http://schema.org/startDate> "2019-05-08T19:21:29Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/490616599> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/490616599> <http://schema.org/description> "Okay, that looks like a good approach. I'll work on my own implementation." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/491078307> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/172#issuecomment-491078307"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/172> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/491078307> .
<https://api.github.com/users/azaroth42> <http://schema.org/accountId> "azaroth42" .
<https://api.github.com/users/azaroth42> <http://schema.org/image> "https://avatars3.githubusercontent.com/u/871868?v=4" .
<https://api.github.com/users/azaroth42> <http://schema.org/url> "https://github.com/azaroth42"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/azaroth42> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/491078307> <http://schema.org/creator> <https://api.github.com/users/azaroth42> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/491078307> <http://schema.org/startDate> "2019-05-09T21:38:37Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/491078307> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/491078307> <http://schema.org/description> "With chair hat on...\r\n\r\n> I also note that expressing JSON-LD Contexts in HTML was not contemplated in any of the input documents to the JSON-LD WG and as such, the group is skirting very close to being in violation of their charter\r\n\r\nCould you point out where in the charter it says that we can only introduce features described in input documents to the WG? Because that would also preclude features like `@protected`, as far as I'm aware. I don't think that's, thus, relevant here unless you can find somewhere that says we're constrained in this way?\r\n\r\nAnd with chair hat off ...\r\n\r\nI agree with @gkellogg that if we say that a context *is* JSON-LD, and that JSON-LD can be expressed in a script element of an HTML page, then the implication is that a context can be expressed in a script element of an HTML page.  If I recall correctly, @danbri has brought up his issue as a frustration of web developers.\r\n\r\nThe possible routes forward seem to be:\r\n\r\n* Allow contexts in HTML with warnings and processor conformance statement [current]\r\n* Keep contexts as JSON-LD, but introduce a rule that they cannot be in HTML [my understanding of Manu's proposal]\r\n* Make contexts a separate, non-JSON-LD media type, with a rule they must be separate documents. [Alternative that I don't think anyone actually likes, and arguably backwards incompatible]\r\n* Remain silent [I think it's too late for this - the issue has been raised, we have to address it]\r\n\r\nI agree with @pchampin that \"extended\" is better than \"full\", along with a big warning about contexts in HTML being complicated in the spec.\r\n" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/491312625> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/172#issuecomment-491312625"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/172> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/491312625> .
<https://api.github.com/users/BigBlueHat> <http://schema.org/accountId> "BigBlueHat" .
<https://api.github.com/users/BigBlueHat> <http://schema.org/image> "https://avatars1.githubusercontent.com/u/43209?v=4" .
<https://api.github.com/users/BigBlueHat> <http://schema.org/url> "https://github.com/BigBlueHat"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/BigBlueHat> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/491312625> <http://schema.org/creator> <https://api.github.com/users/BigBlueHat> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/491312625> <http://schema.org/startDate> "2019-05-10T14:39:18Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/491312625> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/491312625> <http://schema.org/description> "JSON-LD in HTML exists and even informatively--when viewed from the HTML-perspective: https://html.spec.whatwg.org/#the-script-element:attr-script-type-4\r\n\r\nIn the current spec-space, it's already possible to *extract* JSON-LD *from* HTML and use it as JSON(-LD)--because that's how data blocks work with any embedded format (CSV, YAML, etc.).\r\n\r\nWe have gone beyond simply echoing that fact in the syntax document and instead baked additional processing steps into the API.\r\n\r\nShifting things into the documentLoader space does help from an architectural layering concern, but this \"context in HTML\" usage raises a whole host of architectural and community concerns. It effectively moves us from the current world of extracting-then-using the embedded JSON-LD into one where HTML becomes a valid representation of JSON-LD itself.\r\n\r\nWe need to work to re-narrow our focus at this stage, and go back to the \"simplest thing that could possibly work.\"" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/491383986> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/172#issuecomment-491383986"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/172> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/491383986> .
<https://api.github.com/users/iherman> <http://schema.org/accountId> "iherman" .
<https://api.github.com/users/iherman> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/520723?v=4" .
<https://api.github.com/users/iherman> <http://schema.org/url> "https://github.com/iherman"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/iherman> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/491383986> <http://schema.org/creator> <https://api.github.com/users/iherman> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/491383986> <http://schema.org/startDate> "2019-05-10T18:17:00Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/491383986> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/491383986> <http://schema.org/description> "This issue was discussed in [a meeting](https://www.w3.org/2018/json-ld-wg/Meetings/Minutes/2019/2019-05-10-json-ld#section5).\r\n\r\n- No actions or resolutions\r\n<details><summary><i class=\"differentiate\">View the transcript</i></summary>\r\nContexts in HTML<br/>\r\nIvan Herman: <a href=\"https://github.com/w3c/json-ld-syntax/issues/172\">https://github.com/w3c/json-ld-syntax/issues/172</a><br/>\r\nRob Sanderson: Summary: in the spec we say that (normatively) json-ld can be included in script el. There is now a requirement on &lt;base>. It was noted that contexts are also jsonld. Hence, it is permissible to have contexts embedded in script tags inside html. This means that processors need to be able to process that.<br/>\r\n… We all agree that this is an extension to normal proc mode. Either we need to say that contexts have a special role, contexts are not jsonld, or we need to accept that contexts can be embedded in html and processors should have to be able to say that they support processing them.<br/>\r\nManu Sporny: Some context wrt VC. Purely json-based processors find information using context. Someone said it would be nice to have human-readable context. Argument in favor of this feature.<br/>\r\n… Person said, It would be nice to see jsonld in html. But I don’t want the burden of jsonld processor supporting html.<br/>\r\n… We all agree that JSON-LD in HTML is a huge use case (e.g. schema.org)<br/>\r\n… I think pulling in contexts from html is controversial<br/>\r\n… 2 questions<br/>\r\n… 1: does jsonld context in html greatly increase jsonld usage?<br/>\r\n… I think the answer is no<br/>\r\n… There are other ways to solve issues people would have to want html for contexts.<br/>\r\n… 2: is this going to create interop issues?<br/>\r\n… Is this going to cause ecosystem to change by other processors to start failing?<br/>\r\n… I think this is going to create issues.<br/>\r\n… Some people are going to start publishing contexts as html only.<br/>\r\n… Even if we say you should not do this.<br/>\r\n… The damage this feature could create is far greater than possible benefits.<br/>\r\n… I have more reasons, but this is the biggest argument.<br/>\r\n… We should wait until there is more demand for this feature. We could do it in the future if really needed.<br/>\r\nBenjamin Young: “This means that processors need to be able to process that.”<br/>\r\nBenjamin Young: +1 to everything Manu said.<br/>\r\n… This is the part of what Rob said in start that jsonld in html normative somehow begets this notion that we have to …<br/>\r\n… jsonld in html has always been normative thanks to the data block in script tag<br/>\r\n… we just described it better<br/>\r\n… comes from HTML5 spec.<br/>\r\n… Using single URL to specify context and its documentation is interesting. (Conneg can be used)<br/>\r\n… Overhead of making this possible is too big for processors.<br/>\r\n… This is a nuclear weapon to kill a small bird.<br/>\r\n… There are less damaging ways to solve the problems discussed.<br/>\r\nDave Longley: +1 to manu and bigbluehat<br/>\r\nManu Sporny: +1 to bigbluehat !<br/>\r\nBenjamin Young: We need to be more careful than we have before, before introducing new things like these.<br/>\r\nRob Sanderson: ref - <a href=\"https://www.w3.org/TR/2018/WD-json-ld11-20181214/#embedding-json-ld-in-html-documents\">https://www.w3.org/TR/2018/WD-json-ld11-20181214/#embedding-json-ld-in-html-documents</a><br/>\r\nRob Sanderson: in 1.1, we made it our problem, so we have to solve it.<br/>\r\n… I want to channel danbri. Search engines want to include info in their knowledge graph that they find on the web as jsonld.<br/>\r\n… schema.org, or at least the engines, currently assume do not process contexts at all.<br/>\r\n… If you have a template in your website, with multiple schema.org definitions, you could put into your CMS as a data script block to push this into every single page.<br/>\r\n… search engines would be able to see these blocks<br/>\r\n… by having google’s clusters waiting to process jsonld in page. Publishers would be required to not embed into page.<br/>\r\n… why not have it as include contexts object?: when multiple people responsible for editing context. Also, if there are templare-driven CMSs being used, you want to stripe jsonld over different templates being used. This would cause data blocks being used multiple times.<br/>\r\nDave Longley: Many of these things can be solved by saying that serving should happen with application/ld+json<br/>\r\n… I think there are many cases not being considered wrt complexity<br/>\r\n… many use cases not covered on template-based html pages<br/>\r\n… Such as dynamic pages when generated client-side with javascript<br/>\r\n… We shouldn’t get into that space.<br/>\r\n… We should say that context MUST be server with proper content type<br/>\r\nManu Sporny: I could not follow schema.org use case. Danbri should write this up. We should do a deep analysis on this use case, to see what could address his concern.<br/>\r\n… There are a bunch of assumptions in that use case<br/>\r\n… e.g. people could create their own non-schema.org contexts. This would add a huge amount of complexity.<br/>\r\n… it would be good to have dan involved.<br/>\r\nRob Sanderson: +1 to dlongley and manu<br/>\r\nManu Sporny: Also, it feels like this is migrating away from BPs.<br/>\r\n… We are learning a lot from security around publishing contexts.<br/>\r\n… We had discussions on the type of attacks, if you could publish contexts as html.<br/>\r\n… So there are security concerns around this feature<br/>\r\n… Concern around complexity, interoperability, …<br/>\r\n… A long list of reasons for saying that this is not spec-ready.<br/>\r\n… So we have to get use-case right. And see if it can be solved with current feature-set. Only if needed, we should look further into this html issue.<br/>\r\nIvan Herman: Manu said many things what I wanted to say. We need danbri to raise his voice.<br/>\r\n… We have to rely on documented requirements<br/>\r\nRob Sanderson: I agree<br/>\r\nBenjamin Young: I think what you described, if it’s on danbri’s previous desire to have this in jsonld, then this is a request. Dan has expressed multiple times that search engines want to understand page contents. This is different to giving identifier that serves contexts in html.<br/>\r\n… We are going to end up with RDF dataset that is compiled of multiple contexts.<br/>\r\nGregg Kellogg: no, doesn’t work that way<br/>\r\nBenjamin Young: Generating a graph is not about coupling jsonld context identifier algorithm.<br/>\r\nGregg Kellogg: I don’t think it is practical for many CMSs to do content negotiation (like github pages)<br/>\r\n… we have to re-characterize what jsonld in html is.<br/>\r\n… I agree that these things start to increase complexity and raising barrier.<br/>\r\n… We need to reconsider what processing jsonld in html means.<br/>\r\nManu Sporny: +1 to re-characterize how processors process JSON-LD in HTML.<br/>\r\nRob Sanderson: We are not going to solve this today.<br/>\r\n… I will reach out to danbri to see if he wants to engage.<br/>\r\nGregg Kellogg: He may be at WebConf<br/>\r\n</details>" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/491463215> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/177#issuecomment-491463215"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/177> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/491463215> .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/491463215> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/491463215> <http://schema.org/startDate> "2019-05-11T00:23:21Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/491463215> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/491463215> <http://schema.org/description> "Perhaps we could define a term with a null `@id` which was protected, which might work. But, to save from an injection attack would require defining all schemes as null.\r\n\r\nIt might look like this:\r\n\r\n```json\r\n{\r\n  \"@context\": {\r\n    \"mailto\": {\"@id\": null, \"@protected\": true},\r\n    \"email\": {\"@id\": \"foaf:email_address\", \"@type\": \"@id\"},\r\n    \"Person\": \"foaf:Person\"\r\n  },\r\n  \"@id\": \"http://person.org/\",\r\n  \"@type\": \"Person\",\r\n  \"email\": \"mailto:person@person.org\"\r\n}\r\n```\r\n\r\nThe IRI Expansion algorithm would probably need a tweak to detect this. Of course, without changing anything, you could get the same effect using the following:\r\n\r\n```json\r\n{\r\n  \"@context\": {\r\n    \"mailto\": {\r\n      \"@id\": \"http://my.email.stealing.service/thanks/\",\r\n      \"@protected\": true,\r\n      \"@prefix\": false\r\n    },\r\n    \"email\": {\"@id\": \"foaf:email_address\", \"@type\": \"@id\"},\r\n    \"Person\": \"foaf:Person\"\r\n  },\r\n  \"@id\": \"http://person.org/\",\r\n  \"@type\": \"Person\",\r\n  \"email\": \"mailto:person@person.org\"\r\n}\r\n```\r\n" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/491463392> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/177#issuecomment-491463392"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/177> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/491463392> .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/491463392> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/491463392> <http://schema.org/startDate> "2019-05-11T00:25:19Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/491463392> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/491463392> <http://schema.org/description> "Actually, that might not affect IRI expansion, but if we used @rubensworks interpretation, it might, and the expense of backwards compatibility. But, using `@protected` (and `@prefix`) requires `@version: 1.1`, so we should be free to define behavior here." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/492366561> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/177#issuecomment-492366561"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/177> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/492366561> .
<https://api.github.com/users/azaroth42> <http://schema.org/accountId> "azaroth42" .
<https://api.github.com/users/azaroth42> <http://schema.org/image> "https://avatars3.githubusercontent.com/u/871868?v=4" .
<https://api.github.com/users/azaroth42> <http://schema.org/url> "https://github.com/azaroth42"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/azaroth42> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/492366561> <http://schema.org/creator> <https://api.github.com/users/azaroth42> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/492366561> <http://schema.org/startDate> "2019-05-14T19:00:10Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/492366561> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/492366561> <http://schema.org/description> "\r\n`@prefix: false, @protected: true` would mean that the term can *never* be used as a prefix, right? The actual `@id` is irrelevant, as it will never be expanded (unless it's used as a property). That might be sufficient, as the restrictions could be defined in scoped contexts, so as to not pollute the global space for things like `icon` or `content`, but protect them where they are used as a URI scheme.\r\n\r\n```\r\n{\r\n  \"@context\": {\r\n    \"email\": {\r\n      \"@id\": \"foaf:email_address\",\r\n      \"@type\": \"@id\",\r\n      \"@context\": {\r\n        \"mailto\": {\r\n          \"@id\": \"http://never.used.uri\",\r\n          \"@prefix\": false,\r\n          \"@protected\": true\r\n        }\r\n     }                                  \r\n  }\r\n}\r\n```\r\n" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/492383182> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/179#issuecomment-492383182"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/179> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/492383182> .
<https://api.github.com/users/azaroth42> <http://schema.org/accountId> "azaroth42" .
<https://api.github.com/users/azaroth42> <http://schema.org/image> "https://avatars3.githubusercontent.com/u/871868?v=4" .
<https://api.github.com/users/azaroth42> <http://schema.org/url> "https://github.com/azaroth42"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/azaroth42> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/492383182> <http://schema.org/creator> <https://api.github.com/users/azaroth42> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/492383182> <http://schema.org/startDate> "2019-05-14T19:47:59Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/492383182> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/492383182> <http://schema.org/description> "Or indeed that the results are in the \"original\" tab, which gives the impression that it is the input to the compaction process, rather than the output.\r\n\r\nSuggest renaming \"Original\" to \"Compacted\" throughout. And in the text, say which tab is the input data and which is the result of the algorithm being applied. This is likely always Statements -> Compacted, but there might be some where the example is for Expansion." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/492408620> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/178#issuecomment-492408620"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/178> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/492408620> .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/492408620> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/492408620> <http://schema.org/startDate> "2019-05-14T21:02:49Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/492408620> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/492408620> <http://schema.org/description> "In some cases the example is used as a reference for others which have tabs to show expansion and so forth, so it doesn’t always make sense to have tabs. " .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/492409813> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/178#issuecomment-492409813"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/178> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/492409813> .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/492409813> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/492409813> <http://schema.org/startDate> "2019-05-14T21:06:32Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/492409813> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/492409813> <http://schema.org/description> "In example 4, the “Context” isn’t errant, it’s there to show that this is a context document, which is used elsewhere. This is more prevalent in the api and framing docs. It’s controlled by having an example with class “context”. " .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/492410400> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/177#issuecomment-492410400"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/177> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/492410400> .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/492410400> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/492410400> <http://schema.org/startDate> "2019-05-14T21:08:16Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/492410400> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/492410400> <http://schema.org/description> "Currently, it would mean that it can’t be used to create a Compact IRI, but would still be used when expanding. In 1.1 mode, we may want to change that. " .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/492830817> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/180#issuecomment-492830817"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/180> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/492830817> .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/492830817> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/492830817> <http://schema.org/startDate> "2019-05-15T21:29:29Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/492830817> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/492830817> <http://schema.org/description> "That’s a bug. I need to do more validation that vocabulary items used are defined in CI." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/493257482> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/172#issuecomment-493257482"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/172> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/493257482> .
<https://api.github.com/users/azaroth42> <http://schema.org/accountId> "azaroth42" .
<https://api.github.com/users/azaroth42> <http://schema.org/image> "https://avatars3.githubusercontent.com/u/871868?v=4" .
<https://api.github.com/users/azaroth42> <http://schema.org/url> "https://github.com/azaroth42"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/azaroth42> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/493257482> <http://schema.org/creator> <https://api.github.com/users/azaroth42> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/493257482> <http://schema.org/startDate> "2019-05-16T22:49:05Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/493257482> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/493257482> <http://schema.org/description> "From @danbri, posted with permission, after discussion with @gkellogg:\r\n\r\n> 1. We are uncomfortable that our site (by virtue of our context url) has implicitly become a software component in a system where we don't even really know the other software components. I am considering turning off the context serving at weekend to encourage caching and more robust clients.\r\n\r\n> 1b. Aside: it could be interesting to have a best practice note about how software components fetching contexts might identify themselves incl versions in http requests (user agent)\r\n\r\n> 2. We are unhappy that the expectation of content negotiation on our home page blocks us from moving to 100% static-served site.\r\n\r\n> 3. If we could have a small snippet of jsonld in our homepage, pointing off to a separate url with our giant big context file, that would be great\r\n\r\n> 4. We are not interested in putting the whole context into our homepage; it is way too big. Similar issues may hold for Wikidata at some point.\r\n\r\n> 5. We appreciate the reluctance to entangle the pure json nature of json-ld with html, but note that the success of json-ld was achieved in large part through just such an entangling\r\n" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/493338500> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/172#issuecomment-493338500"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/172> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/493338500> .
<https://api.github.com/users/rubensworks> <http://schema.org/accountId> "rubensworks" .
<https://api.github.com/users/rubensworks> <http://schema.org/image> "https://avatars1.githubusercontent.com/u/440384?v=4" .
<https://api.github.com/users/rubensworks> <http://schema.org/url> "https://github.com/rubensworks"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/rubensworks> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/493338500> <http://schema.org/creator> <https://api.github.com/users/rubensworks> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/493338500> <http://schema.org/startDate> "2019-05-17T06:34:39Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/493338500> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/493338500> <http://schema.org/description> "> 1b. Aside: it could be interesting to have a best practice note about how software components fetching contexts might identify themselves incl versions in http requests (user agent)\r\n\r\n:+1: Related to this, that best practise note should also talk about caching of contexts.\r\n\r\n> We are unhappy that the expectation of content negotiation on our home page blocks us from moving to 100% static-served site.\r\n\r\nOne possible solution for this would be to allow a [link header](https://w3c.github.io/json-ld-syntax/#interpreting-json-as-json-ld) to be added to HTML documents that points towards contexts.\r\n(This may not solve all static site use cases though, as platforms like GitHub pages don't support custom link headers AFAIK)" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/493448108> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/172#issuecomment-493448108"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/172> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/493448108> .
<https://api.github.com/users/msporny> <http://schema.org/accountId> "msporny" .
<https://api.github.com/users/msporny> <http://schema.org/image> "https://avatars3.githubusercontent.com/u/108611?v=4" .
<https://api.github.com/users/msporny> <http://schema.org/url> "https://github.com/msporny"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/msporny> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/493448108> <http://schema.org/creator> <https://api.github.com/users/msporny> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/493448108> <http://schema.org/startDate> "2019-05-17T13:11:47Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/493448108> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/493448108> <http://schema.org/description> "> We are uncomfortable that our site (by virtue of our context url) has implicitly become a software component in a system where we don't even really know the other software components. I am considering turning off the context serving at weekend to encourage caching and more robust clients.\r\n\r\nI think that this would be a good thing to do. Provide guidance on aggressively caching the schema.org context (or packaging it with software implementations)." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/493449183> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/172#issuecomment-493449183"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/172> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/493449183> .
<https://api.github.com/users/msporny> <http://schema.org/accountId> "msporny" .
<https://api.github.com/users/msporny> <http://schema.org/image> "https://avatars3.githubusercontent.com/u/108611?v=4" .
<https://api.github.com/users/msporny> <http://schema.org/url> "https://github.com/msporny"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/msporny> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/493449183> <http://schema.org/creator> <https://api.github.com/users/msporny> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/493449183> <http://schema.org/startDate> "2019-05-17T13:14:58Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/493449183> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/493449183> <http://schema.org/description> "> We are unhappy that the expectation of content negotiation on our home page blocks us from moving to 100% static-served site.\r\n\r\nThen state that the new schema.org context will be served from: \"https://schema.org/v1\" -- make that the context, say that \"https://schema.org/\" is an alias for \"https://schema.org/v1\" and note that you will turn off content negotiation for \"https://schema.org/\" at the beginning of 2020." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/493450382> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/172#issuecomment-493450382"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/172> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/493450382> .
<https://api.github.com/users/msporny> <http://schema.org/accountId> "msporny" .
<https://api.github.com/users/msporny> <http://schema.org/image> "https://avatars3.githubusercontent.com/u/108611?v=4" .
<https://api.github.com/users/msporny> <http://schema.org/url> "https://github.com/msporny"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/msporny> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/493450382> <http://schema.org/creator> <https://api.github.com/users/msporny> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/493450382> <http://schema.org/startDate> "2019-05-17T13:18:41Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/493450382> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/493450382> <http://schema.org/description> "> If we could have a small snippet of jsonld in our homepage, pointing off to a separate url with our giant big context file, that would be great\r\n\r\nWhy? Seems like extra complexity... just say that the new schema.org context file is at: https://schema.org/v1 and be done with it. The schema.org context is so large that implementations will ship with it or aggressively cache it. Speaking from our implementation experience, at one point a bug caused us to go out to the web and fetch schema.org for every digital signature we did and our dev environment suffered horribly - massive performance hit. We now ship with static copies of schema.org... we never go out to the network to get the massive context (and that is the way it should be). The only issue, of course, is there is no versioning for schema.org... but we haven't had an issue w/ that yet. We may have an issue when people start digitally signing schema.org content and expecting those signatures to stay valid for 3-5 years while schema.org shifts underneath them." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/493450531> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/172#issuecomment-493450531"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/172> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/493450531> .
<https://api.github.com/users/msporny> <http://schema.org/accountId> "msporny" .
<https://api.github.com/users/msporny> <http://schema.org/image> "https://avatars3.githubusercontent.com/u/108611?v=4" .
<https://api.github.com/users/msporny> <http://schema.org/url> "https://github.com/msporny"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/msporny> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/493450531> <http://schema.org/creator> <https://api.github.com/users/msporny> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/493450531> <http://schema.org/startDate> "2019-05-17T13:19:09Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/493450531> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/493450531> <http://schema.org/description> "> We are not interested in putting the whole context into our homepage; it is way too big. Similar issues may hold for Wikidata at some point.\r\n\r\nYes, correct, so we don't need the JSON-LD Context processing in HTML documents feature. No one is asking for that feature." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/493451161> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/172#issuecomment-493451161"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/172> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/493451161> .
<https://api.github.com/users/msporny> <http://schema.org/accountId> "msporny" .
<https://api.github.com/users/msporny> <http://schema.org/image> "https://avatars3.githubusercontent.com/u/108611?v=4" .
<https://api.github.com/users/msporny> <http://schema.org/url> "https://github.com/msporny"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/msporny> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/493451161> <http://schema.org/creator> <https://api.github.com/users/msporny> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/493451161> <http://schema.org/startDate> "2019-05-17T13:21:06Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/493451161> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/493451161> <http://schema.org/description> "> We appreciate the reluctance to entangle the pure json nature of json-ld with html, but note that the success of json-ld was achieved in large part through just such an entangling\r\n\r\nI don't understand this statement. There are a number of us that are attempting to make JSON-LD work w/ pure JSON environments in a more harmonious way and have made great strides towards that with the help of JSON-LD 1.1's `@protected` feature. @danbri, could you please explain what you meant by the comment above?" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/493558789> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/178#issuecomment-493558789"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/178> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/493558789> .
<https://api.github.com/users/davidlehn> <http://schema.org/accountId> "davidlehn" .
<https://api.github.com/users/davidlehn> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/109587?v=4" .
<https://api.github.com/users/davidlehn> <http://schema.org/url> "https://github.com/davidlehn"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/davidlehn> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/493558789> <http://schema.org/creator> <https://api.github.com/users/davidlehn> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/493558789> <http://schema.org/startDate> "2019-05-17T18:45:47Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/493558789> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/493558789> <http://schema.org/description> "I also think that \"Context\" and \"Input\" styled offset text looks out-of-place and more like a mistake.  It helps a bit to make it stand out as a label with something like `border: solid thin black; padding: 0.5em`." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/493563456> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/178#issuecomment-493563456"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/178> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/493563456> .
<https://api.github.com/users/davidlehn> <http://schema.org/accountId> "davidlehn" .
<https://api.github.com/users/davidlehn> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/109587?v=4" .
<https://api.github.com/users/davidlehn> <http://schema.org/url> "https://github.com/davidlehn"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/davidlehn> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/493563456> <http://schema.org/creator> <https://api.github.com/users/davidlehn> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/493563456> <http://schema.org/startDate> "2019-05-17T19:00:08Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/493563456> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/493563456> <http://schema.org/description> "That example 26/27 is also a bit odd since a reader probably doesn't want to open the expanded output as playground input.  They'd be more interested in opening Ex 26 and seeing the expanded output." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/493567136> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/178#issuecomment-493567136"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/178> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/493567136> .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/493567136> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/493567136> <http://schema.org/startDate> "2019-05-17T19:12:10Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/493567136> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/493567136> <http://schema.org/description> "There was an issue of properly identifying examples which showed something other than compacted JSON-LD. This was my attempt to address that. Note that structurally, it’s simply a css class and the “Context” is implemented entirely in css. Someone that has a better idea of how such things should be represented should suggest an update to the css that clarifies the intention.\r\n\r\nSometimes it makes sense for the playground to show the result of expanding the input, others the result of compacting using a context or framing using a frame." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/493677417> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/174#issuecomment-493677417"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/174> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/493677417> .
<https://api.github.com/users/iherman> <http://schema.org/accountId> "iherman" .
<https://api.github.com/users/iherman> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/520723?v=4" .
<https://api.github.com/users/iherman> <http://schema.org/url> "https://github.com/iherman"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/iherman> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/493677417> <http://schema.org/creator> <https://api.github.com/users/iherman> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/493677417> <http://schema.org/startDate> "2019-05-18T13:30:54Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/493677417> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/493677417> <http://schema.org/description> "This issue was discussed in [a meeting](https://www.w3.org/2018/json-ld-wg/Meetings/Minutes/2019/2019-05-17-json-ld#section3-1).\r\n\r\n- `RESOLVED:  Type scoped contexts will be shallow and not be inherited via properties of instances of the type, and we will add a syntactic sugar for a wildcard match on properties on the type to define their context`\r\n<details><summary><i class=\"differentiate\">View the transcript</i></summary>\r\n3.1. Type-scoped contexts: <a href=\"https://github.com/w3c/json-ld-syntax/issues/174\">https://github.com/w3c/json-ld-syntax/issues/174</a><br/>\r\nRob Sanderson: dlongley the first one of timeliness for you is type scoped contexts<br/>\r\n… would you like to summarize?<br/>\r\nDave Longley: I went to use type scoped contexts to create the Verifiable Credentials context<br/>\r\n… but immediately hit issues<br/>\r\n… these actually bleed beyond being scoped to a particular type<br/>\r\n… I fixed our implementation…and gkellogg fixed his implementation<br/>\r\n… this issue is about fixing the text to match the implementations<br/>\r\nRob Sanderson: so what you’ve described definitely sounds like a bug<br/>\r\n… it shouldn’t bleed outside of that type<br/>\r\n… so, because name is defined in Person, it’s scoped to Person<br/>\r\n… but you can also have name in Library and have that be scoped to Library<br/>\r\nDave Longley: right, but if you combine them, then you get a clash of terms<br/>\r\n… if you put protected on these things in the next example<br/>\r\n… you would be told that there were issues…when in fact there aren’t<br/>\r\n… this is more like a bug that is revealed by protected<br/>\r\n… so if you had also used some other terms that you intended to be dropped, those would get picked up by Library terms<br/>\r\nRob Sanderson: right. without Person being in the hierarchy<br/>\r\nDave Longley: even if it were there<br/>\r\n… if you had them nested, and had terms you wanted dropped, if that same term is defined earlier, it remains defined<br/>\r\n… so the Library terms don’t stay within Library, they bleed out<br/>\r\nRob Sanderson: well…that sounds like what I’d expect, actually<br/>\r\nDave Longley: so, for property scoped contexts<br/>\r\n… but for the type scoped contexts, it’s more like object oriented expectations<br/>\r\n… so you don’t want unrelated contexts showing up in unexpected places<br/>\r\n… property scoped terms are different<br/>\r\n… those stick around<br/>\r\n… the property scoping works as expected<br/>\r\n… but the type scoping shouldn’t behave like a property scoped context<br/>\r\nRob Sanderson: so the situation we have in IIIF.io is…<br/>\r\n… we use ActivityStreams properties<br/>\r\n… which are very very broad…like items<br/>\r\n… it’s the same JSON key and RDF property<br/>\r\n… it’s just, “here’s the things in this list”<br/>\r\n… but at various places in the tree, the items are of various types<br/>\r\n… so when you get to an Annotation, you then need to use type scoping to deal with that change<br/>\r\n… so we’d need it to re-re-redefine its terms to deal with this change<br/>\r\nDave Longley: you can put a property scoped context inside a typed scoped space<br/>\r\nRob Sanderson: what happens when those continue into an @container: @list scenario<br/>\r\n… so, for example, you can have collections, which either contains collections or things<br/>\r\n… so a tree, or leaf nodes<br/>\r\n… so trees get one context, and leafs get another<br/>\r\n… how would that not collide<br/>\r\n… I assume you’d use type scoped?<br/>\r\nDave Longley: it’s OK to use type scopes<br/>\r\n… your concern is that using type scopes don’t travel down the branch<br/>\r\nRob Sanderson: yes. specifically when there are 1.0 contexts<br/>\r\nDave Longley: when you use type scopes, you can choose which path is traveled down<br/>\r\n… you can say in TypeA use this context, and then within these properties use that other context<br/>\r\nRob Sanderson: 1.1 context for IIIF - <a href=\"https://preview.iiif.io/api/image-prezi-rc2/api/presentation/3/context.json\">https://preview.iiif.io/api/image-prezi-rc2/api/presentation/3/context.json</a><br/>\r\nDave Longley: one of the goals is to deal with ActivityStreams scenarios specifically using protected for use with non-JSON-LD processors using ActivityPub<br/>\r\nRob Sanderson: in that example, there are typed contexts which should be overridden further down<br/>\r\n… like below Annotation, there are further nodes<br/>\r\n… what is the context there?<br/>\r\nDave Longley: if the only thing that’s bringing in the context is this type scoped context<br/>\r\n… that context will get removed if you move on to something that is not scoped to the same thing<br/>\r\n… like an ordered collection or something<br/>\r\n… they’ll need to define their own<br/>\r\n… or use the earlier one<br/>\r\nRob Sanderson: that’s not what 1.0 would say<br/>\r\nDave Longley: well, 1.0 didn’t have typed scoped contexts at all<br/>\r\nRob Sanderson: there doesn’t seem to be a solution for this particular case<br/>\r\nDave Longley: well, there is a solution, which is to say for those properties, you can<br/>\r\n… if you want every single property in an AnnotationCollection, then you’d need to use that via typed scoped contexts throughout the collection<br/>\r\nRob Sanderson: but given that most of these contexts are just the properties<br/>\r\n… you’re doing an awful lot of rewriting with that approach<br/>\r\nDave Longley: there is a solution<br/>\r\n… which is unpleasant<br/>\r\n… but without this bug fix, there’s no way to do the other approaches<br/>\r\n… you literally cannot use type scoped contexts and protected terms together in the way you’d expect<br/>\r\nRob Sanderson: is there a way to flag which of the two?<br/>\r\n… that seems like a lot of processing<br/>\r\n… it would require context import metadata…<br/>\r\n… like only this class + all that descend from it<br/>\r\nDave Longley: yeah, we do that with property scoped contexts<br/>\r\n… but you want to do that without redefinition<br/>\r\nRob Sanderson: right. if the Annotation context got updated, we’d then have to synchronize this context with that one.<br/>\r\n… so…maybe…if there were an Annotation 1.1 context<br/>\r\n… could it then redefine things within itself?<br/>\r\nDave Longley: yes. that would work<br/>\r\nRob Sanderson: so for this particular case, that would be the right solution<br/>\r\nDave Longley: correct<br/>\r\nRob Sanderson: so, given that context files are not versioned in the same way that specifications are<br/>\r\n… we could propose a 1.1 context<br/>\r\nDave Longley: this would also afford the ability to use the @protected feature<br/>\r\n… which would help JSON processors<br/>\r\n… who don’t want to do JSON-LD processing<br/>\r\n… and want terms to remain identical in both ecosystems<br/>\r\nDavid Newbury: does this only protect at a certain level in the hierarchy?<br/>\r\n… or does to descend into the tree?<br/>\r\nDave Longley: any term definition does not continue down the tree–if you change type scope<br/>\r\nDavid Newbury: given your definition, that makes sense<br/>\r\n… but that’s not what I expected<br/>\r\n… I’d thought that this covered the terms in the hierarchy under that type<br/>\r\nDave Longley: my opinion of that is when you’re thinking of it from either OOP or graph perspectives<br/>\r\n… you move into a node, and that node has a class with certain properties<br/>\r\nRob Sanderson: Another type scoped context: <a href=\"https://linked.art/ns/v1/linked-art.json\">https://linked.art/ns/v1/linked-art.json</a><br/>\r\nDave Longley: so to go into a node is to move into a new space<br/>\r\n… and if it cascaded as you describe it would be incompatible with @protected<br/>\r\nDavid Newbury: I think its two different contextual models of how this work<br/>\r\nRob Sanderson: yep. we just need to verify the models against the use cases<br/>\r\n… so here’s another type scoped context<br/>\r\n… right at the top, there’s some vanilla ones<br/>\r\n… but the 4th class is Period<br/>\r\n… we want to rename some of these to simpler names<br/>\r\n… there’s no importing of anything<br/>\r\n… so these would not descend down<br/>\r\nDave Longley: yep. that should work just fine<br/>\r\nRob Sanderson: anyone have other 1.1 contexts?<br/>\r\nSimon Steyskal: I was also kind of confused<br/>\r\n… given that we have multiple people confused by this–or having differing expectations…maybe we should put this in the primer or something?<br/>\r\n… if we decided on the specific way to deal with this, then we should write-up the foundation of how this works<br/>\r\n… because it’s not like a class hierarchy<br/>\r\n… and we want to avoid those expectations causing confusion<br/>\r\nRob Sanderson: one of the reasons why I had the opposite expectations from dlongley<br/>\r\n… is that the way gkellogg has expressed in the past<br/>\r\n… was to avoid contexts inline in the JSON<br/>\r\n… if you had a top-level node with a context, then that context would extend down<br/>\r\n… whereas if you had @type with a scoped context, it would be equivalent to putting that context in at that part of the tree<br/>\r\n… which would come with the expectation of cascading–as in the case of an inline context at that point in the tree<br/>\r\nDavid Newbury: so, say someone else is using our vocabulary<br/>\r\n… what would it require us to do to rewrite the linked-art context<br/>\r\n… to be sure that our terms stay scoped into our context<br/>\r\n… is it the same as what’s being considered for ActivityStreams?<br/>\r\nRob Sanderson: only if they’re type scoped<br/>\r\nDave Longley: you either define properties that can appear anywhere<br/>\r\n… or those that can be used within certain types<br/>\r\n… or those that can be used within any type<br/>\r\n… so, yes the way gkellogg had stated this as pulling context into a type<br/>\r\n… and thinking about it as pulling a context in “in place” as a context object would<br/>\r\n… that, however, doesn’t work well with protected, etc.<br/>\r\n… so, the change would be that type scoped would now map singularly to that scope<br/>\r\nDavid Newbury: so, assuming that someone uses a type scoped definition<br/>\r\n… when I put this type in, it’s a vocabulary concept<br/>\r\n… so where we put our contexts have names and dates<br/>\r\n… we wouldn’t want to implement them at every level<br/>\r\n… we’d have to protect the linked-art context against being used as type scope context<br/>\r\nRob Sanderson: so, like IIIF includes Annotations<br/>\r\n… so when you descend from Concept to name via identifiedBy property<br/>\r\n… you’d no longer have an active context<br/>\r\n… the context doesn’t have a notion of inheritance<br/>\r\n… so it’s not really Object Oriented<br/>\r\n… if it did, then you’d be fine<br/>\r\n… so we instead would have to enumerate every possible property of every possible class<br/>\r\nDave Longley: given that I have no knowledge of what you’re talking about…<br/>\r\n… from the high level it sounds correct<br/>\r\n… if you want to scope against types, use types on everything<br/>\r\n… if you want your types to survive under all the properties, then yes…this will be verbose<br/>\r\n… there could be another simpler syntax<br/>\r\n… but I don’t think the solution is to not handle this sort of inheritance<br/>\r\n… if that is indeed a need to solve that verbose syntax, then we should solve that on its own and not give up this sort of inheritance<br/>\r\nDavid Newbury: this sounds like shallow scoping vs. deep scoping<br/>\r\nDave Longley: to me its a difference between property scoping vs. type scoping<br/>\r\n… when you use property scoping, you’re cascading into the tree<br/>\r\n… but with type scoping, you have no idea where it’s going next<br/>\r\n… this gets worse with protected<br/>\r\n… because if you don’t know where a type usage is going next, there’s no way to correctly protect its terms<br/>\r\n… so maybe we need like an @any property to handle this scoping with protecting<br/>\r\nDavid Newbury: so, if you do want shallow scoped types, could you reimport the base context back via nullifying?<br/>\r\nDave Longley: nullifying can’t do that<br/>\r\nDavid Newbury: but if you knew what it was, could you bring it back in?<br/>\r\nDave Longley: that would be dependent on how you got that base context<br/>\r\n… which sounds very difficult<br/>\r\nDavid Newbury: so, if we have deep scoping, then shallow scoping seems hard, and vice verse<br/>\r\nDave Longley: there might be a cleaner way to say, in this scoped context, you can use these type scopes<br/>\r\n… to me one seems easier to solve than the other<br/>\r\n… but it certainly seems like they do differ<br/>\r\nDavid Newbury: I think there is to do them both…and maybe syntax sugar would make things simpler<br/>\r\nDave Longley: think where we’re at now, shallow is broken<br/>\r\n… so if we fix for shallow, we make deep harder<br/>\r\n… and that’s where this syntactic sugar might help<br/>\r\nRob Sanderson: what about nullification and circular re-importing?<br/>\r\n… I fear you’d end up recursively recursing and cursing about recursion<br/>\r\n… so the @properties: use-this-context is way less verbose than defining every single property<br/>\r\nDave Longley: yeah, it’s effectively a way of defining a base context<br/>\r\nRob Sanderson: right. @base-context (vs. @base)<br/>\r\n… it was very good to discuss this<br/>\r\n… anything else? or are we at proposal time<br/>\r\nDave Longley: so, we’d need to change this to default to shallow, so VCWG can use protected<br/>\r\n… so the VCWG testing can move forward<br/>\r\nProposed resolution: Type scoped contexts will be shallow and not be inherited via properties of instances of the type, and we will add a syntactic sugar for a wildcard match on properties on the type to define their context (Rob Sanderson)<br/>\r\nDave Longley: +1<br/>\r\nBenjamin Young: +1<br/>\r\nRob Sanderson: +1<br/>\r\nDavid Newbury: +1<br/>\r\nSimon Steyskal: +1<br/>\r\nRob Sanderson: so this solution seems better than the other options…which all seem worse<br/>\r\nJeff Mixter: +1<br/>\r\nDavid I. Lehn: +1<br/>\r\nBenjamin Young: ..and for the linked-art case, we simply have in the context generating script, “for each class, put in magic-ness to use self for all the properties of this thing”<br/>\r\nResolution #2: Type scoped contexts will be shallow and not be inherited via properties of instances of the type, and we will add a syntactic sugar for a wildcard match on properties on the type to define their context<br/>\r\n</details>" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/493677524> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/177#issuecomment-493677524"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/177> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/493677524> .
<https://api.github.com/users/iherman> <http://schema.org/accountId> "iherman" .
<https://api.github.com/users/iherman> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/520723?v=4" .
<https://api.github.com/users/iherman> <http://schema.org/url> "https://github.com/iherman"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/iherman> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/493677524> <http://schema.org/creator> <https://api.github.com/users/iherman> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/493677524> <http://schema.org/startDate> "2019-05-18T13:32:34Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/493677524> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/493677524> <http://schema.org/description> "This issue was discussed in [a meeting](https://www.w3.org/2018/json-ld-wg/Meetings/Minutes/2019/2019-05-17-json-ld#section3-3).\r\n\r\n- No actions or resolutions\r\n<details><summary><i class=\"differentiate\">View the transcript</i></summary>\r\nCompact IRIs #177<br/>\r\nRob Sanderson: link: <a href=\"https://github.com/w3c/json-ld-syntax/issues/177\">https://github.com/w3c/json-ld-syntax/issues/177</a><br/>\r\nRob Sanderson: if you define a term that’s the same as a URI scheme<br/>\r\n… then you’ll have problems<br/>\r\n… so there are schemes that are very likely to be used in values<br/>\r\n… like mailto: which could be high jacked in this scenario<br/>\r\n… we could fix this by being able to protect URI schemes that are in use<br/>\r\n… by making it possible to set certainly ones to null<br/>\r\n… so, for instance, you could also set them within certain properties–like foaf:mailbox<br/>\r\n… and then protect them to keep upstream ones from overriding mailto:<br/>\r\n… so this means we don’t need to put all possible URI schemes in the spec<br/>\r\nDave Longley: not enough time to consider it :/<br/>\r\nRob Sanderson: and context authors can limit the damage to specific spaces where it could be damaging<br/>\r\n… so, something to think about over the week<br/>\r\n</details>" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/495655777> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/185#issuecomment-495655777"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/185> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/495655777> .
<https://api.github.com/users/pchampin> <http://schema.org/accountId> "pchampin" .
<https://api.github.com/users/pchampin> <http://schema.org/image> "https://avatars1.githubusercontent.com/u/304612?v=4" .
<https://api.github.com/users/pchampin> <http://schema.org/url> "https://github.com/pchampin"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/pchampin> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/495655777> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/495655777> <http://schema.org/startDate> "2019-05-24T14:32:35Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/495655777> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/495655777> <http://schema.org/description> "Meta-question: is it proper etiquette if I tag this issue as spec:editorial, or is it the prerogative or chairs?" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/495669320> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/185#issuecomment-495669320"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/185> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/495669320> .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/495669320> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/495669320> <http://schema.org/startDate> "2019-05-24T15:05:36Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/495669320> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/495669320> <http://schema.org/description> "Its clearly editorial, and editors regularly make this determination. Of course, if contested, it can be determined not to be editorial." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/495706868> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/186#issuecomment-495706868"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/186> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/495706868> .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/495706868> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/495706868> <http://schema.org/startDate> "2019-05-24T16:49:49Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/495706868> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/495706868> <http://schema.org/description> "See https://github.com/w3c/respec/issues/2363; ReSpec should be filtering them out." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/496153615> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/184#issuecomment-496153615"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/184> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/496153615> .
<https://api.github.com/users/pchampin> <http://schema.org/accountId> "pchampin" .
<https://api.github.com/users/pchampin> <http://schema.org/image> "https://avatars1.githubusercontent.com/u/304612?v=4" .
<https://api.github.com/users/pchampin> <http://schema.org/url> "https://github.com/pchampin"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/pchampin> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/496153615> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/496153615> <http://schema.org/startDate> "2019-05-27T09:49:48Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/496153615> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/496153615> <http://schema.org/description> "Actually, Section 1.4 is *also* normative, which makes this problem even more serious." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/496289587> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/186#issuecomment-496289587"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/186> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/496289587> .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/496289587> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/496289587> <http://schema.org/startDate> "2019-05-27T19:20:01Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/496289587> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/496289587> <http://schema.org/description> "There are also problems with `data-cite` where the citation is a self-reference. For example in the last WD, the definition for [context](https://www.w3.org/TR/json-ld11/#dfn-context) references \"The Context\" section which is not a relative URL, but a link back to the ED with ReSpec query parameters used for publishing.\r\n\r\nUnless something can be done in ReSpec, we may need to surround such spans in terms.html with something that can cause them to be removed, or use an alternative text." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/496321096> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/184#issuecomment-496321096"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/184> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/496321096> .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/496321096> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/496321096> <http://schema.org/startDate> "2019-05-27T23:38:44Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/496321096> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/496321096> <http://schema.org/description> "> Section 9.15 (normative) specifies that `@vocab`'s value\r\n> \r\n> > MUST be a absolute IRI, a relative IRI, a compact IRI, a blank node identifier, an empty string (\"\"), a term, or null.\r\n> \r\n> * The empty string is a special case of a relative IRI → suggest to remove.\r\n\r\nYes, this was missed before.\r\n\r\n> * Furthermore, I don't understand what it would mean to have compact IRIs and terms as `@vocab`. Anyway, they are undistinguishable from IRIs (absolute and relative, respectively) → suggest to remove (but I may be missing something).\r\n\r\nWe typically allow compact IRIs wherever absolute IRIs can be used, so not allowing it here would be the exception, but it's probably not an important use case.\r\n\r\n> Section 1.4 (non-normative) defines \"vocabulary mapping\" as\r\n> \r\n> > using the @vocab key whose value MUST be an IRI or null.\r\n> \r\n> * I don't know if \"IRI\" is supposed to encompass terms and compact IRIs -- but assuming that I was right above, this does not matter anymore.\r\n\r\nNeed to make consistent with other definitions.\r\n\r\n> * However; this definition does not mention blank node identifiers, which are normatively allowed by section 9.15. It may be a mistake, or a deliberate decision since this is non-normative text and blank node IDs as vocab are [discouraged in the API document](https://w3c.github.io/json-ld-api/#h-issue-0). However, I think it is a bad idea to have two parts of the document contradicting each other → suggest to add \"or blank node identifier\".\r\n\r\nWe were trying to obsolete the use of blank node identifiers for `@vocab`, so didn't want to call it out, but maybe something is necessary to describe what's legal, with a WARNING to discourage it.\r\n\r\n> \r\n> Finally, the \"Changes\" section of the API document says\r\n> \r\n> > The empty string (\"\") has been added as a possible value for @vocab in a context.\r\n> \r\n> * In the meantime, we have extended this to allowing any relative IRI → suggest to change\r\n\r\nThe first note was for an earlier change, but it should be eliminated in favor of the relative IRI.\r\n\r\n> I consider those changes to be editorial, so they may not need a resolution, but I would rather have a second opinion before submitting the changes.\r\n\r\nAgreed they're editorial." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/497504004> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/190#issuecomment-497504004"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/190> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/497504004> .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/497504004> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/497504004> <http://schema.org/startDate> "2019-05-30T22:10:59Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/497504004> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/497504004> <http://schema.org/description> "We need to add something to the changes section; otherwise, looks great." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/497789584> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/174#issuecomment-497789584"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/174> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/497789584> .
<https://api.github.com/users/iherman> <http://schema.org/accountId> "iherman" .
<https://api.github.com/users/iherman> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/520723?v=4" .
<https://api.github.com/users/iherman> <http://schema.org/url> "https://github.com/iherman"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/iherman> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/497789584> <http://schema.org/creator> <https://api.github.com/users/iherman> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/497789584> <http://schema.org/startDate> "2019-05-31T17:14:08Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/497789584> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/497789584> <http://schema.org/description> "This issue was discussed in [a meeting](https://www.w3.org/2018/json-ld-wg/Meetings/Minutes/2019/2019-05-31-json-ld#section3-1).\r\n\r\n- `RESOLVED:  Un-defer #108 with propogation as the use case`\r\n<details><summary><i class=\"differentiate\">View the transcript</i></summary>\r\n3.1. Type scoped context continued; property wildcard<br/>\r\nRob Sanderson: link - <a href=\"https://github.com/w3c/json-ld-syntax/issues/174\">https://github.com/w3c/json-ld-syntax/issues/174</a><br/>\r\nRob Sanderson: what is the difference between type scope contexts and property scoped contexts. Is it scoped to the properties of that class, and other thought of it as a replacement for an inline context, and would then expand beyond that class.<br/>\r\n… where we came to last week is that there are good use cases for both, but the only way to allow for both use cases is to have type scoped contexts be class-only, and to have a way to expand beyond them by setting a default context within.<br/>\r\n… is that sufficiently detailed to explain where we are right now?<br/>\r\nGregg Kellogg: I didn’t quite understand until right now. I’m trying to think of the syntax<br/>\r\nDave Longley: my understanding is that what we’re looking for is to take this other context and define it within this scoped context, and then use it for all properties within that scoped ontext<br/>\r\n… We want to be able to reuse existing contexts within a type-scoped context, so we don’t have to be verbose typing out all of those contexts again.<br/>\r\n… syntactically, we can currently do this by re-writing all contexts within each of those properties, but that’s verbose.<br/>\r\nRob Sanderson: Example use case: <a href=\"https://preview.iiif.io/api/image-prezi-rc2/api/presentation/3/context.json\">https://preview.iiif.io/api/image-prezi-rc2/api/presentation/3/context.json</a> type scopes in <a href=\"http://www.w3.org/ns/anno.jsonld\">http://www.w3.org/ns/anno.jsonld</a> for Annotation and AnnotationPage<br/>\r\nIvan Herman: so, if I want to have all schema properties valid within that type-scoped property, and to inherit, and do it by including the schema context file, not each property inline.<br/>\r\nRob Sanderson: an example: we’re using type scoping within annotations to pull in the annotation context, which is a 1.0 context, and since the decision is that the annotations referred to would no longer inherit, and so this would need to be modified with a new keyword to maintain this behavior instead of retyping each property for each context<br/>\r\nIvan Herman: so we want hasBody to remain an annotation?<br/>\r\nRob Sanderson: we want the resource that is pointed to by that property to be an annotation, even though that annotation context is only valid on that class<br/>\r\nGregg Kellogg: I understood that this could be for specific properties, but I thought of wildcard as applying to all properties<br/>\r\n… for instance, if you’re traversing to FOAF, you might not want to continue to use schema.org properties<br/>\r\n… syntax and wildcard: we could use full wildcarding or or something like a URI prefix<br/>\r\n… but then what happens when they have contexts defined? I presume they’re honored as well<br/>\r\n… how deeply have we thought about the various cases<br/>\r\n… and would it be a property of the propriety term definition, or a propriety of the class that the class term definition that then defines those terms?<br/>\r\nRob Sanderson: we had not talked about globbing or real wildcarding: we’d talked about a shorthand for not retyping all properties within that context.<br/>\r\n… you would then need to define all schema.org contexts for every class that below need to apply<br/>\r\n… the question is at what level does the wildcard apply? Is it at the ontology level, or is it at the context level?<br/>\r\n… we’d talked about it at the context level, which is consistent with how other things work<br/>\r\nGregg Kellogg: expanding treats properties as terms, not expanded URIs, and compacting we select terms by matching, not via URI. Enumerating properties by terms, not URIs, is more consistent with how we do things currently<br/>\r\nRob Sanderson: some solution that says, for all the terms within this context, treat them as property-scoped within this class<br/>\r\n… like what dlongley put in the chat: for all properties, treat them as property-scoped contexts.<br/>\r\n… which then wouldn’t need actual wildcarding, just matching<br/>\r\n… which seems easier<br/>\r\nDavid Newbury: I’m wondering if this doesn’t suggest that @type scoping itself could be clearer and provide the approach to inheritance that people are expecting here<br/>\r\nRob Sanderson: could we just have two keywords, one for each behavior?<br/>\r\nDave Longley: I don’t know if it’s exactly the same, because comparability differs here.<br/>\r\n… when we pull them in, we treat them all as if they’re property-scoped terms, which is different than the behavior before.<br/>\r\nDave Longley: +1 to something along the lines of what gregg is saying<br/>\r\nGregg Kellogg: I think that if we have a property that can appear in a type-scoped context that says that all terms within that context inherit that context, or perhaps enumerated terms inherit, and in the absence, no terms inherit, and then it could not appear only on type-scoped contexts<br/>\r\nDave Longley: I think that we’re thinking that each one of these contexts would then consider the type scoping as if it were defined on all descending properties<br/>\r\nGregg Kellogg: and it would be recursive–this would then travel down the property chain<br/>\r\nDave Longley: yes<br/>\r\nGregg Kellogg: unless that property redefines its own scope<br/>\r\n… that seems reasonable<br/>\r\nRob Sanderson: can we see a straw person example?<br/>\r\nGregg Kellogg: @inheritPropertyScopes: true<br/>\r\nGregg Kellogg: @inheritTypeScopes: [‘a’, ‘b’]<br/>\r\nGregg Kellogg: do those terms need to be defined within that scope, or do they just need to have been in scope at the time it’s interpreted?<br/>\r\nRob Sanderson: that would not work for our use case, since the properties of the annotation are not known higher-up the chain<br/>\r\nDave Longley: processing: do you see if it appears up higher to see….(lost the chain here)<br/>\r\nGregg Kellogg: I think your use case would be solved by using true<br/>\r\nRob Sanderson: correct.<br/>\r\nDave Longley: when defining a term within a type-scoped context, look for @inheritPropertyScopes<br/>\r\nDave Longley: and if that appears, add a property-scoped context to the term definition<br/>\r\nDave Longley: (unless one already appears, as that one would take precedence)<br/>\r\nGregg Kellogg: we should come up with a better name<br/>\r\nRob Sanderson: in our case, at the high level, our use case is…<br/>\r\nRob Sanderson: { 'Annotation': {\"@id\": \"oa:Annotation\", \"@inheritPropertyScopes\": true, \"@context\": \"<a href=\"http:...anno.jsonld\"}\">http:...anno.jsonld\"}</a><br/>\r\nPierre-Antoine Champin: @propagates ?<br/>\r\nDavid Newbury: `@descends` ?<br/>\r\nRob Sanderson: we can then just update the 1.1 context<br/>\r\nBenjamin Young: This is pretty ugly, but I think we can make it prettier. Do we use that case anywhere, and you will really need to understand the plumbing to make this understandable.<br/>\r\nGregg Kellogg: @propagates +1<br/>\r\nBenjamin Young: we’re really going to need a primer.<br/>\r\nDave Longley: @propagate: true|[terms] seems ok<br/>\r\nBenjamin Young: the more we can reduce that cognitive pain…we need something other than reading the spec to explain how this works.<br/>\r\nRob Sanderson: there seems to be consensus around @propagate?<br/>\r\nProposed resolution: Create a new keyword, @propagate, for type scoped contexts which takes either a boolean (false is default) or an array of terms, which when present means that all or the listed terms propagate the context listed as the value of the keyword (Rob Sanderson)<br/>\r\nDave Longley: @propagate “propagates” the type-scoped context as a property-scoped context for all listed terms<br/>\r\nGregg Kellogg: we could consider context as an array, and the first item would be @propagate true. This is getting hacky…we’re pulling on a thread and we can’t stop pulling<br/>\r\n… I’m less in favor of this than making it a property of the context itself.<br/>\r\n… if it can’t work except this way…<br/>\r\n… I think this changes the default…<br/>\r\n… and if you want the next one to be false…<br/>\r\n… how do you inherit the default again?<br/>\r\n… these questions are why I’m not happy with these.<br/>\r\nRob Sanderson: This could be solved with metadata on the context, but we’ve deferred that conversation<br/>\r\nGregg Kellogg: how problematic is it to just refer to it in the context?<br/>\r\nRob Sanderson: it means that we can’t include 1.0 contexts, which is not great.<br/>\r\nGregg Kellogg: you can still refer to them…<br/>\r\nRob Sanderson: for type-scoped contexts, if you want to refer to a 1.0 context, if you want to type-scope them in, you’d need to rebuild those contexts when @property is a property of the context, instead of the referring context<br/>\r\nIvan Herman: Red flag: we were wondering about feature freeze, and we are discussing something here that is not thought through yet, and it’s a long discussion, and it’s practically June<br/>\r\n… I am worried here. Protected took two months, and we’re approaching the same place.<br/>\r\nRob Sanderson: the issue is that Verifiable Credentials have assumed one way, and the spec works the other way, so there needs to be a decision one way or the other<br/>\r\n… hopefully a solution that works for both.<br/>\r\n… we can stick with the spec<br/>\r\nGregg Kellogg: we can do type scope as committed, and without dealing with propagation, or we can remove the type-scoped property…<br/>\r\nRob Sanderson: but that chooses one use case over the other<br/>\r\n… we need to deal with the competing use cases<br/>\r\n… or revert back to the previous spec<br/>\r\nDave Longley: it doesn’t make the previous use case impossible, just verbose.<br/>\r\n… the other way around was literally impossible<br/>\r\nRob Sanderson: consider schema.org, you’d need to enumerate all terms in schema on each property. It’s possible, but implausible.<br/>\r\n… a property on the 1.1 context with propagation, and define a 1.1 context, and @propagates : true<br/>\r\nDavid Newbury: does this mean that the writer of this context<br/>\r\n… decides whether it propagates up or down?<br/>\r\n… wouldn’t that mean the annotations group would need to define two different versions of that context?<br/>\r\nRob Sanderson: yes. that is indeed the case<br/>\r\n… which also seems…not ideal<br/>\r\nGregg Kellogg: I think the way to handle this is to set @propagate changes the default to subsequent properties<br/>\r\n… we could including contexts judicious…<br/>\r\nRob Sanderson: the ugly version of a list where there are processing flags and contexts within the context definition<br/>\r\n… documentable, but not pretty<br/>\r\n… and order dependent<br/>\r\nDavid Newbury: do we have a sense of which of these inheritance models is more common?<br/>\r\n… at this point it feels like we’ve built in the ability to turn this on or off<br/>\r\n… or is that not correct?<br/>\r\nRob Sanderson: I don’t think that we know<br/>\r\n… currently, all of the inheritance models are propagate. 1.0, everything does so.<br/>\r\n… that implies that propagation is more common, but people coming from object-oriented might think otherwise<br/>\r\nPierre-Antoine Champin: I’m not convinced by this, but…I don’t think this has been considered.<br/>\r\n… another keyword for non-propagating contexts?<br/>\r\n… remove the flag, make it cleaner<br/>\r\nRob Sanderson: that does seem cleaner<br/>\r\nRuben Taelman: I like the idea, but that might make context even more complicated, but now have two ways to find a context<br/>\r\n… is feasible, but complicated<br/>\r\nPierre-Antoine Champin: Just to be clear, I share that concern.<br/>\r\n… two keywords for contexts ugly<br/>\r\nDave Longley: it could be a keyword on the type definition instead<br/>\r\nDavid Newbury: .. and I wanted to point out that considering rob’s example, having @context always propagate, and a separate keyword for dlongley’s proposal<br/>\r\nGregg Kellogg: the other thing, considering contexts with metadata, where we had metadata, and that could solve this<br/>\r\n… then we could set some of these properties…<br/>\r\nRob Sanderson: two routes: new keyword, context reference metadata<br/>\r\nBenjamin Young: 1.0 propagates now, so the default is propagate true. Then what we need is the way to prevent that, and to say that this is exclusive<br/>\r\nRob Sanderson: I would be fine with that<br/>\r\nIvan Herman: here is the issue where this was discussed: <a href=\"https://github.com/w3c/json-ld-syntax/issues/108,\">https://github.com/w3c/json-ld-syntax/issues/108,</a> with a syntax possibility at: <a href=\"https://github.com/w3c/json-ld-syntax/issues/108#issuecomment-447629312\">https://github.com/w3c/json-ld-syntax/issues/108#issuecomment-447629312</a><br/>\r\n… there’s a syntax proposal there<br/>\r\nBenjamin Young: I see it differently, type-scoped contexts didn’t exist in 1.0 and are a new concept … and scoping “type-scoped contexts” to types makes perfect sense.<br/>\r\nIvan Herman: nobody seemed happy at the time with metadata at the time…if this is the only one we define, it allows others…I would not propose integrity now<br/>\r\nDave Longley: +1 to providing a future hook<br/>\r\nProposed resolution: Un-defer #108 with propogation as the use case (Rob Sanderson)<br/>\r\nRob Sanderson: +1<br/>\r\nDavid Newbury: +1<br/>\r\nGregg Kellogg: +1<br/>\r\nTim Cole: +1<br/>\r\nDave Longley: +1<br/>\r\nRuben Taelman: +1<br/>\r\nHarold Solbrig: +1<br/>\r\nIvan Herman: +1<br/>\r\nAdam Soroka: +1<br/>\r\nPierre-Antoine Champin: +1<br/>\r\nBenjamin Young: +1 (with concerns about scope creep)<br/>\r\nDavid I. Lehn: +1<br/>\r\nResolution #2: Un-defer #108 with propogation as the use case<br/>\r\nRob Sanderson: we should then look at 108 over the week and come up with a proposal for contexts<br/>\r\nGregg Kellogg: it might be good if this were done through more detailed proposals in advance<br/>\r\nRob Sanderson: so, everyone who’s not on a trip, please contribute to the issue<br/>\r\n… and it is the top of the hour<br/>\r\n</details>" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/497789853> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/108#issuecomment-497789853"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/108> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/497789853> .
<https://api.github.com/users/iherman> <http://schema.org/accountId> "iherman" .
<https://api.github.com/users/iherman> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/520723?v=4" .
<https://api.github.com/users/iherman> <http://schema.org/url> "https://github.com/iherman"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/iherman> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/497789853> <http://schema.org/creator> <https://api.github.com/users/iherman> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/497789853> <http://schema.org/startDate> "2019-05-31T17:15:00Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/497789853> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/497789853> <http://schema.org/description> "This issue was discussed in [a meeting](https://www.w3.org/2018/json-ld-wg/Meetings/Minutes/2019/2019-05-31-json-ld#section3-1).\r\n\r\n- `RESOLVED:  Un-defer #108 with propogation as the use case`\r\n<details><summary><i class=\"differentiate\">View the transcript</i></summary>\r\n3.1. Type scoped context continued; property wildcard<br/>\r\nRob Sanderson: link - <a href=\"https://github.com/w3c/json-ld-syntax/issues/174\">https://github.com/w3c/json-ld-syntax/issues/174</a><br/>\r\nRob Sanderson: what is the difference between type scope contexts and property scoped contexts. Is it scoped to the properties of that class, and other thought of it as a replacement for an inline context, and would then expand beyond that class.<br/>\r\n… where we came to last week is that there are good use cases for both, but the only way to allow for both use cases is to have type scoped contexts be class-only, and to have a way to expand beyond them by setting a default context within.<br/>\r\n… is that sufficiently detailed to explain where we are right now?<br/>\r\nGregg Kellogg: I didn’t quite understand until right now. I’m trying to think of the syntax<br/>\r\nDave Longley: my understanding is that what we’re looking for is to take this other context and define it within this scoped context, and then use it for all properties within that scoped ontext<br/>\r\n… We want to be able to reuse existing contexts within a type-scoped context, so we don’t have to be verbose typing out all of those contexts again.<br/>\r\n… syntactically, we can currently do this by re-writing all contexts within each of those properties, but that’s verbose.<br/>\r\nRob Sanderson: Example use case: <a href=\"https://preview.iiif.io/api/image-prezi-rc2/api/presentation/3/context.json\">https://preview.iiif.io/api/image-prezi-rc2/api/presentation/3/context.json</a> type scopes in <a href=\"http://www.w3.org/ns/anno.jsonld\">http://www.w3.org/ns/anno.jsonld</a> for Annotation and AnnotationPage<br/>\r\nIvan Herman: so, if I want to have all schema properties valid within that type-scoped property, and to inherit, and do it by including the schema context file, not each property inline.<br/>\r\nRob Sanderson: an example: we’re using type scoping within annotations to pull in the annotation context, which is a 1.0 context, and since the decision is that the annotations referred to would no longer inherit, and so this would need to be modified with a new keyword to maintain this behavior instead of retyping each property for each context<br/>\r\nIvan Herman: so we want hasBody to remain an annotation?<br/>\r\nRob Sanderson: we want the resource that is pointed to by that property to be an annotation, even though that annotation context is only valid on that class<br/>\r\nGregg Kellogg: I understood that this could be for specific properties, but I thought of wildcard as applying to all properties<br/>\r\n… for instance, if you’re traversing to FOAF, you might not want to continue to use schema.org properties<br/>\r\n… syntax and wildcard: we could use full wildcarding or or something like a URI prefix<br/>\r\n… but then what happens when they have contexts defined? I presume they’re honored as well<br/>\r\n… how deeply have we thought about the various cases<br/>\r\n… and would it be a property of the propriety term definition, or a propriety of the class that the class term definition that then defines those terms?<br/>\r\nRob Sanderson: we had not talked about globbing or real wildcarding: we’d talked about a shorthand for not retyping all properties within that context.<br/>\r\n… you would then need to define all schema.org contexts for every class that below need to apply<br/>\r\n… the question is at what level does the wildcard apply? Is it at the ontology level, or is it at the context level?<br/>\r\n… we’d talked about it at the context level, which is consistent with how other things work<br/>\r\nGregg Kellogg: expanding treats properties as terms, not expanded URIs, and compacting we select terms by matching, not via URI. Enumerating properties by terms, not URIs, is more consistent with how we do things currently<br/>\r\nRob Sanderson: some solution that says, for all the terms within this context, treat them as property-scoped within this class<br/>\r\n… like what dlongley put in the chat: for all properties, treat them as property-scoped contexts.<br/>\r\n… which then wouldn’t need actual wildcarding, just matching<br/>\r\n… which seems easier<br/>\r\nDavid Newbury: I’m wondering if this doesn’t suggest that @type scoping itself could be clearer and provide the approach to inheritance that people are expecting here<br/>\r\nRob Sanderson: could we just have two keywords, one for each behavior?<br/>\r\nDave Longley: I don’t know if it’s exactly the same, because comparability differs here.<br/>\r\n… when we pull them in, we treat them all as if they’re property-scoped terms, which is different than the behavior before.<br/>\r\nDave Longley: +1 to something along the lines of what gregg is saying<br/>\r\nGregg Kellogg: I think that if we have a property that can appear in a type-scoped context that says that all terms within that context inherit that context, or perhaps enumerated terms inherit, and in the absence, no terms inherit, and then it could not appear only on type-scoped contexts<br/>\r\nDave Longley: I think that we’re thinking that each one of these contexts would then consider the type scoping as if it were defined on all descending properties<br/>\r\nGregg Kellogg: and it would be recursive–this would then travel down the property chain<br/>\r\nDave Longley: yes<br/>\r\nGregg Kellogg: unless that property redefines its own scope<br/>\r\n… that seems reasonable<br/>\r\nRob Sanderson: can we see a straw person example?<br/>\r\nGregg Kellogg: @inheritPropertyScopes: true<br/>\r\nGregg Kellogg: @inheritTypeScopes: [‘a’, ‘b’]<br/>\r\nGregg Kellogg: do those terms need to be defined within that scope, or do they just need to have been in scope at the time it’s interpreted?<br/>\r\nRob Sanderson: that would not work for our use case, since the properties of the annotation are not known higher-up the chain<br/>\r\nDave Longley: processing: do you see if it appears up higher to see….(lost the chain here)<br/>\r\nGregg Kellogg: I think your use case would be solved by using true<br/>\r\nRob Sanderson: correct.<br/>\r\nDave Longley: when defining a term within a type-scoped context, look for @inheritPropertyScopes<br/>\r\nDave Longley: and if that appears, add a property-scoped context to the term definition<br/>\r\nDave Longley: (unless one already appears, as that one would take precedence)<br/>\r\nGregg Kellogg: we should come up with a better name<br/>\r\nRob Sanderson: in our case, at the high level, our use case is…<br/>\r\nRob Sanderson: { 'Annotation': {\"@id\": \"oa:Annotation\", \"@inheritPropertyScopes\": true, \"@context\": \"<a href=\"http:...anno.jsonld\"}\">http:...anno.jsonld\"}</a><br/>\r\nPierre-Antoine Champin: @propagates ?<br/>\r\nDavid Newbury: `@descends` ?<br/>\r\nRob Sanderson: we can then just update the 1.1 context<br/>\r\nBenjamin Young: This is pretty ugly, but I think we can make it prettier. Do we use that case anywhere, and you will really need to understand the plumbing to make this understandable.<br/>\r\nGregg Kellogg: @propagates +1<br/>\r\nBenjamin Young: we’re really going to need a primer.<br/>\r\nDave Longley: @propagate: true|[terms] seems ok<br/>\r\nBenjamin Young: the more we can reduce that cognitive pain…we need something other than reading the spec to explain how this works.<br/>\r\nRob Sanderson: there seems to be consensus around @propagate?<br/>\r\nProposed resolution: Create a new keyword, @propagate, for type scoped contexts which takes either a boolean (false is default) or an array of terms, which when present means that all or the listed terms propagate the context listed as the value of the keyword (Rob Sanderson)<br/>\r\nDave Longley: @propagate “propagates” the type-scoped context as a property-scoped context for all listed terms<br/>\r\nGregg Kellogg: we could consider context as an array, and the first item would be @propagate true. This is getting hacky…we’re pulling on a thread and we can’t stop pulling<br/>\r\n… I’m less in favor of this than making it a property of the context itself.<br/>\r\n… if it can’t work except this way…<br/>\r\n… I think this changes the default…<br/>\r\n… and if you want the next one to be false…<br/>\r\n… how do you inherit the default again?<br/>\r\n… these questions are why I’m not happy with these.<br/>\r\nRob Sanderson: This could be solved with metadata on the context, but we’ve deferred that conversation<br/>\r\nGregg Kellogg: how problematic is it to just refer to it in the context?<br/>\r\nRob Sanderson: it means that we can’t include 1.0 contexts, which is not great.<br/>\r\nGregg Kellogg: you can still refer to them…<br/>\r\nRob Sanderson: for type-scoped contexts, if you want to refer to a 1.0 context, if you want to type-scope them in, you’d need to rebuild those contexts when @property is a property of the context, instead of the referring context<br/>\r\nIvan Herman: Red flag: we were wondering about feature freeze, and we are discussing something here that is not thought through yet, and it’s a long discussion, and it’s practically June<br/>\r\n… I am worried here. Protected took two months, and we’re approaching the same place.<br/>\r\nRob Sanderson: the issue is that Verifiable Credentials have assumed one way, and the spec works the other way, so there needs to be a decision one way or the other<br/>\r\n… hopefully a solution that works for both.<br/>\r\n… we can stick with the spec<br/>\r\nGregg Kellogg: we can do type scope as committed, and without dealing with propagation, or we can remove the type-scoped property…<br/>\r\nRob Sanderson: but that chooses one use case over the other<br/>\r\n… we need to deal with the competing use cases<br/>\r\n… or revert back to the previous spec<br/>\r\nDave Longley: it doesn’t make the previous use case impossible, just verbose.<br/>\r\n… the other way around was literally impossible<br/>\r\nRob Sanderson: consider schema.org, you’d need to enumerate all terms in schema on each property. It’s possible, but implausible.<br/>\r\n… a property on the 1.1 context with propagation, and define a 1.1 context, and @propagates : true<br/>\r\nDavid Newbury: does this mean that the writer of this context<br/>\r\n… decides whether it propagates up or down?<br/>\r\n… wouldn’t that mean the annotations group would need to define two different versions of that context?<br/>\r\nRob Sanderson: yes. that is indeed the case<br/>\r\n… which also seems…not ideal<br/>\r\nGregg Kellogg: I think the way to handle this is to set @propagate changes the default to subsequent properties<br/>\r\n… we could including contexts judicious…<br/>\r\nRob Sanderson: the ugly version of a list where there are processing flags and contexts within the context definition<br/>\r\n… documentable, but not pretty<br/>\r\n… and order dependent<br/>\r\nDavid Newbury: do we have a sense of which of these inheritance models is more common?<br/>\r\n… at this point it feels like we’ve built in the ability to turn this on or off<br/>\r\n… or is that not correct?<br/>\r\nRob Sanderson: I don’t think that we know<br/>\r\n… currently, all of the inheritance models are propagate. 1.0, everything does so.<br/>\r\n… that implies that propagation is more common, but people coming from object-oriented might think otherwise<br/>\r\nPierre-Antoine Champin: I’m not convinced by this, but…I don’t think this has been considered.<br/>\r\n… another keyword for non-propagating contexts?<br/>\r\n… remove the flag, make it cleaner<br/>\r\nRob Sanderson: that does seem cleaner<br/>\r\nRuben Taelman: I like the idea, but that might make context even more complicated, but now have two ways to find a context<br/>\r\n… is feasible, but complicated<br/>\r\nPierre-Antoine Champin: Just to be clear, I share that concern.<br/>\r\n… two keywords for contexts ugly<br/>\r\nDave Longley: it could be a keyword on the type definition instead<br/>\r\nDavid Newbury: .. and I wanted to point out that considering rob’s example, having @context always propagate, and a separate keyword for dlongley’s proposal<br/>\r\nGregg Kellogg: the other thing, considering contexts with metadata, where we had metadata, and that could solve this<br/>\r\n… then we could set some of these properties…<br/>\r\nRob Sanderson: two routes: new keyword, context reference metadata<br/>\r\nBenjamin Young: 1.0 propagates now, so the default is propagate true. Then what we need is the way to prevent that, and to say that this is exclusive<br/>\r\nRob Sanderson: I would be fine with that<br/>\r\nIvan Herman: here is the issue where this was discussed: <a href=\"https://github.com/w3c/json-ld-syntax/issues/108,\">https://github.com/w3c/json-ld-syntax/issues/108,</a> with a syntax possibility at: <a href=\"https://github.com/w3c/json-ld-syntax/issues/108#issuecomment-447629312\">https://github.com/w3c/json-ld-syntax/issues/108#issuecomment-447629312</a><br/>\r\n… there’s a syntax proposal there<br/>\r\nBenjamin Young: I see it differently, type-scoped contexts didn’t exist in 1.0 and are a new concept … and scoping “type-scoped contexts” to types makes perfect sense.<br/>\r\nIvan Herman: nobody seemed happy at the time with metadata at the time…if this is the only one we define, it allows others…I would not propose integrity now<br/>\r\nDave Longley: +1 to providing a future hook<br/>\r\nProposed resolution: Un-defer #108 with propogation as the use case (Rob Sanderson)<br/>\r\nRob Sanderson: +1<br/>\r\nDavid Newbury: +1<br/>\r\nGregg Kellogg: +1<br/>\r\nTim Cole: +1<br/>\r\nDave Longley: +1<br/>\r\nRuben Taelman: +1<br/>\r\nHarold Solbrig: +1<br/>\r\nIvan Herman: +1<br/>\r\nAdam Soroka: +1<br/>\r\nPierre-Antoine Champin: +1<br/>\r\nBenjamin Young: +1 (with concerns about scope creep)<br/>\r\nDavid I. Lehn: +1<br/>\r\nResolution #2: Un-defer #108 with propogation as the use case<br/>\r\nRob Sanderson: we should then look at 108 over the week and come up with a proposal for contexts<br/>\r\nGregg Kellogg: it might be good if this were done through more detailed proposals in advance<br/>\r\nRob Sanderson: so, everyone who’s not on a trip, please contribute to the issue<br/>\r\n… and it is the top of the hour<br/>\r\n</details>" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/497797212> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/174#issuecomment-497797212"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/174> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/497797212> .
<https://api.github.com/users/Descends> <http://schema.org/accountId> "Descends" .
<https://api.github.com/users/Descends> <http://schema.org/image> "https://avatars1.githubusercontent.com/u/40182530?v=4" .
<https://api.github.com/users/Descends> <http://schema.org/url> "https://github.com/Descends"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/Descends> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/497797212> <http://schema.org/creator> <https://api.github.com/users/Descends> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/497797212> <http://schema.org/startDate> "2019-05-31T17:36:18Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/497797212> <http://example.com/ns#authorAssociation> "NONE" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/497797212> <http://schema.org/description> "urmmmm.... im sorry what is this?\n\nOn Fri, 31 May 2019 at 18:14, Ivan Herman <notifications@github.com> wrote:\n\n> This issue was discussed in a meeting\n> <https://www.w3.org/2018/json-ld-wg/Meetings/Minutes/2019/2019-05-31-json-ld#section3-1>\n> .\n>\n>    - RESOLVED: Un-defer #108 with propogation as the use case\n>\n> *View the transcript* 3.1. Type scoped context continued; property\n> wildcard\n> Rob Sanderson: link - #174\n> <https://github.com/w3c/json-ld-syntax/issues/174>\n> Rob Sanderson: what is the difference between type scope contexts and\n> property scoped contexts. Is it scoped to the properties of that class, and\n> other thought of it as a replacement for an inline context, and would then\n> expand beyond that class.\n> … where we came to last week is that there are good use cases for both,\n> but the only way to allow for both use cases is to have type scoped\n> contexts be class-only, and to have a way to expand beyond them by setting\n> a default context within.\n> … is that sufficiently detailed to explain where we are right now?\n> Gregg Kellogg: I didn’t quite understand until right now. I’m trying to\n> think of the syntax\n> Dave Longley: my understanding is that what we’re looking for is to take\n> this other context and define it within this scoped context, and then use\n> it for all properties within that scoped ontext\n> … We want to be able to reuse existing contexts within a type-scoped\n> context, so we don’t have to be verbose typing out all of those contexts\n> again.\n> … syntactically, we can currently do this by re-writing all contexts\n> within each of those properties, but that’s verbose.\n> Rob Sanderson: Example use case:\n> https://preview.iiif.io/api/image-prezi-rc2/api/presentation/3/context.json\n> type scopes in http://www.w3.org/ns/anno.jsonld for Annotation and\n> AnnotationPage\n> Ivan Herman: so, if I want to have all schema properties valid within that\n> type-scoped property, and to inherit, and do it by including the schema\n> context file, not each property inline.\n> Rob Sanderson: an example: we’re using type scoping within annotations to\n> pull in the annotation context, which is a 1.0 context, and since the\n> decision is that the annotations referred to would no longer inherit, and\n> so this would need to be modified with a new keyword to maintain this\n> behavior instead of retyping each property for each context\n> Ivan Herman: so we want hasBody to remain an annotation?\n> Rob Sanderson: we want the resource that is pointed to by that property to\n> be an annotation, even though that annotation context is only valid on that\n> class\n> Gregg Kellogg: I understood that this could be for specific properties,\n> but I thought of wildcard as applying to all properties\n> … for instance, if you’re traversing to FOAF, you might not want to\n> continue to use schema.org properties\n> … syntax and wildcard: we could use full wildcarding or or something like\n> a URI prefix\n> … but then what happens when they have contexts defined? I presume they’re\n> honored as well\n> … how deeply have we thought about the various cases\n> … and would it be a property of the propriety term definition, or a\n> propriety of the class that the class term definition that then defines\n> those terms?\n> Rob Sanderson: we had not talked about globbing or real wildcarding: we’d\n> talked about a shorthand for not retyping all properties within that\n> context.\n> … you would then need to define all schema.org contexts for every class\n> that below need to apply\n> … the question is at what level does the wildcard apply? Is it at the\n> ontology level, or is it at the context level?\n> … we’d talked about it at the context level, which is consistent with how\n> other things work\n> Gregg Kellogg: expanding treats properties as terms, not expanded URIs,\n> and compacting we select terms by matching, not via URI. Enumerating\n> properties by terms, not URIs, is more consistent with how we do things\n> currently\n> Rob Sanderson: some solution that says, for all the terms within this\n> context, treat them as property-scoped within this class\n> … like what dlongley put in the chat: for all properties, treat them as\n> property-scoped contexts.\n> … which then wouldn’t need actual wildcarding, just matching\n> … which seems easier\n> David Newbury: I’m wondering if this doesn’t suggest that @type\n> <https://github.com/type> scoping itself could be clearer and provide the\n> approach to inheritance that people are expecting here\n> Rob Sanderson: could we just have two keywords, one for each behavior?\n> Dave Longley: I don’t know if it’s exactly the same, because comparability\n> differs here.\n> … when we pull them in, we treat them all as if they’re property-scoped\n> terms, which is different than the behavior before.\n> Dave Longley: +1 to something along the lines of what gregg is saying\n> Gregg Kellogg: I think that if we have a property that can appear in a\n> type-scoped context that says that all terms within that context inherit\n> that context, or perhaps enumerated terms inherit, and in the absence, no\n> terms inherit, and then it could not appear only on type-scoped contexts\n> Dave Longley: I think that we’re thinking that each one of these contexts\n> would then consider the type scoping as if it were defined on all\n> descending properties\n> Gregg Kellogg: and it would be recursive–this would then travel down the\n> property chain\n> Dave Longley: yes\n> Gregg Kellogg: unless that property redefines its own scope\n> … that seems reasonable\n> Rob Sanderson: can we see a straw person example?\n> Gregg Kellogg: @inheritPropertyScopes: true\n> Gregg Kellogg: @inheritTypeScopes: [‘a’, ‘b’]\n> Gregg Kellogg: do those terms need to be defined within that scope, or do\n> they just need to have been in scope at the time it’s interpreted?\n> Rob Sanderson: that would not work for our use case, since the properties\n> of the annotation are not known higher-up the chain\n> Dave Longley: processing: do you see if it appears up higher to see….(lost\n> the chain here)\n> Gregg Kellogg: I think your use case would be solved by using true\n> Rob Sanderson: correct.\n> Dave Longley: when defining a term within a type-scoped context, look for\n> @inheritPropertyScopes\n> Dave Longley: and if that appears, add a property-scoped context to the\n> term definition\n> Dave Longley: (unless one already appears, as that one would take\n> precedence)\n> Gregg Kellogg: we should come up with a better name\n> Rob Sanderson: in our case, at the high level, our use case is…\n> Rob Sanderson: { 'Annotation': {\"@id <https://github.com/id>\":\n> \"oa:Annotation\", \"@inheritPropertyScopes\": true, \"@context\n> <https://github.com/context>\": \"http:...anno.jsonld\"}\n> <http:...anno.jsonld>\n> Pierre-Antoine Champin: @propagates ?\n> David Newbury: @Descends <https://github.com/Descends> ?\n> Rob Sanderson: we can then just update the 1.1 context\n> Benjamin Young: This is pretty ugly, but I think we can make it prettier.\n> Do we use that case anywhere, and you will really need to understand the\n> plumbing to make this understandable.\n> Gregg Kellogg: @propagates +1\n> Benjamin Young: we’re really going to need a primer.\n> Dave Longley: @propagate <https://github.com/propagate>: true|[terms]\n> seems ok\n> Benjamin Young: the more we can reduce that cognitive pain…we need\n> something other than reading the spec to explain how this works.\n> Rob Sanderson: there seems to be consensus around @propagate\n> <https://github.com/propagate>?\n> Proposed resolution: Create a new keyword, @propagate\n> <https://github.com/propagate>, for type scoped contexts which takes\n> either a boolean (false is default) or an array of terms, which when\n> present means that all or the listed terms propagate the context listed as\n> the value of the keyword (Rob Sanderson)\n> Dave Longley: @propagate <https://github.com/propagate> “propagates” the\n> type-scoped context as a property-scoped context for all listed terms\n> Gregg Kellogg: we could consider context as an array, and the first item\n> would be @propagate <https://github.com/propagate> true. This is getting\n> hacky…we’re pulling on a thread and we can’t stop pulling\n> … I’m less in favor of this than making it a property of the context\n> itself.\n> … if it can’t work except this way…\n> … I think this changes the default…\n> … and if you want the next one to be false…\n> … how do you inherit the default again?\n> … these questions are why I’m not happy with these.\n> Rob Sanderson: This could be solved with metadata on the context, but\n> we’ve deferred that conversation\n> Gregg Kellogg: how problematic is it to just refer to it in the context?\n> Rob Sanderson: it means that we can’t include 1.0 contexts, which is not\n> great.\n> Gregg Kellogg: you can still refer to them…\n> Rob Sanderson: for type-scoped contexts, if you want to refer to a 1.0\n> context, if you want to type-scope them in, you’d need to rebuild those\n> contexts when @Property <https://github.com/Property> is a property of\n> the context, instead of the referring context\n> Ivan Herman: Red flag: we were wondering about feature freeze, and we are\n> discussing something here that is not thought through yet, and it’s a long\n> discussion, and it’s practically June\n> … I am worried here. Protected took two months, and we’re approaching the\n> same place.\n> Rob Sanderson: the issue is that Verifiable Credentials have assumed one\n> way, and the spec works the other way, so there needs to be a decision one\n> way or the other\n> … hopefully a solution that works for both.\n> … we can stick with the spec\n> Gregg Kellogg: we can do type scope as committed, and without dealing with\n> propagation, or we can remove the type-scoped property…\n> Rob Sanderson: but that chooses one use case over the other\n> … we need to deal with the competing use cases\n> … or revert back to the previous spec\n> Dave Longley: it doesn’t make the previous use case impossible, just\n> verbose.\n> … the other way around was literally impossible\n> Rob Sanderson: consider schema.org, you’d need to enumerate all terms in\n> schema on each property. It’s possible, but implausible.\n> … a property on the 1.1 context with propagation, and define a 1.1\n> context, and @propagates : true\n> David Newbury: does this mean that the writer of this context\n> … decides whether it propagates up or down?\n> … wouldn’t that mean the annotations group would need to define two\n> different versions of that context?\n> Rob Sanderson: yes. that is indeed the case\n> … which also seems…not ideal\n> Gregg Kellogg: I think the way to handle this is to set @propagate\n> <https://github.com/propagate> changes the default to subsequent\n> properties\n> … we could including contexts judicious…\n> Rob Sanderson: the ugly version of a list where there are processing flags\n> and contexts within the context definition\n> … documentable, but not pretty\n> … and order dependent\n> David Newbury: do we have a sense of which of these inheritance models is\n> more common?\n> … at this point it feels like we’ve built in the ability to turn this on\n> or off\n> … or is that not correct?\n> Rob Sanderson: I don’t think that we know\n> … currently, all of the inheritance models are propagate. 1.0, everything\n> does so.\n> … that implies that propagation is more common, but people coming from\n> object-oriented might think otherwise\n> Pierre-Antoine Champin: I’m not convinced by this, but…I don’t think this\n> has been considered.\n> … another keyword for non-propagating contexts?\n> … remove the flag, make it cleaner\n> Rob Sanderson: that does seem cleaner\n> Ruben Taelman: I like the idea, but that might make context even more\n> complicated, but now have two ways to find a context\n> … is feasible, but complicated\n> Pierre-Antoine Champin: Just to be clear, I share that concern.\n> … two keywords for contexts ugly\n> Dave Longley: it could be a keyword on the type definition instead\n> David Newbury: .. and I wanted to point out that considering rob’s\n> example, having @context <https://github.com/context> always propagate,\n> and a separate keyword for dlongley’s proposal\n> Gregg Kellogg: the other thing, considering contexts with metadata, where\n> we had metadata, and that could solve this\n> … then we could set some of these properties…\n> Rob Sanderson: two routes: new keyword, context reference metadata\n> Benjamin Young: 1.0 propagates now, so the default is propagate true. Then\n> what we need is the way to prevent that, and to say that this is exclusive\n> Rob Sanderson: I would be fine with that\n> Ivan Herman: here is the issue where this was discussed: #108\n> <https://github.com/w3c/json-ld-syntax/issues/108> with a syntax\n> possibility at: #108 (comment)\n> <https://github.com/w3c/json-ld-syntax/issues/108#issuecomment-447629312>\n> … there’s a syntax proposal there\n> Benjamin Young: I see it differently, type-scoped contexts didn’t exist in\n> 1.0 and are a new concept … and scoping “type-scoped contexts” to types\n> makes perfect sense.\n> Ivan Herman: nobody seemed happy at the time with metadata at the time…if\n> this is the only one we define, it allows others…I would not propose\n> integrity now\n> Dave Longley: +1 to providing a future hook\n> Proposed resolution: Un-defer #108\n> <https://github.com/w3c/json-ld-syntax/issues/108> with propogation as\n> the use case (Rob Sanderson)\n> Rob Sanderson: +1\n> David Newbury: +1\n> Gregg Kellogg: +1\n> Tim Cole: +1\n> Dave Longley: +1\n> Ruben Taelman: +1\n> Harold Solbrig: +1\n> Ivan Herman: +1\n> Adam Soroka: +1\n> Pierre-Antoine Champin: +1\n> Benjamin Young: +1 (with concerns about scope creep)\n> David I. Lehn: +1\n> Resolution #2 <https://github.com/w3c/json-ld-syntax/pull/2>: Un-defer\n> #108 <https://github.com/w3c/json-ld-syntax/issues/108> with propogation\n> as the use case\n> Rob Sanderson: we should then look at 108 over the week and come up with a\n> proposal for contexts\n> Gregg Kellogg: it might be good if this were done through more detailed\n> proposals in advance\n> Rob Sanderson: so, everyone who’s not on a trip, please contribute to the\n> issue\n> … and it is the top of the hour\n>\n> —\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/w3c/json-ld-syntax/issues/174?email_source=notifications&email_token=AJSSGAX7SRA5FVS2QDMW6TTPYFMGJA5CNFSM4HLSUN22YY3PNVWWK3TUL52HS4DFVREXG43VMVBW63LNMVXHJKTDN5WW2ZLOORPWSZGODWV2VEA#issuecomment-497789584>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AJSSGAWF2GVDB6S2B2M3QBTPYFMGJANCNFSM4HLSUN2Q>\n> .\n>\n" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/497809228> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/174#issuecomment-497809228"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/174> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/497809228> .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/497809228> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/497809228> <http://schema.org/startDate> "2019-05-31T18:12:22Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/497809228> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/497809228> <http://schema.org/description> "@Descends Sorry, you were likely tagged because of an `@decends` in the meeting minutes, which should have been escaped. It is a possibility to use as a keyword, which happens to be the same as your user name." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/497809682> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/174#issuecomment-497809682"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/174> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/497809682> .
<https://api.github.com/users/Descends> <http://schema.org/accountId> "Descends" .
<https://api.github.com/users/Descends> <http://schema.org/image> "https://avatars1.githubusercontent.com/u/40182530?v=4" .
<https://api.github.com/users/Descends> <http://schema.org/url> "https://github.com/Descends"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/Descends> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/497809682> <http://schema.org/creator> <https://api.github.com/users/Descends> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/497809682> <http://schema.org/startDate> "2019-05-31T18:13:51Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/497809682> <http://example.com/ns#authorAssociation> "NONE" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/497809682> <http://schema.org/description> "No problem, just avoid any other emails please :)\n\nOn Fri, 31 May 2019 at 7:12 pm, Gregg Kellogg <notifications@github.com>\nwrote:\n\n> @Descends <https://github.com/Descends> Sorry, you were likely tagged\n> because of an @decends in the meeting minutes, which should have been\n> escaped. It is a possibility to use as a keyword, which happens to be the\n> same as your user name.\n>\n> —\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/w3c/json-ld-syntax/issues/174?email_source=notifications&email_token=AJSSGARHGEVCZFNWDBHYHU3PYFTATA5CNFSM4HLSUN22YY3PNVWWK3TUL52HS4DFVREXG43VMVBW63LNMVXHJKTDN5WW2ZLOORPWSZGODWV7OTA#issuecomment-497809228>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AJSSGAQATINJ2YNVVMVTXBDPYFTATANCNFSM4HLSUN2Q>\n> .\n>\n" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/497809905> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/108#issuecomment-497809905"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/108> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/497809905> .
<https://api.github.com/users/azaroth42> <http://schema.org/accountId> "azaroth42" .
<https://api.github.com/users/azaroth42> <http://schema.org/image> "https://avatars3.githubusercontent.com/u/871868?v=4" .
<https://api.github.com/users/azaroth42> <http://schema.org/url> "https://github.com/azaroth42"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/azaroth42> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/497809905> <http://schema.org/creator> <https://api.github.com/users/azaroth42> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/497809905> <http://schema.org/startDate> "2019-05-31T18:14:27Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/497809905> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/497809905> <http://schema.org/description> "To take up the comments of today's call, as `@context` is not valid directly within `@context`, the following could work for a type-scoped context to reference an existing context, but include it such that it did not propagate its definitions beyond the class.  \r\n\r\nThus the algorithm would change to look for either a string or a dict that has the `@context` member to determine if it is an external reference. We can discuss the default and name (etc) for propagation in #174.\r\n\r\n```\r\n{\r\n \"@context\": {\r\n    \"@version\": 1.1,\r\n    \"Annotation\": {\r\n      \"@id\": \"oa:Annotation\",\r\n      \"@context\": {\r\n        \"@context\": \"http://w3.org/ns/anno.jsonld\",\r\n        \"@propagate\": false\r\n      }\r\n    }\r\n  }\r\n}\r\n```\r\n" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/497850846> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/76#issuecomment-497850846"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/76> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/497850846> .
<https://api.github.com/users/AtesComp> <http://schema.org/accountId> "AtesComp" .
<https://api.github.com/users/AtesComp> <http://schema.org/image> "https://avatars3.githubusercontent.com/u/23365631?v=4" .
<https://api.github.com/users/AtesComp> <http://schema.org/url> "https://github.com/AtesComp"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/AtesComp> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/497850846> <http://schema.org/creator> <https://api.github.com/users/AtesComp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/497850846> <http://schema.org/startDate> "2019-05-31T20:32:39Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/497850846> <http://example.com/ns#authorAssociation> "NONE" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/497850846> <http://schema.org/description> "The argument against applying object type relies of the premise that \"changing the meaning\" of some resource should not be allowed.  The argument for is uninterested in \"changing meaning\", but \"adding meaning\".  When type is not given, the consumer has no recourse other than implied type via range specifications in an ontology.  By defining an ontology rule for a property, type may be inferred through domain and range.  Inferencing is a step-wise workaround for lack of a conventional typing mechanism.  Direct type definition is preferred.  When type is given, adding additional type does detract from original type.\r\n\r\nAdding type should not replace existing type, but simply add additional type to a value.  However, the specification AS IS does nothing to prevent a context from changing type.  Example:\r\n```\r\n{\r\n  \"@context\": {\r\n    \"@version\": 1.1,\r\n\r\n    \"http://original.com/type\": \"http://my.com/type\"\r\n\r\n  },\r\n\r\n  \"@id\": \"http://original.com/resource\",\r\n  \"@type\": \"http://original.com/type\"\r\n}\r\n```\r\nThis results in the expanded form:\r\n```\r\n[\r\n  {\r\n    \"@id\": \"http://original.com/resource\",\r\n    \"@type\": [\r\n      \"http://my.com/type\"\r\n    ]\r\n  }\r\n]\r\n```\r\nAll arguments against are moot.  This proves that the argument against \"a consumer can then openly share the data with different meaning\" is without merit.  They can anyway and at will whether they use a JSON-LD context or not!  JSON-LD has no way of enforcing what a consumer does with the data after applying context--local processing is beyond the scope of JSON-LD.  Additionally, a producer may be interested in providing a context for consumers.  Adding resource type is a viable and reasonable solution for a producer that gives the consumer an option to either use the raw JSON or apply JSON-LD context.  This in no way forces a consumer to use that context, but simply allows the producer to provide intended type without resorting to deeper internal modification.\r\n\r\nFraming fails in all instances.  Nodes without type fail to match a framing specification. See 4.2.1 Framing Requirements:\r\n\r\n`Values of members in a frame object that are not keyword MAY also include a default object. Values of @default MAY include the value @null, or an array containing only @null, in addition to other values allowed in the grammar for values of member keys expanding to absolute IRIs. Processors MUST preserve this value when expanding. All other members of a default object MUST be ignored.`\r\n\r\nUnfortunately, the \"are not keyword\" part eliminates the use of framing for applying @type.\r\n\r\nIn conclusion, the JSON-LD specification limits both producers and consumers of JSON data from properly applying type directly.  Asking a producer of JSON to change an established specification is untenable.  Specifications already often document type via key definitions in many cases.  Producers cannot be expected to construct specific JSON-LD solutions to satisfy a consumer.  Allowing @context to add type to a resource is the only viable solution short of designing specialized use case solutions or forking JSON-LD.\r\n\r\nThis issue will continue to bite at the heels of JSON-LD.\r\n\r\nAlso, it would be nice to convert whitespace to underscore when applying \"@type\":\"@id\" or \"@type\":\"@vocab\" to the value (like OpenRefine).\r\n" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/498043048> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/191#issuecomment-498043048"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/191> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/498043048> .
<https://api.github.com/users/pchampin> <http://schema.org/accountId> "pchampin" .
<https://api.github.com/users/pchampin> <http://schema.org/image> "https://avatars1.githubusercontent.com/u/304612?v=4" .
<https://api.github.com/users/pchampin> <http://schema.org/url> "https://github.com/pchampin"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/pchampin> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/498043048> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/498043048> <http://schema.org/startDate> "2019-06-02T15:55:14Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/498043048> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/498043048> <http://schema.org/description> "It seems to me that your proposal aims at breaking the principle of [URI opacity](https://www.w3.org/TR/webarch/#uri-opacity). More precisely, what you are trying to say is \"*any* IRI starting with `xyz`, when used as a predicate, denotes a property which is order-sensitive\"." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/498074505> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/191#issuecomment-498074505"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/191> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/498074505> .
<https://api.github.com/users/iridiankin> <http://schema.org/accountId> "iridiankin" .
<https://api.github.com/users/iridiankin> <http://schema.org/image> "https://avatars3.githubusercontent.com/u/16244827?v=4" .
<https://api.github.com/users/iridiankin> <http://schema.org/url> "https://github.com/iridiankin"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/iridiankin> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/498074505> <http://schema.org/creator> <https://api.github.com/users/iridiankin> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/498074505> <http://schema.org/startDate> "2019-06-02T23:32:52Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/498074505> <http://example.com/ns#authorAssociation> "NONE" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/498074505> <http://schema.org/description> "> It seems to me that your proposal aims at breaking the principle of [URI opacity](https://www.w3.org/TR/webarch/#uri-opacity). More precisely, what you are trying to say is \"_any_ IRI starting with `xyz`, when used as a predicate, denotes a property which is order-sensitive\".\r\n\r\nThis is a relevant concern and I have thought about it, but I don't think it is clear-cut. Also it definitely is not the aim even if it might be a consequence. Thoughts:\r\n- I note that this argument concerns only example 1, which I will focus on. Second example expands to unquestionably opaque IRI's as there the top-level ordering is not relevant.\r\n- I also note that in the example 1 the possible opacity-violation is not a result of the prefix expansion @container=@list proposal itself, but relates to details of the use case itself. Even if the use case would violate opacity as it stands, it might not necessarily be invalid if adjusted.\r\nBut I don't think it violates opacity:\r\n- URI opacity principle is primarily concerned with user agents guessing the meaning of arbitrary URI's. In my use case I would have a specific, well-defined scheme/ontology for the documentation which defines the meaning. The spec has provisions for this:\r\n```\r\nIn practice, a small number of inferences can be made because they are explicitly licensed by the relevant specifications\r\n```\r\nAlso, the opacity principle is most concerned with resource identifying IRI's, which brings us to...\r\n- The part of the IRI that's being introspected for ordering in case 1. is the fragment part. \r\nTwo compact IRI's `s:bulleted#name-0` and `s:bulleted#arguments-3` refer to two different secondary resources of the same primary resource `http://example.org/section/bulleted`. \r\n[Secondary resources are by definition](https://www.w3.org/TR/webarch/#fragid) quite unrestricted: I can, as the designer of the documentation format, within the context of that format, reasonably make the conceptual statement that the valid set of secondary resources is all the strings and that they're treated to have lexicographical ordering.\r\n\r\nSo I'm not concerned about breaking IRI opacity per-se. \r\nWhat I have been most uncertain is about principles that govern the use of IRI's as predicates, as they... feel a bit more restricted. Most of the predicate ontologies seem to make use of the fragments (starting with `rdf` itself) even if the fragment parts do not have intrinsic semantic meaning. \r\n\r\nThis avenue gets quite philosophical quite fast though and I'm sure there has been discussions. Are these written down anywhere?\r\n" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/498085673> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/76#issuecomment-498085673"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/76> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/498085673> .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/498085673> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/498085673> <http://schema.org/startDate> "2019-06-03T01:36:59Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/498085673> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/498085673> <http://schema.org/description> "I could see us providing for `@default` on `@type` when framing. It seems like a reasonable expectation.  It, JSON-LD is not intended to be a general purpose query engine, and somethings may always require SPARQL construct or some similar graphQL solution." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/498137114> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/191#issuecomment-498137114"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/191> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/498137114> .
<https://api.github.com/users/pchampin> <http://schema.org/accountId> "pchampin" .
<https://api.github.com/users/pchampin> <http://schema.org/image> "https://avatars1.githubusercontent.com/u/304612?v=4" .
<https://api.github.com/users/pchampin> <http://schema.org/url> "https://github.com/pchampin"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/pchampin> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/498137114> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/498137114> <http://schema.org/startDate> "2019-06-03T07:02:10Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/498137114> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/498137114> <http://schema.org/description> "I disagree that the URI/IRI opacity argument is limited to example 1. Both example imply that anybody can coin a new IRI with a given prefix (`s:` in example 1, `Relation:` in example 2) and expect others to guess from that prefix that the IRI denotes a section or a relation, respectively. For me that breaks opacity.\r\n\r\nI also believe that the opacity-violation is indeed related to the `\"@container\":\"@list\"` feature. I grant you that this is not clear-cut: unlike RDFS or OWL, JSON-LD does not describe the semantics of a vocabulary, merely how to map JSON keys to that vocabulary. However, stating \"the values of that predicate should be interpreted as ordered list\" is intimately linked to the semantics of said predicate (which would have range `rdf:List` rather than `schema:Person`, for example). So creating a blanket statement for a whole set of predicates, just because their IRI has a given prefix, breaks IRI opacity from my point of view." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/498141210> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/191#issuecomment-498141210"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/191> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/498141210> .
<https://api.github.com/users/pchampin> <http://schema.org/accountId> "pchampin" .
<https://api.github.com/users/pchampin> <http://schema.org/image> "https://avatars1.githubusercontent.com/u/304612?v=4" .
<https://api.github.com/users/pchampin> <http://schema.org/url> "https://github.com/pchampin"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/pchampin> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/498141210> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/498141210> <http://schema.org/startDate> "2019-06-03T07:17:26Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/498141210> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/498141210> <http://schema.org/description> "> I can, as the designer of the documentation format, within the context of that format, reasonably make the conceptual statement that the valid set of secondary resources is all the strings and that they're treated to have lexicographical ordering.\r\n\r\nGranted. But this kind of format-specific knowledge could not (easily) be conveyed in RDF nor JSON-LD, since their data model consider IRIs as opaque identifiers.\r\n\r\n" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/498174271> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/191#issuecomment-498174271"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/191> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/498174271> .
<https://api.github.com/users/iridiankin> <http://schema.org/accountId> "iridiankin" .
<https://api.github.com/users/iridiankin> <http://schema.org/image> "https://avatars3.githubusercontent.com/u/16244827?v=4" .
<https://api.github.com/users/iridiankin> <http://schema.org/url> "https://github.com/iridiankin"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/iridiankin> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/498174271> <http://schema.org/creator> <https://api.github.com/users/iridiankin> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/498174271> <http://schema.org/startDate> "2019-06-03T09:02:54Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/498174271> <http://example.com/ns#authorAssociation> "NONE" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/498174271> <http://schema.org/description> "> I disagree that the URI/IRI opacity argument is limited to example 1. Both example imply that anybody can coin a new IRI with a given prefix (`s:` in example 1, `Relation:` in example 2) and expect others to guess from that prefix that the IRI denotes a section or a relation, respectively. For me that breaks opacity.\r\n\r\nI may be a bit confused on a more philosophical level here; why would others need to guess that the IRI denotes a section or a relation? From the point of RDF model whether an IRI is a section or relation is irrelevant as the ordering in this case is only very contextually relevant, and those who are in that context don't need to guess, they know.\r\n\r\nAdditionally, if actual triple graphs are emitted from a format like this, it is straightforward for the specification to require that appropriate type triples are emitted for the targeted objects of above predicates. In fact I fully intend to require that.\r\n\r\nTriple inference is a thing, and contextual semantics are a thing. If I understand you correctly, you're raising the point that RDF has the noble goal of trying to be 'self-contained' - all knowledge has a triple correspondence and must be expressed as such. I recognize this is tremendously powerful and useful, but is also what makes RDF so damn clunky and heavy, and probably the reason that is slowing its adoption.\r\n\r\nFor me JSON-LD appeared to be the solution for this clunkiness, in that it is _the_ tool that allows triples graphs to emitted and inferred from essentially contextual, efficient structures with overheads removed (both in terms of character count as well as in unnecessary indirections). \r\nWas I wrong to expect this?" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/498179983> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/191#issuecomment-498179983"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/191> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/498179983> .
<https://api.github.com/users/iridiankin> <http://schema.org/accountId> "iridiankin" .
<https://api.github.com/users/iridiankin> <http://schema.org/image> "https://avatars3.githubusercontent.com/u/16244827?v=4" .
<https://api.github.com/users/iridiankin> <http://schema.org/url> "https://github.com/iridiankin"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/iridiankin> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/498179983> <http://schema.org/creator> <https://api.github.com/users/iridiankin> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/498179983> <http://schema.org/startDate> "2019-06-03T09:19:29Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/498179983> <http://example.com/ns#authorAssociation> "NONE" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/498179983> <http://schema.org/description> "As an addendum: I would also be looking for a way to specify that node dict key \"s:foo#bar\" would also imply \"s:foo#bar a s:foo\"; whether explicitly, structurally via JSON-LD @context, or via the specification itself. \r\nTriples which explicitly specify the order is probably something that would have to fully rely on inference..." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/498528341> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/191#issuecomment-498528341"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/191> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/498528341> .
<https://api.github.com/users/iridiankin> <http://schema.org/accountId> "iridiankin" .
<https://api.github.com/users/iridiankin> <http://schema.org/image> "https://avatars3.githubusercontent.com/u/16244827?v=4" .
<https://api.github.com/users/iridiankin> <http://schema.org/url> "https://github.com/iridiankin"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/iridiankin> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/498528341> <http://schema.org/creator> <https://api.github.com/users/iridiankin> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/498528341> <http://schema.org/startDate> "2019-06-04T05:36:56Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/498528341> <http://example.com/ns#authorAssociation> "NONE" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/498528341> <http://schema.org/description> "I did a bit of analysis to help myself conseptualize the process more clearly, as I wanted to find an answer to the question \"Do I want to 'cook'?\" and to also understand 'domain-specific graphs' and their 'universalization' a bit better. I'm dumping this here in case someone is interested, some questions at the end. \r\nEDIT: man, I feel bad for being quite spammy. But I'm not sure if I can justify putting the time to edit this shorter.\r\n\r\n## 1. The information processes as seen by a product owner operating in some domain\r\n\r\nConsider the following three processes, ordered by their business relevance, and where domain refers to all code and operators who conform and make use of domain specifications:\r\n\r\n1. Primary-use\r\n  `CONTEXTUAL-JSON ( =cook=> COOKED-JSON ) =ld-context=> JSON-LD => domain-consumer`\r\n  The primary use case is almost always a case where information is produced by a domain-aware or 'spec conforming' producer and consumed by similarily conforming consumer.\r\n\r\n2. Domain-reasoning\r\n  `CONTEXTUAL-JSON ( =cook=> COOKED-JSON ) =ld-context=> JSON-LD ( =ld-expandize=> DOMAIN-RDF ) => domain-reasoner`\r\n  Domain reasoning benefits from the well-defined semantics RDF offers, without necessarily having to have all or any of triples present as long as the domain specification is well-defined in RDF terms.\r\n\r\n3. RDF-export:\r\n  `CONTEXTUAL-JSON ( =cook=> COOKED-JSON ) =ld-context=> JSON-LD =ld-expandize=> ( DOMAIN-RDF =universalize=> ) UNIVERSAL-RDF => global-consumer`\r\n  RDF export makes domain knowledge explicit and makes use of intercompatibility network effect. Still, remains least important for product owners because the product must be useful even without the secondary 'domainless' network effects that RDF provides.\r\n\r\nFormats in caps, operations in arrows, optionals in parens, consumer at the end.\r\n`CONTEXTUAL-JSON`: a JSON document in a specific, local context\r\n`JSON-COOKED`: document specifically tailored for JSON-LD expansion\r\n`JSON-LD`: Self-explanatory\r\n`DOMAIN-RDF`: triple graph which is missing triples that can be inferred using domain specific knowledge\r\n`UNIVERSAL-RDF`: triple graph which contains triples that represent all semantic knowledge\r\n\r\n`cook`: A contextual pre-operation which converts a well-formed JSON structure into one that JSON-LD + appropriate @context can consume.\r\n`ld-context`: Addition of JSON-LD @context based on the current context\r\n`ld-expandize`: JSON-LD expand + serialize.\r\n`universalize`: makes domain specific semantics explicit by emitting corresponding triples.\r\n\r\n\r\n### 1.1. `cook` overlaps with what JSON-LD does yet requires code - do not want\r\n\r\ncontextual-cook is arbitrarily powerful and obviously solves all the problems but the cost is having to support additional code and libraries. This cost is especially painful in contexts where documents need to be persisted or serialized in a manner that loses the execution context. With a JSON-LD-only solution only the addition of a @context is enough for the document to be well-defined within the domain. This is a trivial operation which can be made declarative, configurable part of the platform implementation. \r\n\r\nCooking requires specific code which needs to be updated and reviewed every time the context/domain specification is updated to a point where the question becomes \"is it worth to use JSON-LD and an underlying model in the first place?\".\r\n\r\nWhen comparing a fully custom solution to cooking+JSON-LD the custom is considerably better for primary-use scenarios, equally good for domain-reasoning scenarios and worse for rdf-export scenarios. Fully custom wins => \r\n\r\n\"Do I want to cook? No.\"\r\n\r\n### 1.2. Universalization must only consist of adding triples which don't add structural ambiguities.\r\n\r\nTriple removal is a no-go, as is ambiguities like having list triples and set triples to same data (?).\r\n\r\n### 1.3. Universalization should be elided where possible. In general case this is not always possible\r\n\r\nIf it is possible to skip universalization by just relying on JSON-LD @context rules it should be done. But JSON-LD is only a structural converter; there is a lot of implicit domain knowledge that involves value introspection that can never be expressed with it.\r\n\r\n## 2. Postface\r\n\r\nI'm strongly leaning towards the design where there is no cooking, JSON-LD is thrown around inside the domain as the primary format, and is used and analysis efficiently without having to expandize. \r\nAnd even when expandizing within the domain there often would be no need for the structural/implicit triples as the domain implementations can 'assume' them. \r\nAlso when universalization _is_ needed it is straightforward to carry out. Especially if the points in the infrastructure that universalize are few it is much easier to update specifications and their implementations.\r\n\r\nSo if someone is still reading and is asking how this relates to this thread:\r\n\r\nWithout prefix-suffix support and with the criteria I laid out in the initial post, I can't have a design which does not need cooking and which doesn't break 1.2. Naturally if the design is not possible then it's not possible and I have to look for something completely different. \r\n\r\nBut the way I see it is that relying on the universalization in principle is a fair way to conform with JSON-LD and RDF. After all, the prefix-suffix proposal doesn't directly violate the opacity principle, even if in my use case it would allow me to emit these partial domain-rdf graphs which does violate it locally. But is this a problem?\r\n\r\nSo, what am I missing if anything, something obvious or less so?" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/499714625> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/191#issuecomment-499714625"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/191> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/499714625> .
<https://api.github.com/users/azaroth42> <http://schema.org/accountId> "azaroth42" .
<https://api.github.com/users/azaroth42> <http://schema.org/image> "https://avatars3.githubusercontent.com/u/871868?v=4" .
<https://api.github.com/users/azaroth42> <http://schema.org/url> "https://github.com/azaroth42"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/azaroth42> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/499714625> <http://schema.org/creator> <https://api.github.com/users/azaroth42> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/499714625> <http://schema.org/startDate> "2019-06-07T00:15:18Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/499714625> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/499714625> <http://schema.org/description> "To attempt to summarize from my understanding, the request is to allow per prefix defaults to be set, such as for `@container`. Thus setting `@container:@list` on `dc` would make all `dc:*` properties into lists.\r\n\r\n" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/499724943> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/191#issuecomment-499724943"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/191> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/499724943> .
<https://api.github.com/users/iridiankin> <http://schema.org/accountId> "iridiankin" .
<https://api.github.com/users/iridiankin> <http://schema.org/image> "https://avatars3.githubusercontent.com/u/16244827?v=4" .
<https://api.github.com/users/iridiankin> <http://schema.org/url> "https://github.com/iridiankin"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/iridiankin> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/499724943> <http://schema.org/creator> <https://api.github.com/users/iridiankin> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/499724943> <http://schema.org/startDate> "2019-06-07T01:13:50Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/499724943> <http://example.com/ns#authorAssociation> "NONE" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/499724943> <http://schema.org/description> "> To attempt to summarize from my understanding, the request is to allow per prefix defaults to be set, such as for `@container`. Thus setting `@container:@list` on `dc` would make all `dc:*` properties into lists.\r\n\r\nRight, although I maybe wouldn't use 'dc' as an example as I imagine that surely would break existing things... \r\nAlso setting `@type:@id` is useful in the second use case, if not mandatory, to allow:\r\n`\"Relation:NOTES\": [\"http://example.org/note#C\", \"http://example.org/note#CSharp\", \"http://example.org/note#C\"]`" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/499816602> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/108#issuecomment-499816602"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/108> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/499816602> .
<https://api.github.com/users/rubensworks> <http://schema.org/accountId> "rubensworks" .
<https://api.github.com/users/rubensworks> <http://schema.org/image> "https://avatars1.githubusercontent.com/u/440384?v=4" .
<https://api.github.com/users/rubensworks> <http://schema.org/url> "https://github.com/rubensworks"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/rubensworks> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/499816602> <http://schema.org/creator> <https://api.github.com/users/rubensworks> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/499816602> <http://schema.org/startDate> "2019-06-07T09:16:42Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/499816602> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/499816602> <http://schema.org/description> "Based on the [comment above](https://github.com/w3c/json-ld-syntax/issues/108#issuecomment-497809905), I'm wondering if it may be useful to make the following patterns semantically equivalent:\r\n\r\n```json\r\n{\r\n  \"@context\": {\r\n    \"@context\": {\r\n      \"term1\": \"\",\r\n    },\r\n    \"@version\": 1.1,\r\n    \"term2\": \"\"\r\n  }\r\n}\r\n```\r\n\r\n```json\r\n{\r\n  \"@context\": [\r\n    {\r\n      \"term1\": \"\"\r\n    },\r\n    {\r\n      \"@version\": 1.1,\r\n      \"term2\": \"\"\r\n    }\r\n  ]\r\n}\r\n```\r\n\r\nAssuming context metadata is allowed to be defined within contexts directly, this would be a convenient syntax. (Unless I'm missing a reason why metadata should not be part of the context itself?)\r\n\r\nFor example, SRIs could then be set like this:\r\n```json\r\n{\r\n  \"@context\":  {\r\n    \"@version\": 1.1,\r\n    \"@context\": \"https://example.com/context-with-metadata\",\r\n    \"@sri\": \"sha256-abcd\"\r\n  }\r\n}\r\n```\r\n=> this would mean that it is also allowed to define `@sri` within https://example.com/context-with-metadata directly (assuming `@sri` is excluded when calculating the hash).\r\n\r\nDisabling propagation (#174) could look [like this](https://github.com/w3c/json-ld-syntax/issues/108#issuecomment-497809905):\r\n```json\r\n{\r\n \"@context\": {\r\n    \"@version\": 1.1,\r\n    \"Annotation\": {\r\n      \"@id\": \"oa:Annotation\",\r\n      \"@context\": {\r\n        \"@context\": \"http://w3.org/ns/anno.jsonld\",\r\n        \"@propagate\": false\r\n      }\r\n    }\r\n  }\r\n}\r\n```\r\n=> this would mean that it is also allowed to set `@propagate` within http://w3.org/ns/anno.jsonld directly." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/499826125> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/108#issuecomment-499826125"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/108> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/499826125> .
<https://api.github.com/users/iherman> <http://schema.org/accountId> "iherman" .
<https://api.github.com/users/iherman> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/520723?v=4" .
<https://api.github.com/users/iherman> <http://schema.org/url> "https://github.com/iherman"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/iherman> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/499826125> <http://schema.org/creator> <https://api.github.com/users/iherman> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/499826125> <http://schema.org/startDate> "2019-06-07T09:50:01Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/499826125> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/499826125> <http://schema.org/description> "I must admit I would find\r\n\r\n```json\r\n\"@context\" : {\r\n  \"@context\" : ...\r\n```\r\n\r\nconfusing. This is the pattern reusing the same keyword for two different (albeit related) purposes. I would prefer making things more explicit, ie, \r\n\r\n```json\r\n\"@context\" : {\r\n  \"@contextref\" : ...\r\n```\r\n\r\n(We can bikeshed on what `@contextref` should be. Maybe `@cref`, to make it shorter?" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/499924727> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/191#issuecomment-499924727"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/191> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/499924727> .
<https://api.github.com/users/azaroth42> <http://schema.org/accountId> "azaroth42" .
<https://api.github.com/users/azaroth42> <http://schema.org/image> "https://avatars3.githubusercontent.com/u/871868?v=4" .
<https://api.github.com/users/azaroth42> <http://schema.org/url> "https://github.com/azaroth42"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/azaroth42> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/499924727> <http://schema.org/creator> <https://api.github.com/users/azaroth42> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/499924727> <http://schema.org/startDate> "2019-06-07T15:14:42Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/499924727> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/499924727> <http://schema.org/description> ">  I would also be looking for a way to specify that node dict key \"s:foo#bar\" would also imply \"s:foo#bar a s:foo\"; whether explicitly, structurally via JSON-LD @context, or via the specification itself.\r\n\r\nThis is out of scope for the WG to add triples to the graph via the context." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/499947690> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/191#issuecomment-499947690"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/191> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/499947690> .
<https://api.github.com/users/iridiankin> <http://schema.org/accountId> "iridiankin" .
<https://api.github.com/users/iridiankin> <http://schema.org/image> "https://avatars3.githubusercontent.com/u/16244827?v=4" .
<https://api.github.com/users/iridiankin> <http://schema.org/url> "https://github.com/iridiankin"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/iridiankin> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/499947690> <http://schema.org/creator> <https://api.github.com/users/iridiankin> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/499947690> <http://schema.org/startDate> "2019-06-07T16:16:46Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/499947690> <http://example.com/ns#authorAssociation> "NONE" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/499947690> <http://schema.org/description> "> > I would also be looking for a way to specify that node dict key \"s:foo#bar\" would also imply \"s:foo#bar a s:foo\"; whether explicitly, structurally via JSON-LD @context, or via the specification itself.\r\n> \r\n> This is out of scope for the WG to add triples to the graph via the context.\r\n\r\nThanks; reasonable enough. Indeed in the big picture not a problem, as I've been prepared to do the 'universalization' step anyway. As long as the triples that the @context does emit are not conflicting/ambiguous." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/499965230> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/177#issuecomment-499965230"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/177> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/499965230> .
<https://api.github.com/users/dlongley> <http://schema.org/accountId> "dlongley" .
<https://api.github.com/users/dlongley> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/168137?v=4" .
<https://api.github.com/users/dlongley> <http://schema.org/url> "https://github.com/dlongley"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/dlongley> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/499965230> <http://schema.org/creator> <https://api.github.com/users/dlongley> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/499965230> <http://schema.org/startDate> "2019-06-07T17:10:55Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/499965230> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/499965230> <http://schema.org/description> "Another option to consider could be a mechanism by which to say \"no prefixes\"/\"no CURIEs\" in the instance data (they can only be used in the context). Or an option such that prefixes may only be used when expanding with the vocab flag set to true (wouldn't this cover the above `mailto:` case at least since it is expanded using a `base` mapping not any `vocab` one?). Anything with a `:` in it (in the appropriate places) would be interpreted as an absolute IRI instead." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/499965459> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/170#issuecomment-499965459"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/170> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/499965459> .
<https://api.github.com/users/iherman> <http://schema.org/accountId> "iherman" .
<https://api.github.com/users/iherman> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/520723?v=4" .
<https://api.github.com/users/iherman> <http://schema.org/url> "https://github.com/iherman"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/iherman> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/499965459> <http://schema.org/creator> <https://api.github.com/users/iherman> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/499965459> <http://schema.org/startDate> "2019-06-07T17:11:45Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/499965459> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/499965459> <http://schema.org/description> "This issue was discussed in [a meeting](https://www.w3.org/2018/json-ld-wg/Meetings/Minutes/2019/2019-06-07-json-ld.html#section3-1).\r\n\r\n- `RESOLVED:  Accept #170, with the clarification that processors MUST ignore IRIs that that they do not recognize, and that json-ld IRIs are reserved for future WG use*`\r\n- `ACTION:  update syntax with issue #170 resolution (Pierre-Antoine Champin)`\r\n<details><summary><i class=\"differentiate\">View the transcript</i></summary>\r\n3.1. Profile IRIs<br/>\r\nIvan Herman: <a href=\"https://github.com/w3c/json-ld-syntax/issues/170\">https://github.com/w3c/json-ld-syntax/issues/170</a><br/>\r\nIvan Herman: one background - transition calls with WOT people<br/>\r\n… they were interested in a profile for their own needs<br/>\r\n… but what came up is what is policy with regard to what is said in W3C documents<br/>\r\n… by default each WG has its own profile space (e.g., ns/jsonld…)<br/>\r\n… and that’s it<br/>\r\nRob Sanderson: there are profile URIs (e.g., Web Annotation)<br/>\r\n… if you don’t understand it, you must ignore it<br/>\r\nProposed resolution: Accept #170, with the clarification that processors MUST ignore IRIs that that they do not recognize, and that json-ld* IRIs are reserved for future WG use (Rob Sanderson)<br/>\r\nRob Sanderson: +1<br/>\r\nAdam Soroka: +1<br/>\r\nTim Cole: +1<br/>\r\nRuben Taelman: +1<br/>\r\nIvan Herman: +1<br/>\r\nBenjamin Young: +1<br/>\r\nPierre-Antoine Champin: +1<br/>\r\nDavid I. Lehn: +1<br/>\r\nDavid Newbury: +1<br/>\r\nResolution #2: Accept #170, with the clarification that processors MUST ignore IRIs that that they do not recognize, and that json-ld IRIs are reserved for future WG use*<br/>\r\nRob Sanderson: Action to implement this resolution is on pchampin or greg<br/>\r\nAction #1: update syntax with issue #170 resolution (Pierre-Antoine Champin)<br/>\r\n</details>" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/499965697> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/191#issuecomment-499965697"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/191> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/499965697> .
<https://api.github.com/users/azaroth42> <http://schema.org/accountId> "azaroth42" .
<https://api.github.com/users/azaroth42> <http://schema.org/image> "https://avatars3.githubusercontent.com/u/871868?v=4" .
<https://api.github.com/users/azaroth42> <http://schema.org/url> "https://github.com/azaroth42"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/azaroth42> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/499965697> <http://schema.org/creator> <https://api.github.com/users/azaroth42> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/499965697> <http://schema.org/startDate> "2019-06-07T17:12:26Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/499965697> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/499965697> <http://schema.org/description> "This was discussed on the WG call of 2019-06-07, and the decision was that this is not a bug but a new feature request.  As such, the closing date for new features was two weeks (see https://www.w3.org/blog/2019/03/json-ld-collaborative-work-and-feature-timeline/) after the working draft of May 10 ( https://www.w3.org/TR/json-ld11/ ) and thus May 24th.\r\n\r\nThis could be discussed in the JSON-LD community group towards a solution for a future version, and we will keep it in mind for inclusion if it solves bugs that come up within the 1.1 timeframe.\r\n\r\nMany thanks for the detailed discussion!\r\n\r\n" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/499965994> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/177#issuecomment-499965994"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/177> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/499965994> .
<https://api.github.com/users/iherman> <http://schema.org/accountId> "iherman" .
<https://api.github.com/users/iherman> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/520723?v=4" .
<https://api.github.com/users/iherman> <http://schema.org/url> "https://github.com/iherman"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/iherman> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/499965994> <http://schema.org/creator> <https://api.github.com/users/iherman> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/499965994> <http://schema.org/startDate> "2019-06-07T17:13:15Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/499965994> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/499965994> <http://schema.org/description> "This issue was discussed in [a meeting](https://www.w3.org/2018/json-ld-wg/Meetings/Minutes/2019/2019-06-07-json-ld.html#section3-2).\r\n\r\n- `RESOLVED:  If <code>@prefix:</code> false works, then we can turn 177 into a best practice. If not, then 177 becomes an issue to improve <code>@prefix</code> to allow it.`\r\n- `ACTION:  test if <code>@prefix:</code> false without <code>@id</code> works as expected (Pierre-Antoine Champin)`\r\n<details><summary><i class=\"differentiate\">View the transcript</i></summary>\r\n3.2. Compact IRIs and URI Schemes<br/>\r\nIvan Herman: <a href=\"https://github.com/w3c/json-ld-syntax/issues/177\">https://github.com/w3c/json-ld-syntax/issues/177</a><br/>\r\nRob Sanderson: we discussed this a few weeks ago, but only to point of introducing the issue.<br/>\r\n… hopefully people have thought about it<br/>\r\n… the issue is that IRI schemes that don’t start with // are seen as compact IRIs<br/>\r\n… e.g., icon:… is seen as a compact IRI not a full IRI<br/>\r\n… we could define these as undefined (rather than a prefix)<br/>\r\n… this approach adds a little security without banning all non // schemes<br/>\r\nIvan Herman: I don’t fully understand - so in your example in the issue, what’s the role of protected<br/>\r\nRob Sanderson: avoids someone stealing the meaning of prefix (e.g., mailto:)<br/>\r\nBenjamin Young: the goal is to allow continued use of these kinds of IRI prefixes<br/>\r\nRob Sanderson: having it in the context seems a good solution since it allows you to specify only the scope where you use the scheme rather than everywhere<br/>\r\nBenjamin Young: yes, it is good to scope this<br/>\r\nPierre-Antoine Champin: it seems to me the protected approach would not be very efficient<br/>\r\n… I’m not sure I fully grasp the use cases, but it seems you still get around protected<br/>\r\n… the only way to really protect against redirection of mailto: is to protect the individual properties (e.g., email)<br/>\r\nRob Sanderson: so you say that email values not to be expected<br/>\r\nPierre-Antoine Champin: not sure this requires anything additional since we already have prefix<br/>\r\n… seems a matter of best practice<br/>\r\nIvan Herman: in the example you have two approaches nul and prefix=false<br/>\r\nRob Sanderson: probably prefix=false, this works well since we already have prefix<br/>\r\nIvan Herman: do we?<br/>\r\nRob Sanderson: issue 76<br/>\r\nRob Sanderson: ref;: <a href=\"https://github.com/w3c/json-ld-api/issues/76\">https://github.com/w3c/json-ld-api/issues/76</a><br/>\r\nPierre-Antoine Champin: a more efficient protection would be { \"email\": { \"<code>@id\":</code> \"<a href=\"http://example.org/emailAddress\",\">http://example.org/emailAddress\",</a> \"<code>@type\":</code> \"<code>@id\",</code> \"<code>@protected\":</code> true, \"<code>@context\":</code> { \"mailto\": { \"<code>@prefix\":</code> false } } }<br/>\r\nRob Sanderson: proposal was made to add prefix with 3 allowed values (one of which would be false, as required by issue 177)<br/>\r\n… the issue in doing this was that you need to have an <code>@id,</code> which is why we might still need <code>@id</code> null<br/>\r\n… seems like we shouldn’t need that if prefix: false<br/>\r\n… Pierre-Antoine, does prefix: false already sufficient?<br/>\r\nPierre-Antoine Champin: not sure<br/>\r\nRuben Taelman: doesn’t seem to work right now<br/>\r\nRob Sanderson: but maybe it protects against intentional mischief<br/>\r\n… anyone willing to take action to verify that prefix: false does work or can be made to work?<br/>\r\nPierre-Antoine Champin: okay, put this action on me<br/>\r\nAction #2: test if <code>@prefix:</code> false without <code>@id</code> works as expected (Pierre-Antoine Champin)<br/>\r\nDavid I. Lehn: find it a little hard to understand the attack line here<br/>\r\n… if we assume all contexts are a risk, seems a bigger problem<br/>\r\n… protect should be more about extension and override<br/>\r\nRob Sanderson: we have run into this issue with regard to content being incorrectly expanded<br/>\r\nBenjamin Young: not directly on point, but it feels like a lot of our issues have had to do with managing context intermingling<br/>\r\n… we may need to zoom out a little<br/>\r\n… while there are issues here it seems like its about trust of contexts, ownership of contexts, etc.<br/>\r\n… this fragility that is still there is where we may have issues with security and privacy reviews<br/>\r\n… I sometimes feel like we’re applying pressure to the wrong part of the ecosystem<br/>\r\n… it’s not clear the role and motivation of the actors<br/>\r\n… so maybe we need a broader view<br/>\r\n… would not be an issue if you always trusted the context file you reference<br/>\r\nRob Sanderson: not certain about that. If you define mailto: you need to undefine it elsewhere in your instance<br/>\r\nBenjamin Young: so this is partly about remixing within instance / context<br/>\r\nRob Sanderson: I think at least we need to determining how prefix: false works without <code>@id</code> or <code>@id:</code> null<br/>\r\n… need to be able to treat these as resource IRI when you want to<br/>\r\nIvan Herman: I share bigbluehat’s concerns in a general way<br/>\r\n… for this issue you are asking if prefix: false solves current issue<br/>\r\n… since prefix is a 1.1 key, we need it to work as we want and so if it’s not working that way now, let’s make it work<br/>\r\nPierre-Antoine Champin: the questions becoming: is it possible (i.e. not over-complicated) to implement <code>@prefix</code> to work like this<br/>\r\nRob Sanderson: the action should allow us to do this<br/>\r\nPierre-Antoine Champin: i just realized during discussion we have already introduced redefining a term that looks like an IRI because no useful use case for doing this<br/>\r\n… in a way this desire to limit prefixes that are sometimes used as schemes<br/>\r\n… not clear how critical the use cases are<br/>\r\n… may confuse users to say some IRIs cannot be anything else, but some could be compact IRIs in disguise<br/>\r\nIvan Herman: does this mean we should have a list of prefixes that are schemes?<br/>\r\nPierre-Antoine Champin: no, trying hard not to say that<br/>\r\n… current rule is scheme://<br/>\r\n… and this is clear cut, non-ambiguous<br/>\r\n… it might be confusing to do this for non // schemes<br/>\r\nRob Sanderson: so our approach is to leave this to context authors rather than trying to maintain a universal list<br/>\r\n… this will almost certainly come up in security horizontal review<br/>\r\n… it would be nice to solve or improve it<br/>\r\n… if prefix: false works, we’re done<br/>\r\nProposed resolution: If <code>@prefix:</code> false works, then we can turn 177 into a best practice. If not, then 177 becomes an issue to improve <code>@prefix</code> to allow it. (Rob Sanderson)<br/>\r\nRob Sanderson: +1<br/>\r\nIvan Herman: +1<br/>\r\nRuben Taelman: +1<br/>\r\nPierre-Antoine Champin: +1<br/>\r\nRob Sanderson: otherwise we have to improve prefix: false so it does work<br/>\r\nTim Cole: +1<br/>\r\nAdam Soroka: +1<br/>\r\nDavid I. Lehn: +1<br/>\r\nBenjamin Young: +1<br/>\r\nDavid Newbury: +1<br/>\r\nResolution #3: If <code>@prefix:</code> false works, then we can turn 177 into a best practice. If not, then 177 becomes an issue to improve <code>@prefix</code> to allow it.<br/>\r\n</details>" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/499966301> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/191#issuecomment-499966301"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/191> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/499966301> .
<https://api.github.com/users/iherman> <http://schema.org/accountId> "iherman" .
<https://api.github.com/users/iherman> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/520723?v=4" .
<https://api.github.com/users/iherman> <http://schema.org/url> "https://github.com/iherman"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/iherman> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/499966301> <http://schema.org/creator> <https://api.github.com/users/iherman> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/499966301> <http://schema.org/startDate> "2019-06-07T17:14:13Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/499966301> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/499966301> <http://schema.org/description> "This issue was discussed in [a meeting](https://www.w3.org/2018/json-ld-wg/Meetings/Minutes/2019/2019-06-07-json-ld.html#section3-3).\r\n\r\n- `RESOLVED:  Defer syntax#191 and api#94 as new features after feature freeze`\r\n- `ACTION:  post blog reference for feature freeze (Rob Sanderson)`\r\n- `ACTION:  add feature freeze note to the syntax, api, and framing READMEs and issue template for bugs only (Benjamin Young)`\r\n<details><summary><i class=\"differentiate\">View the transcript</i></summary>\r\nIRI expansion<br/>\r\nRob Sanderson: ref: <a href=\"https://github.com/w3c/json-ld-syntax/issues/191\">https://github.com/w3c/json-ld-syntax/issues/191</a><br/>\r\nRob Sanderson: essentially, what I took away from this issue is that what is wanted is a way to set defaults per prefix<br/>\r\n… e.g., everything with x prefix, everything is a list<br/>\r\n… since we declare intent to close to new features (after last published draft)<br/>\r\n… so, can we defer this?<br/>\r\n… or is it a bug we have to address<br/>\r\nBenjamin Young: the use of this seems to want ad hoc terms mixed in with the prefix declaration<br/>\r\n… the first example seems that way<br/>\r\n… seems he could get same result with slightly more verbose (less confusing) instance<br/>\r\nAdam Soroka: this reminds me of java server tags<br/>\r\n… not clear that this is something json-ld was supposed to do.<br/>\r\n… this seems to be about complex structures, almost transformative<br/>\r\n… this is not the focus of json-ld. important to do, but not really our intent here<br/>\r\nIvan Herman: so what I understood from the issue is that this is not a bug, but really is a new feature<br/>\r\n… so the answer should simply be that we defer because of the feature freeze and avoid discussing the details<br/>\r\nAdam Soroka: should we send to CG<br/>\r\nIvan Herman: since we are not closing issue, we don’t need to send to CG<br/>\r\n… the person submitting may want to do so.<br/>\r\nProposed resolution: Defer syntax#191 and api#94 as new features after feature freeze (Rob Sanderson)<br/>\r\nDavid Newbury: +1<br/>\r\nRob Sanderson: will do same for issue in api<br/>\r\nRuben Taelman: +1<br/>\r\nBenjamin Young: +1<br/>\r\nRob Sanderson: +1<br/>\r\nTim Cole: +1<br/>\r\nIvan Herman: +1<br/>\r\nAdam Soroka: +1<br/>\r\nPierre-Antoine Champin: +1<br/>\r\nResolution #4: Defer syntax#191 and api#94 as new features after feature freeze<br/>\r\nAction #3: post blog reference for feature freeze (Rob Sanderson)<br/>\r\nIvan Herman: please add to issue link to blog where we declared feature freeze<br/>\r\nRob Sanderson: can we add mention of feature freeze in repos readme<br/>\r\nAction #4: add feature freeze note to the syntax, api, and framing READMEs and issue template for bugs only (Benjamin Young)<br/>\r\n</details>" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/500116208> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/191#issuecomment-500116208"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/191> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/500116208> .
<https://api.github.com/users/iridiankin> <http://schema.org/accountId> "iridiankin" .
<https://api.github.com/users/iridiankin> <http://schema.org/image> "https://avatars3.githubusercontent.com/u/16244827?v=4" .
<https://api.github.com/users/iridiankin> <http://schema.org/url> "https://github.com/iridiankin"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/iridiankin> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/500116208> <http://schema.org/creator> <https://api.github.com/users/iridiankin> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/500116208> <http://schema.org/startDate> "2019-06-08T11:13:22Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/500116208> <http://example.com/ns#authorAssociation> "NONE" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/500116208> <http://schema.org/description> "> This could be discussed in the JSON-LD community group towards a solution for a future version, and we will keep it in mind for inclusion if it solves bugs that come up within the 1.1 timeframe.\r\n> \r\n> Many thanks for the detailed discussion!\r\n\r\nAppreciated. I got useful feedback on the philosophy and direction of JSON-LD, this was mostly what I was looking for anyway. I'm in no rush... not yet at least. \r\nThanks for that!" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/500257406> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/189#issuecomment-500257406"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/189> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/500257406> .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/500257406> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/500257406> <http://schema.org/startDate> "2019-06-10T00:19:36Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/500257406> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/500257406> <http://schema.org/description> "Any refinements needed for this? If not, I'll merge it." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/500342671> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/189#issuecomment-500342671"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/189> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/500342671> .
<https://api.github.com/users/pchampin> <http://schema.org/accountId> "pchampin" .
<https://api.github.com/users/pchampin> <http://schema.org/image> "https://avatars1.githubusercontent.com/u/304612?v=4" .
<https://api.github.com/users/pchampin> <http://schema.org/url> "https://github.com/pchampin"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/pchampin> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/500342671> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/500342671> <http://schema.org/startDate> "2019-06-10T08:53:54Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/500342671> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/500342671> <http://schema.org/description> "Looking good to me" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/500441224> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/108#issuecomment-500441224"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/108> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/500441224> .
<https://api.github.com/users/dlongley> <http://schema.org/accountId> "dlongley" .
<https://api.github.com/users/dlongley> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/168137?v=4" .
<https://api.github.com/users/dlongley> <http://schema.org/url> "https://github.com/dlongley"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/dlongley> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/500441224> <http://schema.org/creator> <https://api.github.com/users/dlongley> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/500441224> <http://schema.org/startDate> "2019-06-10T14:39:29Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/500441224> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/500441224> <http://schema.org/description> "We could \"import\" another context in:\r\n\r\n```js\r\n\"@context\": {\r\n  \"@import\": /* ... */\r\n}\r\n```" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/500442194> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/108#issuecomment-500442194"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/108> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/500442194> .
<https://api.github.com/users/iherman> <http://schema.org/accountId> "iherman" .
<https://api.github.com/users/iherman> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/520723?v=4" .
<https://api.github.com/users/iherman> <http://schema.org/url> "https://github.com/iherman"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/iherman> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/500442194> <http://schema.org/creator> <https://api.github.com/users/iherman> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/500442194> <http://schema.org/startDate> "2019-06-10T14:42:06Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/500442194> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/500442194> <http://schema.org/description> "@dlongley using `@import` is probably better than `@contextref` indeed." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/500457561> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/108#issuecomment-500457561"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/108> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/500457561> .
<https://api.github.com/users/pchampin> <http://schema.org/accountId> "pchampin" .
<https://api.github.com/users/pchampin> <http://schema.org/image> "https://avatars1.githubusercontent.com/u/304612?v=4" .
<https://api.github.com/users/pchampin> <http://schema.org/url> "https://github.com/pchampin"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/pchampin> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/500457561> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/500457561> <http://schema.org/startDate> "2019-06-10T15:23:16Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/500457561> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/500457561> <http://schema.org/description> "This is heavy bikeshedding, but It wasn't me who started it :-)\r\n\r\nI agree that overriding `@context` is a bad idea, and that `{\"@context\": { \"@contextref\": ... } }` is verbose and somewhat redundant.\r\n\r\nMy problem with `@import`, is that, as a programmer, it may lead me to believe that I could write something like:\r\n\r\n```json\r\n{\r\n  \"@context\": {\r\n    \"@import\": [ \"http://example.org/ctx1\", \"http://example.org/ctx2\" ],\r\n    \"myTerm1\": { \"@id\": \"http://example.org/ns/myTerm\" },\r\n    \"myTerm2\": { \"@id\": \"http://example.org/ns/myTerm\" }\r\n  }\r\n}\r\n```\r\nwhich is not how it is supposed to work.\r\n\r\nMy preference would go to `@href` or `@src`.\r\n\r\nThinking about it, we could even use `@id`. This would mean that, in the value of `@context`, `\"http://schema.org/\"` and `{\"@id\": \"http://schema.org/\"}` would mean the same thing, which is consistent with how it works in other places in JSON-LD." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/500460046> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/108#issuecomment-500460046"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/108> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/500460046> .
<https://api.github.com/users/iherman> <http://schema.org/accountId> "iherman" .
<https://api.github.com/users/iherman> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/520723?v=4" .
<https://api.github.com/users/iherman> <http://schema.org/url> "https://github.com/iherman"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/iherman> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/500460046> <http://schema.org/creator> <https://api.github.com/users/iherman> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/500460046> <http://schema.org/startDate> "2019-06-10T15:29:36Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/500460046> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/500460046> <http://schema.org/description> "> Thinking about it, we could even use `@id`.\r\n\r\nLet us not overload `@id`. In here we are defining something upon which a JSON-LD processor must \"act\", which makes this functionality very different. " .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/500475150> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/189#issuecomment-500475150"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/189> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/500475150> .
<https://api.github.com/users/azaroth42> <http://schema.org/accountId> "azaroth42" .
<https://api.github.com/users/azaroth42> <http://schema.org/image> "https://avatars3.githubusercontent.com/u/871868?v=4" .
<https://api.github.com/users/azaroth42> <http://schema.org/url> "https://github.com/azaroth42"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/azaroth42> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/500475150> <http://schema.org/creator> <https://api.github.com/users/azaroth42> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/500475150> <http://schema.org/startDate> "2019-06-10T16:06:13Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/500475150> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/500475150> <http://schema.org/description> "Yup, looks good to me too, thanks Gregg!" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/500479455> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/108#issuecomment-500479455"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/108> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/500479455> .
<https://api.github.com/users/azaroth42> <http://schema.org/accountId> "azaroth42" .
<https://api.github.com/users/azaroth42> <http://schema.org/image> "https://avatars3.githubusercontent.com/u/871868?v=4" .
<https://api.github.com/users/azaroth42> <http://schema.org/url> "https://github.com/azaroth42"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/azaroth42> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/500479455> <http://schema.org/creator> <https://api.github.com/users/azaroth42> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/500479455> <http://schema.org/startDate> "2019-06-10T16:17:37Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/500479455> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/500479455> <http://schema.org/description> "My preference would be `@src` \r\n\r\n* I agree that `@context` and `@id` would be quite overloaded\r\n* I don't mind `@import` but I think the by reference / by value question that @pchampin brings up is important. \r\n* `@href` seems more like a link to something than a source URI to import\r\n* `@src` is short and to the point :)\r\n" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/500618145> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/190#issuecomment-500618145"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/190> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/500618145> .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/500618145> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/500618145> <http://schema.org/startDate> "2019-06-10T22:29:41Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/500618145> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/500618145> <http://schema.org/description> "Awaiting updates to https://github.com/w3c/json-ld-api/pull/92." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/501767575> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/193#issuecomment-501767575"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/193> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/501767575> .
<https://api.github.com/users/iherman> <http://schema.org/accountId> "iherman" .
<https://api.github.com/users/iherman> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/520723?v=4" .
<https://api.github.com/users/iherman> <http://schema.org/url> "https://github.com/iherman"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/iherman> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/501767575> <http://schema.org/creator> <https://api.github.com/users/iherman> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/501767575> <http://schema.org/startDate> "2019-06-13T16:03:55Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/501767575> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/501767575> <http://schema.org/description> "I have just a minor comment: the text includes the text:\r\n\r\n> However, all URIs starting with  http://www.w3.org/ns/json-ld  are reserved for future use by JSON-LD specifications. \r\n\r\nA \"Note\" is automatically non normative. I wonder whether it would not be better to move this text into the 'normative' text, right after the list of json-ld URI-s (and probably without the word 'However').\r\n\r\nOtherwise it looks o.k. to me." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/501768301> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/193#issuecomment-501768301"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/193> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/501768301> .
<https://api.github.com/users/BigBlueHat> <http://schema.org/accountId> "BigBlueHat" .
<https://api.github.com/users/BigBlueHat> <http://schema.org/image> "https://avatars1.githubusercontent.com/u/43209?v=4" .
<https://api.github.com/users/BigBlueHat> <http://schema.org/url> "https://github.com/BigBlueHat"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/BigBlueHat> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/501768301> <http://schema.org/creator> <https://api.github.com/users/BigBlueHat> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/501768301> <http://schema.org/startDate> "2019-06-13T16:05:38Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/501768301> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/501768301> <http://schema.org/description> "Also, @pchampin I think you want us added as \"reviewers\" not \"assignee's\" (you would be the assignee for this one. 😃 " .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/501779312> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/193#issuecomment-501779312"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/193> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/501779312> .
<https://api.github.com/users/pchampin> <http://schema.org/accountId> "pchampin" .
<https://api.github.com/users/pchampin> <http://schema.org/image> "https://avatars1.githubusercontent.com/u/304612?v=4" .
<https://api.github.com/users/pchampin> <http://schema.org/url> "https://github.com/pchampin"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/pchampin> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/501779312> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/501779312> <http://schema.org/startDate> "2019-06-13T16:34:37Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/501779312> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/501779312> <http://schema.org/description> "@bigbluehat indeed I did. Sorry about that..." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/501830904> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/193#issuecomment-501830904"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/193> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/501830904> .
<https://api.github.com/users/BigBlueHat> <http://schema.org/accountId> "BigBlueHat" .
<https://api.github.com/users/BigBlueHat> <http://schema.org/image> "https://avatars1.githubusercontent.com/u/43209?v=4" .
<https://api.github.com/users/BigBlueHat> <http://schema.org/url> "https://github.com/BigBlueHat"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/BigBlueHat> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/501830904> <http://schema.org/creator> <https://api.github.com/users/BigBlueHat> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/501830904> <http://schema.org/startDate> "2019-06-13T18:41:38Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/501830904> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/501830904> <http://schema.org/description> "> @BigBlueHat indeed I did. Sorry about that...\r\n\r\nNo worries! 😄 " .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/501857457> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/172#issuecomment-501857457"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/172> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/501857457> .
<https://api.github.com/users/BigBlueHat> <http://schema.org/accountId> "BigBlueHat" .
<https://api.github.com/users/BigBlueHat> <http://schema.org/image> "https://avatars1.githubusercontent.com/u/43209?v=4" .
<https://api.github.com/users/BigBlueHat> <http://schema.org/url> "https://github.com/BigBlueHat"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/BigBlueHat> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/501857457> <http://schema.org/creator> <https://api.github.com/users/BigBlueHat> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/501857457> <http://schema.org/startDate> "2019-06-13T20:00:53Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/501857457> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/501857457> <http://schema.org/description> "> The only issue, of course, is there is no versioning for schema.org... but we haven't had an issue w/ that yet.\r\n\r\nThere sort of is...but it could be better. For instance, all the versions are in a directory on GitHub:\r\nhttps://github.com/schemaorg/schemaorg/tree/master/data/releases\r\n\r\nThe 3.7 context file (for instance) lives at https://github.com/schemaorg/schemaorg/blob/104238766458b465e6a60cc7d049f887c542563a/data/releases/3.7/schemaorgcontext.jsonld\r\n\r\nThat's versioned--via git sha's--but not tagged in git (which would help) nor made available as \"the 3.7 context file\" from the [release history page](https://schema.org/docs/releases.html). All of that would help certainly." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/501858275> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/172#issuecomment-501858275"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/172> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/501858275> .
<https://api.github.com/users/BigBlueHat> <http://schema.org/accountId> "BigBlueHat" .
<https://api.github.com/users/BigBlueHat> <http://schema.org/image> "https://avatars1.githubusercontent.com/u/43209?v=4" .
<https://api.github.com/users/BigBlueHat> <http://schema.org/url> "https://github.com/BigBlueHat"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/BigBlueHat> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/501858275> <http://schema.org/creator> <https://api.github.com/users/BigBlueHat> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/501858275> <http://schema.org/startDate> "2019-06-13T20:03:16Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/501858275> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/501858275> <http://schema.org/description> "> From @danbri, posted with permission, after discussion with @gkellogg:\r\n\r\n@azaroth42 it would be helpful (if possible) to see more of that thread, or to make this an actual conversation/call (again, if possible). Without it, it's not clear we're all talking about the same thing(s)." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/501884159> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/172#issuecomment-501884159"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/172> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/501884159> .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/501884159> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/501884159> <http://schema.org/startDate> "2019-06-13T21:23:28Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/501884159> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/501884159> <http://schema.org/description> "@BigBlueHat this was from hallway conversations at the Web Conference, so no thread to refer to. @danbri should clarify his position, but IIRC, they could turn off content-negotiation for http(s)://schema.org and return a stub context in a script tag which references the actual JSON-LD version of the context, which could help their usage. So, for example, the schema.org web page might look something like the following:\r\n\r\n```html\r\n<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n  <!-- Generated from headtags.tpl -->\r\n    <meta charset=\"utf-8\" >\r\n    <link rel=\"shortcut icon\" type=\"image/png\" href=\"docs/favicon.ico\"/>\r\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"docs/schemaorg.css\" />\r\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"docs/prettify.css\" />\r\n    ...\r\n    <script type=\"application/ld+json\">{\"@context\": \"https://schema.org/docs/jsonldcontext.jsonld\"}</script>\r\n    ...\r\n</head>\r\n</html>\r\n```\r\n\r\nPresently, content-negotiation does a redirect to https://schema.org/docs/jsonldcontext.jsonld, so this would simplify their hosting infrastructure." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/501969484> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/170#issuecomment-501969484"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/170> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/501969484> .
<https://api.github.com/users/iherman> <http://schema.org/accountId> "iherman" .
<https://api.github.com/users/iherman> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/520723?v=4" .
<https://api.github.com/users/iherman> <http://schema.org/url> "https://github.com/iherman"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/iherman> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/501969484> <http://schema.org/creator> <https://api.github.com/users/iherman> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/501969484> <http://schema.org/startDate> "2019-06-14T05:07:33Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/501969484> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/501969484> <http://schema.org/description> "Settled in #193. @swickr, the proposal has been accepted and has been put into the editor's draft.\r\n\r\nClosing the issue" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/502163075> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/172#issuecomment-502163075"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/172> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/502163075> .
<https://api.github.com/users/BigBlueHat> <http://schema.org/accountId> "BigBlueHat" .
<https://api.github.com/users/BigBlueHat> <http://schema.org/image> "https://avatars1.githubusercontent.com/u/43209?v=4" .
<https://api.github.com/users/BigBlueHat> <http://schema.org/url> "https://github.com/BigBlueHat"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/BigBlueHat> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/502163075> <http://schema.org/creator> <https://api.github.com/users/BigBlueHat> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/502163075> <http://schema.org/startDate> "2019-06-14T15:54:03Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/502163075> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/502163075> <http://schema.org/description> "Right, but it would vastly increase the amount of work a JSON-LD processor must do.\r\n\r\nGiven this as a data document:\r\n```json\r\n{\"@context\": \"https://schema.org/\",\r\n \"@type\": \"Person\",\r\n \"name\": \"me\"}\r\n```\r\n\r\nThe processor (without a cached context it says is valid for `https://schema.org/`) would need to...\r\n1. `GET` the default (HTML) response from `https://schema.org/`\r\n2. Parse that looking for data blocks (i.e. `<script type=\"application/ld+json\">`)\r\n    1. with the added requirement that one of them says it's a context file?\r\n3. Extract that JSON-LD datablock\r\n4. Parse it.\r\n5. If valid, `GET` the `@context` value(s).\r\n6. Parse those to create a single active context for the data document.\r\n\r\nThe processing requirements go from \"use an HTTP(S) client\" to \"use an HTTP(s) client and HTML parser (which possibly supports JavaScript)." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/502164325> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/172#issuecomment-502164325"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/172> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/502164325> .
<https://api.github.com/users/danbri> <http://schema.org/accountId> "danbri" .
<https://api.github.com/users/danbri> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/170265?v=4" .
<https://api.github.com/users/danbri> <http://schema.org/url> "https://github.com/danbri"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/danbri> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/502164325> <http://schema.org/creator> <https://api.github.com/users/danbri> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/502164325> <http://schema.org/startDate> "2019-06-14T15:57:15Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/502164325> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/502164325> <http://schema.org/description> "There is a massive amount of json-ld embedded within html. Tools without\nthe capability to extract it are ignoring one of the biggest applications\nof json-ld. So perhaps the burden is not quite so huge?\n\nOn Fri, 14 Jun 2019 at 16:54, BigBlueHat <notifications@github.com> wrote:\n\n> Right, but it would vastly increase the amount of work a JSON-LD processor\n> must do.\n>\n> Given this as a data document:\n>\n> {\"@context\": \"https://schema.org/\",\n>  \"@type\": \"Person\",\n>  \"name\": \"me\"}\n>\n> The processor (without a cached context it says is valid for\n> https://schema.org/) would need to...\n>\n>    1. GET the default (HTML) response from https://schema.org/\n>    2. Parse that looking for data blocks (i.e. <script\n>    type=\"application/ld+json\">)\n>       1. with the added requirement that one of them says it's a context\n>       file?\n>    3. Extract that JSON-LD datablock\n>    4. Parse it.\n>    5. If valid, GET the @context value(s).\n>    6. Parse those to create a single active context for the data document.\n>\n> The processing requirements go from \"use an HTTP(S) client\" to \"use an\n> HTTP(s) client and HTML parser (which possibly supports JavaScript).\n>\n> —\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/w3c/json-ld-syntax/issues/172?email_source=notifications&email_token=AABJSGKMBJVJIJIX5FIWJ2TP2O5J3A5CNFSM4HK3Y2R2YY3PNVWWK3TUL52HS4DFVREXG43VMVBW63LNMVXHJKTDN5WW2ZLOORPWSZGODXXGNAY#issuecomment-502163075>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AABJSGMMHEFSWFIOWEAFWI3P2O5J3ANCNFSM4HK3Y2RQ>\n> .\n>\n" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/502165253> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/172#issuecomment-502165253"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/172> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/502165253> .
<https://api.github.com/users/BigBlueHat> <http://schema.org/accountId> "BigBlueHat" .
<https://api.github.com/users/BigBlueHat> <http://schema.org/image> "https://avatars1.githubusercontent.com/u/43209?v=4" .
<https://api.github.com/users/BigBlueHat> <http://schema.org/url> "https://github.com/BigBlueHat"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/BigBlueHat> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/502165253> <http://schema.org/creator> <https://api.github.com/users/BigBlueHat> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/502165253> <http://schema.org/startDate> "2019-06-14T15:59:52Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/502165253> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/502165253> <http://schema.org/description> "@danbri certainly if you're already in that space doing that thing, you're all set. 😃 But if you're in a \"pure\" JSON-LD environment (database, IoT, etc), you'd very much want to avoid having higher processing requirements." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/502166692> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/172#issuecomment-502166692"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/172> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/502166692> .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/502166692> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/502166692> <http://schema.org/startDate> "2019-06-14T16:03:58Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/502166692> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/502166692> <http://schema.org/description> "> Right, but it would vastly increase the amount of work a JSON-LD processor must do.\r\n> \r\n> Given this as a data document:\r\n> \r\n> ```json\r\n> {\"@context\": \"https://schema.org/\",\r\n>  \"@type\": \"Person\",\r\n>  \"name\": \"me\"}\r\n> ```\r\n> \r\n> The processor (without a cached context it says is valid for `https://schema.org/`) would need to...\r\n> \r\n> 1. `GET` the default (HTML) response from `https://schema.org/`\r\n> 2. Parse that looking for data blocks (i.e. `<script type=\"application/ld+json\">`)\r\n>    \r\n>    1. with the added requirement that one of them says it's a context file?\r\n> 3. Extract that JSON-LD datablock\r\n> 4. Parse it.\r\n> 5. If valid, `GET` the `@context` value(s).\r\n> 6. Parse those to create a single active context for the data document.\r\n> \r\n> The processing requirements go from \"use an HTTP(S) client\" to \"use an HTTP(s) client and HTML parser (which possibly supports JavaScript).\r\n\r\nTools really need to cache contexts, anyway, so this might serve as an added incentive to do so." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/502192169> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/177#issuecomment-502192169"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/177> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/502192169> .
<https://api.github.com/users/iherman> <http://schema.org/accountId> "iherman" .
<https://api.github.com/users/iherman> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/520723?v=4" .
<https://api.github.com/users/iherman> <http://schema.org/url> "https://github.com/iherman"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/iherman> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/502192169> <http://schema.org/creator> <https://api.github.com/users/iherman> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/502192169> <http://schema.org/startDate> "2019-06-14T17:14:21Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/502192169> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/502192169> <http://schema.org/description> "This issue was discussed in [a meeting](https://www.w3.org/2018/json-ld-wg/Meetings/Minutes/2019/2019-06-14-json-ld#section3-1).\r\n\r\n- No actions or resolutions\r\n<details><summary><i class=\"differentiate\">View the transcript</i></summary>\r\n<b>2019-06-07-action2:</b> test if <code>@prefix:</code> false without <code>@id</code> works as expected (Pierre-Antoine Champin) #87<br/>\r\nBenjamin Young: issue #87 <a href=\"https://github.com/w3c/json-ld-wg/issues/87\">https://github.com/w3c/json-ld-wg/issues/87</a><br/>\r\nBenjamin Young: born from #76 <a href=\"https://github.com/w3c/json-ld-api/issues/76\">https://github.com/w3c/json-ld-api/issues/76</a><br/>\r\nIvan Herman: original-original: <a href=\"https://github.com/w3c/json-ld-syntax/issues/177\">https://github.com/w3c/json-ld-syntax/issues/177</a><br/>\r\nBenjamin Young: next two issues are related<br/>\r\nPierre-Antoine Champin: some background: it was possible to define certain URI schemes as prefixes<br/>\r\n… leading to confusing them with the start of CURIs<br/>\r\n… I tried to alter <code>@prefix</code> to avoid this<br/>\r\n… but that turns out not to be possible<br/>\r\n… . so <code>@prefix</code> must be accompanied by <code>@id</code><br/>\r\n… even if you accept ruben’s alteration, it is still not simple<br/>\r\n… <code>@prefix</code> is only used during compaction as a hint to the algo<br/>\r\n… but never it is used in expansion<br/>\r\n… to block interpretation as a CURI<br/>\r\n… so doing this with <code>@prefix</code> would radically change the meaning of <code>@prefix,</code> to add an effect during expansion<br/>\r\n… this thing will come back and bite other people than us<br/>\r\nAdam Soroka: .. users would expect <code>@prefix</code> to work both ways<br/>\r\nPierre-Antoine Champin: but that may have real effects on implementors<br/>\r\nGregg Kellogg: yes, <code>@prefixis</code> only meaningful during compaction<br/>\r\n… in 1.0 any prefix could be used<br/>\r\n… so we made some changes<br/>\r\n… including restrictions and a keyword <code>@prefix</code> to overcome them<br/>\r\n… we do run into 1.0 compatibility issues here<br/>\r\n… but this is something we just didn’t complete<br/>\r\n… it’s not a major rewrite<br/>\r\n… now we are forcing the use of expanded term defns for things that used to be simple prefixes<br/>\r\nDave Longley: +1 to what gregg is saying … it seems to mostly be restricted to very local change in IRI expansion where we need one extra flag check<br/>\r\nGregg Kellogg: the impact isn’t too bad on the algos<br/>\r\n… we did make changes to limit the use of prefixes during compaction, we should make the same changes for expansion<br/>\r\nIvan Herman: I thikn this issue arose in a different ticket ^^^^<br/>\r\n… I have said before that we shouldn’t add too many things to the spec<br/>\r\n… do we really have to do anything about #177?<br/>\r\n… does it occur significantly in 1.0 usage?<br/>\r\n… do we need to spend two meetings on it?<br/>\r\n… i don’t think so. my feeling is that we should either close or defer<br/>\r\n… we struggled whether this is really a security issue<br/>\r\n… it can be awkward<br/>\r\n… in several years it did not bite us<br/>\r\nBenjamin Young: we haven’t had <code>@prefix</code> very long either!<br/>\r\nIvan Herman: but it’s not a matter of just <code>@prefix</code><br/>\r\nPierre-Antoine Champin: I agree with ivan<br/>\r\n… I’m not convinced that this is a security issue<br/>\r\n… . I’m not convinced that <code>@prefix</code> would be a good way to solve it if it were<br/>\r\nAdam Soroka: .. getting this right with <code>@prefix</code> would be challenging<br/>\r\nPierre-Antoine Champin: <code>@prefix</code> was introduced for other reasons<br/>\r\n… the way we have it now is counterintuitive<br/>\r\n… we were all talking last week about using it this way without even realizing we couldn’t. that’s not good!<br/>\r\nGregg Kellogg: when we introduced the restrictions for prefixes, we overlooked expansion<br/>\r\n… we left the job partly done<br/>\r\nIvan Herman: we are adding features and making the spec more complicated<br/>\r\nGregg Kellogg: is inconsistency complicated?<br/>\r\nIvan Herman: we are complicating the spec a few months before we try to get to CR<br/>\r\nDave Longley: I sympathize with ivan<br/>\r\n… if we consider this a security issue, then <code>@prefix</code> is not how we should address it<br/>\r\n… we could instead introduce a rule that you don’t expand prefixes when <code>@vocab</code> = true<br/>\r\nGregg Kellogg: I agree with dlongley; that would solve the problem but burn all the fields<br/>\r\nIvan Herman: I propose that we defer one of the two<br/>\r\nGregg Kellogg: I don’t think we can roll back prefix<br/>\r\n… it fixes actual errors in 1.0<br/>\r\nPierre-Antoine Champin: I suggest we make no decision before the next agenda item<br/>\r\nGregg Kellogg: I can do a speculative PR<br/>\r\nBenjamin Young: let’s go to the next issue, discuss, then come back to this<br/>\r\n</details>" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/502342254> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/194#issuecomment-502342254"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/194> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/502342254> .
<https://api.github.com/users/iherman> <http://schema.org/accountId> "iherman" .
<https://api.github.com/users/iherman> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/520723?v=4" .
<https://api.github.com/users/iherman> <http://schema.org/url> "https://github.com/iherman"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/iherman> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/502342254> <http://schema.org/creator> <https://api.github.com/users/iherman> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/502342254> <http://schema.org/startDate> "2019-06-15T07:15:52Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/502342254> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/502342254> <http://schema.org/description> "Marked as non substantive for IPR from ash-nazg." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/502356034> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/194#issuecomment-502356034"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/194> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/502356034> .
<https://api.github.com/users/pchampin> <http://schema.org/accountId> "pchampin" .
<https://api.github.com/users/pchampin> <http://schema.org/image> "https://avatars1.githubusercontent.com/u/304612?v=4" .
<https://api.github.com/users/pchampin> <http://schema.org/url> "https://github.com/pchampin"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/pchampin> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/502356034> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/502356034> <http://schema.org/startDate> "2019-06-15T10:46:37Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/502356034> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/502356034> <http://schema.org/description> "Strictly speaking, the context itself does not use any 1.1 specific feature. It can be used even with a 1.0 processor (see [example in the playground](https://json-ld.org/playground/#startTab=tab-expanded&json-ld=%7B%22%40context%22%3A%7B%22%40vocab%22%3A%22https%3A%2F%2Fpurl.org%2Fgeojson%2Fvocab%23%22%2C%22type%22%3A%22%40type%22%2C%22bbox%22%3A%7B%22%40container%22%3A%22%40list%22%7D%2C%22coordinates%22%3A%7B%22%40container%22%3A%22%40list%22%7D%7D%2C%22type%22%3A%22Feature%22%2C%22bbox%22%3A%5B-10%2C-10%2C10%2C10%5D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B1.2%2C3.4%5D%7D%7D)).\r\n\r\nWhat is specific to JSON-LD 1.1 is that it allows lists of lists in the *data*." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/502368223> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/194#issuecomment-502368223"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/194> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/502368223> .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/502368223> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/502368223> <http://schema.org/startDate> "2019-06-15T13:44:37Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/502368223> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/502368223> <http://schema.org/description> "Lists of lists does not require processing mode to be set to 1.1. It is a feature of the 1.1 specification independent of processing mode. Tests are (or should be) marked with `”specVersion”: “json-ld-1.1”`." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/502391356> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/174#issuecomment-502391356"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/174> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/502391356> .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/502391356> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/502391356> <http://schema.org/startDate> "2019-06-15T19:01:11Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/502391356> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/502391356> <http://schema.org/description> "API updated to fix this in https://github.com/w3c/json-ld-api/pull/89." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/502823292> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/194#issuecomment-502823292"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/194> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/502823292> .
<https://api.github.com/users/aljones15> <http://schema.org/accountId> "aljones15" .
<https://api.github.com/users/aljones15> <http://schema.org/image> "https://avatars2.githubusercontent.com/u/278280?v=4" .
<https://api.github.com/users/aljones15> <http://schema.org/url> "https://github.com/aljones15"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/aljones15> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/502823292> <http://schema.org/creator> <https://api.github.com/users/aljones15> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/502823292> <http://schema.org/startDate> "2019-06-17T19:43:03Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/502823292> <http://example.com/ns#authorAssociation> "CONTRIBUTOR" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/502823292> <http://schema.org/description> "ahhh ok my bad. I saw the tests marking it as 1.1 so thought it needed to be there." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/503780999> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/177#issuecomment-503780999"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/177> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/503780999> .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/503780999> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/503780999> <http://schema.org/startDate> "2019-06-19T23:18:09Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/503780999> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/503780999> <http://schema.org/description> "Is this resolved by w3c/json-ld-api#109 and w3c/json-ld-api#110? Do we need something in the syntax document?" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/504171468> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/9#issuecomment-504171468"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/9> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/504171468> .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/504171468> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/504171468> <http://schema.org/startDate> "2019-06-20T20:30:03Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/504171468> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/504171468> <http://schema.org/description> "I believe we can close this issue with no changes necessary. Perhaps a discussion in the Best Practices doc." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/504173321> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/174#issuecomment-504173321"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/174> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/504173321> .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/504173321> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/504173321> <http://schema.org/startDate> "2019-06-20T20:35:55Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/504173321> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/504173321> <http://schema.org/description> "#195 was reviewed by @pchampin and @gkellogg. w3c/json-ld-api#89 by @dlongley and @gkellogg. Closing." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/504173666> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/149#issuecomment-504173666"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/149> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/504173666> .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/504173666> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/504173666> <http://schema.org/startDate> "2019-06-20T20:36:59Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/504173666> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/504173666> <http://schema.org/description> "PR #196 reviewed by @pchampin. Closing." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/504407009> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/76#issuecomment-504407009"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/76> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/504407009> .
<https://api.github.com/users/AtesComp> <http://schema.org/accountId> "AtesComp" .
<https://api.github.com/users/AtesComp> <http://schema.org/image> "https://avatars3.githubusercontent.com/u/23365631?v=4" .
<https://api.github.com/users/AtesComp> <http://schema.org/url> "https://github.com/AtesComp"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/AtesComp> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/504407009> <http://schema.org/creator> <https://api.github.com/users/AtesComp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/504407009> <http://schema.org/startDate> "2019-06-21T12:25:45Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/504407009> <http://example.com/ns#authorAssociation> "NONE" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/504407009> <http://schema.org/description> "UPDATED (I shouldn't comment when not feeling well).\r\n\r\nI'll accept that a frame solution may be the answer. The current playground breaks.  I've read the working framing document and it's a vast improvement. It's starting to make sense." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/504501571> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/108#issuecomment-504501571"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/108> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/504501571> .
<https://api.github.com/users/iherman> <http://schema.org/accountId> "iherman" .
<https://api.github.com/users/iherman> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/520723?v=4" .
<https://api.github.com/users/iherman> <http://schema.org/url> "https://github.com/iherman"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/iherman> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/504501571> <http://schema.org/creator> <https://api.github.com/users/iherman> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/504501571> <http://schema.org/startDate> "2019-06-21T17:12:26Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/504501571> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/504501571> <http://schema.org/description> "This issue was discussed in [a meeting](https://www.w3.org/2018/json-ld-wg/Meetings/Minutes/2019/2019-06-21-json-ld#section3-1).\r\n\r\n- `ACTION:  write up proposed syntax and functionality for <code>@src/@propagate</code> (Rob Sanderson)`\r\n<details><summary><i class=\"differentiate\">View the transcript</i></summary>\r\n3.1. Consider context by reference with metadata #108<br/>\r\nBenjamin Young: <a href=\"https://github.com/w3c/json-ld-syntax/issues/108\">https://github.com/w3c/json-ld-syntax/issues/108</a><br/>\r\nIvan Herman: also: <a href=\"https://github.com/w3c/json-ld-syntax/issues/174\">https://github.com/w3c/json-ld-syntax/issues/174</a><br/>\r\nBenjamin Young: This is about a more advanced context object that includes referencing other contexts with meta data for a whole host of issues. Most recent use case is around setting propagation.<br/>\r\n… Rob you were the last to propose some things.<br/>\r\nRob Sanderson: At this point I think we need this particular pattern. Of the proposed colors for the bikesheds, <code>@src</code> seems to convey the appropriate semantics. It’s not necessarily a link/href, <code>@context</code> and <code>@id</code> would make for a lot of overloading that would maybe cause confusion.<br/>\r\n… <code>@import</code> isn’t too bad but pchampin indicated why it may not be ideal.<br/>\r\n… It seems to me like a reasonable way forwards, assuming, it’s implementable and unambiguous.<br/>\r\nGregg Kellogg: I guess my concern about <code>@src</code> is … one is that we don’t typically use abbreviated keywords in JSON-LD, <code>@source</code> might solve that. The other thing is that my familiarity is similar to href like in HTML where it doesn’t provide for an inline option, if we wanted to allow for those there which would sort of make sense. <code>@import</code> seems a little more unambigious.<br/>\r\nPierre-Antoine Champin: Regarding what Gregg just said, I think you have a point, indeed. I wanted to ask about the use cases, I realized after making those proposals, we might not cover one of those. We reactivated this issue about the idea that parameters could be added to this context, to allow this context to propagate/not propagate.<br/>\r\nRob Sanderson: Reference: The propagate case - <a href=\"https://github.com/w3c/json-ld-syntax/issues/108#issuecomment-497809905\">https://github.com/w3c/json-ld-syntax/issues/108#issuecomment-497809905</a><br/>\r\nPierre-Antoine Champin: For this use case we might want to do this with a URL reference or an embedded <code>@context.</code> Meta data is always about a referenced context not one that is directly embedded. Does that cover all our use cases.<br/>\r\nBenjamin Young: Good flag to raise.<br/>\r\nIvan Herman: It’s very close to what I wanted to ask. I’m not completely sure what we’ll use it for apart from the fact that it looks nice.<br/>\r\n… There are things like sealed and SRI that came up but we’re not talking about that anymore. What are the use cases we want to use it for?<br/>\r\n… Btw, ‘src’ is in use for the image URL in HTML, very close to href.<br/>\r\nRob Sanderson: I wanted to ask the same question, do we really want to/need embedded contexts here or external sufficient? I don’t know why you would use an embedded one.<br/>\r\n… If it’s only for reference, <code>@src</code> is ok, but what’s the use case for embedded.<br/>\r\nGregg Kellogg: I think we might want to constrain ourselves to a keyword that references an external resource about which we might assert some meta data. Rather than keeping it open about importing several things – which of them are we asserting things about, as well as an embedded case. There’s no use case for that, only some notion of uniformity to allow that.<br/>\r\n… Now it starts looking overly generalized. If we need a way for a context to reference another one with the semantics that that context is imported into the referencing context that would also allow some room for asserting information about the referenced context, that is a narrow solution which addresses that use case.<br/>\r\nRob Sanderson: +1<br/>\r\nBenjamin Young: Roughly like what Rob just posted in chat.<br/>\r\nGregg Kellogg: In which case <code>@source</code> is ok, want some consistency.<br/>\r\nRob Sanderson: Suggested syntax example: {\"<code>@context\":</code> [{\"<code>@src\":</code> \"<a href=\"http://.../context.json\",\">http://.../context.json\",</a> \"<code>@propagate\":</code> false}, ...] }<br/>\r\nIvan Herman: I must admit that I didn’t even consider having this embedded. Rob would you want to comment … a question I have is are we sure this is the only property? We don’t have any other meta data properties to define in 1.1 so far?<br/>\r\nRob Sanderson: I don’t think so, this is the only one we have so far <code>@propagate.</code><br/>\r\nIvan Herman: I’d like to be sure this is the right solution.<br/>\r\nPierre-Antoine Champin: Just to be clear, I was not trying to generalize or over generalize, I was just pointing out that as Ivan and Rob pointed out … <code>@propagate</code> is what we unearthed this issue. When I think about it, it makes sense to use it on an embedded context. It started with scoped contexts, most of the time those are embedded.<br/>\r\n… Is <code>@source</code> really a solution to the problem we were trying to solve?<br/>\r\n… My personal answer would be “no it’s not” and maybe we reopened the wrong issue to solve that problem. This mechanism as we envisioned it is more about referenced contexts, not embedded ones.<br/>\r\nRob Sanderson: I think it is still the right thing to reopen. If it’s embedded we don’t really need this pattern at all.<br/>\r\n… You could restructure your context to do things differently.<br/>\r\n… When you want to reuse an external context, then you need to say whether or not the terms of that context propagate or not.<br/>\r\n… If it’s embedded you just set it and you’re done.<br/>\r\n… When you pull in another context, like a 1.0 from Annotations, it assumes something that isn’t intended and you need to change it.<br/>\r\n… I think the case is an external context and it should not have the default propagation value.<br/>\r\nGregg Kellogg: If it’s within a type then type contexts don’t propagate.<br/>\r\nRob Sanderson: Right and this is to change this behavior so it does.<br/>\r\n… Yes, it’s to fix the impedance mismatch between 1.0 and 1.1.<br/>\r\nIvan Herman: I am a little bit lost. What I would propose is that somebody comes up with text, possibly a PR that defines this syntax so that it’s clear what it is. Defines its usage with propagate and what that means. I’m a little bit lost. Having something specific written down would help.<br/>\r\nGregg Kellogg: So I think my confusion is that I recall the discussion about this … as wanting the ability to reference an external 1.0 context where we’d have to have <code>@version</code> specified within there. You can’t update the referenced context to do that.<br/>\r\n… If that is one of the use cases .. the other use case is to override the propagation behavior of type-scoped behavior. Not sure how it does that cleanly. Not sure how this relates to the type-scoped propagatability without something more explicit.<br/>\r\nRob Sanderson: This is the issue that we discussed a couple of weeks ago now. Where, it’s the combination of the 1.0 and the type-scoped context where it really matters. Because 1.0 contexts are defined without the notion of type-scoped contexts or propagation then they’d never be written in such a way that it’s prevented because it’s not possible in 1.0.<br/>\r\n… When type-scoped contexts gets prevented in 1.1 we need a way to override that for 1.0 and potentially for 1.1.<br/>\r\n… That would be a useful side effect I think to be able to do that.<br/>\r\n… The referenced context might be defined without any notion of type scoping at all.<br/>\r\n… If you want to include it in a way that is compatible with the rest of your constructions which would be propagating or not – you’d want to make sure it was interpreted consistently.<br/>\r\nGregg Kellogg: I think there’s a bunch of use cases that need to be considered about what the effect is. Does this include the use of a <code>@propagate</code> keyword or not? In one example – an embedded context that references another one and that includes <code>@propagate:</code> false, is that keyword in play and if not, what are the behaviors?<br/>\r\n… If you reference a 1.0 context does that change the behavior?<br/>\r\n… I think we need test cases for what the expected behavior is.<br/>\r\nRob Sanderson: I’m happy to write up in the issue in 108 rather than in the propagating one … a proposed syntax and the proposed functionality.<br/>\r\nGregg Kellogg: I think part of that functionality is … if I have a context that defines things and it references things as a source, what is the order of processing. Presumably the point is to process <code>@version</code> bits first but can it override term definitions and what’s the effect on language, base, and vocab.<br/>\r\n… The result sort of considered an atomic context such that if it did adhere to some type-scoping or partial type-scoping behavior, does part of it go away, some of it, those are the things I need to understand.<br/>\r\nRob Sanderson: Dave … the propagation point was from VC … what was the expectation?<br/>\r\nDave Longley: for external would behave in the same way as external ones would today<br/>\r\n… the context would only apply to the type<br/>\r\n… and it would follow property scope behavior<br/>\r\n… so their should be consistency with how things happen today<br/>\r\nGregg Kellogg: Good.<br/>\r\n… If properties within a type-scoped context, they propagate only if used.<br/>\r\nDave Longley: Yes.<br/>\r\nAction #1: write up proposed syntax and functionality for <code>@src/@propagate</code> (Rob Sanderson)<br/>\r\nRob Sanderson: Unless the propagate flag is set to true.<br/>\r\nGregg Kellogg: There seem to be two different concerns, one is embedded contexts and the other is propagation.<br/>\r\nRob Sanderson: Yes, we’re complicating it. But I don’t think there’s another solution.<br/>\r\n… We need something like this… the other option is to always propagate but then that’s what wont work for the VC folks.<br/>\r\nGregg Kellogg: The other option is to have a type-scoped context that sets propagate to true and then it’s not removed when we go out of the node object. If we have referenced contexts then it’s as if that context were inserted through some process into the referencing one.<br/>\r\n… Well, what is the effect of property scoped contexts on embedded contexts?<br/>\r\n… What is the effect of <code>@propagate</code> on property-scoped contexts or referenced contexts.<br/>\r\nPierre-Antoine Champin: If I understand correctly, that’s the kind of thing Rob is planning to do.<br/>\r\nRob Sanderson: Yes, exactly.<br/>\r\nPierre-Antoine Champin: I want to use the original JSON-LD 1.0 annotation context as a type-scoped context, but since it assumes propagation, I want a way to override the type-scoped behavior which is not to propagate.<br/>\r\nRob Sanderson: If there is some other way to do that, that’s perfect, totally fine to do that.<br/>\r\n… I don’t understand how they are completely orthogonal, then we don’t need <code>@source.</code><br/>\r\nGregg Kellogg: I think you need <code>@source</code> because you need to be able to pull in the definitions from an external context so that you can assert 1.1 types of things about it.<br/>\r\n… I follow that.<br/>\r\n… I can see that you might use <code>@propagate</code> true on one that doesn’t reference an external source and you use <code>@source</code> because might want to assert things about that context like SRI.<br/>\r\n… For your use case you need both of these bits but their behavior is … we could create test cases that explore the various different uses and test cases for external referencing, and we should have a test case that combines the two. Largely their impact is orthogonal.<br/>\r\nRob Sanderson: I think we’re in violent agreement.<br/>\r\nPierre-Antoine Champin: Here’s an idea. The problem seems to come from the fact that you’re trying to use the Web Annotation context in a place where it was not designed to be used. It’s a 1.0 context. There are not scoped contexts, only local ones, no scoped ones.<br/>\r\n… In a way it makes that it doesn’t quite fit in this position. Wouldn’t a solution be to have a dedicated version of the Web Annotation context that would be appropriate to be embedded as a type-scoped context?<br/>\r\n… Maybe the solution is not to change the spec but to change the context that you use in this use case?<br/>\r\nRob Sanderson: But to go back to the definition of <code>@propagate</code> can we say on an <code>@type,</code> <code>@propagate</code> true?<br/>\r\nGregg Kellogg: Yes.<br/>\r\nRob Sanderson: If we anticipate that the major schemas that are in use via context referencing… annotations would be one, schema.org etc. … if they are going to go to 1.1 and they can set propagate or not that would be one other way to do it.<br/>\r\n… It could be defined locally somewhere until they do. But yeah.<br/>\r\n… It seems a bit of a stretch to say that if you want to use this 1.1 feature then because of this weird rule that type-scoped contexts don’t behave like property-scoped contexts that you can’t use any of the 1.0 contexts.<br/>\r\n… The flip side would be that <code>@propagate</code> true is the default and then 1.1 contexts that want to turn it off can set <code>@propagate:</code> false.<br/>\r\nIvan Herman: How many contexts are we talking about that are really widely known and would have to be updated in this sense?<br/>\r\n… What are talking about? We are hearing about two or three possible contexts right now, which is just peanuts.<br/>\r\nRob Sanderson: I’m not sure that we know, I would say schema.org, annotations, maybe ldp.<br/>\r\nIvan Herman: schema.org might not be easy to change, but the others are peanuts.<br/>\r\nDavid Newbury: Is it everything that has included those that also have to be updated at this point?<br/>\r\nRob Sanderson: Assuming that there’s a different 1.1 context I think that’s ok, you’d reference that.<br/>\r\nGregg Kellogg: I think it’s dangerous road to assume that we know the impact of all the contexts that are out there and the solution is to just update those contexts. Particularly if it requires that they adhere to 1.1 and the toolchains don’t get updated immediately after we release the spec.<br/>\r\n… Maybe the safest thing is to change the semantics to allow the propagation semantics to default to true but allow for false.<br/>\r\n… It allows that propagate to be used in other contexts as well. I think there’s a use for referencing to be able to do things like that, but you might want to use a 1.0 context and not have it propagate. Then you’d use an envelope with <code>@propagate</code> but then no weird stuff.<br/>\r\nBenjamin Young: Rolling out your contexts and managing multiple versions is an ambient concern. I don’t mean to derail your conversation. Our smaller more tightly knit communities aren’t going to face this as badly. But any of the ones that are actually doing deployments of other people’s vocabularies are going to be up a creek.<br/>\r\n… I’m not sure we yet have any vehicle to help them survive. This is taking them to another level, incompatibility concerns.<br/>\r\nRob Sanderson: This would be an argument in favor of having the default to be to propagate rather than to not propagate?<br/>\r\nBenjamin Young: It may not really even matter because of the way we’ve used versioning it doesn’t really matter.<br/>\r\n… As soon as that gets stuck into anything you will have to shift to supporting two different ecosystems.<br/>\r\n… We’ll have that for an unknowable amount of time.<br/>\r\nRob Sanderson: In terms of the VC side of things, requiring the context to turn off <code>@propagate</code> a hardship?<br/>\r\nDave Longley: so, VC spec goes into PR on Tuesday<br/>\r\n… everyone has written their tests against the context that does not use <code>@propagate</code> false<br/>\r\n… so that would be the main concern<br/>\r\n… it’s a major timing issue<br/>\r\n… if we miss PR, the VC spec would fail<br/>\r\n… the other features from 1.1 don’t compose<br/>\r\n… so…it’d be strange to have things not work and then have to go find the <code>@propagate</code> term to make things work<br/>\r\n… it seems to me that once you pull in a 1.0 context<br/>\r\n… that’s been interpreted in a 1.0 scenario<br/>\r\n… folks will have to be ready for the meaning changes<br/>\r\n… if they’re processed both as 1.0 and 1.1<br/>\r\n… I understand the desire to make them play nice<br/>\r\n… but I’m not sure about what we’d give up to keep that happening<br/>\r\nGregg Kellogg: I’d say maybe the way forward is to add a <code>@propagate</code> keyword which changes the behavior of the context it’s in to not survive the node object it’s used within, but we don’t the default behavior for type-scoped contexts. We can add <code>@propagate:</code> true to allow to survive or <code>@propagate:</code> false on a property-scoped or embedded context to allow it to be removed. It gives us the ability to not mess up the expectations of VCs.<br/>\r\nDavid Newbury: A lot of the <code>@propagate:</code> true/false default is whether you’re coming from a programming background or a JSON-LD background.<br/>\r\nRob Sanderson: What about if 1.0 contexts were treated that all had an implicit <code>@propagate:</code> true on them.<br/>\r\n… When a 1.0 is imported, all of the classes in that context are treated as if they had <code>@propagate:</code> true defined on them because that was the expectation.<br/>\r\nPierre-Antoine Champin: are we taking { \"<code>@context\":</code> { \"Foo\": {\"<code>@context\":</code> { \"<code>@propagate\":</code> true, ... } } } or { \"<code>@context\":</code> { \"Foo\": {\"<code>@context\":</code> { ... }, \"<code>@propagate\":</code> true } }<br/>\r\nPierre-Antoine Champin: I’m not sure Rob’s suggestion. The difference is subtle – is the <code>@propagate</code> flag supposed to occur in the context or next to the term definition.<br/>\r\nGregg Kellogg: Inside the context.<br/>\r\nPierre-Antoine Champin: I don’t understand Rob’s position then.<br/>\r\nRob Sanderson: The primary mismatch is that between contexts defined in 1.0 days, there wasn’t any scoping, once defined it’s always true. That remains true for property-scopes but not for type-scopes. In 1.1 we want to be able to override that default. We want to be able to have it be explicitly set so a particular class does propagate.<br/>\r\n… The issue then is … a 1.0 context where it’s not a valid keyword, how can we have propagation be true. Given that the expectation in 1.0 was that everything propagated, that when a 1.0 context is imported, we should assume that there was a flag that propagate was set to true for that context. We don’t have to put it into the referring context – if that was just the way that it always worked. If you want to have a 1.1 context that imports<br/>\r\nDave Longley: other contexts with propagate false then that’s fine you don’t have to set anything.<br/>\r\nRob Sanderson: It would matter if you want a 1.0 to come in and not have it propagate.<br/>\r\n… But that seems even more marginal than the inverse.<br/>\r\n… I don’t think we need <code>@source</code> at all if we do that. We can just define <code>@propagate</code> with the notion that a 1.0 context acts as if it is true.<br/>\r\nDavid Newbury: This would need a very big explanation note somewhere because I don’t think anyone pays attention to <code>@version</code> and having things operate differently seems very confusing.<br/>\r\nBenjamin Young: And the fact that the same context could change its version under the hood changing how it propagates.<br/>\r\nIvan Herman: +1 workergnome<br/>\r\nGregg Kellogg: I’m concerned about that too and it’s possible to use 1.1 features without saying <code>@version</code> in the context.<br/>\r\n… Trying to infer things after the fact that we do things differently I think is fraught. I think solution is to be explicit in the wrapper and to set propagation in the referencing context.<br/>\r\nIvan Herman: I am acting now as administrator because the minutes will be confusing, I have the impression we’re discussing 174 but started with 108. I would add the comments on both of them, and I’m not sure where we are.<br/>\r\n… Administratively I think 174 is just being reopened now.<br/>\r\nBenjamin Young: I think where we are – this will be the topic that we discuss next week and I’ll send out the same agenda.<br/>\r\n</details>" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/504501635> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/174#issuecomment-504501635"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/174> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/504501635> .
<https://api.github.com/users/iherman> <http://schema.org/accountId> "iherman" .
<https://api.github.com/users/iherman> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/520723?v=4" .
<https://api.github.com/users/iherman> <http://schema.org/url> "https://github.com/iherman"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/iherman> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/504501635> <http://schema.org/creator> <https://api.github.com/users/iherman> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/504501635> <http://schema.org/startDate> "2019-06-21T17:12:42Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/504501635> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/504501635> <http://schema.org/description> "This issue was discussed in [a meeting](https://www.w3.org/2018/json-ld-wg/Meetings/Minutes/2019/2019-06-21-json-ld#section3-1).\r\n\r\n- `ACTION:  write up proposed syntax and functionality for <code>@src/@propagate</code> (Rob Sanderson)`\r\n<details><summary><i class=\"differentiate\">View the transcript</i></summary>\r\n3.1. Consider context by reference with metadata #108<br/>\r\nBenjamin Young: <a href=\"https://github.com/w3c/json-ld-syntax/issues/108\">https://github.com/w3c/json-ld-syntax/issues/108</a><br/>\r\nIvan Herman: also: <a href=\"https://github.com/w3c/json-ld-syntax/issues/174\">https://github.com/w3c/json-ld-syntax/issues/174</a><br/>\r\nBenjamin Young: This is about a more advanced context object that includes referencing other contexts with meta data for a whole host of issues. Most recent use case is around setting propagation.<br/>\r\n… Rob you were the last to propose some things.<br/>\r\nRob Sanderson: At this point I think we need this particular pattern. Of the proposed colors for the bikesheds, <code>@src</code> seems to convey the appropriate semantics. It’s not necessarily a link/href, <code>@context</code> and <code>@id</code> would make for a lot of overloading that would maybe cause confusion.<br/>\r\n… <code>@import</code> isn’t too bad but pchampin indicated why it may not be ideal.<br/>\r\n… It seems to me like a reasonable way forwards, assuming, it’s implementable and unambiguous.<br/>\r\nGregg Kellogg: I guess my concern about <code>@src</code> is … one is that we don’t typically use abbreviated keywords in JSON-LD, <code>@source</code> might solve that. The other thing is that my familiarity is similar to href like in HTML where it doesn’t provide for an inline option, if we wanted to allow for those there which would sort of make sense. <code>@import</code> seems a little more unambigious.<br/>\r\nPierre-Antoine Champin: Regarding what Gregg just said, I think you have a point, indeed. I wanted to ask about the use cases, I realized after making those proposals, we might not cover one of those. We reactivated this issue about the idea that parameters could be added to this context, to allow this context to propagate/not propagate.<br/>\r\nRob Sanderson: Reference: The propagate case - <a href=\"https://github.com/w3c/json-ld-syntax/issues/108#issuecomment-497809905\">https://github.com/w3c/json-ld-syntax/issues/108#issuecomment-497809905</a><br/>\r\nPierre-Antoine Champin: For this use case we might want to do this with a URL reference or an embedded <code>@context.</code> Meta data is always about a referenced context not one that is directly embedded. Does that cover all our use cases.<br/>\r\nBenjamin Young: Good flag to raise.<br/>\r\nIvan Herman: It’s very close to what I wanted to ask. I’m not completely sure what we’ll use it for apart from the fact that it looks nice.<br/>\r\n… There are things like sealed and SRI that came up but we’re not talking about that anymore. What are the use cases we want to use it for?<br/>\r\n… Btw, ‘src’ is in use for the image URL in HTML, very close to href.<br/>\r\nRob Sanderson: I wanted to ask the same question, do we really want to/need embedded contexts here or external sufficient? I don’t know why you would use an embedded one.<br/>\r\n… If it’s only for reference, <code>@src</code> is ok, but what’s the use case for embedded.<br/>\r\nGregg Kellogg: I think we might want to constrain ourselves to a keyword that references an external resource about which we might assert some meta data. Rather than keeping it open about importing several things – which of them are we asserting things about, as well as an embedded case. There’s no use case for that, only some notion of uniformity to allow that.<br/>\r\n… Now it starts looking overly generalized. If we need a way for a context to reference another one with the semantics that that context is imported into the referencing context that would also allow some room for asserting information about the referenced context, that is a narrow solution which addresses that use case.<br/>\r\nRob Sanderson: +1<br/>\r\nBenjamin Young: Roughly like what Rob just posted in chat.<br/>\r\nGregg Kellogg: In which case <code>@source</code> is ok, want some consistency.<br/>\r\nRob Sanderson: Suggested syntax example: {\"<code>@context\":</code> [{\"<code>@src\":</code> \"<a href=\"http://.../context.json\",\">http://.../context.json\",</a> \"<code>@propagate\":</code> false}, ...] }<br/>\r\nIvan Herman: I must admit that I didn’t even consider having this embedded. Rob would you want to comment … a question I have is are we sure this is the only property? We don’t have any other meta data properties to define in 1.1 so far?<br/>\r\nRob Sanderson: I don’t think so, this is the only one we have so far <code>@propagate.</code><br/>\r\nIvan Herman: I’d like to be sure this is the right solution.<br/>\r\nPierre-Antoine Champin: Just to be clear, I was not trying to generalize or over generalize, I was just pointing out that as Ivan and Rob pointed out … <code>@propagate</code> is what we unearthed this issue. When I think about it, it makes sense to use it on an embedded context. It started with scoped contexts, most of the time those are embedded.<br/>\r\n… Is <code>@source</code> really a solution to the problem we were trying to solve?<br/>\r\n… My personal answer would be “no it’s not” and maybe we reopened the wrong issue to solve that problem. This mechanism as we envisioned it is more about referenced contexts, not embedded ones.<br/>\r\nRob Sanderson: I think it is still the right thing to reopen. If it’s embedded we don’t really need this pattern at all.<br/>\r\n… You could restructure your context to do things differently.<br/>\r\n… When you want to reuse an external context, then you need to say whether or not the terms of that context propagate or not.<br/>\r\n… If it’s embedded you just set it and you’re done.<br/>\r\n… When you pull in another context, like a 1.0 from Annotations, it assumes something that isn’t intended and you need to change it.<br/>\r\n… I think the case is an external context and it should not have the default propagation value.<br/>\r\nGregg Kellogg: If it’s within a type then type contexts don’t propagate.<br/>\r\nRob Sanderson: Right and this is to change this behavior so it does.<br/>\r\n… Yes, it’s to fix the impedance mismatch between 1.0 and 1.1.<br/>\r\nIvan Herman: I am a little bit lost. What I would propose is that somebody comes up with text, possibly a PR that defines this syntax so that it’s clear what it is. Defines its usage with propagate and what that means. I’m a little bit lost. Having something specific written down would help.<br/>\r\nGregg Kellogg: So I think my confusion is that I recall the discussion about this … as wanting the ability to reference an external 1.0 context where we’d have to have <code>@version</code> specified within there. You can’t update the referenced context to do that.<br/>\r\n… If that is one of the use cases .. the other use case is to override the propagation behavior of type-scoped behavior. Not sure how it does that cleanly. Not sure how this relates to the type-scoped propagatability without something more explicit.<br/>\r\nRob Sanderson: This is the issue that we discussed a couple of weeks ago now. Where, it’s the combination of the 1.0 and the type-scoped context where it really matters. Because 1.0 contexts are defined without the notion of type-scoped contexts or propagation then they’d never be written in such a way that it’s prevented because it’s not possible in 1.0.<br/>\r\n… When type-scoped contexts gets prevented in 1.1 we need a way to override that for 1.0 and potentially for 1.1.<br/>\r\n… That would be a useful side effect I think to be able to do that.<br/>\r\n… The referenced context might be defined without any notion of type scoping at all.<br/>\r\n… If you want to include it in a way that is compatible with the rest of your constructions which would be propagating or not – you’d want to make sure it was interpreted consistently.<br/>\r\nGregg Kellogg: I think there’s a bunch of use cases that need to be considered about what the effect is. Does this include the use of a <code>@propagate</code> keyword or not? In one example – an embedded context that references another one and that includes <code>@propagate:</code> false, is that keyword in play and if not, what are the behaviors?<br/>\r\n… If you reference a 1.0 context does that change the behavior?<br/>\r\n… I think we need test cases for what the expected behavior is.<br/>\r\nRob Sanderson: I’m happy to write up in the issue in 108 rather than in the propagating one … a proposed syntax and the proposed functionality.<br/>\r\nGregg Kellogg: I think part of that functionality is … if I have a context that defines things and it references things as a source, what is the order of processing. Presumably the point is to process <code>@version</code> bits first but can it override term definitions and what’s the effect on language, base, and vocab.<br/>\r\n… The result sort of considered an atomic context such that if it did adhere to some type-scoping or partial type-scoping behavior, does part of it go away, some of it, those are the things I need to understand.<br/>\r\nRob Sanderson: Dave … the propagation point was from VC … what was the expectation?<br/>\r\nDave Longley: for external would behave in the same way as external ones would today<br/>\r\n… the context would only apply to the type<br/>\r\n… and it would follow property scope behavior<br/>\r\n… so their should be consistency with how things happen today<br/>\r\nGregg Kellogg: Good.<br/>\r\n… If properties within a type-scoped context, they propagate only if used.<br/>\r\nDave Longley: Yes.<br/>\r\nAction #1: write up proposed syntax and functionality for <code>@src/@propagate</code> (Rob Sanderson)<br/>\r\nRob Sanderson: Unless the propagate flag is set to true.<br/>\r\nGregg Kellogg: There seem to be two different concerns, one is embedded contexts and the other is propagation.<br/>\r\nRob Sanderson: Yes, we’re complicating it. But I don’t think there’s another solution.<br/>\r\n… We need something like this… the other option is to always propagate but then that’s what wont work for the VC folks.<br/>\r\nGregg Kellogg: The other option is to have a type-scoped context that sets propagate to true and then it’s not removed when we go out of the node object. If we have referenced contexts then it’s as if that context were inserted through some process into the referencing one.<br/>\r\n… Well, what is the effect of property scoped contexts on embedded contexts?<br/>\r\n… What is the effect of <code>@propagate</code> on property-scoped contexts or referenced contexts.<br/>\r\nPierre-Antoine Champin: If I understand correctly, that’s the kind of thing Rob is planning to do.<br/>\r\nRob Sanderson: Yes, exactly.<br/>\r\nPierre-Antoine Champin: I want to use the original JSON-LD 1.0 annotation context as a type-scoped context, but since it assumes propagation, I want a way to override the type-scoped behavior which is not to propagate.<br/>\r\nRob Sanderson: If there is some other way to do that, that’s perfect, totally fine to do that.<br/>\r\n… I don’t understand how they are completely orthogonal, then we don’t need <code>@source.</code><br/>\r\nGregg Kellogg: I think you need <code>@source</code> because you need to be able to pull in the definitions from an external context so that you can assert 1.1 types of things about it.<br/>\r\n… I follow that.<br/>\r\n… I can see that you might use <code>@propagate</code> true on one that doesn’t reference an external source and you use <code>@source</code> because might want to assert things about that context like SRI.<br/>\r\n… For your use case you need both of these bits but their behavior is … we could create test cases that explore the various different uses and test cases for external referencing, and we should have a test case that combines the two. Largely their impact is orthogonal.<br/>\r\nRob Sanderson: I think we’re in violent agreement.<br/>\r\nPierre-Antoine Champin: Here’s an idea. The problem seems to come from the fact that you’re trying to use the Web Annotation context in a place where it was not designed to be used. It’s a 1.0 context. There are not scoped contexts, only local ones, no scoped ones.<br/>\r\n… In a way it makes that it doesn’t quite fit in this position. Wouldn’t a solution be to have a dedicated version of the Web Annotation context that would be appropriate to be embedded as a type-scoped context?<br/>\r\n… Maybe the solution is not to change the spec but to change the context that you use in this use case?<br/>\r\nRob Sanderson: But to go back to the definition of <code>@propagate</code> can we say on an <code>@type,</code> <code>@propagate</code> true?<br/>\r\nGregg Kellogg: Yes.<br/>\r\nRob Sanderson: If we anticipate that the major schemas that are in use via context referencing… annotations would be one, schema.org etc. … if they are going to go to 1.1 and they can set propagate or not that would be one other way to do it.<br/>\r\n… It could be defined locally somewhere until they do. But yeah.<br/>\r\n… It seems a bit of a stretch to say that if you want to use this 1.1 feature then because of this weird rule that type-scoped contexts don’t behave like property-scoped contexts that you can’t use any of the 1.0 contexts.<br/>\r\n… The flip side would be that <code>@propagate</code> true is the default and then 1.1 contexts that want to turn it off can set <code>@propagate:</code> false.<br/>\r\nIvan Herman: How many contexts are we talking about that are really widely known and would have to be updated in this sense?<br/>\r\n… What are talking about? We are hearing about two or three possible contexts right now, which is just peanuts.<br/>\r\nRob Sanderson: I’m not sure that we know, I would say schema.org, annotations, maybe ldp.<br/>\r\nIvan Herman: schema.org might not be easy to change, but the others are peanuts.<br/>\r\nDavid Newbury: Is it everything that has included those that also have to be updated at this point?<br/>\r\nRob Sanderson: Assuming that there’s a different 1.1 context I think that’s ok, you’d reference that.<br/>\r\nGregg Kellogg: I think it’s dangerous road to assume that we know the impact of all the contexts that are out there and the solution is to just update those contexts. Particularly if it requires that they adhere to 1.1 and the toolchains don’t get updated immediately after we release the spec.<br/>\r\n… Maybe the safest thing is to change the semantics to allow the propagation semantics to default to true but allow for false.<br/>\r\n… It allows that propagate to be used in other contexts as well. I think there’s a use for referencing to be able to do things like that, but you might want to use a 1.0 context and not have it propagate. Then you’d use an envelope with <code>@propagate</code> but then no weird stuff.<br/>\r\nBenjamin Young: Rolling out your contexts and managing multiple versions is an ambient concern. I don’t mean to derail your conversation. Our smaller more tightly knit communities aren’t going to face this as badly. But any of the ones that are actually doing deployments of other people’s vocabularies are going to be up a creek.<br/>\r\n… I’m not sure we yet have any vehicle to help them survive. This is taking them to another level, incompatibility concerns.<br/>\r\nRob Sanderson: This would be an argument in favor of having the default to be to propagate rather than to not propagate?<br/>\r\nBenjamin Young: It may not really even matter because of the way we’ve used versioning it doesn’t really matter.<br/>\r\n… As soon as that gets stuck into anything you will have to shift to supporting two different ecosystems.<br/>\r\n… We’ll have that for an unknowable amount of time.<br/>\r\nRob Sanderson: In terms of the VC side of things, requiring the context to turn off <code>@propagate</code> a hardship?<br/>\r\nDave Longley: so, VC spec goes into PR on Tuesday<br/>\r\n… everyone has written their tests against the context that does not use <code>@propagate</code> false<br/>\r\n… so that would be the main concern<br/>\r\n… it’s a major timing issue<br/>\r\n… if we miss PR, the VC spec would fail<br/>\r\n… the other features from 1.1 don’t compose<br/>\r\n… so…it’d be strange to have things not work and then have to go find the <code>@propagate</code> term to make things work<br/>\r\n… it seems to me that once you pull in a 1.0 context<br/>\r\n… that’s been interpreted in a 1.0 scenario<br/>\r\n… folks will have to be ready for the meaning changes<br/>\r\n… if they’re processed both as 1.0 and 1.1<br/>\r\n… I understand the desire to make them play nice<br/>\r\n… but I’m not sure about what we’d give up to keep that happening<br/>\r\nGregg Kellogg: I’d say maybe the way forward is to add a <code>@propagate</code> keyword which changes the behavior of the context it’s in to not survive the node object it’s used within, but we don’t the default behavior for type-scoped contexts. We can add <code>@propagate:</code> true to allow to survive or <code>@propagate:</code> false on a property-scoped or embedded context to allow it to be removed. It gives us the ability to not mess up the expectations of VCs.<br/>\r\nDavid Newbury: A lot of the <code>@propagate:</code> true/false default is whether you’re coming from a programming background or a JSON-LD background.<br/>\r\nRob Sanderson: What about if 1.0 contexts were treated that all had an implicit <code>@propagate:</code> true on them.<br/>\r\n… When a 1.0 is imported, all of the classes in that context are treated as if they had <code>@propagate:</code> true defined on them because that was the expectation.<br/>\r\nPierre-Antoine Champin: are we taking { \"<code>@context\":</code> { \"Foo\": {\"<code>@context\":</code> { \"<code>@propagate\":</code> true, ... } } } or { \"<code>@context\":</code> { \"Foo\": {\"<code>@context\":</code> { ... }, \"<code>@propagate\":</code> true } }<br/>\r\nPierre-Antoine Champin: I’m not sure Rob’s suggestion. The difference is subtle – is the <code>@propagate</code> flag supposed to occur in the context or next to the term definition.<br/>\r\nGregg Kellogg: Inside the context.<br/>\r\nPierre-Antoine Champin: I don’t understand Rob’s position then.<br/>\r\nRob Sanderson: The primary mismatch is that between contexts defined in 1.0 days, there wasn’t any scoping, once defined it’s always true. That remains true for property-scopes but not for type-scopes. In 1.1 we want to be able to override that default. We want to be able to have it be explicitly set so a particular class does propagate.<br/>\r\n… The issue then is … a 1.0 context where it’s not a valid keyword, how can we have propagation be true. Given that the expectation in 1.0 was that everything propagated, that when a 1.0 context is imported, we should assume that there was a flag that propagate was set to true for that context. We don’t have to put it into the referring context – if that was just the way that it always worked. If you want to have a 1.1 context that imports<br/>\r\nDave Longley: other contexts with propagate false then that’s fine you don’t have to set anything.<br/>\r\nRob Sanderson: It would matter if you want a 1.0 to come in and not have it propagate.<br/>\r\n… But that seems even more marginal than the inverse.<br/>\r\n… I don’t think we need <code>@source</code> at all if we do that. We can just define <code>@propagate</code> with the notion that a 1.0 context acts as if it is true.<br/>\r\nDavid Newbury: This would need a very big explanation note somewhere because I don’t think anyone pays attention to <code>@version</code> and having things operate differently seems very confusing.<br/>\r\nBenjamin Young: And the fact that the same context could change its version under the hood changing how it propagates.<br/>\r\nIvan Herman: +1 workergnome<br/>\r\nGregg Kellogg: I’m concerned about that too and it’s possible to use 1.1 features without saying <code>@version</code> in the context.<br/>\r\n… Trying to infer things after the fact that we do things differently I think is fraught. I think solution is to be explicit in the wrapper and to set propagation in the referencing context.<br/>\r\nIvan Herman: I am acting now as administrator because the minutes will be confusing, I have the impression we’re discussing 174 but started with 108. I would add the comments on both of them, and I’m not sure where we are.<br/>\r\n… Administratively I think 174 is just being reopened now.<br/>\r\nBenjamin Young: I think where we are – this will be the topic that we discuss next week and I’ll send out the same agenda.<br/>\r\n</details>" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/504513373> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/174#issuecomment-504513373"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/174> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/504513373> .
<https://api.github.com/users/azaroth42> <http://schema.org/accountId> "azaroth42" .
<https://api.github.com/users/azaroth42> <http://schema.org/image> "https://avatars3.githubusercontent.com/u/871868?v=4" .
<https://api.github.com/users/azaroth42> <http://schema.org/url> "https://github.com/azaroth42"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/azaroth42> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/504513373> <http://schema.org/creator> <https://api.github.com/users/azaroth42> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/504513373> <http://schema.org/startDate> "2019-06-21T17:48:22Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/504513373> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/504513373> <http://schema.org/description> "Proposal:\r\n\r\nAllow the value of `@context` to be a dictionary that includes exactly two (defined) member properties, `@src` and `@progagates`.\r\n\r\n* The value of `@src` is a string that is the URI of an external context to be processed, as if it were encountered as a bare string as the value of `@context`.\r\n* The value of `@propagates` is a boolean. If set to true, then all of the classes in the referenced context should be considered as if they had this flag set on them.\r\n\r\nAllow a new keyword `@propagates` within a context root node and within a class definition.\r\n\r\nWhen `@propagates` is encountered at the root node of a context document, then all classes that are defined within the context are treated as if they had the keyword assigned to the supplied value.\r\n[in the same way as `@protected` works]\r\n\r\nWhen `@propagates` is encountered within a class definition, and it is set to `true`, then this counteracts the rule described in 4.1.7 as\r\n>  A context scoped on `@type` is only in effect for the node object on which the type is used; the previous in-scope contexts are placed back into effect when traversing into another node object.\r\n\r\nAnd instead means that when that class is encountered in a type scoped environment, the current context still propagates, as it would have if `@context` were set in the instance data.\r\n\r\nContext Examples:\r\n\r\n```\r\n{\r\n  \"Annotation\": {\r\n    \"@id\": \"wa:Annotation\",\r\n    \"@context\": {\r\n      \"@src\": \"http://www.w3.org/ns/anno.jsonld\",\r\n      \"@propagates\": true\r\n    },\r\n    \"label\": {\"@id\": \"rdfs:label\", \"@container\": [\"@language\", \"@set\"]}\r\n  }\r\n}\r\n```\r\n\r\nThe Annotation context should be imported in a scoped way within instances of Annotations. The resources referenced in the JSON tree from that annotation should continue to inherit the definitions of the context, instead of the changes being scoped solely to the Annotation instance.  This functionality allows 1.1 contexts importing 1.0 contexts to require that the propagation model of 1.0 is respected.\r\n\r\n```\r\n{\r\n  \"Annotation\": {\r\n    \"@id\": \"wa:Annotation\",\r\n    \"@propagates\": true\r\n  }\r\n}\r\n```\r\n\r\nIf this class is encountered as part of a type scoped context, then the definitions continue to propagate to the resources referenced in the JSON tree below it.  This allows 1.1 contexts to continue to use the 1.0 propagation model, as if the `@context` reference were inline within the instance data, rather than as imported within the context definition. Defining it per class allows some classes to behave in 1.1 propagation mode and some in 1.0 propagation mode at the same time.\r\n" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/504546894> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/197#issuecomment-504546894"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/197> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/504546894> .
<https://api.github.com/users/BigBlueHat> <http://schema.org/accountId> "BigBlueHat" .
<https://api.github.com/users/BigBlueHat> <http://schema.org/image> "https://avatars1.githubusercontent.com/u/43209?v=4" .
<https://api.github.com/users/BigBlueHat> <http://schema.org/url> "https://github.com/BigBlueHat"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/BigBlueHat> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/504546894> <http://schema.org/creator> <https://api.github.com/users/BigBlueHat> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/504546894> <http://schema.org/startDate> "2019-06-21T19:31:39Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/504546894> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/504546894> <http://schema.org/description> "Gah! Didn't even realize that was still hanging around. 😝 Good catch!" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/504638842> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/174#issuecomment-504638842"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/174> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/504638842> .
<https://api.github.com/users/iherman> <http://schema.org/accountId> "iherman" .
<https://api.github.com/users/iherman> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/520723?v=4" .
<https://api.github.com/users/iherman> <http://schema.org/url> "https://github.com/iherman"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/iherman> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/504638842> <http://schema.org/creator> <https://api.github.com/users/iherman> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/504638842> <http://schema.org/startDate> "2019-06-22T07:12:18Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/504638842> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/504638842> <http://schema.org/description> "@azaroth42, thanks\r\n\r\nTwo things:\r\n\r\n- it would help me at least to see real data using these constructions in terms of the triples that are generated. Could you add one that shows the difference between using and not using this flag?\r\n- (beware! Bike-shedding attack!) _If_ my understanding is correct, the term `@propagates` is a bit of a misnomer. What _is_ (or _is not_) propagated are the terms in the \"upper level\" in-scope context terms, and _not_ the terms that are in the types and context file that this flag is used on. The right term is something like `@allow_propagation`, but this is a mouthful... (Of course, my understanding may be wrong, in which case this comment is moot.)" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/504699421> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/174#issuecomment-504699421"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/174> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/504699421> .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/504699421> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/504699421> <http://schema.org/startDate> "2019-06-22T21:26:24Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/504699421> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/504699421> <http://schema.org/description> "> Proposal:\r\n> \r\n> Allow the value of `@context` to be a dictionary that includes exactly two (defined) member properties, `@src` and `@progagates`.\r\n\r\nIt will also need to include `\"@version\": 1.1` to not be misinterpreted by a 1.0 processor.\r\n\r\n> * The value of `@src` is a string that is the URI of an external context to be processed, as if it were encountered as a bare string as the value of `@context`.\r\n> * The value of `@propagates` is a boolean. If set to true, then all of the classes in the referenced context should be considered as if they had this flag set on them.\r\n> \r\n> Allow a new keyword `@propagates` within a context root node and within a class definition.\r\n\r\n\"Class definition\"? Do you mean as the embedded context in a term used as a value of `@type`?\r\n\r\n> When `@propagates` is encountered at the root node of a context document, then all classes that are defined within the context are treated as if they had the keyword assigned to the supplied value.\r\n> [in the same way as `@protected` works]\r\n\r\nSo, it's not recursive? Seems we would need to go into a state to specifically check for this. Also, that seems like it's placing behavior for `@src` using `@ propagates `, which would seem to me to change the behavior of the context when exiting a node-definition vs uplift term definitions (and other context things) to the context including the reference to `@src`.\r\n\r\n> When `@propagates` is encountered within a class definition, and it is set to `true`, then this counteracts the rule described in 4.1.7 as\r\n> \r\n> > A context scoped on `@type` is only in effect for the node object on which the type is used; the previous in-scope contexts are placed back into effect when traversing into another node object.\r\n> \r\n> And instead means that when that class is encountered in a type scoped environment, the current context still propagates, as it would have if `@context` were set in the instance data.\r\n\r\n+1, but it probably also has a converse meaning of set to `false` in a context (scoped, or otherwise), to be consistent.\r\n\r\n> ...\r\n" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/504699899> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/174#issuecomment-504699899"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/174> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/504699899> .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/504699899> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/504699899> <http://schema.org/startDate> "2019-06-22T21:33:42Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/504699899> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/504699899> <http://schema.org/description> "I think @azaroth42's suggestion might be a bit narrow, and we might want to consider the following:\r\n\r\n1. If `@src` appears within a context object, the referencing context **must** contain `@version: 1.1`.\r\n2. The value of `@src` **must** be an string interpreted as a URL.\r\n3. The behavior of `@src` is treated as if the referenced context were merged with the referencing context, with all term definitions from the referencing/including context taking precedence over those in the referenced context.\r\n4. The presence of `@propagates` overrides the default propagation of the context outside of the containing node object. By default, propagates is `true` for type-scoped contexts, and false otherwise.\r\n5. The specific type-scoped context rules for propagation are updated to be based on the propagates property of the specific context.\r\n\r\nThis separates the notion of `@src` and `@propagates`, and creates a consistent rule for how to merge `@src` into a referencing context (potentially, allowing for reclusive `@src` in remote contexts, although this is a consequence of the implementation, rather than a specific objective)." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/505017574> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/174#issuecomment-505017574"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/174> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/505017574> .
<https://api.github.com/users/dlongley> <http://schema.org/accountId> "dlongley" .
<https://api.github.com/users/dlongley> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/168137?v=4" .
<https://api.github.com/users/dlongley> <http://schema.org/url> "https://github.com/dlongley"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/dlongley> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/505017574> <http://schema.org/creator> <https://api.github.com/users/dlongley> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/505017574> <http://schema.org/startDate> "2019-06-24T13:48:18Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/505017574> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/505017574> <http://schema.org/description> "@gkellogg,\r\n\r\n> By default, propagates is true for type-scoped contexts, and false otherwise.\r\n\r\nDid you mean the reverse of this?" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/505031589> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/174#issuecomment-505031589"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/174> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/505031589> .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/505031589> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/505031589> <http://schema.org/startDate> "2019-06-24T14:21:26Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/505031589> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/505031589> <http://schema.org/description> "> @gkellogg,\r\n> \r\n> > By default, propagates is true for type-scoped contexts, and false otherwise.\r\n> \r\n> Did you mean the reverse of this?\r\n\r\nYes, indeed." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/505032172> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/174#issuecomment-505032172"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/174> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/505032172> .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/505032172> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/505032172> <http://schema.org/startDate> "2019-06-24T14:22:42Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/505032172> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/505032172> <http://schema.org/description> "Also, as I said in the meeting, I think that `@src` is inconsistent with our keyword naming, and would prefer `@source`." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/505053128> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/174#issuecomment-505053128"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/174> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/505053128> .
<https://api.github.com/users/dlongley> <http://schema.org/accountId> "dlongley" .
<https://api.github.com/users/dlongley> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/168137?v=4" .
<https://api.github.com/users/dlongley> <http://schema.org/url> "https://github.com/dlongley"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/dlongley> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/505053128> <http://schema.org/creator> <https://api.github.com/users/dlongley> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/505053128> <http://schema.org/startDate> "2019-06-24T15:11:02Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/505053128> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/505053128> <http://schema.org/description> "If this is going to be true:\r\n\r\n> The behavior of @src is treated as if the referenced context were merged with the referencing context, with all term definitions from the referencing/including context taking precedence over those in the referenced context.\r\n\r\nThen it seems like `@import` does make sense as the keyword name." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/505096824> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/174#issuecomment-505096824"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/174> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/505096824> .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/505096824> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/505096824> <http://schema.org/startDate> "2019-06-24T17:06:45Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/505096824> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/505096824> <http://schema.org/description> "Perhaps, but it depends on which has the least impact on algorithms, I think. Doing the strict `@source`-`@propagate` (along with `@version`) seems like a special case which will require a totally separate branch in the algorithm, while `@source/@import` seems like potentially a 1-line change.\r\n\r\nI'm implementing now, and will have more to say later." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/505117274> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/174#issuecomment-505117274"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/174> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/505117274> .
<https://api.github.com/users/pchampin> <http://schema.org/accountId> "pchampin" .
<https://api.github.com/users/pchampin> <http://schema.org/image> "https://avatars1.githubusercontent.com/u/304612?v=4" .
<https://api.github.com/users/pchampin> <http://schema.org/url> "https://github.com/pchampin"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/pchampin> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/505117274> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/505117274> <http://schema.org/startDate> "2019-06-24T18:03:58Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/505117274> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/505117274> <http://schema.org/description> "Sorry, but I find all this quite complicated...\r\nHere are two alternate proposals:\r\n\r\n## Proposal A\r\n\r\n* introduce a new `@propagate` keyword, which is allowed in any context node (root or scoped), and expects a boolean\r\n* a scoped context with `@propagate` set to true will propagate when descending\r\n* a scoped context with `@propagate` set to true will only be active in its scope node\r\n* in a type scoped context, `@propagate` defaults to false, unless when referenced from a URI, and the remote context does not have any `@version` member (i.e. 1.0 external context\r\n* in all other situations, `@propagate` defaults to true\r\n\r\n## Proposal B\r\n\r\nSame as proposal A, but remove the exception about type scoped contexts.\r\n\r\nI know this would make things harder for VC, but it makes things easier to implement and to explain..." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/506422033> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/177#issuecomment-506422033"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/177> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/506422033> .
<https://api.github.com/users/pchampin> <http://schema.org/accountId> "pchampin" .
<https://api.github.com/users/pchampin> <http://schema.org/image> "https://avatars1.githubusercontent.com/u/304612?v=4" .
<https://api.github.com/users/pchampin> <http://schema.org/url> "https://github.com/pchampin"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/pchampin> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/506422033> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/506422033> <http://schema.org/startDate> "2019-06-27T16:39:06Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/506422033> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/506422033> <http://schema.org/description> "> Is this resolved by w3c/json-ld-api#109 and w3c/json-ld-api#110? \r\n\r\nI think it is.\r\n\r\n> Do we need something in the syntax document?\r\n\r\nI think it rather belongs to the BP document." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/506747857> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/174#issuecomment-506747857"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/174> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/506747857> .
<https://api.github.com/users/dlongley> <http://schema.org/accountId> "dlongley" .
<https://api.github.com/users/dlongley> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/168137?v=4" .
<https://api.github.com/users/dlongley> <http://schema.org/url> "https://github.com/dlongley"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/dlongley> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/506747857> <http://schema.org/creator> <https://api.github.com/users/dlongley> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/506747857> <http://schema.org/startDate> "2019-06-28T14:09:37Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/506747857> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/506747857> <http://schema.org/description> "-1 to Proposal B that would cause JSON-LD 1.1's new features to not compose by default and be unexpected for the first-order constituency of JSON developers/users.\r\n\r\nI think Proposal A is either what @gkellogg is experimenting with in his implementation (or is close to it).\r\n\r\nNote that there are additional fixes we needed to apply to type-scoped context processing to make them behave as expected and round-trip properly. There are real differences in how they are expected function as opposed to other contexts -- which is fine; they are a good and very useful feature that give us better alignment with idiomatic JSON. But we shouldn't forget those differences exist and that we must account for them in order to make them behave as expected. Those differences are baked into how people already think about JSON, so our processing rules must reflect that.\r\n\r\nFor example, when `@type` is used within a type-scoped node object, its values are compacted according to the previous context, not according to the type-scoped context.\r\n\r\nFor example, consider the case where a type-scoped context is cleared:\r\n\r\n```js\r\n{\r\n  \"@context\": {\r\n    \"@version\": 1.1,\r\n    \"collection\": \"ex:collection\",\r\n    \"MyType\": {\r\n      \"@id\": \"ex:MyType\",\r\n      \"@context\": [null, {\r\n        \"foo\": \"ex:foo\"\r\n      }]\r\n    }\r\n  },\r\n  \"collection\": [{\r\n    \"@id\": \"ex:some_id\",\r\n    \"@type\": \"MyType\",\r\n    \"foo\": \"bar\"\r\n  }]\r\n}\r\n```\r\n\r\nUnder this scenario, \"MyType\" would, quite unexpectedly, lose its meaning and not round trip if type-scoped contexts weren't given special treatment." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/506784720> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/183#issuecomment-506784720"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/183> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/506784720> .
<https://api.github.com/users/rubensworks> <http://schema.org/accountId> "rubensworks" .
<https://api.github.com/users/rubensworks> <http://schema.org/image> "https://avatars1.githubusercontent.com/u/440384?v=4" .
<https://api.github.com/users/rubensworks> <http://schema.org/url> "https://github.com/rubensworks"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/rubensworks> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/506784720> <http://schema.org/creator> <https://api.github.com/users/rubensworks> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/506784720> <http://schema.org/startDate> "2019-06-28T15:54:38Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/506784720> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/506784720> <http://schema.org/description> "Semi-related to this, I have a use case where I'm overriding `@vocab` to throw an explicit error on terms that could not be expanded when transforming to RDF (to avoid silently ignoring them).\r\nIn [this context](https://github.com/LinkedSoftwareDependencies/Components.js/blob/master/components/context.jsonld#L3) `@vocab` is set to `\"unknown://\"`.\r\nAfter converting JSON-LD documents to RDF with this context, I iterate over all triples to detect terms starting with `unknown://`, and throw an explicit error for them." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/506816192> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/174#issuecomment-506816192"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/174> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/506816192> .
<https://api.github.com/users/iherman> <http://schema.org/accountId> "iherman" .
<https://api.github.com/users/iherman> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/520723?v=4" .
<https://api.github.com/users/iherman> <http://schema.org/url> "https://github.com/iherman"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/iherman> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/506816192> <http://schema.org/creator> <https://api.github.com/users/iherman> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/506816192> <http://schema.org/startDate> "2019-06-28T17:31:38Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/506816192> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/506816192> <http://schema.org/description> "This issue was discussed in [a meeting](https://www.w3.org/2018/json-ld-wg/Meetings/Minutes/2019/2019-06-28-json-ld#section4-1).\r\n\r\n- No actions or resolutions\r\n<details><summary><i class=\"differentiate\">View the transcript</i></summary>\r\n4.1. Continuing discussions from last week around “propagates”<br/>\r\nBenjamin Young: <a href=\"https://github.com/w3c/json-ld-syntax/issues/174#issuecomment-504513373\">https://github.com/w3c/json-ld-syntax/issues/174#issuecomment-504513373</a><br/>\r\nGregg Kellogg: There’s also a PR <a href=\"https://github.com/w3c/json-ld-api/pull/112\">https://github.com/w3c/json-ld-api/pull/112</a><br/>\r\nGregg Kellogg: based on Rob’s proposal, but instead of “<code>@src”,</code> uses “<code>@source”…</code><br/>\r\n… <code>@propagates</code> defaults to True except for type scoped contexts, can be overrriden in either case<br/>\r\nBenjamin Young: focus on <code>@propagates</code> for now<br/>\r\nDave Longley: <a href=\"https://github.com/w3c/json-ld-syntax/issues/174\">https://github.com/w3c/json-ld-syntax/issues/174</a><br/>\r\nDave Longley: propagate makes sense to me, but there other considerations in type scoped contexts…<br/>\r\n… I didn’t check whether gkellogg’s implementation addresses these.<br/>\r\n… previous contexts can now be any context, including type scoped, where changes can occur underneath<br/>\r\n… have to make sure that <code>@type</code> gets evaluated using previous contexts<br/>\r\n… correct keyword sb <code>@import</code> instead of <code>@source</code><br/>\r\n… feature makes a lot of sense to bring ld 1.0 contexts into the 1.1 fold without having to rewrite<br/>\r\n… may not make a lot of sense to import 1.1 context, so maybe we should focus on <code>@import</code> 1.0 context<br/>\r\nGregg Kellogg: May need more tests. Checks in compaction and expansion … if type scoped context is overridden to<br/>\r\n… <code>@source</code> vs. <code>@import</code> - separate discussion. Should discuss SRI types as well<br/>\r\nDave Longley: It would be unexpected to evaluate <code>@type</code> against type scoped context – it would break round-tripping…<br/>\r\n… expectation is that typed value will always be evaluated against previous context.<br/>\r\nGregg Kellogg: can dave represent concern in issue or PR?<br/>\r\nDave Longley: <a href=\"https://github.com/w3c/json-ld-syntax/issues/174#issuecomment-506747857\">https://github.com/w3c/json-ld-syntax/issues/174#issuecomment-506747857</a><br/>\r\nGregg Kellogg: if you try to round-trip example above, it would behave as expected. If, however, we were to process <code>@type</code> using<br/>\r\n… type scoped context, it would destroy its own type, which would be unexpected.<br/>\r\nIvan Herman: example is drastic, but even if you have a type definition in the scoped context, how does it relate to the type in the enclosing context?<br/>\r\nGregg Kellogg: Prior to PR, worked the way that was expected. The way to update w/ <code>@propagates,</code> would be to add <code>@propagates</code> to second embedded context….<br/>\r\n… but question is what is controlling propagation. We need to flesh this out to understand what adding <code>@propagate</code> true to second context<br/>\r\n… need to preserve processing chain independent of propagation<br/>\r\nBenjamin Young: … appears to be consensus developing around PR<br/>\r\nIvan Herman: I am worried about syntax specification wrt. <code>@propagates</code> that is understandable to user. Would like to see PR that makes this clear spec-wise<br/>\r\n… before I would accept API PR, I would like to seen syntax PR w/ examples<br/>\r\nDave Longley: <code>@import</code> speaks to what we can say in the spec, wrt. using <code>@propagate</code> for pulling LD 1.0 and protecting it<br/>\r\nIvan Herman: we need to see the whole story<br/>\r\nGregg Kellogg: JSON-LD 1.0 evolved by thinking of feature, implement and then describe syntax. Approach of syntax and then implementation is difficult. Would prefer to meet in the middle…<br/>\r\n… would like to use sample implementation and examples to see whether this is the direction we want to to, followed by syntax spec.<br/>\r\nDave Longley: i’ve also thought about JSON-LD as … “here’s a feature JSON devs want/use to describe their JSON … how do we implement something to express the semantics in there properly?”<br/>\r\nGregg Kellogg: implementation allows us to decide what we prefer before syntax document. Lets not put this on hold<br/>\r\nDave Longley: +1 that both sides are important … we need to be able to describe the syntax simply enough and be able to do things in the implementation to demonstrate it’s even possible<br/>\r\nIvan Herman: You can get situations where awareness of implementation provides clarity, but if you aren’t familiar with the details it may not make a good story to the end user<br/>\r\n… would like a clear story defined in document before we do the whole thing.<br/>\r\nDave Longley: +1<br/>\r\nGregg Kellogg: if you look at a grammar such as turtle or sparql, if you don’t take parsing issues into account, you’ve done a disservice. Advocate both ends<br/>\r\nDave Longley: +1<br/>\r\nIvan Herman: Need PR for syntax<br/>\r\nGregg Kellogg: need to agree on <code>@imports</code> vs. <code>@source</code> semantics before we do this in a syntax document. API helps us consider that<br/>\r\nDave Longley: If we do <code>@import,</code> can we add <code>@source</code> in the future? Would you just put both tags?<br/>\r\nGregg Kellogg: Could be done either way - integrity (SRI) becomes a modifier to source URL. In the presence of <code>@sri,</code> that value is extracted and passed to algorithm for evaluating ressults…<br/>\r\n… would not import an array of things, so maybe <code>@source</code> makes this clear.<br/>\r\nBenjamin Young: Is this more than bike shedding? Two different modes as represented by <code>@source</code> vs. <code>@import.</code> We should focus on semantics, not names.<br/>\r\n… two terms represent two semantic categories w/ different behaviors.<br/>\r\nDave Longley: my view on the semantic difference: do you “update” a context you bring in (<code>@import)</code> or are you just making meta data assertions on it (<code>@source)</code> … not everyone will agree, maybe <code>@source</code> can do both.<br/>\r\nBenjamin Young: importing a 1.0 context w/ a small 1.1 wrapper sounds “dreamy”…<br/>\r\nGregg Kellogg: agree w/ dlongley’s summary – the diffference between pulling a context in vs. referencing it. <code>@import</code> semantics that allow potential modification makes more sense to me<br/>\r\nDave Longley: using array is “process these contexts in this order”, while <code>@imports</code> allows re-use and modification of existing contexts<br/>\r\nBenjamin Young: {\"<code>@context\":</code> {\"<code>@import\":</code> \"<a href=\"http://...anno.json\",\">http://...anno.json\",</a> \"name\": \"<a href=\"https://schema.org/name\"}}\">https://schema.org/name\"}}</a> &lt;– not a thing? guessing we should clarify the new limitations on <code>@context</code> in general…<br/>\r\nBenjamin Young: this substantively changes what is in <code>@context</code><br/>\r\nDave Longley: ivan brought up issue w/ <code>@protected</code> where people wanted to override schema.org context elements. If terms had been protected, override would fail…<br/>\r\n… <code>@import</code> would allow changes before it gets defined.<br/>\r\nHarold Solbrig: <code>@bigbluehat:</code> how does <code>@import</code> jive with verifiable credentials, etc.<br/>\r\nDave Longley: yes - this should not run afowl of the rules, as it would allow tweaking. What you can do is add on to array and pull in existing contexts and make them compatible with core contexts defined in specs<br/>\r\nIvan Herman: We need this story. I would like to see it written down and spelled out.<br/>\r\nDave Longley: Can do this, but can’t commit to timing<br/>\r\nDave Longley: “update your context before it is processed … as if the term definitions were always that way”<br/>\r\nBenjamin Young: schema.org may change on us in the future, but maybe text –> iri change would make a good example. Does not mean that google will understand what you’ve done…<br/>\r\nIvan Herman: schema.org may not be a good idea. foaf?<br/>\r\nGregg Kellogg: I can create an example of modifying a term. <code>@protected</code> may require more work – another reason that <code>@imports</code> works better vs. <code>@source</code><br/>\r\n… <code>@source</code> and (possibly) <code>@propagates</code> w/ nothing else (except version) allowed?<br/>\r\n… if you pull and modify a context, you are <code>@importing</code> it but <code>@source</code> wouldn’t allow mods.<br/>\r\n… but question is whether SRI could apply to imports or …<br/>\r\nIvan Herman: My understanding is that SRI refers to the context I identify w/ a URL, whether used in import or source isn’t a big problem<br/>\r\n… rob’s original proposal seemed to be simpler – we don’t know whether he would support this or not.<br/>\r\nGregg Kellogg: will work on syntax document and changes to PR<br/>\r\nDave Longley: I’m thinking this shouldn’t be used for embedded contexts, in either <code>@source</code> or <code>@imports</code> situation<br/>\r\nBenjamin Young: {\"<code>@context\":</code> {\"<code>@import\":</code> \"<a href=\"http://...anno.json\",\">http://...anno.json\",</a> \"name\": \"<a href=\"https://schema.org/name\"}}\">https://schema.org/name\"}}</a> <– not a thing?<br/>\r\nBenjamin Young: The above should not be allowed?<br/>\r\n… Leave github issues as they are…<br/>\r\n</details>" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/506816501> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/183#issuecomment-506816501"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/183> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/506816501> .
<https://api.github.com/users/iherman> <http://schema.org/accountId> "iherman" .
<https://api.github.com/users/iherman> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/520723?v=4" .
<https://api.github.com/users/iherman> <http://schema.org/url> "https://github.com/iherman"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/iherman> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/506816501> <http://schema.org/creator> <https://api.github.com/users/iherman> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/506816501> <http://schema.org/startDate> "2019-06-28T17:32:41Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/506816501> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/506816501> <http://schema.org/description> "This issue was discussed in [a meeting](https://www.w3.org/2018/json-ld-wg/Meetings/Minutes/2019/2019-06-28-json-ld#section4-2).\r\n\r\n- `RESOLVED:  closed #183 as wontfix`\r\n<details><summary><i class=\"differentiate\">View the transcript</i></summary>\r\n4.2. Use of \"<code>@vocab\":</code> \"_:\" in ActivityStreams 2.0 (at least) #183<br/>\r\nBenjamin Young: <a href=\"https://github.com/w3c/json-ld-syntax/issues/183\">https://github.com/w3c/json-ld-syntax/issues/183</a><br/>\r\nGregg Kellogg: We haven’t removed support for blank nodes, just marked it as archaic and possibly source of warning<br/>\r\n… we haven’t broken activity streams, but will issue warnings<br/>\r\nBenjamin Young: whole point of this thing is to catch things that might show up in activity streams. If you do consume as json-ld, you do preserve the author’s intent …<br/>\r\nBenjamin Young: <a href=\"https://github.com/w3c/activitystreams-testing/issues/4\">https://github.com/w3c/activitystreams-testing/issues/4</a><br/>\r\nGregg Kellogg: if we look at the import activity streams an set <code>@vocab</code> to some urn, that way it doesn’t lose anything and it round-trips, which maps to issue above…<br/>\r\nProposed resolution: closed #183 as wontfix (Benjamin Young)<br/>\r\nBenjamin Young: +1<br/>\r\nBenjamin Young: they use their own media type in 1.0 to support list of lists. Should there be a follow up issue to say what should be done instead of blank node?<br/>\r\nIvan Herman: +1<br/>\r\nRuben Taelman: +1<br/>\r\nHarold Solbrig: +1<br/>\r\nTim Cole: +1<br/>\r\nResolution #2: closed #183 as wontfix<br/>\r\n</details>" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/508821134> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/199#issuecomment-508821134"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/199> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/508821134> .
<https://api.github.com/users/iherman> <http://schema.org/accountId> "iherman" .
<https://api.github.com/users/iherman> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/520723?v=4" .
<https://api.github.com/users/iherman> <http://schema.org/url> "https://github.com/iherman"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/iherman> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/508821134> <http://schema.org/creator> <https://api.github.com/users/iherman> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/508821134> <http://schema.org/startDate> "2019-07-05T17:24:24Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/508821134> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/508821134> <http://schema.org/description> "I had a cursory look at that document and it mostly looks to me as a stylistic agreement (ie, not some sort of a replacement of WebIDL). Which is perfectly fine, of course, but then whether it is appropriate for our spec or not is entirely an editorial issue. Ie, @gkellogg and @pchampin have, as far as I am concerned, full decision power on this...\r\n\r\n" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/508823891> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/199#issuecomment-508823891"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/199> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/508823891> .
<https://api.github.com/users/dlongley> <http://schema.org/accountId> "dlongley" .
<https://api.github.com/users/dlongley> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/168137?v=4" .
<https://api.github.com/users/dlongley> <http://schema.org/url> "https://github.com/dlongley"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/dlongley> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/508823891> <http://schema.org/creator> <https://api.github.com/users/dlongley> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/508823891> <http://schema.org/startDate> "2019-07-05T17:37:29Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/508823891> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/508823891> <http://schema.org/description> "Looking at this... I had an initial concern with how using this other spec's language would be understood in the context of JSON and JavaScript's `parse` and `stringify` methods. For example, I wouldn't want an implementer to think \"Wait, I can't just call `JSON.parse()` ... I have to translate the output to `Set` and `Map` types in my implementation?\" However, it seems that the Infra spec has a section that is explicitly about this -- and it seems to assuage some concern that this is just about being able to describe types in standards independently of realm:\r\n\r\nhttps://infra.spec.whatwg.org/#json\r\n\r\n> The above two operations operate on JavaScript values directly; in particular, this means that the involved objects or arrays are tied to a particular JavaScript realm. In standards, it is often more convenient to parse JSON into realm-independent maps, lists, strings, booleans, numbers, and nulls.\r\n\r\nThis makes me more comfortable that there wouldn't be some kind of impedance mismatch or confusion with how implementations work with parsing/serializing JSON and the Infra types. I suspect most could look at the sections that transform a \"JSON-derived JavaScript value\" to/from an Infra type and make whatever optimizations are appropriate." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/508864406> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/199#issuecomment-508864406"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/199> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/508864406> .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/508864406> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/508864406> <http://schema.org/startDate> "2019-07-05T21:20:23Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/508864406> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/508864406> <http://schema.org/description> "Actually, we'll want to use [List](https://infra.spec.whatwg.org/#list) instead of [Set](https://infra.spec.whatwg.org/#sets). This implies updating the language where we use _array_ to using _list_ as well as updating _dictionary_ to _map_." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/508951454> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/174#issuecomment-508951454"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/174> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/508951454> .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/508951454> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/508951454> <http://schema.org/startDate> "2019-07-06T20:23:11Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/508951454> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/508951454> <http://schema.org/description> "One issue I'm running into is the treatment of `@protected` when combined with `@source`. One use case would certainly be to source a context and cause all of its term definitions to be protected, but also allowing other term definitions in the wrapping context to override these terms results in an error, since only when being defined from a property (no using _override protected_) are such redefinitions allowed. We could enable this option if the context includes `@source`, but that could inadvertently allow terms that were defined in previous protected contexts to be overridden. There's really no easy way to limit this to just those terms which were defined in the sourced context.\r\n\r\nThis may be just an \"oh, well ...\", or perhaps we need to restrict the enclosing context from defining any term definitions, which was @azaroth42's original proposal, but I could see, for example, using schema.org, protecting the term definitions, but changing something like `schema:identifier` to have to be `\"identifier: {\"@id\": \"http://schema.org/identifier\", \"@type\": \"@id\"}` rather than the default, which is missing `@type`.\r\n\r\nIdeally, this would allow something like the following:\r\n\r\n```json\r\n{\r\n  \"@context\": {\r\n    \"@version\": 1.1,\r\n    \"@protected\": true,\r\n    \"@source\": \"https://schema.org/\",\r\n    \"identifier\": {\"@id\": \"https://schema.org/identifier\", \"@type\": \"@id\"}\r\n  }\r\n}\r\n```\r\n" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/509014167> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/174#issuecomment-509014167"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/174> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/509014167> .
<https://api.github.com/users/dlongley> <http://schema.org/accountId> "dlongley" .
<https://api.github.com/users/dlongley> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/168137?v=4" .
<https://api.github.com/users/dlongley> <http://schema.org/url> "https://github.com/dlongley"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/dlongley> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/509014167> <http://schema.org/creator> <https://api.github.com/users/dlongley> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/509014167> <http://schema.org/startDate> "2019-07-07T16:43:59Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/509014167> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/509014167> <http://schema.org/description> "@gkellogg,\r\n\r\n> One use case would certainly be to source a context and cause all of its term definitions to be protected, but also allowing other term definitions in the wrapping context to override these terms results in an error, since only when being defined from a property (no using override protected) are such redefinitions allowed.\r\n\r\nMy view of how `@source`/`@import` should work is that the terms are not defined until the wrapping context is processed. This means that any term definition that is expressed in the wrapping context wipes out any term definition from `@source`/`@import` before it is defined, avoiding any term processing issues like the above at all. I'm thinking of `@source`/`@import` plus a wrapping context working more like the object spread operator in JavaScript or its [`Object.assign` method](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign#Merging_objects_with_same_properties). " .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/509014485> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/174#issuecomment-509014485"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/174> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/509014485> .
<https://api.github.com/users/dlongley> <http://schema.org/accountId> "dlongley" .
<https://api.github.com/users/dlongley> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/168137?v=4" .
<https://api.github.com/users/dlongley> <http://schema.org/url> "https://github.com/dlongley"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/dlongley> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/509014485> <http://schema.org/creator> <https://api.github.com/users/dlongley> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/509014485> <http://schema.org/startDate> "2019-07-07T16:49:13Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/509014485> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/509014485> <http://schema.org/description> "So, to process `@source/@import`, first you fetch its URL value as a document via a document loader, then you parse it to get an unprocessed local context (a `Map`, really). Then you merge every entry in the wrapping context into that `Map`, replacing as needed. Finally, you do context processing on the result." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/509014959> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/174#issuecomment-509014959"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/174> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/509014959> .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/509014959> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/509014959> <http://schema.org/startDate> "2019-07-07T16:56:13Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/509014959> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/509014959> <http://schema.org/description> "That would make it work, but seems like a big change to processing algorithms. Right now, it’s all about processing a local context on top of an active context. Deferring processing is challenged by the potential shape of a referenced context, array, more remote contexts, etc? They also need to be based on the active context.\r\n\r\nWe could restrict the referenced context to be in the form of a Map, but that’s a slippery slope.\r\n\r\nAnother way would be to pass something to the algorithm to tag all terms created from the sourced/imported context so we could detect that they can be overridden within the local context containing the source/import. Whatever we do, there’s a fair impact on the context processing algorithm." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/509015919> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/174#issuecomment-509015919"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/174> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/509015919> .
<https://api.github.com/users/dlongley> <http://schema.org/accountId> "dlongley" .
<https://api.github.com/users/dlongley> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/168137?v=4" .
<https://api.github.com/users/dlongley> <http://schema.org/url> "https://github.com/dlongley"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/dlongley> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/509015919> <http://schema.org/creator> <https://api.github.com/users/dlongley> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/509015919> <http://schema.org/startDate> "2019-07-07T17:11:51Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/509015919> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/509015919> <http://schema.org/description> "@gkellogg,\r\n\r\n> That would make it work, but seems like a big change to processing algorithms. Right now, it’s all about processing a local context on top of an active context.\r\n\r\nThe way I think about it is that context processing itself doesn't change much other than adding an additional step that handles `@source`/`@import` first, to \"construct\" the local context before it is processed. To me, this is not unlike how we must first use a document loader to retrieve a local context that is referenced via a URL. So it operates at a different layer than context processing \"proper\". Before you can process a local context, you:\r\n\r\n1. Dereference it if it's referred to by a URL.\r\n2. Dereference its `@source`/`@import` if present and merge the wrapping context into it.\r\n\r\nSo context processing itself would be \"deferred\" as you state next.\r\n\r\n> Deferring processing is challenged by the potential shape of a referenced context, array, more remote contexts, etc? They also need to be based on the active context.\r\n> \r\n> We could restrict the referenced context to be in the form of a Map, but that’s a slippery slope.\r\n\r\nIf the value of `@context` in the retrieved document is an array, we could apply the wrapping context to the last context in that array. I think there would be very limited use in trying to do any more than that.\r\n\r\n> Another way would be to pass something to the algorithm to tag all terms created from the sourced/imported context so we could detect that they can be overridden within the local context containing the source/import. Whatever we do, there’s a fair impact on the context processing algorithm.\r\n\r\nI think deferring processing could be less messy, similar to document loading, and, if it works, could also potentially match the language we use to describe how the feature works. When you `@import` a context, it's like editing it inline to create a new local context (per whatever changes you make in the wrapping context) before it gets processed." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/509016407> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/174#issuecomment-509016407"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/174> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/509016407> .
<https://api.github.com/users/dlongley> <http://schema.org/accountId> "dlongley" .
<https://api.github.com/users/dlongley> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/168137?v=4" .
<https://api.github.com/users/dlongley> <http://schema.org/url> "https://github.com/dlongley"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/dlongley> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/509016407> <http://schema.org/creator> <https://api.github.com/users/dlongley> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/509016407> <http://schema.org/startDate> "2019-07-07T17:18:09Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/509016407> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/509016407> <http://schema.org/description> "Also, I think deferred processing better matches what @azaroth42 and others would like to do. They want to avoid having to copy and paste an entire context and make a few edits to it so it can be processed *with those edits*. `@import` would give them a feature to do it -- and it would work, internally, precisely as if they had done it in the more tedious way." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/509021883> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/174#issuecomment-509021883"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/174> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/509021883> .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/509021883> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/509021883> <http://schema.org/startDate> "2019-07-07T18:44:46Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/509021883> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/509021883> <http://schema.org/description> "Deferring this way does change the semantics of processing, consider the following:\r\n\r\nRemote Context:\r\n```json\r\n{\r\n  \"@context\": {\r\n    \"@vocab\": \"http://remote.example.com/\",\r\n    \"foo\": {\"@type\": \"@id\"}\r\n  }\r\n}\r\n```\r\n\r\nLocal context:\r\n```json\r\n{\r\n  \"@context\": {\r\n    \"@version\": 1.1,\r\n    \"@source\": \"Remote\",\r\n    \"@vocab\": \"http://local.example.com/\"\r\n  }\r\n}\r\n```\r\n\r\n\"foo\" was would have been \"http://remote.example.com/foo\" if processing the remote context, but is \"http://local.example.com/foo\" if processed is deferred and the map resulting from processing `@source` is used to fold in the outer-most local context. There are a number of similar things that would affect the semantics.\r\n\r\nFurthermore, if the remote context includes a URL itself (e.g. `{\"@context\": [\"ReallyRemote\", {..}]}`), you need separate logic to look for remote context overflow, and if you don't process the contexts in order, then each context could be interpreted differently vs. the deferred mechanism.\r\n\r\nIf we do that we should probably caveat, if not mandate, that the remote context must be a simple map-like local context structure, and caution that the scope of `@vocab/@language/@protected` along with term definitions that are used in other term definitions, could have a different result. Mandating that such contexts do not result in such confusion would require a number of new tests to test for each combination." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/509025750> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/174#issuecomment-509025750"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/174> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/509025750> .
<https://api.github.com/users/azaroth42> <http://schema.org/accountId> "azaroth42" .
<https://api.github.com/users/azaroth42> <http://schema.org/image> "https://avatars3.githubusercontent.com/u/871868?v=4" .
<https://api.github.com/users/azaroth42> <http://schema.org/url> "https://github.com/azaroth42"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/azaroth42> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/509025750> <http://schema.org/creator> <https://api.github.com/users/azaroth42> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/509025750> <http://schema.org/startDate> "2019-07-07T19:48:29Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/509025750> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/509025750> <http://schema.org/description> "If there is such a restriction to only allow direct mapping contexts, it would invalidate many contexts for inclusion in this way... rather defeating much of the point.\r\n\r\n`foo` is clearly meant to be `http://remote.example.com/foo`, rather than whatever the local `@vocab` is set to.\r\n\r\nSo I agree with @gkellogg on the deferred processing vs regular processing.\r\n\r\nI also (as one might expect) am :+1: to Proposal B.  This is an expert feature, not something that most people will use in their daily json-ld lives. If the context writing is slightly harder, that's a relatively small price to pay.\r\n" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/509027972> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/174#issuecomment-509027972"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/174> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/509027972> .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/509027972> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/509027972> <http://schema.org/startDate> "2019-07-07T20:22:36Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/509027972> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/509027972> <http://schema.org/description> "@azaroth42 I think you need to clarify your support of Proposal B. That would say that type-scoped contexts propagate by default, which would certainly be a big problem for Verifiable Claims and quite arguably not what people expect from type scoping.\r\n\r\nWhat's in the PR works fairly well, I think, and is essentially Proposal A (although not the third statement: \"a scoped context with `@propagate` set to `true` will only be active in its scope node\". I think this was intended to be when `@propagate` is set to `false`)." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/509028468> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/174#issuecomment-509028468"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/174> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/509028468> .
<https://api.github.com/users/azaroth42> <http://schema.org/accountId> "azaroth42" .
<https://api.github.com/users/azaroth42> <http://schema.org/image> "https://avatars3.githubusercontent.com/u/871868?v=4" .
<https://api.github.com/users/azaroth42> <http://schema.org/url> "https://github.com/azaroth42"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/azaroth42> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/509028468> <http://schema.org/creator> <https://api.github.com/users/azaroth42> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/509028468> <http://schema.org/startDate> "2019-07-07T20:29:44Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/509028468> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/509028468> <http://schema.org/description> "Yes - I'm not going to lie down in the road for it, but I think that the argument that object-oriented developers would expect it is weak ... they would also expect inheritance and a closed world, neither of which we have. It's also not what anyone used to writing JSON-LD would expect from 1.0, which is going to be the majority of context authors as opposed to users of the resulting data. \r\n\r\nAgain, which ever way works such that we can fulfill the use cases is fine by me. If that's A ... great. If that's B ... great.\r\n\r\n\r\n" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/509044841> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/174#issuecomment-509044841"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/174> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/509044841> .
<https://api.github.com/users/dlongley> <http://schema.org/accountId> "dlongley" .
<https://api.github.com/users/dlongley> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/168137?v=4" .
<https://api.github.com/users/dlongley> <http://schema.org/url> "https://github.com/dlongley"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/dlongley> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/509044841> <http://schema.org/creator> <https://api.github.com/users/dlongley> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/509044841> <http://schema.org/startDate> "2019-07-08T00:49:12Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/509044841> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/509044841> <http://schema.org/description> "@gkellogg,\r\n\r\n> \"foo\" was would have been \"http://remote.example.com/foo\" if processing the remote context, but is \"http://local.example.com/foo\" if processed is deferred and the map resulting from processing @source is used to fold in the outer-most local context. There are a number of similar things that would affect the semantics.\r\n\r\nThis is actually exactly what I would expect given the feature. This is the only way to \"inline\" edit and reuse an existing context. If you wanted `@vocab` to take effect after context processing, we already have a method for that and you'd do this instead:\r\n\r\n```js\r\n{\r\n  \"@context\": [{\r\n    \"@version\": 1.1,\r\n    \"@source\": \"Remote\"\r\n  }, {\r\n    \"@vocab\": \"http://local.example.com/\"\r\n  }]\r\n}\r\n```\r\n\r\nAdding `@import` provides a new feature (inline selective editing of existing contexts) that didn't previously exist. This approach seems to be a useful feature, one that would solve the original requirements, and it would be more easily understood via general principles vs. a feature that is \"just for\" `@propagate`, etc.\r\n\r\n> If we do that we should probably caveat, if not mandate, that the remote context must be a simple map-like local context structure...\r\n\r\nWhile I'd be ok with that restriction, I do think it would be interesting to explore how challenging it would be to \"carry through\" a flag that would apply the wrapping context to the \"last dereferenced context\" in any series of context arrays that might be dereferenced -- to establish the final local context prior to processing. That approach would seem to match the goal of the feature." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/509280589> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/174#issuecomment-509280589"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/174> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/509280589> .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/509280589> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/509280589> <http://schema.org/startDate> "2019-07-08T15:45:45Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/509280589> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/509280589> <http://schema.org/description> "Okay, that argument makes sense. I can update the PR to do the merge as you suggest, which solves the protected problem. I do believe we should restrict the shape of the referenced context to be a Map/Dictionary, as opposed to an array, or string. This covers pretty much every real-world use case and avoids unnecessary complication." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/509297979> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/198#issuecomment-509297979"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/198> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/509297979> .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/509297979> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/509297979> <http://schema.org/startDate> "2019-07-08T16:31:21Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/509297979> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/509297979> <http://schema.org/description> "Now also includes updates to use INFRA for primitive types and fixes #199." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/509298119> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/199#issuecomment-509298119"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/199> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/509298119> .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/509298119> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/509298119> <http://schema.org/startDate> "2019-07-08T16:31:48Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/509298119> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/509298119> <http://schema.org/description> "Included changes for this in PR #198." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/509417250> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/198#issuecomment-509417250"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/198> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/509417250> .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/509417250> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/509417250> <http://schema.org/startDate> "2019-07-08T22:36:46Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/509417250> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/509417250> <http://schema.org/description> "> I scanned this looking to see if it was just a clean transform to the new terms -- and AFAICT it was. The only possible exception might be around JavaScript strings ... but that really has to do with our existing description including a somewhat confusing parenthetical `(UTF-8)` ...which describes an encoding of unicode, not unicode.\r\n\r\nJSON uses UTF-8, and there are other variations of unicode, so I think it's still necessary to describe it this way, otherwise UTF-16 or UTF-32 might be considered as reasonable.\r\n" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/509818888> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/199#issuecomment-509818888"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/199> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/509818888> .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/509818888> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/509818888> <http://schema.org/startDate> "2019-07-09T21:36:05Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/509818888> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/509818888> <http://schema.org/description> "Closed via #198, w3c/json-ld-api#116, and https://github.com/w3c/json-ld-framing/commit/ba733715bf92f1498020b20ddc166ad63c23a5f7" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/510271132> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/174#issuecomment-510271132"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/174> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/510271132> .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/510271132> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/510271132> <http://schema.org/startDate> "2019-07-10T23:44:45Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/510271132> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/510271132> <http://schema.org/description> "I've updated w3c/json-ld-api#112 with what I think we want for behavior, with the value of `@souce` being a string that references a remote JSON-LD file with an `@context` who's value is an object, which must not have `@source`, itself. This is reverse-merged into the referencing context, which allows things in the sourced context to be \"edited\" by the referencing context (including term definitions, `@vocab`, `@protected`, and so forth).\r\n\r\nIt would be straight-forward to undo the implied lack of propagation of type-scoped contexts, but I think we should separate that and consider it on a call.\r\n\r\nPlease give it a look and 👍 or 👎. Based on that, I can further describe it in the syntax document with a separate PR." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/510699788> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/19#issuecomment-510699788"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/19> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/510699788> .
<https://api.github.com/users/azaroth42> <http://schema.org/accountId> "azaroth42" .
<https://api.github.com/users/azaroth42> <http://schema.org/image> "https://avatars3.githubusercontent.com/u/871868?v=4" .
<https://api.github.com/users/azaroth42> <http://schema.org/url> "https://github.com/azaroth42"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/azaroth42> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/510699788> <http://schema.org/creator> <https://api.github.com/users/azaroth42> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/510699788> <http://schema.org/startDate> "2019-07-12T00:26:08Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/510699788> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/510699788> <http://schema.org/description> "A hopefully simpler proposal and example:\r\n\r\nIntroduce a new keyword `@included` which may be present only as a key at the top of the serialized tree. It may be aliased. The value space is always a JSON object, functionally equivalent to an `@id` container, in that the keys are always URIs (allowing for compaction as normal), and the values are the serialization of the resource identified by that URI.\r\n\r\n`@included` does not generate a triple during expansion. Instead, expansion descends into the JSON object when its URI is encountered in the graph.\r\n\r\n`@included` is generated during compaction when the algorithm encounters `@type:` `@included` in a context for a property definition.\r\n\r\nFor example, this data:\r\n\r\n```\r\n{\r\n  \"@context\": {\r\n    \"eg\": \"https://example.com/ns/\",\r\n    \"hasService\": {\"@id\": \"eg:hasService\", \"@type\": \"@id\"},\r\n    \"label\": \"eg:label\",\r\n    \"Thing\": \"eg:Thing\",\r\n    \"Service\": \"eg:Service\"\r\n  },\r\n  \"@id\": \"https://example.org/1\",\r\n  \"@type\": \"Thing\",\r\n  \"hasService\": {\r\n  \"@id\": \"https://example.org/service\",\r\n  \"@type\": \"Service\",\r\n  \"label\": \"My Service\"\r\n  }\r\n}\r\n```\r\n\r\nExpands in 1.0 and 1.1 to this form: \r\n\r\n```\r\n  {\r\n    \"@id\": \"https://example.org/1\",\r\n    \"@type\": [\r\n      \"https://example.com/ns/Thing\"\r\n    ],\r\n    \"https://example.com/ns/hasService\": [\r\n      {\r\n        \"@id\": \"https://example.org/service\",\r\n        \"@type\": [\r\n          \"https://example.com/ns/Service\"\r\n        ],\r\n        \"https://example.com/ns/label\": [\r\n          {\r\n            \"@value\": \"My Service\"\r\n          }\r\n        ]\r\n      }\r\n    ]\r\n  }\r\n```\r\n\r\nThe following would also expand to the same form:\r\n\r\n```\r\n{\r\n  \"@context\": {\r\n    \"eg\": \"https://example.com/ns\",\r\n    \"hasService\": {\"@id\": \"eg:hasService\", \"@type\": \"@included\"},\r\n    \"label\": \"eg:label\",\r\n    \"Thing\": \"eg:Thing\",\r\n    \"Service\": \"eg:Service\",\r\n    \"included\": \"@included\"\r\n  },\r\n  \"@id\": \"https://example.org/1\",\r\n  \"@type\": \"Thing\",\r\n  \"hasService\": \"https://example.org/service\",\r\n  \"included\": {\r\n    \"https://example.org/service\": {\r\n        \"@type\": \"Service\",\r\n        \"label\": \"My Service\"\r\n     }\r\n  }\r\n}\r\n```\r\n\r\nWhen compacting, the `@type: @included` definition for `hasService` would trigger the creation of the `included` (as aliased from `@included`), and insert the compacted form of `https://example.org/service` into the JSON object.\r\n" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/510940080> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/201#issuecomment-510940080"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/201> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/510940080> .
<https://api.github.com/users/dlongley> <http://schema.org/accountId> "dlongley" .
<https://api.github.com/users/dlongley> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/168137?v=4" .
<https://api.github.com/users/dlongley> <http://schema.org/url> "https://github.com/dlongley"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/dlongley> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/510940080> <http://schema.org/creator> <https://api.github.com/users/dlongley> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/510940080> <http://schema.org/startDate> "2019-07-12T15:58:06Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/510940080> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/510940080> <http://schema.org/description> "I don't think that last normative bit about requiring a sourced context to be an object should be in a note ... but not sure where it goes (I was copying another section of spec text). It also has a typo in it that can be fixed when we address that." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/510940411> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/201#issuecomment-510940411"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/201> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/510940411> .
<https://api.github.com/users/dlongley> <http://schema.org/accountId> "dlongley" .
<https://api.github.com/users/dlongley> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/168137?v=4" .
<https://api.github.com/users/dlongley> <http://schema.org/url> "https://github.com/dlongley"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/dlongley> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/510940411> <http://schema.org/creator> <https://api.github.com/users/dlongley> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/510940411> <http://schema.org/startDate> "2019-07-12T15:59:03Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/510940411> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/510940411> <http://schema.org/description> "Ha! Ok." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/510940740> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/201#issuecomment-510940740"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/201> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/510940740> .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/510940740> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/510940740> <http://schema.org/startDate> "2019-07-12T16:00:03Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/510940740> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/510940740> <http://schema.org/description> "> I don't think that last normative bit about requiring a sourced context to be an object should be in a note ... but not sure where it goes (I was copying another section of spec text). It also has a typo in it that can be fixed when we address that.\r\n\r\nYes, it probably should be outside the note, but that section is informative, in any case. The only place to make a normative statement would be in the grammar, which is a little more challenging." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/510960559> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/9#issuecomment-510960559"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/9> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/510960559> .
<https://api.github.com/users/azaroth42> <http://schema.org/accountId> "azaroth42" .
<https://api.github.com/users/azaroth42> <http://schema.org/image> "https://avatars3.githubusercontent.com/u/871868?v=4" .
<https://api.github.com/users/azaroth42> <http://schema.org/url> "https://github.com/azaroth42"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/azaroth42> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/510960559> <http://schema.org/creator> <https://api.github.com/users/azaroth42> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/510960559> <http://schema.org/startDate> "2019-07-12T17:03:37Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/510960559> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/510960559> <http://schema.org/description> "Resolved to close on 2019-07-12 call - https://www.w3.org/2018/json-ld-wg/Meetings/Minutes/2019/2019-07-12-json-ld" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/510961360> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/200#issuecomment-510961360"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/200> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/510961360> .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/510961360> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/510961360> <http://schema.org/startDate> "2019-07-12T17:06:17Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/510961360> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/510961360> <http://schema.org/description> "Needs some work on examples and to update `@source` to `@import`, which I'll take care of presently." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/510968511> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/147#issuecomment-510968511"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/147> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/510968511> .
<https://api.github.com/users/azaroth42> <http://schema.org/accountId> "azaroth42" .
<https://api.github.com/users/azaroth42> <http://schema.org/image> "https://avatars3.githubusercontent.com/u/871868?v=4" .
<https://api.github.com/users/azaroth42> <http://schema.org/url> "https://github.com/azaroth42"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/azaroth42> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/510968511> <http://schema.org/creator> <https://api.github.com/users/azaroth42> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/510968511> <http://schema.org/startDate> "2019-07-12T17:29:17Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/510968511> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/510968511> <http://schema.org/description> "Closing, handled in latest specs." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/510968610> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/148#issuecomment-510968610"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/148> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/510968610> .
<https://api.github.com/users/azaroth42> <http://schema.org/accountId> "azaroth42" .
<https://api.github.com/users/azaroth42> <http://schema.org/image> "https://avatars3.githubusercontent.com/u/871868?v=4" .
<https://api.github.com/users/azaroth42> <http://schema.org/url> "https://github.com/azaroth42"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/azaroth42> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/510968610> <http://schema.org/creator> <https://api.github.com/users/azaroth42> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/510968610> <http://schema.org/startDate> "2019-07-12T17:29:37Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/510968610> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/510968610> <http://schema.org/description> "Closing, handled in latest specs" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/510969038> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/155#issuecomment-510969038"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/155> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/510969038> .
<https://api.github.com/users/azaroth42> <http://schema.org/accountId> "azaroth42" .
<https://api.github.com/users/azaroth42> <http://schema.org/image> "https://avatars3.githubusercontent.com/u/871868?v=4" .
<https://api.github.com/users/azaroth42> <http://schema.org/url> "https://github.com/azaroth42"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/azaroth42> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/510969038> <http://schema.org/creator> <https://api.github.com/users/azaroth42> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/510969038> <http://schema.org/startDate> "2019-07-12T17:30:55Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/510969038> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/510969038> <http://schema.org/description> "CLosing, handled in latest specs per #166" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/511344009> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/9#issuecomment-511344009"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/9> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/511344009> .
<https://api.github.com/users/vmx> <http://schema.org/accountId> "vmx" .
<https://api.github.com/users/vmx> <http://schema.org/image> "https://avatars3.githubusercontent.com/u/42839?v=4" .
<https://api.github.com/users/vmx> <http://schema.org/url> "https://github.com/vmx"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/vmx> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/511344009> <http://schema.org/creator> <https://api.github.com/users/vmx> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/511344009> <http://schema.org/startDate> "2019-07-15T10:06:21Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/511344009> <http://example.com/ns#authorAssociation> "NONE" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/511344009> <http://schema.org/description> "@azaroth42 I'd like to read the meeting minutes, but the link above is a 404 for me. I also can't find them in https://github.com/w3c/json-ld-wg/tree/master/_minutes." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/511438232> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/9#issuecomment-511438232"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/9> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/511438232> .
<https://api.github.com/users/BigBlueHat> <http://schema.org/accountId> "BigBlueHat" .
<https://api.github.com/users/BigBlueHat> <http://schema.org/image> "https://avatars1.githubusercontent.com/u/43209?v=4" .
<https://api.github.com/users/BigBlueHat> <http://schema.org/url> "https://github.com/BigBlueHat"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/BigBlueHat> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/511438232> <http://schema.org/creator> <https://api.github.com/users/BigBlueHat> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/511438232> <http://schema.org/startDate> "2019-07-15T14:58:54Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/511438232> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/511438232> <http://schema.org/description> "@vmx I'll be generating last Friday's minutes today. Our normal minute generating super hero is out of the office, atm, so I get to feed the bots while they're a way. :grin: I'll update this issue once they're generated. Raw logs are available (if you're in a hurry): https://www.w3.org/2019/07/12-json-ld-irc" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/511548247> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/9#issuecomment-511548247"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/9> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/511548247> .
<https://api.github.com/users/BigBlueHat> <http://schema.org/accountId> "BigBlueHat" .
<https://api.github.com/users/BigBlueHat> <http://schema.org/image> "https://avatars1.githubusercontent.com/u/43209?v=4" .
<https://api.github.com/users/BigBlueHat> <http://schema.org/url> "https://github.com/BigBlueHat"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/BigBlueHat> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/511548247> <http://schema.org/creator> <https://api.github.com/users/BigBlueHat> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/511548247> <http://schema.org/startDate> "2019-07-15T20:02:29Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/511548247> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/511548247> <http://schema.org/description> "@vmx here are the logs as promised! https://www.w3.org/2018/json-ld-wg/Meetings/Minutes/2019/2019-07-12-json-ld\r\n\r\nIf you have specific questions or ideas about this issue at this point, it's probably best to file a new issue or send a mailing list post to our [public mailing list](https://lists.w3.org/Archives/Public/public-json-ld-wg/).\r\n\r\nCheers!\r\n🎩 " .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/512971908> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/185#issuecomment-512971908"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/185> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/512971908> .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/512971908> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/512971908> <http://schema.org/startDate> "2019-07-18T20:19:46Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/512971908> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/512971908> <http://schema.org/description> "I say we change the introduction to be more appropriate. The terms are already split into different parts, but not sections. We could use sub-section for these different bits:\r\n\r\n* Primitive datatypes from JSON, INFRA, and ECMASCRIPT. The only thing in that first bit we defined is the _internal representation_, which seems appropriate here.\r\n* Terms defined in other specs, such as RDF, IRI. We might include here our own terms, such as _base IRI_, _compact IRI_, _relative IRI_, and _JSON Literal_.\r\n* JSON-LD specific terms.\r\n\r\nPerhaps we could say something like \"From ECMASCRIPT we use the following terms:\", and so on for the specs we import from." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/513001916> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/186#issuecomment-513001916"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/186> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/513001916> .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/513001916> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/513001916> <http://schema.org/startDate> "2019-07-18T21:49:28Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/513001916> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/513001916> <http://schema.org/description> "@marcoscaceres, it doesn't seem that xref is a solution for this. It isn't wrong, but seems odd for a bibliographic section to have an entry for itself.\r\n\r\nI might imagine that if in JSON-LD11, a reference to `[[JSON-LD11]]` might be a direct reference to the document itself, rather than to a bibliographic section. We could eliminate the `[[JSON-LD11]]` in the spec through post-processing, but we'd still have those that come from `data-cite=\"JSON-LD11#...\"` that would create entries." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/513238843> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/204#issuecomment-513238843"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/204> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/513238843> .
<https://api.github.com/users/pchampin> <http://schema.org/accountId> "pchampin" .
<https://api.github.com/users/pchampin> <http://schema.org/image> "https://avatars1.githubusercontent.com/u/304612?v=4" .
<https://api.github.com/users/pchampin> <http://schema.org/url> "https://github.com/pchampin"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/pchampin> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/513238843> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/513238843> <http://schema.org/startDate> "2019-07-19T13:58:37Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/513238843> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/513238843> <http://schema.org/description> "Let me rephrase. What you are suggesting is to *link* a JSON-LD context from an HTML page rather than embedding it. This would be done using [RFC5988](https://tools.ietf.org/html/rfc5988) HTTP headers, so\r\n* it would not require the JSON-LD processor to parse the HTML, and\r\n* it would not require the server to perform \"active\" content negotiation.\r\n\r\nAm I getting this correctly?\r\n" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/513278862> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/204#issuecomment-513278862"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/204> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/513278862> .
<https://api.github.com/users/dlongley> <http://schema.org/accountId> "dlongley" .
<https://api.github.com/users/dlongley> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/168137?v=4" .
<https://api.github.com/users/dlongley> <http://schema.org/url> "https://github.com/dlongley"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/dlongley> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/513278862> <http://schema.org/creator> <https://api.github.com/users/dlongley> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/513278862> <http://schema.org/startDate> "2019-07-19T15:46:20Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/513278862> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/513278862> <http://schema.org/description> "If I understand this, this approach sounds like it wouldn't be that functionally different from following a redirect. So, a JSON-LD processor would hit a URL, get back something that isn't `application/ld+json` but that has a link header in it that points at a JSON-LD context. We already do something very similar for JSON resources that have a context elsewhere ... so it doesn't seem to me like that much of a stretch to support this if it actually addresses important use cases.\r\n\r\ncc: @msporny  -- thoughts?" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/513300530> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/204#issuecomment-513300530"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/204> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/513300530> .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/513300530> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/513300530> <http://schema.org/startDate> "2019-07-19T16:54:37Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/513300530> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/513300530> <http://schema.org/description> "The thought I expressed on the call was to re-use the Link header but add semantics so that if the response when fetching a context is _not_ `application/ld+json` and it includes a Link header with `rel=\"...#context\"` a processor would load the context from the specified location. (creates another opportunity for infinite recursion, which would need to be handled)." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/513976987> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/19#issuecomment-513976987"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/19> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/513976987> .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/513976987> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/513976987> <http://schema.org/startDate> "2019-07-22T22:20:47Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/513976987> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/513976987> <http://schema.org/description> "I have a straw man implementation of the expansion part of this, which raises some cases to consider:\r\n\r\n* [x] I presume that if the JSON document is an array that each object member may have its own included block.\r\n* [x] What if an included block exists but no term has `\"@type\": \"@included\"`? Presume it's simply ignored.\r\n* [ ] What if multiple properties map to `@included` in the top-level object? Error, or first found wins?\r\n* [ ] What if a property references a missing included key? Presume that it's simply dropped.\r\n* [x] What if a property with `@type: @included` contains values that aren't strings mapping to IRIs? I presume they're added to the output as if there were no included.\r\n* [ ] What if `@included` appears in a non top-level object?\r\n* [x] What if a value in an included block includes a property with `@type: @included`? Creates an order-dependent expansion, or requires that included value expansion does not happen until the value is processed, not at the beginning. Seems like this should be disallowed.\r\n* [ ] What if the included map includes the key `@none`?  error or ignored?\r\n* [ ] What if the value of the included key is not a map? Error or dropped?\r\n* [x] What if a property has `@type: @included`, but there is no included block? Presume it defaults to an empty map.\r\n* [ ] Can included keys be vocabulary relative? Why not just treat them as strings?\r\n\r\nBasic implementation\r\n\r\n1) After looking for type-scoped contexts, if there is no _included_ map, and a key expanding to `@included` is found, create _included_ from the value, by expanding keys document-relative and expanding the values using the expansion algorithm, and pass this to subsequent invocations of the expansion algorithm.\r\n1) After looking for `@type: @json`, if the property has a type mapping of `@included`, the value must be a string or an array of strings. Expand each value relative to either the document or the vocabulary, depending on the type-mapping of the property term and add the concatenation of any _included_ map value found for that expanded value." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/514325308> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/19#issuecomment-514325308"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/19> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/514325308> .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/514325308> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/514325308> <http://schema.org/startDate> "2019-07-23T18:19:05Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/514325308> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/514325308> <http://schema.org/description> "Two other observations:\r\n\r\n1) as the expansion is entirely syntactic, why use IRI expansion for the keys? They could just be strings.\r\n2) Compaction would need to invent an identifier to use as a key of `@included`, as none remains in the expanded form. Plus, it would result in compacting the whole content of the property. If in compacted form the property of type `@compacted` had multiple string values, each one would be inserted when expanding, but could not reasonably be reconstructed when compacting.\r\n3) If the same value were repeated for different properties, it might be algorithmically challenging to match that with an existing value of `@included`.\r\n\r\nWe may want to skip compacting altogether. We previously thought about doing it with framing, although many of the same challenges remain." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/514363005> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/204#issuecomment-514363005"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/204> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/514363005> .
<https://api.github.com/users/BigBlueHat> <http://schema.org/accountId> "BigBlueHat" .
<https://api.github.com/users/BigBlueHat> <http://schema.org/image> "https://avatars1.githubusercontent.com/u/43209?v=4" .
<https://api.github.com/users/BigBlueHat> <http://schema.org/url> "https://github.com/BigBlueHat"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/BigBlueHat> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/514363005> <http://schema.org/creator> <https://api.github.com/users/BigBlueHat> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/514363005> <http://schema.org/startDate> "2019-07-23T20:04:29Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/514363005> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/514363005> <http://schema.org/description> "Let's be sure to distinguish between the HTTP header conversation and the HTML-level `<link>` tag approach. They have very different requirements in terms of both processing and deployment.\r\n\r\nAlso @gkellogg's concerns about infinite recursion would likely apply to both scenarios." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/514402158> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/19#issuecomment-514402158"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/19> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/514402158> .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/514402158> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/514402158> <http://schema.org/startDate> "2019-07-23T22:09:04Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/514402158> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/514402158> <http://schema.org/description> "Some expansion examples:\r\n\r\n### Includes referenced identifier\r\n```\r\n{\r\n  \"@context\": {\r\n    \"@vocab\": \"http://example.org/\",\r\n    \"data\": {\"@type\": \"@included\"}\r\n  },\r\n  \"data\": \"http://example.org/data\",\r\n  \"@included\": {\r\n    \"http://example.org/data\": {\r\n      \"@type\": \"Data\",\r\n      \"label\": \"label\"\r\n    }\r\n  }\r\n}\r\n```\r\n=>\r\n```json\r\n[{\r\n  \"http://example.org/data\": [{\r\n    \"@type\": [\"http://example.org/Data\"],\r\n    \"http://example.org/label\": [{\"@value\": \"label\"}]\r\n  }]\r\n}]\r\n```\r\n\r\n### Includes with array value\r\n```json\r\n{\r\n  \"@context\": {\r\n    \"@vocab\": \"http://example.org/\",\r\n    \"data\": {\"@type\": \"@included\"}\r\n  },\r\n  \"data\": \"http://example.org/data\",\r\n  \"@included\": {\r\n    \"http://example.org/data\": [{\r\n      \"@type\": \"Data\",\r\n      \"label\": \"label\"\r\n    }, {\r\n      \"@type\": \"Data2\",\r\n      \"label\": \"label2\"\r\n    }]\r\n  }\r\n}\r\n```\r\n=>\r\n```json\r\n[{\r\n  \"http://example.org/data\": [{\r\n    \"@type\": [\"http://example.org/Data\"],\r\n    \"http://example.org/label\": [{\"@value\": \"label\"}]\r\n  }, {\r\n    \"@type\": [\"http://example.org/Data2\"],\r\n    \"http://example.org/label\": [{\"@value\": \"label2\"}]\r\n  }]\r\n}]\r\n```\r\n\r\n### Included in different top-level objects of an array\r\n```json\r\n[{\r\n  \"@context\": {\r\n    \"@vocab\": \"http://example.org/\",\r\n    \"data\": {\"@type\": \"@included\"}\r\n  },\r\n  \"data\": \"http://example.org/data\",\r\n  \"@included\": {\r\n    \"http://example.org/data\": {\r\n      \"@type\": \"Data\",\r\n      \"label\": \"label\"\r\n    }\r\n  }\r\n}, {\r\n  \"@context\": {\r\n    \"@vocab\": \"http://example.org/\",\r\n    \"data\": {\"@type\": \"@included\"}\r\n  },\r\n  \"data\": \"http://example.org/data\",\r\n  \"@included\": {\r\n    \"http://example.org/data\": {\r\n      \"@type\": \"Data2\",\r\n      \"label\": \"label2\"\r\n    }\r\n  }\r\n}]\r\n```\r\n=>\r\n```json\r\n[{\r\n  \"http://example.org/data\": [{\r\n    \"@type\": [\"http://example.org/Data\"],\r\n    \"http://example.org/label\": [{\"@value\": \"label\"}]\r\n  }]\r\n}, {\r\n  \"http://example.org/data\": [{\r\n    \"@type\": [\"http://example.org/Data2\"],\r\n    \"http://example.org/label\": [{\"@value\": \"label2\"}]\r\n  }]\r\n}]\r\n```\r\n\r\n### Multiple values for an `@included` property\r\n```json\r\n{\r\n  \"@context\": {\r\n    \"@vocab\": \"http://example.org/\",\r\n    \"data\": {\"@type\": \"@included\"}\r\n  },\r\n  \"data\": [\"http://example.org/data1\", \"http://example.org/data2\"],\r\n  \"@included\": {\r\n    \"http://example.org/data1\": {\r\n      \"@type\": \"Data\",\r\n      \"label\": \"label\"\r\n    },\r\n    \"http://example.org/data2\": {\r\n      \"@type\": \"Data2\",\r\n      \"label\": \"label2\"\r\n    }\r\n  }\r\n}\r\n```\r\n=>\r\n```json\r\n[{\r\n  \"http://example.org/data\": [{\r\n    \"@type\": [\"http://example.org/Data\"],\r\n    \"http://example.org/label\": [{\"@value\": \"label\"}]\r\n  }, {\r\n    \"@type\": [\"http://example.org/Data2\"],\r\n    \"http://example.org/label\": [{\"@value\": \"label2\"}]\r\n  }]\r\n}]\r\n```\r\n\r\n### `@included` with no `@type: @included`\r\n```json\r\n{\r\n  \"@context\": {\r\n    \"@vocab\": \"http://example.org/\",\r\n    \"data\": {\"@type\": \"@id\"}\r\n  },\r\n  \"data\": \"http://example.org/data\",\r\n  \"@included\": {\r\n    \"http://example.org/data\": {\r\n      \"@type\": \"Data\",\r\n      \"label\": \"label\"\r\n    }\r\n  }\r\n}\r\n```\r\n=>\r\n```json\r\n[{\r\n  \"http://example.org/data\": [{\"@id\": \"http://example.org/data\"}]\r\n}]\r\n```\r\n\r\n### Only uses first entry mapping to `@included`\r\n```json\r\n{\r\n  \"@context\": {\r\n    \"@vocab\": \"http://example.org/\",\r\n    \"data\": {\"@type\": \"@included\"},\r\n    \"includedA\": \"@included\",\r\n    \"includedB\": \"@included\"\r\n  },\r\n  \"data\": \"http://example.org/data\",\r\n  \"includedB\": {\r\n    \"http://example.org/data\": {\r\n      \"@type\": \"Data2\",\r\n      \"label\": \"label2\"\r\n    }\r\n  },\r\n  \"includedA\": {\r\n    \"http://example.org/data\": {\r\n      \"@type\": \"Data\",\r\n      \"label\": \"label\"\r\n    }\r\n  }\r\n}\r\n```\r\n=>\r\n```json\r\n[{\r\n  \"http://example.org/data\": [{\r\n    \"@type\": [\"http://example.org/Data\"],\r\n    \"http://example.org/label\": [{\"@value\": \"label\"}]\r\n  }]\r\n}]\r\n```\r\n\r\n### Missing `@included`\r\n```json\r\n{\r\n  \"@context\": {\r\n    \"@vocab\": \"http://example.org/\",\r\n    \"data\": {\"@type\": \"@included\"}\r\n  },\r\n  \"data\": \"http://example.org/data\"\r\n}\r\n```\r\n=> Error: \"missing @included referent\"\r\n\r\n### Missing `@included` referent\r\n```json\r\n{\r\n  \"@context\": {\r\n    \"@vocab\": \"http://example.org/\",\r\n    \"data\": {\"@type\": \"@included\"}\r\n  },\r\n  \"data\": \"http://example.org/data\",\r\n  \"@included\": {\r\n    \"http://example.org/other\": {\r\n      \"@type\": \"Data\",\r\n      \"label\": \"label\"\r\n    }\r\n  }\r\n}\r\n```\r\n=> Error: \"missing @included referent\"\r\n\r\n### `@included` in a non-top-level object\r\n```json\r\n{\r\n  \"@context\": {\r\n    \"@vocab\": \"http://example.org/\",\r\n    \"data\": {\"@type\": \"@included\"}\r\n  },\r\n  \"block\": {\r\n    \"data\": \"http://example.org/data\",\r\n    \"@included\": {\r\n      \"http://example.org/data\": {\r\n        \"@type\": \"Data\",\r\n        \"label\": \"label\"\r\n      }\r\n    }\r\n  }\r\n}\r\n```\r\n=> Error: \"invalid @included map\"\r\n\r\n### `@included` term within `@included` map\r\n```json\r\n{\r\n  \"@context\": {\r\n    \"@vocab\": \"http://example.org/\",\r\n    \"data\": {\"@type\": \"@included\"}\r\n  },\r\n  \"data\": \"http://example.org/data\",\r\n  \"@included\": {\r\n    \"http://example.org/data\": {\r\n      \"@type\": \"Data\",\r\n      \"label\": \"label\",\r\n      \"data\": \"http://example.org/data\"\r\n    }\r\n  }\r\n}\r\n```\r\n=> Error: \"invalid @included map\"\r\n\r\n### `@included` not a map\r\n```json\r\n{\r\n  \"@context\": {\r\n    \"@vocab\": \"http://example.org/\",\r\n    \"data\": {\"@type\": \"@included\"}\r\n  },\r\n  \"data\": \"http://example.org/data\",\r\n  \"@included\": true\r\n}\r\n```\r\n=> Error: \"invalid @included map\"" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/514406107> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/19#issuecomment-514406107"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/19> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/514406107> .
<https://api.github.com/users/azaroth42> <http://schema.org/accountId> "azaroth42" .
<https://api.github.com/users/azaroth42> <http://schema.org/image> "https://avatars3.githubusercontent.com/u/871868?v=4" .
<https://api.github.com/users/azaroth42> <http://schema.org/url> "https://github.com/azaroth42"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/azaroth42> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/514406107> <http://schema.org/creator> <https://api.github.com/users/azaroth42> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/514406107> <http://schema.org/startDate> "2019-07-23T22:24:51Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/514406107> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/514406107> <http://schema.org/description> "> What if multiple properties map to @included in the top-level object? Error, or first found wins?\r\n\r\nI think it should be an error.  I think multiple maps should be okay, but only one should be present. With multiple and picking the first, it would be determined by the key order ... which isn't deterministic without further processing (which we already specify, but isn't lovely).  Alternatively, if the keys are unique across the maps, they could be merged ... but that seems like a challenge for creation, even if we don't specify it in 1.1.  So ... my thought would be error.\r\n\r\n> What if a property references a missing included key? Presume that it's simply dropped.\r\n\r\ne.g. that there's a reference but no included block with that value as a key? If the reference value MUST expand to a IRI, then there's still a valid triple, just no data with the URI as the subject.  So I would keep the triple where the IRI is the object.\r\n\r\nAnd this is why I think the keys in the block and the reference should be required to expand to IRIs.\r\n\r\n > What if @included appears in a non top-level object?\r\n\r\nI think that should be an error. There's no point having non-top-level inclusion blocks, as you would never find them.\r\n\r\n> What if the included map includes the key @none? error or ignored?\r\n\r\nError, as it doesn't expand to an IRI.\r\n\r\n> What if the value of the included key is not a map? Error or dropped?\r\n\r\nError. \r\n\r\n> Can included keys be vocabulary relative? Why not just treat them as strings?\r\n\r\nThat is an excellent question.  I think they should be vocabulary relative, such that you could do crazy things like having RDFS descriptions in the @included to give the domain / range of properties that are defined in the context.\r\n\r\n> We may want to skip compacting altogether. We previously thought about doing it with framing, although many of the same challenges remain.\r\n\r\nI think the strongest use case is expansion -- there's data that looks like this in the wild, and the structure helps the target audience of JSON developers do their thing. If it we don't specify how to generate that form in compact() in 1.1 ... that's not the end of the world.\r\n" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/514422595> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/19#issuecomment-514422595"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/19> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/514422595> .
<https://api.github.com/users/azaroth42> <http://schema.org/accountId> "azaroth42" .
<https://api.github.com/users/azaroth42> <http://schema.org/image> "https://avatars3.githubusercontent.com/u/871868?v=4" .
<https://api.github.com/users/azaroth42> <http://schema.org/url> "https://github.com/azaroth42"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/azaroth42> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/514422595> <http://schema.org/creator> <https://api.github.com/users/azaroth42> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/514422595> <http://schema.org/startDate> "2019-07-23T23:41:23Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/514422595> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/514422595> <http://schema.org/description> "Thanks for the work on this Greg!!" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/514587208> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/19#issuecomment-514587208"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/19> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/514587208> .
<https://api.github.com/users/ajs6f> <http://schema.org/accountId> "ajs6f" .
<https://api.github.com/users/ajs6f> <http://schema.org/image> "https://avatars1.githubusercontent.com/u/110994?v=4" .
<https://api.github.com/users/ajs6f> <http://schema.org/url> "https://github.com/ajs6f"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/ajs6f> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/514587208> <http://schema.org/creator> <https://api.github.com/users/ajs6f> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/514587208> <http://schema.org/startDate> "2019-07-24T11:04:53Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/514587208> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/514587208> <http://schema.org/description> ">> What if a property references a missing included key? Presume that it's simply dropped.\r\n\r\n> e.g. that there's a reference but no included block with that value as a key? If the reference value MUST expand to a IRI, then there's still a valid triple, just no data with the URI as the subject. So I would keep the triple where the IRI is the object.\r\n\r\nIIUC, in @azaroth42's formulation, a bit of JSON can produce triples with the URI either as subject or object, which seems like a good opportunity for surprise. I think omission (or erroring out) is a bit more intuitive. But I'm not confident that I understand this very well, without \"in the wild\" examples." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/514689379> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/19#issuecomment-514689379"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/19> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/514689379> .
<https://api.github.com/users/azaroth42> <http://schema.org/accountId> "azaroth42" .
<https://api.github.com/users/azaroth42> <http://schema.org/image> "https://avatars3.githubusercontent.com/u/871868?v=4" .
<https://api.github.com/users/azaroth42> <http://schema.org/url> "https://github.com/azaroth42"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/azaroth42> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/514689379> <http://schema.org/creator> <https://api.github.com/users/azaroth42> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/514689379> <http://schema.org/startDate> "2019-07-24T15:49:05Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/514689379> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/514689379> <http://schema.org/description> "I think the case from the examples is this one:\r\n\r\n```\r\n{\r\n  \"@context\": {\r\n    \"@vocab\": \"http://example.org/\",\r\n    \"data\": {\"@type\": \"@included\"}\r\n  },\r\n  \"data\": \"http://example.org/data\",\r\n  \"@included\": {\r\n    \"http://example.org/other\": {\r\n      \"@type\": \"Data\",\r\n      \"label\": \"label\"\r\n    }\r\n  }\r\n}\r\n```\r\n\r\ne.g. `data` references \"http://example.org/data\", but that isn't a key in `@included`.\r\nHowever there is a triple: `<base> data <http://example.org/data>`\r\nOtherwise that document expands to an empty set of triples.\r\n\r\nCertainly not a hill I'm going to die on, but if it doesn't expand, then I think the `@type:@included` should always error if the value of the property does not have a reference in the `@included` map.  E.g. it cannot be a string, a number, or a JSON object, only a value that expands to a URI or an array of URIs, all of which are present (after expansion) in the map." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/514706036> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/19#issuecomment-514706036"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/19> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/514706036> .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/514706036> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/514706036> <http://schema.org/startDate> "2019-07-24T16:32:55Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/514706036> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/514706036> <http://schema.org/description> "> Certainly not a hill I'm going to die on, but if it doesn't expand, then I think the `@type:@included` should always error if the value of the property does not have a reference in the `@included` map. E.g. it cannot be a string, a number, or a JSON object, only a value that expands to a URI or an array of URIs, all of which are present (after expansion) in the map.\r\n\r\nThat's the current interpretation as I laid out in **Missing `@included` referent**.\r\n\r\nI'll create a PR for the API with a processing description and tests based on the examples I outlined above, plus some others.\r\n\r\nAlso, to note, `@type` in a term definition is used to interpret string values, so such a property may have a _value object_ or _node object_ value which would be expanded as if it were the value of any other property.\r\n" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/515246667> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/204#issuecomment-515246667"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/204> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/515246667> .
<https://api.github.com/users/azaroth42> <http://schema.org/accountId> "azaroth42" .
<https://api.github.com/users/azaroth42> <http://schema.org/image> "https://avatars3.githubusercontent.com/u/871868?v=4" .
<https://api.github.com/users/azaroth42> <http://schema.org/url> "https://github.com/azaroth42"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/azaroth42> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/515246667> <http://schema.org/creator> <https://api.github.com/users/azaroth42> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/515246667> <http://schema.org/startDate> "2019-07-25T23:09:34Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/515246667> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/515246667> <http://schema.org/description> "Minutes of previous call: https://www.w3.org/2018/json-ld-wg/Meetings/Minutes/2019/2019-07-19-json-ld#section5-1 " .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/515252466> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/207#issuecomment-515252466"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/207> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/515252466> .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/515252466> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/515252466> <http://schema.org/startDate> "2019-07-25T23:33:19Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/515252466> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/515252466> <http://schema.org/description> "> Typo: consolodated for consolidated ... otherwise great :)\r\n\r\nHuh? I don't see \"consolodated\" anywhere in the spec." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/515636158> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/19#issuecomment-515636158"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/19> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/515636158> .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/515636158> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/515636158> <http://schema.org/startDate> "2019-07-27T00:33:53Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/515636158> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/515636158> <http://schema.org/description> "Based on discussion today, it sounds like the group would like to do something different, where we would rely on node references to do the job, and find a way to be able to do something like `@graph`, but where the graph name is something like `@default`. Thinking about this more, I don't think we can really make this work, as there's no where you could put in `\"@id\": \"@default\"`, and trying to do it in the context doesn't leave a really satisfactory expanded form.\r\n\r\nLooking more at [included from json.api](https://jsonapi.org), maybe we want to do something like that, where the value of `@included` would be treated as an array of node objects in the same graph as the containing node object, and the `@included` would survive expansion. An example from above might look like the following:\r\n\r\n```json\r\n{\r\n  \"@context\": {\r\n    \"@version\": 1.1,\r\n    \"@vocab\": \"http://example.org/\",\r\n    \"@base\": \"http://example.org/base/\",\r\n    \"id\": \"@id\", \r\n    \"type\": \"@type\",\r\n    \"enum\": \"http://example.org/enum#\",\r\n    \"classification\": {\"@type\": \"@id\"},\r\n    \"service\": {\"@type\": \"@ id\"},\r\n    \"included\": \"@included\"\r\n  },\r\n  \"id\": \"http://example.org/base/1\",\r\n  \"type\": \"Thing-with-Items\",\r\n  \"items\": [{\r\n    \"id\":\"http://example.org/base/2\",\r\n    \"classification\": \"enum:c6\",\r\n    \"service\": \"enum:s2\"\r\n  },\r\n    3...26 go here\r\n  {\r\n    \"id\": \"http://example.org/base/27\",\r\n    \"classification\": \"enum:c6\"\r\n  }],\r\n  \"included\": [{\r\n    \"@id\": \"enum:c6\", \"type\": \"Type\", \"label\": \"Classification 6\"\r\n  }, {\r\n    \"@id\": \"enum:s2\", \"type\": \"Service\", \"label\": \"Login Service\"\r\n  }]\r\n}\r\n```\r\n\r\nThis would expand to something like the following:\r\n\r\n```json\r\n[{\r\n  \"@id\": \"http://example.org/base/1\",\r\n  \"@type\": [\"http://example.org/Thing-with-Items\"],\r\n  \"http://example.org/items\": [{\r\n    \"@id\": \"http://example.org/base/2\",\r\n    \"http://example.org/classification\": [{\r\n       \"@id\": \"http://example.org/enum#c6\"\r\n    }],\r\n    \"http://example.org/service\": [{\r\n      \"@id\": \"http://example.org/enum#s2\",\r\n    }]\r\n  }, {\r\n    \"@id\": \"http://example.org/base/27\",\r\n    \"http://example.org/classification\": [{\r\n      \"@id\": \"http://example.org/enum#c6\"\r\n    }]\r\n  }],\r\n  \"@included\": [{\r\n    \"@id\": \"http://example.org/enum#c6\",\r\n    \"@type\": [\"http://example.org/Type\"],\r\n    \"http://example.org/label\": [{\"@value\": \"Classification 6\"}]\r\n  }, {\r\n    \"@id\": \"http://example.org/enum#s2\",\r\n    \"@type\": [\"http://example.org/Service\"],\r\n    \"http://example.org/label\": [{\"@value\": \"Login Service\"}]\r\n  }]\r\n}]\r\n```\r\n\r\nIf you flatten this, the `@included` would go away, and the node references and node objects would effectively be merged together, generating the same triples as we had before.\r\n\r\nIf we chose too, we could even allow a term definition aliasing `@included` that used `@container: @id` to get the form of an id map:\r\n\r\n```json\r\n{\r\n  \"@context\": {\r\n    \"@version\": 1.1,\r\n    \"@vocab\": \"http://example.org/\",\r\n    \"@base\": \"http://example.org/base/\",\r\n    \"id\": \"@id\", \r\n    \"type\": \"@type\",\r\n    \"enum\": \"http://example.org/enum#\",\r\n    \"classification\": {\"@type\": \"@ id\"},\r\n    \"service\": {\"@type\": \"@ id\"},\r\n    \"included\": {\"@id\": \"@included\", \"@container\": \"@id\"}\r\n  },\r\n  \"id\": \"http://example.org/base/1\",\r\n  \"type\": \"Thing-with-Items\",\r\n  \"items\": [{\r\n    \"id\":\"http://example.org/base/2\",\r\n    \"classification\": \"enum:c6\",\r\n    \"service\": \"enum:s2\"\r\n  },\r\n    3...26 go here\r\n  {\r\n    \"id\": \"http://example.org/base/27\",\r\n    \"classification\": \"enum:c6\"\r\n  }],\r\n  \"included\": {\r\n    \"enum:c6\": {\"type\": \"Type\", \"label\": \"Classification 6\"},\r\n    \"enum:s2\": {\"type\": \"Service\", \"label\": \"Login Service\"}\r\n  }\r\n}\r\n```\r\n\r\nThis is effectively equivalent to the json.api use of included, while adhering more closely to JSON-LD syntax and processing rules." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/515796480> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/37#issuecomment-515796480"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/37> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/515796480> .
<https://api.github.com/users/nightpool> <http://schema.org/accountId> "nightpool" .
<https://api.github.com/users/nightpool> <http://schema.org/image> "https://avatars2.githubusercontent.com/u/233815?v=4" .
<https://api.github.com/users/nightpool> <http://schema.org/url> "https://github.com/nightpool"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/nightpool> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/515796480> <http://schema.org/creator> <https://api.github.com/users/nightpool> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/515796480> <http://schema.org/startDate> "2019-07-28T21:27:06Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/515796480> <http://example.com/ns#authorAssociation> "NONE" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/515796480> <http://schema.org/description> "over at Mastodon, I have server operators reporting a lot of “[DEPRECATION] Blank Node vocabularies deprecated in JSON-LD 1.1” in logs from the json-ld ruby gem. this seems 1) concerning, since I think we use blank node vocabularies a fair amount and 2) potentially misleading if I'm interpreting this issue correctly?" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/515799176> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/37#issuecomment-515799176"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/37> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/515799176> .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/515799176> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/515799176> <http://schema.org/startDate> "2019-07-28T22:07:59Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/515799176> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/515799176> <http://schema.org/description> "The use of blank nodes as properties is marked as a [feature at risk](https://www.w3.org/TR/json-ld11/#data-model) for JSON-LD 1.1, as the underlying data model does not support blank nodes as predicates, although it's seen some deployment, principally in Activity Streams. Based on feedback, we may make make it not obsolete and continue to fully support it.\r\n\r\nAre there other vocabularies you're aware of that depend on blank node properties? Presumably, if vocabularies could be updated, document-relative or URN based properties could serve the same purpose.\r\n\r\nThe Ruby gem does announce the DEPRECATION message based upon this state, and if it didn't you might not be chiming in on this issue. If the AT RISK is removed, the gem will respond by removing the DEPRECATION message.\r\n\r\n@azaroth42 we should put this back on the agenda for further discussion." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/515819207> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/37#issuecomment-515819207"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/37> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/515819207> .
<https://api.github.com/users/ajs6f> <http://schema.org/accountId> "ajs6f" .
<https://api.github.com/users/ajs6f> <http://schema.org/image> "https://avatars1.githubusercontent.com/u/110994?v=4" .
<https://api.github.com/users/ajs6f> <http://schema.org/url> "https://github.com/ajs6f"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/ajs6f> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/515819207> <http://schema.org/creator> <https://api.github.com/users/ajs6f> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/515819207> <http://schema.org/startDate> "2019-07-29T02:05:58Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/515819207> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/515819207> <http://schema.org/description> "@nightpool Can you say a bit more about how Mastodon uses blank nodes in this way? It would be really helpful to understand how that came about and why-- it would feed healthy continued discussion about this." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/515840183> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/37#issuecomment-515840183"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/37> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/515840183> .
<https://api.github.com/users/kaniini> <http://schema.org/accountId> "kaniini" .
<https://api.github.com/users/kaniini> <http://schema.org/image> "https://avatars1.githubusercontent.com/u/1522444?v=4" .
<https://api.github.com/users/kaniini> <http://schema.org/url> "https://github.com/kaniini"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/kaniini> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/515840183> <http://schema.org/creator> <https://api.github.com/users/kaniini> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/515840183> <http://schema.org/startDate> "2019-07-29T04:29:57Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/515840183> <http://example.com/ns#authorAssociation> "NONE" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/515840183> <http://schema.org/description> "as far as I know activitypub messages should not contain any blank nodes if they are well formed" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/516025592> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/37#issuecomment-516025592"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/37> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/516025592> .
<https://api.github.com/users/azaroth42> <http://schema.org/accountId> "azaroth42" .
<https://api.github.com/users/azaroth42> <http://schema.org/image> "https://avatars3.githubusercontent.com/u/871868?v=4" .
<https://api.github.com/users/azaroth42> <http://schema.org/url> "https://github.com/azaroth42"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/azaroth42> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/516025592> <http://schema.org/creator> <https://api.github.com/users/azaroth42> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/516025592> <http://schema.org/startDate> "2019-07-29T14:52:56Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/516025592> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/516025592> <http://schema.org/description> ":+1: to discussion. @nightpool could you please post a message that uses blank nodes for predicates into the issue?" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/516633505> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/208#issuecomment-516633505"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/208> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/516633505> .
<https://api.github.com/users/azaroth42> <http://schema.org/accountId> "azaroth42" .
<https://api.github.com/users/azaroth42> <http://schema.org/image> "https://avatars3.githubusercontent.com/u/871868?v=4" .
<https://api.github.com/users/azaroth42> <http://schema.org/url> "https://github.com/azaroth42"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/azaroth42> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/516633505> <http://schema.org/creator> <https://api.github.com/users/azaroth42> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/516633505> <http://schema.org/startDate> "2019-07-30T23:27:33Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/516633505> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/516633505> <http://schema.org/description> "LGTM! :)" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/516633562> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/208#issuecomment-516633562"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/208> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/516633562> .
<https://api.github.com/users/azaroth42> <http://schema.org/accountId> "azaroth42" .
<https://api.github.com/users/azaroth42> <http://schema.org/image> "https://avatars3.githubusercontent.com/u/871868?v=4" .
<https://api.github.com/users/azaroth42> <http://schema.org/url> "https://github.com/azaroth42"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/azaroth42> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/516633562> <http://schema.org/creator> <https://api.github.com/users/azaroth42> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/516633562> <http://schema.org/startDate> "2019-07-30T23:27:49Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/516633562> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/516633562> <http://schema.org/description> "(Sorry, misclick)" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/516633722> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/207#issuecomment-516633722"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/207> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/516633722> .
<https://api.github.com/users/azaroth42> <http://schema.org/accountId> "azaroth42" .
<https://api.github.com/users/azaroth42> <http://schema.org/image> "https://avatars3.githubusercontent.com/u/871868?v=4" .
<https://api.github.com/users/azaroth42> <http://schema.org/url> "https://github.com/azaroth42"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/azaroth42> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/516633722> <http://schema.org/creator> <https://api.github.com/users/azaroth42> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/516633722> <http://schema.org/startDate> "2019-07-30T23:28:32Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/516633722> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/516633722> <http://schema.org/description> "Close in favor of #208?" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/516656545> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/207#issuecomment-516656545"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/207> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/516656545> .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/516656545> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/516656545> <http://schema.org/startDate> "2019-07-31T01:30:14Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/516656545> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/516656545> <http://schema.org/description> "Yes, we should close the others once there’s consensus on the included blocks treatment. Practically speaking, that’s probably after the meeting on Friday. " .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/516880954> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/128#issuecomment-516880954"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/128> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/516880954> .
<https://api.github.com/users/dlongley> <http://schema.org/accountId> "dlongley" .
<https://api.github.com/users/dlongley> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/168137?v=4" .
<https://api.github.com/users/dlongley> <http://schema.org/url> "https://github.com/dlongley"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/dlongley> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/516880954> <http://schema.org/creator> <https://api.github.com/users/dlongley> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/516880954> <http://schema.org/startDate> "2019-07-31T14:45:39Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/516880954> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/516880954> <http://schema.org/description> "Note that https://github.com/w3c/json-ld-syntax/issues/19 may help resolve this." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/516885604> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/208#issuecomment-516885604"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/208> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/516885604> .
<https://api.github.com/users/iherman> <http://schema.org/accountId> "iherman" .
<https://api.github.com/users/iherman> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/520723?v=4" .
<https://api.github.com/users/iherman> <http://schema.org/url> "https://github.com/iherman"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/iherman> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/516885604> <http://schema.org/creator> <https://api.github.com/users/iherman> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/516885604> <http://schema.org/startDate> "2019-07-31T14:55:59Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/516885604> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/516885604> <http://schema.org/description> "Can we simplify the example to contain only what is really necessary to understand the feature? From the point of view of this feature aliasing `@type`, `@id`, or indeed `@included`, but also the usage of `@base` seems to be totally irrelevant. The same for the usage of type for the included objects. \r\n\r\nThis would help the user concentrating on what is really essential in this case...\r\n\r\n(Otherwise it looks o.k. to me...)" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/516886910> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/208#issuecomment-516886910"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/208> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/516886910> .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/516886910> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/516886910> <http://schema.org/startDate> "2019-07-31T14:58:44Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/516886910> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/516886910> <http://schema.org/description> "The example came from Rob’s original use case, but I can simplify it easily enough." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/516916464> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/128#issuecomment-516916464"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/128> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/516916464> .
<https://api.github.com/users/iherman> <http://schema.org/accountId> "iherman" .
<https://api.github.com/users/iherman> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/520723?v=4" .
<https://api.github.com/users/iherman> <http://schema.org/url> "https://github.com/iherman"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/iherman> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/516916464> <http://schema.org/creator> <https://api.github.com/users/iherman> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/516916464> <http://schema.org/startDate> "2019-07-31T16:09:41Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/516916464> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/516916464> <http://schema.org/description> "@dlongley I am not sure I see how..." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/516936845> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/128#issuecomment-516936845"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/128> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/516936845> .
<https://api.github.com/users/dlongley> <http://schema.org/accountId> "dlongley" .
<https://api.github.com/users/dlongley> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/168137?v=4" .
<https://api.github.com/users/dlongley> <http://schema.org/url> "https://github.com/dlongley"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/dlongley> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/516936845> <http://schema.org/creator> <https://api.github.com/users/dlongley> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/516936845> <http://schema.org/startDate> "2019-07-31T17:07:01Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/516936845> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/516936845> <http://schema.org/description> "@iherman,\r\n\r\nWere you looking for something like this to resolve your issue?\r\n\r\n```js\r\n{\r\n  \"@context\" : {\r\n    \"a\": \"http://example.org/a\",\r\n    \"b\": \"http://example.org/b\",\r\n    \"c\":  \"http://example.org/c\",\r\n    \"b:predicate\" : { \"@type\" : \"@id\" }\r\n  },\r\n  \"@included\": [{\r\n    \"@id\" : \"http://example.org/gr1\",\r\n    \"@graph\" : {\r\n      \"@id\" : \"a:something\",\r\n      \"a:predicate\" : \"value1\",\r\n      \"b:predicate\" : \"c:something1\"\r\n    }\r\n  }, {\r\n    \"@id\" : \"http://example.org/gr2\",\r\n    \"@graph\" : {\r\n      \"@id\" : \"a:something\",\r\n      \"a:predicate\" : \"value2\",\r\n      \"b:predicate\" : \"c:something2\"\r\n    }\r\n  }]\r\n}\r\n```\r\n\r\nSupposing, of course, that the above resolves to the same quads as the TriG." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/516959057> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/208#issuecomment-516959057"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/208> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/516959057> .
<https://api.github.com/users/iherman> <http://schema.org/accountId> "iherman" .
<https://api.github.com/users/iherman> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/520723?v=4" .
<https://api.github.com/users/iherman> <http://schema.org/url> "https://github.com/iherman"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/iherman> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/516959057> <http://schema.org/creator> <https://api.github.com/users/iherman> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/516959057> <http://schema.org/startDate> "2019-07-31T18:07:53Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/516959057> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/516959057> <http://schema.org/description> "Actually... the comment of @dlongley in https://github.com/w3c/json-ld-syntax/issues/128#issuecomment-516936845 made me realize that, at least for me, the most important aspect of this feature is not what is in the proposed text. Indeed, what `@included` can replace is the misleading top level `@graph` when what one wants to expess is a “bush”, ie, several top level objects with their (recursive) properties. This is used all over the place in Turtle data, and for which the only solution in JSON-LD 1.0 is to use a top-level `@graph` property whoise value is... _not_ a graph in the dataset sense (certainly not the same way as when a TriG data is encoded in JSON-LD).\r\n\r\nIf my understanding is indeed correct, I would think that such an example should be “the” core example for this feature, and the cross references in @azaroth42’s example is just a welcome consequence... \r\n\r\nOr, at least, this fact should be emphasized in the text imho." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/516970573> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/208#issuecomment-516970573"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/208> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/516970573> .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/516970573> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/516970573> <http://schema.org/startDate> "2019-07-31T18:39:24Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/516970573> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/516970573> <http://schema.org/description> "@iherman Please suggest some text and an example to help flesh this out in the spec. I'll be happy to integrate it into the text." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/516980736> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/207#issuecomment-516980736"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/207> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/516980736> .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/516980736> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/516980736> <http://schema.org/startDate> "2019-07-31T19:07:03Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/516980736> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/516980736> <http://schema.org/description> "Closed in favor of #208." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/516992745> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/208#issuecomment-516992745"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/208> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/516992745> .
<https://api.github.com/users/dlongley> <http://schema.org/accountId> "dlongley" .
<https://api.github.com/users/dlongley> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/168137?v=4" .
<https://api.github.com/users/dlongley> <http://schema.org/url> "https://github.com/dlongley"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/dlongley> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/516992745> <http://schema.org/creator> <https://api.github.com/users/dlongley> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/516992745> <http://schema.org/startDate> "2019-07-31T19:43:12Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/516992745> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/516992745> <http://schema.org/description> "@iherman,\r\n\r\n> Indeed, what @included can replace is the misleading top level @graph when what one wants to expess is a “bush”, ie, several top level objects with their (recursive) properties.\r\n\r\nYes, this is also my understanding -- I left a comment to similar effect over on the API PR:\r\n\r\nhttps://github.com/w3c/json-ld-api/pull/128#pullrequestreview-269051034" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/517141548> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/128#issuecomment-517141548"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/128> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/517141548> .
<https://api.github.com/users/VladimirAlexiev> <http://schema.org/accountId> "VladimirAlexiev" .
<https://api.github.com/users/VladimirAlexiev> <http://schema.org/image> "https://avatars3.githubusercontent.com/u/536250?v=4" .
<https://api.github.com/users/VladimirAlexiev> <http://schema.org/url> "https://github.com/VladimirAlexiev"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/VladimirAlexiev> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/517141548> <http://schema.org/creator> <https://api.github.com/users/VladimirAlexiev> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/517141548> <http://schema.org/startDate> "2019-08-01T06:37:05Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/517141548> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/517141548> <http://schema.org/description> "> either converting to graphs or datasets\r\n\r\n@gkellogg a stupid question: could you explain the difference? " .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/517223245> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/208#issuecomment-517223245"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/208> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/517223245> .
<https://api.github.com/users/iherman> <http://schema.org/accountId> "iherman" .
<https://api.github.com/users/iherman> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/520723?v=4" .
<https://api.github.com/users/iherman> <http://schema.org/url> "https://github.com/iherman"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/iherman> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/517223245> <http://schema.org/creator> <https://api.github.com/users/iherman> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/517223245> <http://schema.org/startDate> "2019-08-01T10:19:41Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/517223245> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/517223245> <http://schema.org/description> "@gkellogg \r\n\r\n> @iherman Please suggest some text and an example to help flesh this out in the spec. I'll be happy to integrate it into the text.\r\n\r\nHopefully, the PR over this PR works: https://github.com/w3c/json-ld-syntax/pull/209" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/517293333> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/37#issuecomment-517293333"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/37> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/517293333> .
<https://api.github.com/users/nightpool> <http://schema.org/accountId> "nightpool" .
<https://api.github.com/users/nightpool> <http://schema.org/image> "https://avatars2.githubusercontent.com/u/233815?v=4" .
<https://api.github.com/users/nightpool> <http://schema.org/url> "https://github.com/nightpool"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/nightpool> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/517293333> <http://schema.org/creator> <https://api.github.com/users/nightpool> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/517293333> <http://schema.org/startDate> "2019-08-01T13:42:01Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/517293333> <http://example.com/ns#authorAssociation> "NONE" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/517293333> <http://schema.org/description> "I'm currently looking into the issue, @thibg hasn't been able to trace down the particular document that caused the error. Here's a pretty bog-standard activitystreams document if you want to look at it: https://cybre.space/@nightpool/102541962034098460.json \r\n" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/517295309> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/37#issuecomment-517295309"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/37> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/517295309> .
<https://api.github.com/users/nightpool> <http://schema.org/accountId> "nightpool" .
<https://api.github.com/users/nightpool> <http://schema.org/image> "https://avatars2.githubusercontent.com/u/233815?v=4" .
<https://api.github.com/users/nightpool> <http://schema.org/url> "https://github.com/nightpool"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/nightpool> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/517295309> <http://schema.org/creator> <https://api.github.com/users/nightpool> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/517295309> <http://schema.org/startDate> "2019-08-01T13:47:06Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/517295309> <http://example.com/ns#authorAssociation> "NONE" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/517295309> <http://schema.org/description> "(i'm suspicious of the claim @kaniini makes that a well-formed as2 document will never contain blank nodes, considering that example 30 and 31 in [ActivityStreams Core](https://www.w3.org/TR/activitystreams-core/) show a document with blank nodes)\r\n\r\nI think we've been pretty good about avoiding blank nodes in mastodon, but I can't guarantee that the rest of the fediverse doesn't use them, particularly misskey and glitch-soc." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/517320235> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/128#issuecomment-517320235"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/128> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/517320235> .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/517320235> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/517320235> <http://schema.org/startDate> "2019-08-01T14:48:10Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/517320235> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/517320235> <http://schema.org/description> "As with other dataset formats, such as TriG, you may not actually use named graphs, in chich case the JSON-LD is used as a graph format. If you use it to describe datasets, it’s a dataset format. TriG is the same, as it’s a superset of Turtle.\r\n\r\nThe new included feature, as @dlongley shows, can make it easier to express datasets sharing a common context." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/517332492> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/37#issuecomment-517332492"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/37> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/517332492> .
<https://api.github.com/users/ThibG> <http://schema.org/accountId> "ThibG" .
<https://api.github.com/users/ThibG> <http://schema.org/image> "https://avatars2.githubusercontent.com/u/384364?v=4" .
<https://api.github.com/users/ThibG> <http://schema.org/url> "https://github.com/ThibG"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/ThibG> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/517332492> <http://schema.org/creator> <https://api.github.com/users/ThibG> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/517332492> <http://schema.org/startDate> "2019-08-01T15:17:27Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/517332492> <http://example.com/ns#authorAssociation> "NONE" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/517332492> <http://schema.org/description> "Well, one document that has `\"@vocab\": \"_:\"` is… https://www.w3.org/ns/activitystreams" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/517341347> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/209#issuecomment-517341347"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/209> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/517341347> .
<https://api.github.com/users/iherman> <http://schema.org/accountId> "iherman" .
<https://api.github.com/users/iherman> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/520723?v=4" .
<https://api.github.com/users/iherman> <http://schema.org/url> "https://github.com/iherman"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/iherman> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/517341347> <http://schema.org/creator> <https://api.github.com/users/iherman> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/517341347> <http://schema.org/startDate> "2019-08-01T15:38:38Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/517341347> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/517341347> <http://schema.org/description> "Thanks @dlongley !" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/517447608> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/209#issuecomment-517447608"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/209> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/517447608> .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/517447608> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/517447608> <http://schema.org/startDate> "2019-08-01T20:34:24Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/517447608> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/517447608> <http://schema.org/description> "Looks good, I fixed the examples and added a note to Example 111." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/517745156> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/209#issuecomment-517745156"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/209> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/517745156> .
<https://api.github.com/users/BigBlueHat> <http://schema.org/accountId> "BigBlueHat" .
<https://api.github.com/users/BigBlueHat> <http://schema.org/image> "https://avatars1.githubusercontent.com/u/43209?v=4" .
<https://api.github.com/users/BigBlueHat> <http://schema.org/url> "https://github.com/BigBlueHat"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/BigBlueHat> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/517745156> <http://schema.org/creator> <https://api.github.com/users/BigBlueHat> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/517745156> <http://schema.org/startDate> "2019-08-02T15:31:51Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/517745156> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/517745156> <http://schema.org/description> "I don't think this was the intended use of `@included`...and I find using it for bushes confusing--it's yet another way to do them rather than a meaningful replacement for the others.\r\n\r\nBushes can be written (as I understand them):\r\n```json\r\n[{\"@context\": \"...local context...\", \"@id\": \"...subject...\"}, {}]\r\n```\r\nor\r\n```json\r\n{\r\n  \"@context\": \"...shared context...\",\r\n  \"@graph\": [{\"@id\": \"...subject...\"}, {}]\r\n}\r\n```\r\n\r\nAnd datasets can be written as...\r\n```json\r\n{\r\n  \"@context\": \"...shared context...\",\r\n  \"@id\": \"...name of graph...\",\r\n  \"@graph\": [{\"@id\": \"...subject...\"}, {}]\r\n}\r\n```\r\n\r\nI've never found that confusing...but maybe I'm missing something?" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/517745661> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/209#issuecomment-517745661"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/209> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/517745661> .
<https://api.github.com/users/BigBlueHat> <http://schema.org/accountId> "BigBlueHat" .
<https://api.github.com/users/BigBlueHat> <http://schema.org/image> "https://avatars1.githubusercontent.com/u/43209?v=4" .
<https://api.github.com/users/BigBlueHat> <http://schema.org/url> "https://github.com/BigBlueHat"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/BigBlueHat> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/517745661> <http://schema.org/creator> <https://api.github.com/users/BigBlueHat> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/517745661> <http://schema.org/startDate> "2019-08-02T15:33:16Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/517745661> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/517745661> <http://schema.org/description> "Put differently, if the following two examples are identical, we don't need the new one.\r\n\r\nNew `@included`-based \"bush.\"\r\n```json\r\n{\r\n  \"@context\": {\r\n    \"Person\": \"http://xmlns.com/foaf/0.1/Person\",\r\n    \"name\": \"http://xmlns.com/foaf/0.1/name\",\r\n    \"knows\": {\"@id\": \"http://xmlns.com/foaf/0.1/knows\", \"@type\": \"@id\"}\r\n  },\r\n  \"@included\": [{\r\n    \"@id\": \"http://manu.sporny.org/about#manu\",\r\n    \"@type\": \"Person\",\r\n    \"name\": \"Manu Sporny\",\r\n    \"knows\": \"https://greggkellogg.net/foaf#me\"\r\n  }, {\r\n    \"@id\": \"https://greggkellogg.net/foaf#me\",\r\n    \"@type\": \"Person\",\r\n    \"name\": \"Gregg Kellogg\",\r\n    \"knows\": \"http://manu.sporny.org/about#manu\"\r\n  }]\r\n}\r\n```\r\nvs. existing `@graph`-based bush...\r\n```json\r\n{\r\n  \"@context\": {\r\n    \"Person\": \"http://xmlns.com/foaf/0.1/Person\",\r\n    \"name\": \"http://xmlns.com/foaf/0.1/name\",\r\n    \"knows\": {\"@id\": \"http://xmlns.com/foaf/0.1/knows\", \"@type\": \"@id\"}\r\n  },\r\n  \"@graph\": [{\r\n    \"@id\": \"http://manu.sporny.org/about#manu\",\r\n    \"@type\": \"Person\",\r\n    \"name\": \"Manu Sporny\",\r\n    \"knows\": \"https://greggkellogg.net/foaf#me\"\r\n  }, {\r\n    \"@id\": \"https://greggkellogg.net/foaf#me\",\r\n    \"@type\": \"Person\",\r\n    \"name\": \"Gregg Kellogg\",\r\n    \"knows\": \"http://manu.sporny.org/about#manu\"\r\n  }]\r\n}\r\n```\r\n\r\n@gkellogg do these generate the same graph/bush output?" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/517752000> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/209#issuecomment-517752000"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/209> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/517752000> .
<https://api.github.com/users/iherman> <http://schema.org/accountId> "iherman" .
<https://api.github.com/users/iherman> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/520723?v=4" .
<https://api.github.com/users/iherman> <http://schema.org/url> "https://github.com/iherman"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/iherman> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/517752000> <http://schema.org/creator> <https://api.github.com/users/iherman> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/517752000> <http://schema.org/startDate> "2019-08-02T15:51:26Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/517752000> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/517752000> <http://schema.org/description> "I think they are the same indeed, and if we have `@included` then indeed we have two ways of expressing the same.\r\n\r\nAs for using `@graph`: I do find it confusing. These two things are not the same, semantically (in Turtle and TriG, respectively):\r\n\r\n```\r\na:b c:d \"something\" .\r\n```\r\n\r\n```\r\n_:sdf { a:b c:d \"something\". }\r\n```\r\n\r\nUsing `@graph` for a bush, for me, would naturally map to the latter but, the way we use it, it maps in the former. That _is_ confusing in my view." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/517752622> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/209#issuecomment-517752622"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/209> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/517752622> .
<https://api.github.com/users/iherman> <http://schema.org/accountId> "iherman" .
<https://api.github.com/users/iherman> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/520723?v=4" .
<https://api.github.com/users/iherman> <http://schema.org/url> "https://github.com/iherman"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/iherman> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/517752622> <http://schema.org/creator> <https://api.github.com/users/iherman> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/517752622> <http://schema.org/startDate> "2019-08-02T15:53:16Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/517752622> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/517752622> <http://schema.org/description> "I know the second example above is not really valid, though... A better one is to say\r\n\r\n```\r\n a:b c:d \"something\".\r\n<http://a.b.c.> {}\r\n```\r\n\r\nThe point is: let us not mix up datasets and simple graphs...\r\n" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/517754887> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/209#issuecomment-517754887"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/209> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/517754887> .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/517754887> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/517754887> <http://schema.org/startDate> "2019-08-02T15:59:57Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/517754887> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/517754887> <http://schema.org/description> "One difference is that `@graph` takes on a different meaning when other properties are present, which `@included` doesn't. This means you can have an `@included` block where the members are graph objects, each denoting a different named graph." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/517754991> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/209#issuecomment-517754991"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/209> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/517754991> .
<https://api.github.com/users/BigBlueHat> <http://schema.org/accountId> "BigBlueHat" .
<https://api.github.com/users/BigBlueHat> <http://schema.org/image> "https://avatars1.githubusercontent.com/u/43209?v=4" .
<https://api.github.com/users/BigBlueHat> <http://schema.org/url> "https://github.com/BigBlueHat"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/BigBlueHat> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/517754991> <http://schema.org/creator> <https://api.github.com/users/BigBlueHat> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/517754991> <http://schema.org/startDate> "2019-08-02T16:00:16Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/517754991> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/517754991> <http://schema.org/description> "```turtle\r\na:b c:d \"something\" .\r\n```\r\nbecomes\r\n```json\r\n{\r\n  \"@graph\": [{\"@id\": \"a:b\", \"c:d\": \"something\"}]\r\n}\r\n```\r\n\r\nAnd the dataset one...\r\n```turtle\r\n<http://a.b.c.> { a:b c:d \"something\". }\r\n```\r\nbecomes...\r\n```json\r\n{\r\n  \"@id\": \"http://a.b.c.\",\r\n  \"@graph\": [{\"@id\": \"a:b\", \"c:d\": \"something\"}]\r\n}\r\n```\r\n\r\nI really don't see the confusion. A dataset is an `@graph` with an identifier." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/517777342> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/208#issuecomment-517777342"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/208> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/517777342> .
<https://api.github.com/users/iherman> <http://schema.org/accountId> "iherman" .
<https://api.github.com/users/iherman> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/520723?v=4" .
<https://api.github.com/users/iherman> <http://schema.org/url> "https://github.com/iherman"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/iherman> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/517777342> <http://schema.org/creator> <https://api.github.com/users/iherman> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/517777342> <http://schema.org/startDate> "2019-08-02T17:08:57Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/517777342> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/517777342> <http://schema.org/description> "This issue was discussed in [a meeting](https://www.w3.org/2018/json-ld-wg/Meetings/Minutes/2019/2019-08-02-json-ld#section4-1).\r\n\r\n- `RESOLVED:  focus <code>@included</code> text and example on original inclusion use case; mention value of it as an <code>@graph</code> replacement for bushes–and reference primer for further reading`\r\n- `RESOLVED:  close issue #19 with merger of <code>@included</code> related PRs`\r\n<details><summary><i class=\"differentiate\">View the transcript</i></summary>\r\n4.1. Indexing with <code>@included</code><br/>\r\nIvan Herman: -> <a href=\"https://github.com/w3c/json-ld-syntax/pull/208\">https://github.com/w3c/json-ld-syntax/pull/208</a> issue PR<br/>\r\nIvan Herman: -> <a href=\"https://github.com/w3c/json-ld-syntax/issues/19\">https://github.com/w3c/json-ld-syntax/issues/19</a> issue itself<br/>\r\nBenjamin Young: We made good progress on this last week.<br/>\r\nGregg Kellogg: It is <code>@included</code> now.16:13:56 &lt;bigbluehat> <a href=\"https://jsonapi.org/\">https://jsonapi.org/</a><br/>\r\n… <code>@included</code> comes from the JSON.API spec, and we are adopting this.<br/>\r\n… Right now it’s just a container for collecting node objects that don’t have a direct rel with the node in which they are contained.<br/>\r\n… There’s been some exchange on the issue highlighting a bush-like use for included.<br/>\r\n… In JSON-LD 1.0 the top-level graph is used to collect nodes is a corner case. Everywhere else where graphs are used are seen as named graph.<br/>\r\n… Included doesn’t carry that baggage.<br/>\r\n… So <code>@included</code> can be used in favor of <code>@graph</code> in these places.<br/>\r\n… In 1.0, you can’t have a graph name being a property of another node. With <code>@included</code> you can.<br/>\r\n… We can’t use <code>@graph</code> to define a default graph.<br/>\r\n… Except when it is the only property in a top-level object.<br/>\r\nBenjamin Young: How does the actual inclusion take place?<br/>\r\nGregg Kellogg: The shape is similar to JSON.API. The value is seen as an array of node objects. If you have a node that is a value of a prop….<br/>\r\n… Needed in jsonapi for node references that are not included in the main document as references, but should be included aside.<br/>\r\n… Included blocks can be nested, and will be flattened out when done.<br/>\r\n… You won’t compact back to included blocks after flattening.<br/>\r\n… You can use included in a frame and have it match on diff subjects.<br/>\r\n… The name <code>@included</code> is out of sync with other keywords.<br/>\r\n… Dave suggested <code>@include</code><br/>\r\n… Just like jsonapi<br/>\r\nIvan Herman: It’s becoming bikeshedding<br/>\r\n… I would go further than what you did. Ex 1.1.1 and 1.1.2 (bushes) should be removed.<br/>\r\n… We should convince people to not use those forms anymore.<br/>\r\nGregg Kellogg: <a href=\"https://pr-preview.s3.amazonaws.com/w3c/json-ld-syntax/pull/208.html#example-111-using-graph-to-explicitly-express-the-default-graph\">https://pr-preview.s3.amazonaws.com/w3c/json-ld-syntax/pull/208.html#example-111-using-graph-to-explicitly-express-the-default-graph</a><br/>\r\nGregg Kellogg: By removing these we won’t lose anything. We would have to remove everything after the note.<br/>\r\nGregg Kellogg: <a href=\"https://pr-preview.s3.amazonaws.com/w3c/json-ld-syntax/pull/208.html#example-103-simple-data-with-several-top-level-nodes\">https://pr-preview.s3.amazonaws.com/w3c/json-ld-syntax/pull/208.html#example-103-simple-data-with-several-top-level-nodes</a><br/>\r\nGregg Kellogg: Also, we may want to reverse example 103 and 104. To clarify writing bushes.<br/>\r\nIvan Herman: Referring to <code>@graph</code> is misleading, as it has not been explained yet there.<br/>\r\nGregg Kellogg: We may want to change an example in the <code>@graph</code> section then.<br/>\r\n… We can also just leave that out and use it in the best practices document.<br/>\r\nIvan Herman: Yes<br/>\r\nBenjamin Young: Flattened representation will still contain <code>@graph,</code> so readers will have to know what it does.<br/>\r\n… This plumbing shift is significant.<br/>\r\n… This is going to cause issues for the json people that are operating on the flattened form.<br/>\r\nGregg Kellogg: If you flatten with a context, it would introduce a graph to contain it. This would change the shape dramatically.<br/>\r\n… Same with framing. In 1.1 we don’t use an <code>@graph</code> at the top level if not needed.<br/>\r\n… We could change the algo to use included instead.<br/>\r\n… But we may not want to do that.<br/>\r\n… So do we want to replace the main usage of <code>@graph</code> to <code>@included?</code><br/>\r\n… Included allows embedded nodes to go to one place. Like in jsonapi, they don’t want to include referenced things inline, but only a reference to an included block.<br/>\r\nBenjamin Young: Useful for reducing payload size. And only including referenced things once.<br/>\r\n… These are just IRI references?<br/>\r\nGregg Kellogg: There is no magic going on.<br/>\r\nIvan Herman: In JSON-LD it used to be hard to do these indexed references.<br/>\r\n… The bush features can now be expressed in two different ways.<br/>\r\n… These things happen.<br/>\r\n… It’s a matter of taste which one you prefer.<br/>\r\n… I personally always hated graph for representing bushes.<br/>\r\n… I like this new included representation for bushes.<br/>\r\n… I don’t want to hide the fact that bushes can be described with included instead of the graph ‘hack’.<br/>\r\nGregg Kellogg: We can say that included can also be used without other props in node object for describing node objects without semantic relationship.<br/>\r\nIvan Herman: I’m fine with that.<br/>\r\nBenjamin Young: <a href=\"https://pr-preview.s3.amazonaws.com/w3c/json-ld-syntax/pull/208.html#included-blocks-to-be-flattened\">https://pr-preview.s3.amazonaws.com/w3c/json-ld-syntax/pull/208.html#included-blocks-to-be-flattened</a><br/>\r\nBenjamin Young: If <code>@included</code> were <code>@graph,</code> this would make a named graph?<br/>\r\nGregg Kellogg: I think this would make one or two named graphs.<br/>\r\nBenjamin Young: With included it won’t make named graphs.<br/>\r\nGregg Kellogg: Yes, just objects.<br/>\r\nBenjamin Young: I see the value, but not keen on the new keyword.<br/>\r\n… I think we need to explain these next to each other, with their nuances.<br/>\r\n… The initial reason for this feature was not meant to displace graph.<br/>\r\n… It was meant to bring in other referenced objects in the document.<br/>\r\nGregg Kellogg: What jsonld always had was the ability to reference node<br/>\r\n… by defining <code>@id</code> or <code>@vocab</code> you can define that thing.<br/>\r\n… our mission is to use json in the wild where this is a pattern of usage<br/>\r\nBenjamin Young: You said exactly what I was typing.<br/>\r\n… it would be good to use an example from jsonapi<br/>\r\nGregg Kellogg: jsonapi examples are quite long, with a lot of nesting<br/>\r\n… we have a test case from jsonapi<br/>\r\n… may be too long for here. But may be good for best practices document.<br/>\r\n… It would overly complicated the spec to include here.<br/>\r\nBenjamin Young: This solves the jsonapi case by aliasing included to <code>@included.</code><br/>\r\nGregg Kellogg: Yes, you can have multiple properties that have multiple aliases.<br/>\r\n… included can be a nested object<br/>\r\nIvan Herman: Can we talk about things that go to the primer?<br/>\r\nGregg Kellogg: What to do with example?<br/>\r\nIvan Herman: Switch the order of problem of Rob. In the primer we will have to spend more words on the fact that there are different things that can be used to do the same thing.<br/>\r\n… We must have a primer.<br/>\r\n… The current doc is already huge.<br/>\r\nBenjamin Young: We need distinction in the main spec explaining diff between included and graph<br/>\r\nIvan Herman: To be honest, at this level there is no real diff between the examples.<br/>\r\n… this is a side-effect with included.<br/>\r\n… we should not fiddle around with that<br/>\r\nBenjamin Young: The graph foundation exists in flattened output, and this won’t go away.<br/>\r\n… this needs clarification<br/>\r\nGregg Kellogg: The use of included on its own is a by-product of the feature.<br/>\r\n… it does not need its own description in the spec<br/>\r\n… There are use cases where that can be useful<br/>\r\n… That better lies in a non-normative text.<br/>\r\nBenjamin Young: The bush usage would go to the primer<br/>\r\n… focus of the text would go back to inter-document referencing.<br/>\r\nIvan Herman: We are falling back to other extreme that I don’t agree with<br/>\r\n… we are hiding a feature of included<br/>\r\n… In the inclusion part we should mention the alternative representation of bushes.<br/>\r\n… because current graph-based bushes are a hack<br/>\r\n… It has been around for a while, but we still should mention it.<br/>\r\nBenjamin Young: This is an accidental feature since recently.<br/>\r\n… it is essential to flattened output. I don’t see it as a hack.<br/>\r\n… For non-turtle/trig users.<br/>\r\nIvan Herman: For semweb folks you don’t care it is a hack.<br/>\r\n… we get into taste issues<br/>\r\n… I don’t want to hide it.<br/>\r\nProposed resolution: focus <code>@included</code> text and example on original inclusion use case; mention value of it as an <code>@graph</code> replacement for bushes–and reference primer for further reading (Benjamin Young)<br/>\r\nIvan Herman: +0.5<br/>\r\nGregg Kellogg: +1<br/>\r\nBenjamin Young: +1<br/>\r\nTim Cole: +1<br/>\r\nRuben Taelman: +1<br/>\r\nIvan Herman: If we have a primer, a reference can be put into it in CR<br/>\r\nResolution #2: focus <code>@included</code> text and example on original inclusion use case; mention value of it as an <code>@graph</code> replacement for bushes–and reference primer for further reading<br/>\r\nIvan Herman: include or included?<br/>\r\nBenjamin Young: People may expect a URI to be included. But this is wrong.<br/>\r\nRuben Taelman: what was the keyword in JSON API?<br/>\r\nGregg Kellogg: included<br/>\r\nRuben Taelman: in that case, it might be helpful to be consistent with that<br/>\r\nTim Cole: +1 for <code>@included</code><br/>\r\nProposed resolution: close issue #19 with merger of <code>@included</code> related PRs (Benjamin Young)<br/>\r\nTim Cole: +1<br/>\r\nIvan Herman: +1<br/>\r\nRuben Taelman: +1<br/>\r\nBenjamin Young: +1<br/>\r\nGregg Kellogg: +1<br/>\r\nResolution #3: close issue #19 with merger of <code>@included</code> related PRs<br/>\r\n4<br/>\r\n</details>" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/517777437> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/19#issuecomment-517777437"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/19> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/517777437> .
<https://api.github.com/users/iherman> <http://schema.org/accountId> "iherman" .
<https://api.github.com/users/iherman> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/520723?v=4" .
<https://api.github.com/users/iherman> <http://schema.org/url> "https://github.com/iherman"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/iherman> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/517777437> <http://schema.org/creator> <https://api.github.com/users/iherman> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/517777437> <http://schema.org/startDate> "2019-08-02T17:09:16Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/517777437> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/517777437> <http://schema.org/description> "This issue was discussed in [a meeting](https://www.w3.org/2018/json-ld-wg/Meetings/Minutes/2019/2019-08-02-json-ld#section4-1).\r\n\r\n- `RESOLVED:  focus <code>@included</code> text and example on original inclusion use case; mention value of it as an <code>@graph</code> replacement for bushes–and reference primer for further reading`\r\n- `RESOLVED:  close issue #19 with merger of <code>@included</code> related PRs`\r\n<details><summary><i class=\"differentiate\">View the transcript</i></summary>\r\n4.1. Indexing with <code>@included</code><br/>\r\nIvan Herman: -> <a href=\"https://github.com/w3c/json-ld-syntax/pull/208\">https://github.com/w3c/json-ld-syntax/pull/208</a> issue PR<br/>\r\nIvan Herman: -> <a href=\"https://github.com/w3c/json-ld-syntax/issues/19\">https://github.com/w3c/json-ld-syntax/issues/19</a> issue itself<br/>\r\nBenjamin Young: We made good progress on this last week.<br/>\r\nGregg Kellogg: It is <code>@included</code> now.16:13:56 &lt;bigbluehat> <a href=\"https://jsonapi.org/\">https://jsonapi.org/</a><br/>\r\n… <code>@included</code> comes from the JSON.API spec, and we are adopting this.<br/>\r\n… Right now it’s just a container for collecting node objects that don’t have a direct rel with the node in which they are contained.<br/>\r\n… There’s been some exchange on the issue highlighting a bush-like use for included.<br/>\r\n… In JSON-LD 1.0 the top-level graph is used to collect nodes is a corner case. Everywhere else where graphs are used are seen as named graph.<br/>\r\n… Included doesn’t carry that baggage.<br/>\r\n… So <code>@included</code> can be used in favor of <code>@graph</code> in these places.<br/>\r\n… In 1.0, you can’t have a graph name being a property of another node. With <code>@included</code> you can.<br/>\r\n… We can’t use <code>@graph</code> to define a default graph.<br/>\r\n… Except when it is the only property in a top-level object.<br/>\r\nBenjamin Young: How does the actual inclusion take place?<br/>\r\nGregg Kellogg: The shape is similar to JSON.API. The value is seen as an array of node objects. If you have a node that is a value of a prop….<br/>\r\n… Needed in jsonapi for node references that are not included in the main document as references, but should be included aside.<br/>\r\n… Included blocks can be nested, and will be flattened out when done.<br/>\r\n… You won’t compact back to included blocks after flattening.<br/>\r\n… You can use included in a frame and have it match on diff subjects.<br/>\r\n… The name <code>@included</code> is out of sync with other keywords.<br/>\r\n… Dave suggested <code>@include</code><br/>\r\n… Just like jsonapi<br/>\r\nIvan Herman: It’s becoming bikeshedding<br/>\r\n… I would go further than what you did. Ex 1.1.1 and 1.1.2 (bushes) should be removed.<br/>\r\n… We should convince people to not use those forms anymore.<br/>\r\nGregg Kellogg: <a href=\"https://pr-preview.s3.amazonaws.com/w3c/json-ld-syntax/pull/208.html#example-111-using-graph-to-explicitly-express-the-default-graph\">https://pr-preview.s3.amazonaws.com/w3c/json-ld-syntax/pull/208.html#example-111-using-graph-to-explicitly-express-the-default-graph</a><br/>\r\nGregg Kellogg: By removing these we won’t lose anything. We would have to remove everything after the note.<br/>\r\nGregg Kellogg: <a href=\"https://pr-preview.s3.amazonaws.com/w3c/json-ld-syntax/pull/208.html#example-103-simple-data-with-several-top-level-nodes\">https://pr-preview.s3.amazonaws.com/w3c/json-ld-syntax/pull/208.html#example-103-simple-data-with-several-top-level-nodes</a><br/>\r\nGregg Kellogg: Also, we may want to reverse example 103 and 104. To clarify writing bushes.<br/>\r\nIvan Herman: Referring to <code>@graph</code> is misleading, as it has not been explained yet there.<br/>\r\nGregg Kellogg: We may want to change an example in the <code>@graph</code> section then.<br/>\r\n… We can also just leave that out and use it in the best practices document.<br/>\r\nIvan Herman: Yes<br/>\r\nBenjamin Young: Flattened representation will still contain <code>@graph,</code> so readers will have to know what it does.<br/>\r\n… This plumbing shift is significant.<br/>\r\n… This is going to cause issues for the json people that are operating on the flattened form.<br/>\r\nGregg Kellogg: If you flatten with a context, it would introduce a graph to contain it. This would change the shape dramatically.<br/>\r\n… Same with framing. In 1.1 we don’t use an <code>@graph</code> at the top level if not needed.<br/>\r\n… We could change the algo to use included instead.<br/>\r\n… But we may not want to do that.<br/>\r\n… So do we want to replace the main usage of <code>@graph</code> to <code>@included?</code><br/>\r\n… Included allows embedded nodes to go to one place. Like in jsonapi, they don’t want to include referenced things inline, but only a reference to an included block.<br/>\r\nBenjamin Young: Useful for reducing payload size. And only including referenced things once.<br/>\r\n… These are just IRI references?<br/>\r\nGregg Kellogg: There is no magic going on.<br/>\r\nIvan Herman: In JSON-LD it used to be hard to do these indexed references.<br/>\r\n… The bush features can now be expressed in two different ways.<br/>\r\n… These things happen.<br/>\r\n… It’s a matter of taste which one you prefer.<br/>\r\n… I personally always hated graph for representing bushes.<br/>\r\n… I like this new included representation for bushes.<br/>\r\n… I don’t want to hide the fact that bushes can be described with included instead of the graph ‘hack’.<br/>\r\nGregg Kellogg: We can say that included can also be used without other props in node object for describing node objects without semantic relationship.<br/>\r\nIvan Herman: I’m fine with that.<br/>\r\nBenjamin Young: <a href=\"https://pr-preview.s3.amazonaws.com/w3c/json-ld-syntax/pull/208.html#included-blocks-to-be-flattened\">https://pr-preview.s3.amazonaws.com/w3c/json-ld-syntax/pull/208.html#included-blocks-to-be-flattened</a><br/>\r\nBenjamin Young: If <code>@included</code> were <code>@graph,</code> this would make a named graph?<br/>\r\nGregg Kellogg: I think this would make one or two named graphs.<br/>\r\nBenjamin Young: With included it won’t make named graphs.<br/>\r\nGregg Kellogg: Yes, just objects.<br/>\r\nBenjamin Young: I see the value, but not keen on the new keyword.<br/>\r\n… I think we need to explain these next to each other, with their nuances.<br/>\r\n… The initial reason for this feature was not meant to displace graph.<br/>\r\n… It was meant to bring in other referenced objects in the document.<br/>\r\nGregg Kellogg: What jsonld always had was the ability to reference node<br/>\r\n… by defining <code>@id</code> or <code>@vocab</code> you can define that thing.<br/>\r\n… our mission is to use json in the wild where this is a pattern of usage<br/>\r\nBenjamin Young: You said exactly what I was typing.<br/>\r\n… it would be good to use an example from jsonapi<br/>\r\nGregg Kellogg: jsonapi examples are quite long, with a lot of nesting<br/>\r\n… we have a test case from jsonapi<br/>\r\n… may be too long for here. But may be good for best practices document.<br/>\r\n… It would overly complicated the spec to include here.<br/>\r\nBenjamin Young: This solves the jsonapi case by aliasing included to <code>@included.</code><br/>\r\nGregg Kellogg: Yes, you can have multiple properties that have multiple aliases.<br/>\r\n… included can be a nested object<br/>\r\nIvan Herman: Can we talk about things that go to the primer?<br/>\r\nGregg Kellogg: What to do with example?<br/>\r\nIvan Herman: Switch the order of problem of Rob. In the primer we will have to spend more words on the fact that there are different things that can be used to do the same thing.<br/>\r\n… We must have a primer.<br/>\r\n… The current doc is already huge.<br/>\r\nBenjamin Young: We need distinction in the main spec explaining diff between included and graph<br/>\r\nIvan Herman: To be honest, at this level there is no real diff between the examples.<br/>\r\n… this is a side-effect with included.<br/>\r\n… we should not fiddle around with that<br/>\r\nBenjamin Young: The graph foundation exists in flattened output, and this won’t go away.<br/>\r\n… this needs clarification<br/>\r\nGregg Kellogg: The use of included on its own is a by-product of the feature.<br/>\r\n… it does not need its own description in the spec<br/>\r\n… There are use cases where that can be useful<br/>\r\n… That better lies in a non-normative text.<br/>\r\nBenjamin Young: The bush usage would go to the primer<br/>\r\n… focus of the text would go back to inter-document referencing.<br/>\r\nIvan Herman: We are falling back to other extreme that I don’t agree with<br/>\r\n… we are hiding a feature of included<br/>\r\n… In the inclusion part we should mention the alternative representation of bushes.<br/>\r\n… because current graph-based bushes are a hack<br/>\r\n… It has been around for a while, but we still should mention it.<br/>\r\nBenjamin Young: This is an accidental feature since recently.<br/>\r\n… it is essential to flattened output. I don’t see it as a hack.<br/>\r\n… For non-turtle/trig users.<br/>\r\nIvan Herman: For semweb folks you don’t care it is a hack.<br/>\r\n… we get into taste issues<br/>\r\n… I don’t want to hide it.<br/>\r\nProposed resolution: focus <code>@included</code> text and example on original inclusion use case; mention value of it as an <code>@graph</code> replacement for bushes–and reference primer for further reading (Benjamin Young)<br/>\r\nIvan Herman: +0.5<br/>\r\nGregg Kellogg: +1<br/>\r\nBenjamin Young: +1<br/>\r\nTim Cole: +1<br/>\r\nRuben Taelman: +1<br/>\r\nIvan Herman: If we have a primer, a reference can be put into it in CR<br/>\r\nResolution #2: focus <code>@included</code> text and example on original inclusion use case; mention value of it as an <code>@graph</code> replacement for bushes–and reference primer for further reading<br/>\r\nIvan Herman: include or included?<br/>\r\nBenjamin Young: People may expect a URI to be included. But this is wrong.<br/>\r\nRuben Taelman: what was the keyword in JSON API?<br/>\r\nGregg Kellogg: included<br/>\r\nRuben Taelman: in that case, it might be helpful to be consistent with that<br/>\r\nTim Cole: +1 for <code>@included</code><br/>\r\nProposed resolution: close issue #19 with merger of <code>@included</code> related PRs (Benjamin Young)<br/>\r\nTim Cole: +1<br/>\r\nIvan Herman: +1<br/>\r\nRuben Taelman: +1<br/>\r\nBenjamin Young: +1<br/>\r\nGregg Kellogg: +1<br/>\r\nResolution #3: close issue #19 with merger of <code>@included</code> related PRs<br/>\r\n4<br/>\r\n</details>" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/517777700> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/108#issuecomment-517777700"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/108> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/517777700> .
<https://api.github.com/users/iherman> <http://schema.org/accountId> "iherman" .
<https://api.github.com/users/iherman> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/520723?v=4" .
<https://api.github.com/users/iherman> <http://schema.org/url> "https://github.com/iherman"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/iherman> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/517777700> <http://schema.org/creator> <https://api.github.com/users/iherman> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/517777700> <http://schema.org/startDate> "2019-08-02T17:10:11Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/517777700> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/517777700> <http://schema.org/description> "This issue was discussed in [a meeting](https://www.w3.org/2018/json-ld-wg/Meetings/Minutes/2019/2019-08-02-json-ld#section4-2).\r\n\r\n- `RESOLVED:  close 108 with statement that potentially related SRI issues will be closed as differed`\r\n- `RESOLVED:  close 128`\r\n<details><summary><i class=\"differentiate\">View the transcript</i></summary>\r\nConfirm state of <code>@import</code> usage<br/>\r\nBenjamin Young: -> <a href=\"https://github.com/w3c/json-ld-syntax/issues/108\">https://github.com/w3c/json-ld-syntax/issues/108</a> Issue 108<br/>\r\nBenjamin Young: Request by Rob to state to ourselves to not quickly add more features to <code>@import.</code><br/>\r\nIvan Herman: +1<br/>\r\nBenjamin Young: This import issue is closable, as it is in the spec<br/>\r\nGregg Kellogg: +1<br/>\r\nGregg Kellogg: This also puts the nail in for SRI?<br/>\r\nBenjamin Young: Yes<br/>\r\n… We would defer and close the SRI issue<br/>\r\nProposed resolution: close 108 with statement that potentially related SRI issues will be closed as differed (Benjamin Young)<br/>\r\nIvan Herman: +1<br/>\r\nGregg Kellogg: Can we close the issue on trig graphs?<br/>\r\nRuben Taelman: +1<br/>\r\nBenjamin Young: +1<br/>\r\nTim Cole: +1<br/>\r\nGregg Kellogg: +1<br/>\r\nResolution #4: close 108 with statement that potentially related SRI issues will be closed as differed<br/>\r\nProposed resolution: close 128 (Ivan Herman)<br/>\r\nTim Cole: +1<br/>\r\nRuben Taelman: +1<br/>\r\nIvan Herman: +1<br/>\r\nBenjamin Young: +1<br/>\r\nGregg Kellogg: +1<br/>\r\nResolution #5: close 128<br/>\r\n</details>" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/517777834> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/128#issuecomment-517777834"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/128> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/517777834> .
<https://api.github.com/users/iherman> <http://schema.org/accountId> "iherman" .
<https://api.github.com/users/iherman> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/520723?v=4" .
<https://api.github.com/users/iherman> <http://schema.org/url> "https://github.com/iherman"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/iherman> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/517777834> <http://schema.org/creator> <https://api.github.com/users/iherman> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/517777834> <http://schema.org/startDate> "2019-08-02T17:10:38Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/517777834> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/517777834> <http://schema.org/description> "This issue was discussed in [a meeting](https://www.w3.org/2018/json-ld-wg/Meetings/Minutes/2019/2019-08-02-json-ld#section4-2).\r\n\r\n- `RESOLVED:  close 108 with statement that potentially related SRI issues will be closed as differed`\r\n- `RESOLVED:  close 128`\r\n<details><summary><i class=\"differentiate\">View the transcript</i></summary>\r\nConfirm state of <code>@import</code> usage<br/>\r\nBenjamin Young: -> <a href=\"https://github.com/w3c/json-ld-syntax/issues/108\">https://github.com/w3c/json-ld-syntax/issues/108</a> Issue 108<br/>\r\nBenjamin Young: Request by Rob to state to ourselves to not quickly add more features to <code>@import.</code><br/>\r\nIvan Herman: +1<br/>\r\nBenjamin Young: This import issue is closable, as it is in the spec<br/>\r\nGregg Kellogg: +1<br/>\r\nGregg Kellogg: This also puts the nail in for SRI?<br/>\r\nBenjamin Young: Yes<br/>\r\n… We would defer and close the SRI issue<br/>\r\nProposed resolution: close 108 with statement that potentially related SRI issues will be closed as differed (Benjamin Young)<br/>\r\nIvan Herman: +1<br/>\r\nGregg Kellogg: Can we close the issue on trig graphs?<br/>\r\nRuben Taelman: +1<br/>\r\nBenjamin Young: +1<br/>\r\nTim Cole: +1<br/>\r\nGregg Kellogg: +1<br/>\r\nResolution #4: close 108 with statement that potentially related SRI issues will be closed as differed<br/>\r\nProposed resolution: close 128 (Ivan Herman)<br/>\r\nTim Cole: +1<br/>\r\nRuben Taelman: +1<br/>\r\nIvan Herman: +1<br/>\r\nBenjamin Young: +1<br/>\r\nGregg Kellogg: +1<br/>\r\nResolution #5: close 128<br/>\r\n</details>" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/518307666> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/37#issuecomment-518307666"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/37> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/518307666> .
<https://api.github.com/users/pchampin> <http://schema.org/accountId> "pchampin" .
<https://api.github.com/users/pchampin> <http://schema.org/image> "https://avatars1.githubusercontent.com/u/304612?v=4" .
<https://api.github.com/users/pchampin> <http://schema.org/url> "https://github.com/pchampin"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/pchampin> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/518307666> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/518307666> <http://schema.org/startDate> "2019-08-05T16:37:49Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/518307666> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/518307666> <http://schema.org/description> "@ThibG Exactly... Actually, the document provided by @nightpool does not generate any bnode predicate.  Maybe the Ruby gem should only complain when an actual bnode property is generated, rather than when it encounters `\"@vocab\": \"_:\"`?\r\n\r\n" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/518309413> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/37#issuecomment-518309413"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/37> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/518309413> .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/518309413> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/518309413> <http://schema.org/startDate> "2019-08-05T16:43:18Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/518309413> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/518309413> <http://schema.org/description> "> @ThibG Exactly... Actually, the document provided by @nightpool does not generate any bnode predicate. Maybe the Ruby gem should only complain when an actual bnode property is generated, rather than when it encounters `\"@vocab\": \"_:\"`?\r\n\r\nWell, I can do anything with the Ruby gem, and certainly leave any warnings to when the `validate` option is used and/or when such a predicate is actually generated.\r\n\r\nBut, perhaps we can lay this issue to rest in the group, and if we keep it, describe what processors _should_ do." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/518385008> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/183#issuecomment-518385008"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/183> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/518385008> .
<https://api.github.com/users/BigBlueHat> <http://schema.org/accountId> "BigBlueHat" .
<https://api.github.com/users/BigBlueHat> <http://schema.org/image> "https://avatars1.githubusercontent.com/u/43209?v=4" .
<https://api.github.com/users/BigBlueHat> <http://schema.org/url> "https://github.com/BigBlueHat"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/BigBlueHat> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/518385008> <http://schema.org/creator> <https://api.github.com/users/BigBlueHat> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/518385008> <http://schema.org/startDate> "2019-08-05T20:23:46Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/518385008> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/518385008> <http://schema.org/description> "Turns out we shouldn't have closed this one...as it relates heavily to #37.\r\n\r\nWe can continue the conversion in #37, but wanted to tie these two issues together for posterity (at the very least)." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/518846925> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/37#issuecomment-518846925"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/37> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/518846925> .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/518846925> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/518846925> <http://schema.org/startDate> "2019-08-06T21:15:27Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/518846925> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/518846925> <http://schema.org/description> "> over at Mastodon, I have server operators reporting a lot of “[DEPRECATION] Blank Node vocabularies deprecated in JSON-LD 1.1” in logs from the json-ld ruby gem. this seems 1) concerning, since I think we use blank node vocabularies a fair amount and 2) potentially misleading if I'm interpreting this issue correctly?\r\n\r\nI've updated the develop version of the Ruby gem to only output a DEPRECATION warning on `@vocab` if the `validation` option is used. I did add a DEPRECATION to the expansion algorithm if any property expands to a blank node. https://github.com/ruby-rdf/json-ld/commit/f61066a857940d9ce0dfde6e426652ec51056340" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/519171276> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/184#issuecomment-519171276"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/184> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/519171276> .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/519171276> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/519171276> <http://schema.org/startDate> "2019-08-07T16:26:15Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/519171276> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/519171276> <http://schema.org/description> "Based on my review comment in https://github.com/w3c/json-ld-api/pull/129#pullrequestreview-272081242, we should probably either not discuss using compact IRIs or terms for `@vocab`, or provide a caveat that any terms used as part of `@vocab` must be in scope when the context is introduced, due to circular definition issues." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/519271120> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/108#issuecomment-519271120"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/108> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/519271120> .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/519271120> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/519271120> <http://schema.org/startDate> "2019-08-07T21:12:42Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/519271120> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/519271120> <http://schema.org/description> "To be consistent with other deferred issues, I've reopened this and marked with the defer-future-version label." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/519996555> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/37#issuecomment-519996555"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/37> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/519996555> .
<https://api.github.com/users/iherman> <http://schema.org/accountId> "iherman" .
<https://api.github.com/users/iherman> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/520723?v=4" .
<https://api.github.com/users/iherman> <http://schema.org/url> "https://github.com/iherman"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/iherman> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/519996555> <http://schema.org/creator> <https://api.github.com/users/iherman> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/519996555> <http://schema.org/startDate> "2019-08-09T17:16:20Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/519996555> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/519996555> <http://schema.org/description> "This issue was discussed in [a meeting](https://www.w3.org/2018/json-ld-wg/Meetings/Minutes/2019/2019-08-09-json-ld#section4-1).\r\n\r\n- `RESOLVED:  turn blank node issue <a href=\"https://www.w3.org/TR/json-ld11/#h-issue-0\">https://www.w3.org/TR/json-ld11/#h-issue-0</a> into a note to suggest new context authors avoid using \"<code>@vocab\":</code> \"_:\" as well as direct use of blank nodes as properties.`\r\n- `RESOLVED:  close <a href=\"https://github.com/w3c/json-ld-syntax/issues/37\">https://github.com/w3c/json-ld-syntax/issues/37</a> once blank node property issue is changed to a note`\r\n<details><summary><i class=\"differentiate\">View the transcript</i></summary>\r\nConsider obsoleting use of blank nodes for properties and “generalized RDF”<br/>\r\nBenjamin Young: See Issue 37<br/>\r\nBenjamin Young: we more or less already agreed to deprecate this one<br/>\r\n… but it turns out that ActivityStreams is using a bnode <code>@vocab</code><br/>\r\n… Note that AS is part of AvivityPub, which is used by Mastodon and other<br/>\r\n… All those people get worrying warnings when using the AS context.<br/>\r\nGregg Kellogg: there is a comment in there, indicating that they don’t believe that they are actually creating any property.<br/>\r\n… pchampin suggested to raise the warning only when the bnode <code>@vocab</code> does create a bnode property<br/>\r\n… I think that solves Mastodon’s issue. I did it in my implementation.<br/>\r\nBenjamin Young: could this warning be limited to 1.1 mode?<br/>\r\nGregg Kellogg: yes<br/>\r\nBenjamin Young: is this the default? because these people are not parsing JSON-LD 1.1, AFAIK<br/>\r\nGregg Kellogg: actually, that’s right, the warning is not mode dependent<br/>\r\n… the purpose of the warning is precisely to warn people that his may go away in the future<br/>\r\nRuben Taelman: are these warnings specified in the spec or implementation specific?<br/>\r\nGregg Kellogg: the spec says “feature at risk”. It does not actually says anything about issuing a warning.<br/>\r\n… We indeed do not specify how warnings are issued.<br/>\r\n… I usually use a ‘validation’ flag to decide whether warning are issued or not,<br/>\r\n… although obviously I didn’t to that in that case.<br/>\r\nBenjamin Young: <a href=\"https://w3c.github.io/json-ld-api/#h-issue-0\">https://w3c.github.io/json-ld-api/#h-issue-0</a><br/>\r\nBenjamin Young: <a href=\"https://w3c.github.io/json-ld-api/#h-note-3\">https://w3c.github.io/json-ld-api/#h-note-3</a><br/>\r\nBenjamin Young: distributed documents are long lived,<br/>\r\n… we should take this into account when it comes to issuing warnings.<br/>\r\n… The person we are targetting here is the context author.<br/>\r\n… Hence my suggestion to limit the warning to 1.1 mode,<br/>\r\n… meaning “it will still work here, but may break in the future”.<br/>\r\n… People mining old 1.0 data will get the warning, but there is nothing they can do about it.<br/>\r\nGregg Kellogg: without warnings, the developers will not get pressure from their user to drop deprecated features<br/>\r\n… the ‘validation’ flag is probably a good way to solve this<br/>\r\nDave Longley: there are a lot of implementations that can only report errors, not warnings<br/>\r\nBenjamin Young: so do we need to change the spec?<br/>\r\nGregg Kellogg: <a href=\"https://www.w3.org/TR/json-ld11-api/#algorithm-2\">https://www.w3.org/TR/json-ld11-api/#algorithm-2</a><br/>\r\nGregg Kellogg: we need to be clearer about the bnode properties<br/>\r\nBenjamin Young: should we recommend an alternative to the bnode $MD_CODE$?<br/>\r\n… such as a “fake bnode” IRI acting as a catch-all for undefined properties?<br/>\r\n… The AS context shows that there is a need for that;<br/>\r\n… JSON users do not like their properties to disappear through JSON-LD processing.<br/>\r\nGregg Kellogg: the most suitable replacement would be \"<code>@vocab\":</code> \"#\"<br/>\r\n… this is common in other uses of RDF,<br/>\r\nDave Longley: +1 to \"<code>@vocab\":</code> \"#\"<br/>\r\nGregg Kellogg: and the reason why we allowed relative IRIs as <code>@vocab</code><br/>\r\nBenjamin Young: <a href=\"https://github.com/w3c/json-ld-syntax/issues/37#issuecomment-515799176\">https://github.com/w3c/json-ld-syntax/issues/37#issuecomment-515799176</a><br/>\r\nBenjamin Young: and in the spec<br/>\r\nGregg Kellogg: If we provide such an alternative to bnode properties, we can change the ‘AT RISK’s to simple notes.<br/>\r\nBenjamin Young: <a href=\"https://www.w3.org/TR/json-ld11/#h-issue-0\">https://www.w3.org/TR/json-ld11/#h-issue-0</a><br/>\r\nDave Longley: when we go to CR, I’m afraid people would object to bnode properties if we remove the ‘AT RISK’…<br/>\r\nGregg Kellogg: these AT RISK are not normative. We could leave them for CR, and remove them afterwards.<br/>\r\n<b>timecole:</b> for me the purpose of ‘AT RISK’ is testing; it draws the attention to points that we are not sure can be implemented.<br/>\r\nIvan Herman: timCole is right. It is used to mark features that can be removed if they lack implementation, without having to go through CR again.<br/>\r\nProposed resolution: turn blank node issue <a href=\"https://www.w3.org/TR/json-ld11/#h-issue-0\">https://www.w3.org/TR/json-ld11/#h-issue-0</a> into a note to suggest new context authors avoid using \"<code>@vocab\":</code> \"_:\" as well as direct use of blank nodes as properties. (Benjamin Young)<br/>\r\nIvan Herman: +1<br/>\r\nTim Cole: +1<br/>\r\nGregg Kellogg: +1<br/>\r\nBenjamin Young: +1<br/>\r\nRuben Taelman: +1<br/>\r\nAdam Soroka: This would be a note that accompanies 1.1?<br/>\r\nDave Longley: +0 fine with me<br/>\r\nPierre-Antoine Champin: +1<br/>\r\nAdam Soroka: +0.5<br/>\r\nResolution #2: turn blank node issue <a href=\"https://www.w3.org/TR/json-ld11/#h-issue-0\">https://www.w3.org/TR/json-ld11/#h-issue-0</a> into a note to suggest new context authors avoid using \"<code>@vocab\":</code> \"_:\" as well as direct use of blank nodes as properties.<br/>\r\nGregg Kellogg: we will then turn the ‘AT RISK’ issues into notes;<br/>\r\n… we will recommend to use # relative IRIs instead;<br/>\r\n… we will suggest to issue a warning whenever a bnode property is generated.<br/>\r\n… None of these points are normative. So they don’t need more WG action.<br/>\r\nDave Longley: if don’t have a base IRI set and use a relative IRI for the $MD_CODE$,<br/>\r\n… then properties will still be dropped when converted to RDF.<br/>\r\n… So we are improving the situation, but not solving it 100%.<br/>\r\nProposed resolution: close <a href=\"https://github.com/w3c/json-ld-syntax/issues/37\">https://github.com/w3c/json-ld-syntax/issues/37</a> once blank node property issue is changed to a note (Benjamin Young)<br/>\r\nIvan Herman: +1<br/>\r\nBenjamin Young: +1<br/>\r\nDave Longley: +1<br/>\r\nPierre-Antoine Champin: +1<br/>\r\nRuben Taelman: +1<br/>\r\nGregg Kellogg: +1<br/>\r\nTim Cole: +1<br/>\r\nResolution #3: close <a href=\"https://github.com/w3c/json-ld-syntax/issues/37\">https://github.com/w3c/json-ld-syntax/issues/37</a> once blank node property issue is changed to a note<br/>\r\n</details>" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/519996773> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/103#issuecomment-519996773"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/103> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/519996773> .
<https://api.github.com/users/iherman> <http://schema.org/accountId> "iherman" .
<https://api.github.com/users/iherman> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/520723?v=4" .
<https://api.github.com/users/iherman> <http://schema.org/url> "https://github.com/iherman"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/iherman> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/519996773> <http://schema.org/creator> <https://api.github.com/users/iherman> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/519996773> <http://schema.org/startDate> "2019-08-09T17:17:06Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/519996773> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/519996773> <http://schema.org/description> "This issue was discussed in [a meeting](https://www.w3.org/2018/json-ld-wg/Meetings/Minutes/2019/2019-08-09-json-ld#section4-2).\r\n\r\n- `RESOLVED:  close #103 as wontfix because the JSON-LD document would be treated as if it were alone–and not embedded.`\r\n<details><summary><i class=\"differentiate\">View the transcript</i></summary>\r\nWhat is null base URL for an embedded json-ld?<br/>\r\nIvan Herman: See Issue 103<br/>\r\nBenjamin Young: the question is raised when JSON-LD is embedded in HTML or anything.<br/>\r\nIvan Herman: someone came up with this example involving data: URL and iframe,<br/>\r\n… leading to a situation where the base URL is not clear.<br/>\r\nGregg Kellogg: the fact that it is in HTML does not change anything,<br/>\r\n… the processor tries to determine the base URL based on the source document URL.<br/>\r\nProposed resolution: close #103 as wontfix because the JSON-LD document would be treated as if it were alone–and not embedded. (Benjamin Young)<br/>\r\nIvan Herman: the problem is the use of the data: URL. The question is not JSON-LD specific. It would be the same with HTML<br/>\r\nGregg Kellogg: this is a TAG issue<br/>\r\nIvan Herman: It is a HTML problem. Whatever HTML does, we do it.<br/>\r\nDave Longley: +1<br/>\r\nRuben Taelman: +1<br/>\r\nGregg Kellogg: +1<br/>\r\nBenjamin Young: +1<br/>\r\nBenjamin Young: and if HTML has no answer wrt to the base URL, then you are on your own.<br/>\r\nIvan Herman: +1<br/>\r\nPierre-Antoine Champin: +1<br/>\r\nTim Cole: +1<br/>\r\nResolution #4: close #103 as wontfix because the JSON-LD document would be treated as if it were alone–and not embedded.<br/>\r\n</details>" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/519996965> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/204#issuecomment-519996965"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/204> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/519996965> .
<https://api.github.com/users/iherman> <http://schema.org/accountId> "iherman" .
<https://api.github.com/users/iherman> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/520723?v=4" .
<https://api.github.com/users/iherman> <http://schema.org/url> "https://github.com/iherman"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/iherman> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/519996965> <http://schema.org/creator> <https://api.github.com/users/iherman> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/519996965> <http://schema.org/startDate> "2019-08-09T17:17:43Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/519996965> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/519996965> <http://schema.org/description> "This issue was discussed in [a meeting](https://www.w3.org/2018/json-ld-wg/Meetings/Minutes/2019/2019-08-09-json-ld#section4-3).\r\n\r\n- No actions or resolutions\r\n<details><summary><i class=\"differentiate\">View the transcript</i></summary>\r\nLink header for HTML and JSON-LD<br/>\r\nBenjamin Young: See Issue 204<br/>\r\nGregg Kellogg: this was trying to rely to danbri’s concern about relying on content negotiation<br/>\r\n… the best solution I came up with was to rely on a link HTTP header<br/>\r\n… A JSON-LD processor expecting a context at a given URL would check for this header,<br/>\r\n… and follow the link if any.<br/>\r\nIvan Herman: other people do that, with rel=\"manifest\"<br/>\r\n… the Web Publication WG does something similar with rel=\"publication\"<br/>\r\n… we can bikeshed about what rel value we want. But this makes sense.<br/>\r\nRuben Taelman: link headers are not always possible on static websites, e.g. github pages.<br/>\r\nBenjamin Young: just to be clear, the link header we are talking about is a HTTP header, not HTML $MD_CODE$<br/>\r\n… It is not as common as content negotiation on static sites.<br/>\r\n… So we should specify that JSON-LD processors should first try content-negotiation,<br/>\r\n… if it fails, it should try HTML (which implies embedding a HTML parser)<br/>\r\nDave Longley: +1 to link headers, -1 to involving HTML processing at all w/context processing as it breaks the ecosystem<br/>\r\nBenjamin Young: then it should check the link header.<br/>\r\nPierre-Antoine Champin: I think this solution makes sense<br/>\r\n… whether content negotiation has priority or not, I think this would be nice to have<br/>\r\n… the way I saw it this was a way to get rid of a dependency on HTTP<br/>\r\nGregg Kellogg: this is all because the desire of schema.org (and may be others)<br/>\r\n… to avoid doing content negotiation.<br/>\r\n… Whenever we can’t do conneg nor HTTP headers,<br/>\r\n… we are back to parsing HTML.<br/>\r\nDave Longley: I would be in favor of the link HTTP header solution,<br/>\r\n… even if it does not solve all problems.<br/>\r\n… I am against the reliance on HTML parser. This would break the ecosystem.<br/>\r\n… Also, we should not make decision on the features that github pages have today.<br/>\r\n… That may change in the future.<br/>\r\nBenjamin Young: (a cosmetic argument that I missed)<br/>\r\nRuben Taelman: I don’t see the benefit of the link header over conneg;<br/>\r\n… if a host supports one, it should supports the other, right?<br/>\r\nDave Longley: some static sites can do link headers.<br/>\r\n… It requires less processing on the server side than conneg.<br/>\r\nPierre-Antoine Champin: +1<br/>\r\n</details>" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/520067963> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/37#issuecomment-520067963"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/37> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/520067963> .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/520067963> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/520067963> <http://schema.org/startDate> "2019-08-09T21:22:47Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/520067963> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/520067963> <http://schema.org/description> "Fixed in d90066fede2a5102d467f422354b1ad121c6ccf2 and https://github.com/w3c/json-ld-api/commit/2bb7eb4022f073da701dbeefa0ad2c7594984dfb." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/520173074> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/204#issuecomment-520173074"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/204> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/520173074> .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/520173074> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/520173074> <http://schema.org/startDate> "2019-08-10T19:15:57Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/520173074> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/520173074> <http://schema.org/description> "# Proposal\r\nIn [LoadDocumentCallback](https://www.w3.org/TR/json-ld11-api/#loaddocumentcallback) (which defines how _all_ JSON-LD processors should handle document retrieval) after step 4:\r\n\r\n1) If the retrieved resource's `Content-Type` is not application/json or any media type with a +json suffix as defined in [RFC6839] and the response has an HTTP `Link` Header [RFC8259] using the `alternate` link relation with type `application/ld+json`, set _url_ to the associated `href` and restart the algorithm at step 2, ensuring that the resulting resource is of type `application/ld+json`.\r\n\r\nSo, in the case that an HTML resource is returned with a link header such as the following:\r\n\r\n```HTTP\r\nLink: <https://schema.org/docs/jsonldcontext.jsonld>; rel=\"alternate\"; type=\"application/ld+json\"\r\n```\r\n\r\nthe document loader would see that the `Content-Type` was text/html and that a Link header was included which directed to `https://schema.org/docs/jsonldcontext.jsonld` and the document loader would essentially redirect to that resource, which MUST then be of type `application/ld+json`\r\n\r\nWe'd also need a section in the syntax document near [Interpreting JSON as JSON-LD](https://www.w3.org/TR/json-ld11/#interpreting-json-as-json-ld) to describe this behavior and note it's utility for static websites. This would also allow us to remove the need to process embedded HTML for context files, as this handles the documentation requirement.\r\n\r\nWe could consider a different link relation, but \"alternate\" seems appropriate, when coupled with type.\r\n\r\ncc/ @danbri " .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/520209855> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/204#issuecomment-520209855"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/204> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/520209855> .
<https://api.github.com/users/iherman> <http://schema.org/accountId> "iherman" .
<https://api.github.com/users/iherman> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/520723?v=4" .
<https://api.github.com/users/iherman> <http://schema.org/url> "https://github.com/iherman"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/iherman> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/520209855> <http://schema.org/creator> <https://api.github.com/users/iherman> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/520209855> <http://schema.org/startDate> "2019-08-11T08:21:58Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/520209855> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/520209855> <http://schema.org/description> "Minor:\r\n\r\n> and and the response\r\n\r\none 'and' too much...\r\n\r\nOtherwise +1 for me" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/520991104> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/212#issuecomment-520991104"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/212> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/520991104> .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/520991104> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/520991104> <http://schema.org/startDate> "2019-08-13T20:13:55Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/520991104> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/520991104> <http://schema.org/description> "For #172." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/521783682> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/213#issuecomment-521783682"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/213> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/521783682> .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/521783682> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/521783682> <http://schema.org/startDate> "2019-08-15T20:22:31Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/521783682> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/521783682> <http://schema.org/description> "Encapsulating the behavior in the Document Loader seems like a clean separation of concerns to me. Rather than running prior to a JSON-LD processor, this effectively allows a processor to delegate the details to an implementation of the Document Loader which can handle this." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/522073930> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/213#issuecomment-522073930"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/213> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/522073930> .
<https://api.github.com/users/azaroth42> <http://schema.org/accountId> "azaroth42" .
<https://api.github.com/users/azaroth42> <http://schema.org/image> "https://avatars3.githubusercontent.com/u/871868?v=4" .
<https://api.github.com/users/azaroth42> <http://schema.org/url> "https://github.com/azaroth42"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/azaroth42> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/522073930> <http://schema.org/creator> <https://api.github.com/users/azaroth42> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/522073930> <http://schema.org/startDate> "2019-08-16T16:41:44Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/522073930> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/522073930> <http://schema.org/description> "Is the proposal to normatively require that functionality of any conformant document loader, or to retain the processing levels just to move how the functionality is implemented?" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/522083864> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/213#issuecomment-522083864"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/213> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/522083864> .
<https://api.github.com/users/azaroth42> <http://schema.org/accountId> "azaroth42" .
<https://api.github.com/users/azaroth42> <http://schema.org/image> "https://avatars3.githubusercontent.com/u/871868?v=4" .
<https://api.github.com/users/azaroth42> <http://schema.org/url> "https://github.com/azaroth42"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/azaroth42> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/522083864> <http://schema.org/creator> <https://api.github.com/users/azaroth42> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/522083864> <http://schema.org/startDate> "2019-08-16T17:14:04Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/522083864> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/522083864> <http://schema.org/description> "\r\nI support:\r\n* A cleaner separation of the HTML normative requirements in the current documentation, as precursor work to be able to later extract it into another spec, when we have a second implemented container format.  This is \"simply\" editorial work, albeit quite a lot of shuffling of content around.\r\n* Moving the HTML extraction requirements to be explicitly part of the document loader specs, and to call them out as features of a particular class of document loader. In doing that we keep the separation, and we enable implementations to signal their support for the functionality or not without an in-your-face conformance requirement at the beginning of the spec.\r\n* With the above two bullets, the removal of the processor classes from the spec.\r\n* The people making the call for change doing a good chunk of the work ;)\r\n\r\nI would object to:\r\n* Normatively requiring all document loader implementations to support extraction from HTML (as it would mean we would never get to TR, as we would never have multiple independent implementations)\r\n* Not specifying extraction at all (as it provides no guidance to implementers as to what to do, nor to publishers as to what can be expected to work ... the point of interoperability and standards, after all)\r\n* Extracting the details to a new spec (as we would not meet our chartered deadlines, given process and just the time to go back and check that the extraction was clean)\r\n" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/522087816> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/204#issuecomment-522087816"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/204> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/522087816> .
<https://api.github.com/users/iherman> <http://schema.org/accountId> "iherman" .
<https://api.github.com/users/iherman> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/520723?v=4" .
<https://api.github.com/users/iherman> <http://schema.org/url> "https://github.com/iherman"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/iherman> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/522087816> <http://schema.org/creator> <https://api.github.com/users/iherman> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/522087816> <http://schema.org/startDate> "2019-08-16T17:26:42Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/522087816> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/522087816> <http://schema.org/description> "This issue was discussed in [a meeting](https://www.w3.org/2018/json-ld-wg/Meetings/Minutes/2019/2019-08-16-json-ld#section4-2).\r\n\r\n- `RESOLVED:  merge api#134 and syntax#212, and close syntax#204`\r\n<details><summary><i class=\"differentiate\">View the transcript</i></summary>\r\nBenjamin Young: Link header: preemptive conneg.<br/>\r\nBenjamin Young: See Syntax issue #204<br/>\r\nBenjamin Young: See API PR #134<br/>\r\nBenjamin Young: See Syntax PR #212<br/>\r\nBenjamin Young: 2 PRs are ready to go, right?<br/>\r\nGregg Kellogg: Yes. Open question for base during redirect.<br/>\r\n… If you retrieve something non-json. Doc loader will detect rel-alternative links, and redirect to that resource.<br/>\r\n… I think the original requested document should be preserved as base URL.<br/>\r\n… Just like 303 redirect semantics. In 302, this would not be the case.<br/>\r\nRob Sanderson: JS will silently follow redirects and give you the results. So you don’t know which redirects got you there.<br/>\r\nGregg Kellogg: JS should correctly implement redirect semantics.<br/>\r\nDave Longley: +1 to using 303 semantics, so on, +1 to gregg’s position.<br/>\r\nGregg Kellogg: You have processing state to keep track on this.<br/>\r\nProposed resolution: merge api#134 and syntax#212, and close syntax#204 (Ivan Herman)<br/>\r\nRob Sanderson: +1<br/>\r\nDave Longley: +1<br/>\r\nBenjamin Young: +1<br/>\r\nRob Sanderson: :shipit:<br/>\r\nIvan Herman: +1<br/>\r\nGregg Kellogg: +1<br/>\r\nRuben Taelman: +0.5<br/>\r\nResolution #2: merge api#134 and syntax#212, and close syntax#204<br/>\r\n</details>" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/522088114> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/172#issuecomment-522088114"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/172> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/522088114> .
<https://api.github.com/users/iherman> <http://schema.org/accountId> "iherman" .
<https://api.github.com/users/iherman> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/520723?v=4" .
<https://api.github.com/users/iherman> <http://schema.org/url> "https://github.com/iherman"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/iherman> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/522088114> <http://schema.org/creator> <https://api.github.com/users/iherman> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/522088114> <http://schema.org/startDate> "2019-08-16T17:27:35Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/522088114> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/522088114> <http://schema.org/description> "This issue was discussed in [a meeting](https://www.w3.org/2018/json-ld-wg/Meetings/Minutes/2019/2019-08-16-json-ld#section4-3).\r\n\r\n- `RESOLVED:  close #172 as addressed by #204`\r\n<details><summary><i class=\"differentiate\">View the transcript</i></summary>\r\nBenjamin Young: See Syntax issue #172<br/>\r\nBenjamin Young: This issue is very related. Originally, extracting JSON-LD from HTML. This can now be done with a simple link header.<br/>\r\n… schema.org for example does not want to use conneg, so this is good for this. Proposed closing based on the last PRs.<br/>\r\nGregg Kellogg: The behavior is slightly modified if you request context. Document loader will not add text/html from request. The API is not affected too much.<br/>\r\n… If you will deal with HTML, like schema.org, then you can achieve a compatibility level with processing JSON-LD in HTML, instead of doing it mid-processing.<br/>\r\nDave Longley: Everything is untangled, and is cleaner now.<br/>\r\nIvan Herman: Users should be warned that they don’t define context as part of an HTML file.<br/>\r\nGregg Kellogg: We don’t have text saying that it can’t be done. We just removed the text saying that it can be done.<br/>\r\nIvan Herman: Because it can be done in theory?<br/>\r\nGregg Kellogg: Syntax doesn’t say anything about it. API doc explicitly excludes HTML.<br/>\r\nProposed resolution: close #172 as addressed by #204 (Benjamin Young)<br/>\r\nRob Sanderson: +1<br/>\r\nDave Longley: +1<br/>\r\nBenjamin Young: +1<br/>\r\nRuben Taelman: +1<br/>\r\nIvan Herman: +1<br/>\r\nGregg Kellogg: +1<br/>\r\nResolution #3: close #172 as addressed by #204<br/>\r\n</details>" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/522088317> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/213#issuecomment-522088317"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/213> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/522088317> .
<https://api.github.com/users/iherman> <http://schema.org/accountId> "iherman" .
<https://api.github.com/users/iherman> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/520723?v=4" .
<https://api.github.com/users/iherman> <http://schema.org/url> "https://github.com/iherman"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/iherman> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/522088317> <http://schema.org/creator> <https://api.github.com/users/iherman> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/522088317> <http://schema.org/startDate> "2019-08-16T17:28:16Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/522088317> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/522088317> <http://schema.org/description> "This issue was discussed in [a meeting](https://www.w3.org/2018/json-ld-wg/Meetings/Minutes/2019/2019-08-16-json-ld#section4-4).\r\n\r\n- No actions or resolutions\r\n<details><summary><i class=\"differentiate\">View the transcript</i></summary>\r\nBenjamin Young: See Syntax issue #213<br/>\r\nBenjamin Young: This issue discusses multiple processing levels.<br/>\r\n… If the link header approach solves the use case for linking to a JSON-LD context in HTML, then we probably don’t need a full processor level for HTML processing.<br/>\r\nIvan Herman: If I remember well (we’re talking about schema.org), JSON-LD in HTML this came up with a discussion that website producers had difficulties producing microdata/rdfa when they had different data in databases, and wanted an easier way to dump data from their databases in JSON.<br/>\r\n… If we don’t say anything about JSON-LD in HTML, then how can we trust any JSON-LD processor out there that this JSON-LD in HTML will be used?<br/>\r\n… The only way at the moment is to put it in a different file.<br/>\r\n… Also, the reason why they did it back then is because that’s the easiest way to produce JSON-LD data.<br/>\r\nRob Sanderson: I agree. We have normatively defined how JSON-LD is expressed in HTML. So we’ve opened the door to this. This requires all processors to handle HTML. These levels allow only some processors to not handle HTML.<br/>\r\n… I’m fine with putting it in the docloader spec.<br/>\r\n… Main question is: can we have a conforming processor that can not handle HTML?<br/>\r\nBenjamin Young: These data blocks have been used for a long time before JSON-LD. Anything can be placed in there. This is part of the HTML spec.<br/>\r\n… (part around data blocks in HTML5 spec)<br/>\r\n… A piece of software that exist now that extracts data from data blocks, and forwards it to any processor can also be used to handle extracting JSON-LD from HTML.<br/>\r\nBenjamin Young: See HTML data blocks<br/>\r\nDave Longley: I feel like talking about HTML in a JSON-LD processor is conflating formats. We need a cleaner separation of concerns.<br/>\r\n… HTML is not the only format in which JSON-LD can be included.<br/>\r\nBenjamin Young: +1<br/>\r\nDave Longley: It is a mistake to define these different levels. Instead, we should see it as plugging in a JSON-LD processor in another piece of software.<br/>\r\nGregg Kellogg: There is not standard way to handle these data blocks. What happens when you have a doc with multiple JSON-LD docs? And combined with RDFa?<br/>\r\nRob Sanderson: +1 to gkellogg<br/>\r\nGregg Kellogg: We have to define these things normatively.<br/>\r\n… JSON-LD is not just about getting LD from JSON, it is more. We also tackle issues regarding link headers etc.<br/>\r\nIvan Herman: +1 to gkellogg<br/>\r\nDave Longley: “JSON-LD in HTML” almost feels like a separate spec to me … and we have a mechanism to hook this up to a JSON-LD processor – a document loader; we could define other extensions this way … it provides a clear pattern.<br/>\r\nBenjamin Young: supports clarifying multiple blocks, data sets, etc.<br/>\r\nBenjamin Young: +1 to dlongley<br/>\r\nIvan Herman: +1 to gkellogg<br/>\r\nDave Longley: +1 that we should specify how to do it – but we need a cleaner architecture and repeatable extension pattern<br/>\r\nRob Sanderson: If we have normative recs about JSON-LD in HTML, and have two processor classes, then we need different processor levels.<br/>\r\nDave Longley: -1 to making this about processor classes<br/>\r\nRob Sanderson: dlongley - the issue is explicitly about processor classes?<br/>\r\nDave Longley: azaroth: yes, it is … and i think people are confused about my position/benjamin’s … we aren’t arguing against defininig how to do JSON-LD in HTML<br/>\r\nDave Longley: azaroth: it’s about processor classes and the architecture.<br/>\r\nBenjamin Young: The point isn’t that we shouldn’t normatively describe this. I would like a spec on graphs in HTML.<br/>\r\n… We should however not put the extraction concern of extracting JSON-LD from HTML in this spec.<br/>\r\nRuben Taelman: .. There should be a separate thing in front of this.<br/>\r\nDave Longley: +1 to benjamin, this does not scale and is a bad architecture choice.<br/>\r\nIvan Herman: If I am a user, I put data into HTML as JSON-LD. How do I make sure that it is understood?<br/>\r\n… Do I have to write a separate processor? I have to know how, otherwise it is useless.<br/>\r\n… For example, RDFa processors do a basic entailment, based on flags. Processors can only do things based on these flags. If I know that someone’s processor supports flags, then I can use a specific processor based on these capabilities. We need something like this, otherwise this is useless to users.<br/>\r\nDave Longley: Processor classes won’t solve ivan’s problem.<br/>\r\n… If you want to process JSON-LD from HTML, you have to look at that separate spec. Different document loaders can support these things. This is a better architecture, regarding separation of concerns.<br/>\r\nBenjamin Young: +1 to dlongley’s summation<br/>\r\nGregg Kellogg: Concern people have is that to be a full processors, you have to process HTML. Defining these as capabilities may be better.<br/>\r\n… I would support extracting HTML bits from our current spec to something else.<br/>\r\nDave Longley: we don’t have to split this up now<br/>\r\nDave Longley: let’s make sure we CAN split it up later.<br/>\r\nDave Longley: we can have the right architecture now and split later.<br/>\r\nRob Sanderson: I agree with dlongley and gkellogg.<br/>\r\nBenjamin Young: +1<br/>\r\nRob Sanderson: It would be cleaner in a different spec. But we don’t have time to split into a different spec. Maybe something for JSON-LD 2.0.<br/>\r\nDave Longley: we’re not talking about a ton of changes.<br/>\r\nIvan Herman: If we do this, we won’t adhere to our timetable.<br/>\r\nDave Longley: no, no no… not saying that.<br/>\r\nDave Longley: ok, next call :)<br/>\r\nBenjamin Young: Let’s take this to next call, as we will need it.<br/>\r\n</details>" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/522088342> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/204#issuecomment-522088342"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/204> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/522088342> .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/522088342> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/522088342> <http://schema.org/startDate> "2019-08-16T17:28:22Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/522088342> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/522088342> <http://schema.org/description> "This particular issue relates to #211, while #212 is for #172." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/522437707> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/212#issuecomment-522437707"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/212> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/522437707> .
<https://api.github.com/users/pchampin> <http://schema.org/accountId> "pchampin" .
<https://api.github.com/users/pchampin> <http://schema.org/image> "https://avatars1.githubusercontent.com/u/304612?v=4" .
<https://api.github.com/users/pchampin> <http://schema.org/url> "https://github.com/pchampin"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/pchampin> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/522437707> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/522437707> <http://schema.org/startDate> "2019-08-19T06:53:39Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/522437707> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/522437707> <http://schema.org/description> "Is it intended that we still have a broken reference to the removed section (at the end of section 5)?" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/522628206> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/213#issuecomment-522628206"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/213> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/522628206> .
<https://api.github.com/users/ajs6f> <http://schema.org/accountId> "ajs6f" .
<https://api.github.com/users/ajs6f> <http://schema.org/image> "https://avatars1.githubusercontent.com/u/110994?v=4" .
<https://api.github.com/users/ajs6f> <http://schema.org/url> "https://github.com/ajs6f"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/ajs6f> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/522628206> <http://schema.org/creator> <https://api.github.com/users/ajs6f> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/522628206> <http://schema.org/startDate> "2019-08-19T15:27:35Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/522628206> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/522628206> <http://schema.org/description> "> enable implementations to signal their support for the functionality or not\r\n\r\nWould this be by some means in the API, some characterization?" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/522707878> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/212#issuecomment-522707878"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/212> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/522707878> .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/522707878> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/522707878> <http://schema.org/startDate> "2019-08-19T18:51:49Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/522707878> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/522707878> <http://schema.org/description> "> Is it intended that we still have a broken reference to the removed section (at the end of section 5)?\r\n\r\nNo, of course not. This was something dangling between the two different PRs, apparently. Fixed in 06505e323907fd50662abaea06666b4959cfce4d." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/522713113> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/213#issuecomment-522713113"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/213> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/522713113> .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/522713113> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/522713113> <http://schema.org/startDate> "2019-08-19T19:06:24Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/522713113> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/522713113> <http://schema.org/description> "Version announcement would seem to require some new API interface intended to return information about the service, including whether it supports JSON-LD embedded in HTML. Frankly, I can't imagine that anyone would rely on this rather than just reading the documentation of the appropriate implementation. We could consider some specific error mode to raise when HTML support would be required, but cannot be handled by the implementation, as an after-the-fact announcement mechanism.\r\n\r\nThe intention of removing this was to make it easier for implementations to deal with HTML before the fact, even though the spec describes it as a function of the document loader. In the case of something like jsonld.js, I would think that it can be used for extracting embedded JSON-LD if put together with an HTML parsing package, which might be suitable in some scenarios, without burdening the implementation to carry this code when used in an embedded environment, where sources are always using pure-JSON." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/524387472> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/214#issuecomment-524387472"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/214> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/524387472> .
<https://api.github.com/users/iherman> <http://schema.org/accountId> "iherman" .
<https://api.github.com/users/iherman> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/520723?v=4" .
<https://api.github.com/users/iherman> <http://schema.org/url> "https://github.com/iherman"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/iherman> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/524387472> <http://schema.org/creator> <https://api.github.com/users/iherman> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/524387472> <http://schema.org/startDate> "2019-08-23T16:55:14Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/524387472> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/524387472> <http://schema.org/description> "This issue was discussed in [a meeting](https://www.w3.org/2018/json-ld-wg/Meetings/Minutes/2019/2019-08-23-json-ld#section4-1).\r\n\r\n- `RESOLVED:  gkellogg to merge w3c/json-ld-api#135 and #214 after reviewers have approved and close the relevant issues`\r\n<details><summary><i class=\"differentiate\">View the transcript</i></summary>\r\nncapsulate HTML processing<br/>\r\nRob Sanderson: See Syntax #214<br/>\r\nRob Sanderson: See API w3c/json-ld-api#135<br/>\r\nRob Sanderson: Discussion from last week has resulted in some PRs.<br/>\r\nIvan Herman: Gregg not here this week.<br/>\r\nPierre-Antoine Champin: dlongley: PRs are moving in a direction I would agree with<br/>\r\nRob Sanderson: I would agree as well, pushing things into the document loader as discussed last week.<br/>\r\n… I guess the issue to discuss is – is there anyone who is not comfortable yet otherwise we should accept those PRs.<br/>\r\nPierre-Antoine Champin: scribeassist: pchampin<br/>\r\nRob Sanderson: Any objections to the approach?<br/>\r\nIvan Herman: I read through the documents and we have done the work.<br/>\r\nPierre-Antoine Champin: dlongley: I would like to wait for other reviews before minerging (including mine)<br/>\r\nProposed resolution: gkellogg to merge w3c/json-ld-api#135 and #214 after reviewers have approved (Rob Sanderson)<br/>\r\nProposed resolution: gkellogg to merge w3c/json-ld-api#135 and #214 after reviewers have approved and close the relevant issues (Rob Sanderson)<br/>\r\nDave Longley: +1<br/>\r\nRuben Taelman: +1<br/>\r\nRob Sanderson: +1<br/>\r\nBenjamin Young: +1<br/>\r\nPierre-Antoine Champin: +1<br/>\r\nIvan Herman: +1<br/>\r\nDavid I. Lehn: +1<br/>\r\nResolution #2: gkellogg to merge w3c/json-ld-api#135 and #214 after reviewers have approved and close the relevant issues<br/>\r\n</details>" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/524387539> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/213#issuecomment-524387539"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/213> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/524387539> .
<https://api.github.com/users/iherman> <http://schema.org/accountId> "iherman" .
<https://api.github.com/users/iherman> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/520723?v=4" .
<https://api.github.com/users/iherman> <http://schema.org/url> "https://github.com/iherman"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/iherman> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/524387539> <http://schema.org/creator> <https://api.github.com/users/iherman> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/524387539> <http://schema.org/startDate> "2019-08-23T16:55:30Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/524387539> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/524387539> <http://schema.org/description> "This issue was discussed in [a meeting](https://www.w3.org/2018/json-ld-wg/Meetings/Minutes/2019/2019-08-23-json-ld#section4-1).\r\n\r\n- `RESOLVED:  gkellogg to merge #135 and #214 after reviewers have approved and close the relevant issues`\r\n<details><summary><i class=\"differentiate\">View the transcript</i></summary>\r\nncapsulate HTML processing<br/>\r\nRob Sanderson: See Syntax #214<br/>\r\nRob Sanderson: See API #135<br/>\r\nRob Sanderson: Discussion from last week has resulted in some PRs.<br/>\r\nIvan Herman: Gregg not here this week.<br/>\r\nPierre-Antoine Champin: dlongley: PRs are moving in a direction I would agree with<br/>\r\nRob Sanderson: I would agree as well, pushing things into the document loader as discussed last week.<br/>\r\n… I guess the issue to discuss is – is there anyone who is not comfortable yet otherwise we should accept those PRs.<br/>\r\nPierre-Antoine Champin: scribeassist: pchampin<br/>\r\nRob Sanderson: Any objections to the approach?<br/>\r\nIvan Herman: I read through the documents and we have done the work.<br/>\r\nPierre-Antoine Champin: dlongley: I would like to wait for other reviews before minerging (including mine)<br/>\r\nProposed resolution: gkellogg to merge #135 and #214 after reviewers have approved (Rob Sanderson)<br/>\r\nProposed resolution: gkellogg to merge #135 and #214 after reviewers have approved and close the relevant issues (Rob Sanderson)<br/>\r\nDave Longley: +1<br/>\r\nRuben Taelman: +1<br/>\r\nRob Sanderson: +1<br/>\r\nBenjamin Young: +1<br/>\r\nPierre-Antoine Champin: +1<br/>\r\nIvan Herman: +1<br/>\r\nDavid I. Lehn: +1<br/>\r\nResolution #2: gkellogg to merge #135 and #214 after reviewers have approved and close the relevant issues<br/>\r\n</details>" .

