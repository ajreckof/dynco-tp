<https://api.github.com/repos/w3c/json-ld-syntax> <http://example.com/ns#issue> <https://api.github.com/repos/w3c/json-ld-syntax/issues/168> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/168> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/168"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/168> <http://schema.org/identifier> "168"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/168> <http://schema.org/name> "ack script data and generated file" .
<https://api.github.com/users/iherman> <http://schema.org/accountId> "iherman" .
<https://api.github.com/users/iherman> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/520723?v=4" .
<https://api.github.com/users/iherman> <http://schema.org/url> "https://github.com/iherman"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/iherman> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/168> <http://schema.org/creator> <https://api.github.com/users/iherman> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/168> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#OpenIssue> .
<https://api.github.com/users/BigBlueHat> <http://schema.org/accountId> "BigBlueHat" .
<https://api.github.com/users/BigBlueHat> <http://schema.org/image> "https://avatars1.githubusercontent.com/u/43209?v=4" .
<https://api.github.com/users/BigBlueHat> <http://schema.org/url> "https://github.com/BigBlueHat"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/BigBlueHat> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/168> <http://example.com/ns#assignee> <https://api.github.com/users/BigBlueHat> .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/168> <http://example.com/ns#assignee> <https://api.github.com/users/gkellogg> .
<https://api.github.com/users/pchampin> <http://schema.org/accountId> "pchampin" .
<https://api.github.com/users/pchampin> <http://schema.org/image> "https://avatars1.githubusercontent.com/u/304612?v=4" .
<https://api.github.com/users/pchampin> <http://schema.org/url> "https://github.com/pchampin"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/pchampin> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/168> <http://example.com/ns#assignee> <https://api.github.com/users/pchampin> .
<https://api.github.com/users/azaroth42> <http://schema.org/accountId> "azaroth42" .
<https://api.github.com/users/azaroth42> <http://schema.org/image> "https://avatars3.githubusercontent.com/u/871868?v=4" .
<https://api.github.com/users/azaroth42> <http://schema.org/url> "https://github.com/azaroth42"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/azaroth42> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/168> <http://example.com/ns#assignee> <https://api.github.com/users/azaroth42> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/168> <http://schema.org/startDate> "2019-04-29T15:14:12Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/168> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/pulls/168> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/168"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/168> <http://example.com/ns#pullRequest> <https://api.github.com/repos/w3c/json-ld-syntax/pulls/168> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/168> <http://schema.org/description> "@gkellogg @BigBlueHat @azaroth42 \n\nI have generalized the acknowledgment generation script to configure it and run it more generally (it was, so far, tailored at the Web Publication document). The script itself is in its [own repo now](https://github.com/w3c/publ_ack). It is not yet final (and no documentation yet), but the essence is there.\n\n- There is a generic [configuration file](https://github.com/w3c/json-ld-wg/blob/master/assets/publ_ack_config.json). It currently has references to the files that I have created for the syntax document (and using the final URL-s as they will be, eventually). This will have to be extended to the framing and the api documents.\n- There are two files that are created for each document:\n  - the explicit list in `separate_acks.json` which lists those that are to be mentioned as really authors and contributors. I have created the file in this PR, listing all those who have been at least as one of our calls this year.\n  - a template file in `ack_pattern.html` that contains the slots for the two lists: the ones called out explicitly, and all the others. This will be documented, but it is fairly self-evident.\n- I have generated the file for this document in `acknowledgment.html`. This can then be included into the final document via respec, using:\n\n```\n<section id=\"ack\" data-include=\"common/ack-script/acknowledgements.html\" data-include-replace=\"true\"></section>\n```\n\nI am sure there are refinements to be done on the script, but the essence it there. I wanted to share it asap to get the feedbacks in time.\n\nIf you install this and want to run locally, two things to remember:\n\n- You will have to create a `~/.publ_ack.json` which should include, at the minimum, the `api_key` for accessing the W3C API-s that gives one access to these data (see https://w3c.github.io/w3c-api/).\n- If you run it, be patient. The script has to issue a sh...load of API calls to get everything; the API is not very optimal. I tried to use parallel promises wherever I could (and it does speed up a lot), but it takes its time...\n\n---\n\nI did not want to merge this 'just like that', though it does not affect any of the publication files...\n\n\n<!--\n    This comment and the below content is programatically generated.\n    You may add a comma-separated list of anchors you'd like a\n    direct link to below (e.g. #idl-serializers, #idl-sequence):\n\n    Don't remove this comment or modify anything below this line.\n    If you don't want a preview generated for this pull request,\n    just replace the whole of this comment's content by \"no preview\"\n    and remove what's below.\n-->\n***\n<a href=\"https://pr-preview.s3.amazonaws.com/w3c/json-ld-syntax/pull/168.html\" title=\"Last updated on May 1, 2019, 5:04 PM UTC (855c2c5)\">Preview</a> | <a href=\"https://pr-preview.s3.amazonaws.com/w3c/json-ld-syntax/168/449c65f...855c2c5.html\" title=\"Last updated on May 1, 2019, 5:04 PM UTC (855c2c5)\">Diff</a>" .
<https://api.github.com/repos/w3c/json-ld-syntax> <http://example.com/ns#issue> <https://api.github.com/repos/w3c/json-ld-syntax/issues/167> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/167> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/167"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/167> <http://schema.org/identifier> "167"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/167> <http://schema.org/name> "Add a section on using HTML documents for contexts (and frames)." .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/167> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/167> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#OpenIssue> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/167> <http://schema.org/startDate> "2019-04-25T22:52:12Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/167> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/pulls/167> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/167"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/167> <http://example.com/ns#pullRequest> <https://api.github.com/repos/w3c/json-ld-syntax/pulls/167> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/167> <http://schema.org/description> "For w3c/json-ld-api#66.\n\n\n<!--\n    This comment and the below content is programatically generated.\n    You may add a comma-separated list of anchors you'd like a\n    direct link to below (e.g. #idl-serializers, #idl-sequence):\n\n    Don't remove this comment or modify anything below this line.\n    If you don't want a preview generated for this pull request,\n    just replace the whole of this comment's content by \"no preview\"\n    and remove what's below.\n-->\n***\n<a href=\"https://pr-preview.s3.amazonaws.com/w3c/json-ld-syntax/pull/167.html\" title=\"Last updated on Apr 30, 2019, 9:15 PM UTC (6a54179)\">Preview</a> | <a href=\"https://pr-preview.s3.amazonaws.com/w3c/json-ld-syntax/167/449c65f...6a54179.html\" title=\"Last updated on Apr 30, 2019, 9:15 PM UTC (6a54179)\">Diff</a>" .
<https://api.github.com/repos/w3c/json-ld-syntax> <http://example.com/ns#issue> <https://api.github.com/repos/w3c/json-ld-syntax/issues/166> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/166> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/166"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/166> <http://schema.org/identifier> "166"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/166> <http://schema.org/name> "Disallow terms which are compact IRIs or absolute IRIs" .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/166> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/166> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/166> <http://schema.org/startDate> "2019-04-23T21:54:52Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/166> <http://schema.org/endDate> "2019-04-24T17:51:42Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/166> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/pulls/166> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/166"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/166> <http://example.com/ns#pullRequest> <https://api.github.com/repos/w3c/json-ld-syntax/pulls/166> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/166> <http://schema.org/description> "which would expand to something other than they key itself.\r\n\r\nNote, this represents a change from 1.0 behavior.\r\n\r\nFor #155." .
<https://api.github.com/repos/w3c/json-ld-syntax> <http://example.com/ns#issue> <https://api.github.com/repos/w3c/json-ld-syntax/issues/165> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/165> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/165"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/165> <http://schema.org/identifier> "165"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/165> <http://schema.org/name> "Missing @type in expanded form when an id map is used in conjunction with @type in a term definition" .
<https://api.github.com/users/keyvan-m-sadeghi> <http://schema.org/accountId> "keyvan-m-sadeghi" .
<https://api.github.com/users/keyvan-m-sadeghi> <http://schema.org/image> "https://avatars1.githubusercontent.com/u/1758649?v=4" .
<https://api.github.com/users/keyvan-m-sadeghi> <http://schema.org/url> "https://github.com/keyvan-m-sadeghi"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/keyvan-m-sadeghi> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/165> <http://schema.org/creator> <https://api.github.com/users/keyvan-m-sadeghi> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/out%20of%20scope:%20transformation> <http://schema.org/name> "out of scope: transformation" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/out%20of%20scope:%20transformation> <http://schema.org/color> "000000" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/out%20of%20scope:%20transformation> <http://schema.org/description> "" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/165> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/out%20of%20scope:%20transformation> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/165> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/165> <http://schema.org/startDate> "2019-04-23T12:06:23Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/165> <http://schema.org/endDate> "2019-04-24T13:56:57Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/165> <http://example.com/ns#authorAssociation> "NONE" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/165> <http://schema.org/description> "Building on [the example from the specs](https://w3c.github.io/json-ld-syntax/#example-83-indexing-data-in-json-ld-by-node-identifiers) with 3 changes marked by `// Here!`:\r\n\r\n```javascript\r\n{\r\n  \"@context\": {\r\n    \"@version\": 1.1,\r\n    \"schema\": \"http://schema.org/\",\r\n    \"name\": \"schema:name\",\r\n    \"body\": \"schema:articleBody\",\r\n    \"words\": \"schema:wordCount\",\r\n    \"post\": {\r\n      \"@id\": \"schema:blogPost\",\r\n      \"@container\": \"@id\",\r\n      \"@type\": \"schema:BlogPosting\" // Here!\r\n    }\r\n  },\r\n  \"@id\": \"http://example.com/\",\r\n  \"@type\": \"schema:Blog\",\r\n  \"name\": \"World Financial News\",\r\n  \"post\": {\r\n    \"http://example.com/posts/1/en\": {\r\n      \"body\": \"World commodities were up today with heavy trading of crude oil...\",\r\n      \"words\": 1539\r\n    },\r\n    \"http://example.com/posts/1/de\": {\r\n      \"body\": \"Die Werte an Warenbörsen stiegen im Sog eines starken Handels von Rohöl...\",\r\n      \"@type\": \"schema:BlogPosting\",  // Here!\r\n      \"words\": 1204\r\n    },\r\n    \"http://example.com/posts/2/en\": \"hello\" // Here!\r\n  }\r\n}\r\n```\r\n\r\n[Open in playground](https://json-ld.org/playground/#startTab=tab-expanded&json-ld=%7B%22%40context%22%3A%7B%22%40version%22%3A1.1%2C%22schema%22%3A%22http%3A%2F%2Fschema.org%2F%22%2C%22name%22%3A%22schema%3Aname%22%2C%22body%22%3A%22schema%3AarticleBody%22%2C%22words%22%3A%22schema%3AwordCount%22%2C%22post%22%3A%7B%22%40id%22%3A%22schema%3AblogPost%22%2C%22%40container%22%3A%22%40id%22%2C%22%40type%22%3A%22schema%3ABlogPosting%22%7D%7D%2C%22%40id%22%3A%22http%3A%2F%2Fexample.com%2F%22%2C%22%40type%22%3A%22schema%3ABlog%22%2C%22name%22%3A%22World%20Financial%20News%22%2C%22post%22%3A%7B%22http%3A%2F%2Fexample.com%2Fposts%2F1%2Fen%22%3A%7B%22body%22%3A%22World%20commodities%20were%20up%20today%20with%20heavy%20trading%20of%20crude%20oil...%22%2C%22words%22%3A1539%7D%2C%22http%3A%2F%2Fexample.com%2Fposts%2F1%2Fde%22%3A%7B%22body%22%3A%22Die%20Werte%20an%20Warenb%C3%B6rsen%20stiegen%20im%20Sog%20eines%20starken%20Handels%20von%20Roh%C3%B6l...%22%2C%22%40type%22%3A%22schema%3ABlogPosting%22%2C%22words%22%3A1204%7D%2C%22http%3A%2F%2Fexample.com%2Fposts%2F2%2Fen%22%3A%22hello%22%7D%7D)\r\n\r\nThe expanded form includes the `@type` for the simple key-value pair `\"http://example.com/posts/2/en\": \"hello\"`, but not for `\"http://example.com/posts/1/en\"`:\r\n\r\n```javascript\r\n[\r\n  {\r\n    \"@id\": \"http://example.com/\",\r\n    \"@type\": [\r\n      \"http://schema.org/Blog\"\r\n    ],\r\n    \"http://schema.org/name\": [\r\n      {\r\n        \"@value\": \"World Financial News\"\r\n      }\r\n    ],\r\n    \"http://schema.org/blogPost\": [\r\n      {\r\n        \"@type\": [\r\n          \"http://schema.org/BlogPosting\"  // Here!\r\n        ],\r\n        \"http://schema.org/articleBody\": [\r\n          {\r\n            \"@value\": \"Die Werte an Warenbörsen stiegen im Sog eines starken Handels von Rohöl...\"\r\n          }\r\n        ],\r\n        \"http://schema.org/wordCount\": [\r\n          {\r\n            \"@value\": 1204\r\n          }\r\n        ],\r\n        \"@id\": \"http://example.com/posts/1/de\"\r\n      },\r\n      {\r\n        \"http://schema.org/articleBody\": [\r\n          {\r\n            \"@value\": \"World commodities were up today with heavy trading of crude oil...\"\r\n          }\r\n        ],\r\n        \"http://schema.org/wordCount\": [\r\n          {\r\n            \"@value\": 1539\r\n          }\r\n        ],\r\n        \"@id\": \"http://example.com/posts/1/en\"  // Not Here!\r\n      },\r\n      {\r\n        \"@type\": \"http://schema.org/BlogPosting\",  // Here!\r\n        \"@value\": \"hello\",\r\n        \"@id\": \"http://example.com/posts/2/en\"\r\n      }\r\n    ]\r\n  }\r\n]\r\n```\r\n\r\n`@type` is manually added for `\"http://example.com/posts/1/de\"` for the sake of comparison, which produces the expected result IMHO.\r\n\r\nIs this my wrong understanding or is it missing from the expansion algorithm?\r\n\r\nThanks in advance." .
<https://api.github.com/repos/w3c/json-ld-syntax> <http://example.com/ns#issue> <https://api.github.com/repos/w3c/json-ld-syntax/issues/164> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/164> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/164"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/164> <http://schema.org/identifier> "164"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/164> <http://schema.org/name> "Update security considerations" .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/164> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/164> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/164> <http://schema.org/startDate> "2019-04-22T19:11:55Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/164> <http://schema.org/endDate> "2019-04-24T16:10:19Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/164> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/pulls/164> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/164"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/164> <http://example.com/ns#pullRequest> <https://api.github.com/repos/w3c/json-ld-syntax/pulls/164> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/164> <http://schema.org/description> "and add privacy and internationalization considerations appendices.\n\nFor #147, and #148.\n\n\n<!--\n    This comment and the below content is programatically generated.\n    You may add a comma-separated list of anchors you'd like a\n    direct link to below (e.g. #idl-serializers, #idl-sequence):\n\n    Don't remove this comment or modify anything below this line.\n    If you don't want a preview generated for this pull request,\n    just replace the whole of this comment's content by \"no preview\"\n    and remove what's below.\n-->\n***\n\n### :boom: Error: 500 Internal Server Error :boom: ###\n\n[PR Preview](https://github.com/tobie/pr-preview#pr-preview) failed to build. _(Last tried on Apr 24, 2019, 9:59 PM UTC)_.\n\n<details>\n<summary>More</summary>\n\n\nPR Preview relies on a number of web services to run. There seems to be an issue with the following one:\n\n:rotating_light: [Spec Generator](https://www.w3.org/2015/labs/) - Spec Generator is the web service used to build specs that rely on ReSpec.\n\n:link: [Related URL](https://labs.w3.org/spec-generator/?type=respec&url=https%3A%2F%2Frawcdn.githack.com%2Fw3c%2Fjson-ld-syntax%2Fca3457b7169fe4e0922d10269e37d57fba5c5417%2Findex.html%3FisPreview%3Dtrue)\n\n```\nNavigation Timeout Exceeded: 20000ms exceeded\n```\n\n_If you don't have enough information above to solve the error by yourself (or to understand to which web service the error is related to, if any), please [file an issue](https://github.com/tobie/pr-preview/issues/new?title=Error%20not%20surfaced%20properly&body=See%20w3c/json-ld-syntax%23164.)._\n</details>\n" .
<https://api.github.com/repos/w3c/json-ld-syntax> <http://example.com/ns#issue> <https://api.github.com/repos/w3c/json-ld-syntax/issues/163> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/163> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/163"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/163> <http://schema.org/identifier> "163"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/163> <http://schema.org/name> "Add @pchampin's suggested change to the definition of _graph object_." .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/163> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/163> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/163> <http://schema.org/startDate> "2019-04-19T21:18:34Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/163> <http://schema.org/endDate> "2019-04-23T18:42:39Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/163> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/pulls/163> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/163"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/163> <http://example.com/ns#pullRequest> <https://api.github.com/repos/w3c/json-ld-syntax/pulls/163> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/163> <http://schema.org/description> "Fixes #160." .
<https://api.github.com/repos/w3c/json-ld-syntax> <http://example.com/ns#issue> <https://api.github.com/repos/w3c/json-ld-syntax/issues/162> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/162> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/162"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/162> <http://schema.org/identifier> "162"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/162> <http://schema.org/name> "Change \"dc\" as a prefix to \"dcterms\"." .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/162> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/162> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/162> <http://schema.org/startDate> "2019-04-18T21:29:22Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/162> <http://schema.org/endDate> "2019-04-19T17:33:21Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/162> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/pulls/162> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/162"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/162> <http://example.com/ns#pullRequest> <https://api.github.com/repos/w3c/json-ld-syntax/pulls/162> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/162> <http://schema.org/description> "For #159." .
<https://api.github.com/repos/w3c/json-ld-syntax> <http://example.com/ns#issue> <https://api.github.com/repos/w3c/json-ld-syntax/issues/161> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/161> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/161"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/161> <http://schema.org/identifier> "161"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/161> <http://schema.org/name> "Add caveat on numbers being represented as double" .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/161> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:editorial> <http://schema.org/name> "spec:editorial" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:editorial> <http://schema.org/color> "58820a" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:editorial> <http://schema.org/description> "" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/161> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:editorial> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/161> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/161> <http://schema.org/startDate> "2019-04-16T22:27:16Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/161> <http://schema.org/endDate> "2019-04-18T21:02:53Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/161> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/pulls/161> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/161"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/161> <http://example.com/ns#pullRequest> <https://api.github.com/repos/w3c/json-ld-syntax/pulls/161> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/161> <http://schema.org/description> " if they're too large to represent as integers." .
<https://api.github.com/repos/w3c/json-ld-syntax> <http://example.com/ns#issue> <https://api.github.com/repos/w3c/json-ld-syntax/issues/160> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/160> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/160"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/160> <http://schema.org/identifier> "160"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/160> <http://schema.org/name> "Cyclic definitions in section 9" .
<https://api.github.com/users/pchampin> <http://schema.org/accountId> "pchampin" .
<https://api.github.com/users/pchampin> <http://schema.org/image> "https://avatars1.githubusercontent.com/u/304612?v=4" .
<https://api.github.com/users/pchampin> <http://schema.org/url> "https://github.com/pchampin"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/pchampin> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/160> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:editorial> <http://schema.org/name> "spec:editorial" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:editorial> <http://schema.org/color> "58820a" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:editorial> <http://schema.org/description> "" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/160> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:editorial> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/160> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/160> <http://example.com/ns#assignee> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/160> <http://schema.org/startDate> "2019-04-16T07:27:08Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/160> <http://schema.org/endDate> "2019-04-23T18:42:39Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/160> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/160> <http://schema.org/description> "Section 9.2 defines a node object with a set of conditions, one of them being \"it is not a graph object\".\r\n\r\nSection 9.4 defines a graph object with a set of conditions, one of them being \"it is not a node object\".\r\n\r\nThis cyclic definition is a problem for normative text. Furthermore, the later does not say that a graph object MUST contain a `@graph` member (or an alias of that keyword)! Which it must, right?\r\n\r\nSuggestion: replace in 9.4 \"it is not a node object\" by \"it contains a `@graph` member (or an alias of that keyword)\"." .
<https://api.github.com/repos/w3c/json-ld-syntax> <http://example.com/ns#issue> <https://api.github.com/repos/w3c/json-ld-syntax/issues/159> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/159> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/159"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/159> <http://schema.org/identifier> "159"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/159> <http://schema.org/name> "Consistent use of Dublin Core prefixes" .
<https://api.github.com/users/pchampin> <http://schema.org/accountId> "pchampin" .
<https://api.github.com/users/pchampin> <http://schema.org/image> "https://avatars1.githubusercontent.com/u/304612?v=4" .
<https://api.github.com/users/pchampin> <http://schema.org/url> "https://github.com/pchampin"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/pchampin> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/159> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:editorial> <http://schema.org/name> "spec:editorial" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:editorial> <http://schema.org/color> "58820a" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:editorial> <http://schema.org/description> "" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/159> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:editorial> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:enhancement> <http://schema.org/name> "spec:enhancement" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:enhancement> <http://schema.org/color> "c11537" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:enhancement> <http://schema.org/description> "" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/159> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:enhancement> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/159> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/159> <http://schema.org/startDate> "2019-04-16T06:52:30Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/159> <http://schema.org/endDate> "2019-04-19T20:46:38Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/159> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/159> <http://schema.org/description> "In all examples using the Dublin Core vocabulary, the prefix is declared:\r\n```json\r\n\"dc\": \"http://purl.org/dc/terms/\",\r\n```\r\n\r\nwhile, in the [recommended context](https://github.com/w3c/json-ld-rc/blob/master/context.jsonld),\r\nthe following prefixes are defined:\r\n```json\r\n\"dc\": \"http://purl.org/dc/elements/1.1/\",\r\n\"dc11\": \"http://purl.org/dc/elements/1.1/\",\r\n\"dct\": \"http://purl.org/dc/terms/\",\r\n\"dcterms\": \"http://purl.org/dc/terms/\",\r\n```\r\n\r\nI suggest we align with the recommended context, for example by replacing prefix `dc` with `dct` in the examples of the Syntax document." .
<https://api.github.com/repos/w3c/json-ld-syntax> <http://example.com/ns#issue> <https://api.github.com/repos/w3c/json-ld-syntax/issues/158> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/158> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/158"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/158> <http://schema.org/identifier> "158"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/158> <http://schema.org/name> "Aliasing languages in scoped context for a language map?" .
<https://api.github.com/users/azaroth42> <http://schema.org/accountId> "azaroth42" .
<https://api.github.com/users/azaroth42> <http://schema.org/image> "https://avatars3.githubusercontent.com/u/871868?v=4" .
<https://api.github.com/users/azaroth42> <http://schema.org/url> "https://github.com/azaroth42"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/azaroth42> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/158> <http://schema.org/creator> <https://api.github.com/users/azaroth42> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:enhancement> <http://schema.org/name> "spec:enhancement" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:enhancement> <http://schema.org/color> "c11537" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:enhancement> <http://schema.org/description> "" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/158> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:enhancement> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/158> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/158> <http://schema.org/startDate> "2019-04-15T21:50:46Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/158> <http://schema.org/endDate> "2019-04-20T04:41:36Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/158> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/158> <http://schema.org/description> "\r\nIt's possible to alias `@none` to `none` in a scoped context of a language map, but should it also be possible to alias other language keys?  For example, if `en-gb` was aliased to `en_gb`, then it would be usable as a property in javascript.\r\n\r\n" .
<https://api.github.com/repos/w3c/json-ld-syntax> <http://example.com/ns#issue> <https://api.github.com/repos/w3c/json-ld-syntax/issues/157> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/157> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/157"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/157> <http://schema.org/identifier> "157"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/157> <http://schema.org/name> "a number of small editorial changes" .
<https://api.github.com/users/pchampin> <http://schema.org/accountId> "pchampin" .
<https://api.github.com/users/pchampin> <http://schema.org/image> "https://avatars1.githubusercontent.com/u/304612?v=4" .
<https://api.github.com/users/pchampin> <http://schema.org/url> "https://github.com/pchampin"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/pchampin> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/157> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/157> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/157> <http://schema.org/startDate> "2019-04-15T16:32:49Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/157> <http://schema.org/endDate> "2019-04-15T18:30:04Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/157> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/pulls/157> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/157"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/157> <http://example.com/ns#pullRequest> <https://api.github.com/repos/w3c/json-ld-syntax/pulls/157> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/157> <http://schema.org/description> "none of them should be too controversial, but I'd rather have a review, just in case..." .
<https://api.github.com/repos/w3c/json-ld-syntax> <http://example.com/ns#issue> <https://api.github.com/repos/w3c/json-ld-syntax/issues/156> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/156> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/156"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/156> <http://schema.org/identifier> "156"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/156> <http://schema.org/name> "reflected the decisions about #136" .
<https://api.github.com/users/pchampin> <http://schema.org/accountId> "pchampin" .
<https://api.github.com/users/pchampin> <http://schema.org/image> "https://avatars1.githubusercontent.com/u/304612?v=4" .
<https://api.github.com/users/pchampin> <http://schema.org/url> "https://github.com/pchampin"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/pchampin> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/156> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/156> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/156> <http://schema.org/startDate> "2019-04-15T14:40:16Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/156> <http://schema.org/endDate> "2019-04-15T18:51:17Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/156> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/pulls/156> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/156"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/156> <http://example.com/ns#pullRequest> <https://api.github.com/repos/w3c/json-ld-syntax/pulls/156> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/156> <http://schema.org/description> "NB: marked example 44 as ignored, because it is not supported by the current implementation" .
<https://api.github.com/repos/w3c/json-ld-syntax> <http://example.com/ns#issue> <https://api.github.com/repos/w3c/json-ld-syntax/issues/155> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/155> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/155"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/155> <http://schema.org/identifier> "155"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/155> <http://schema.org/name> "IRIs are terms can be misdefined" .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/155> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/propose%20closing> <http://schema.org/name> "propose closing" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/propose%20closing> <http://schema.org/color> "bf5315" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/propose%20closing> <http://schema.org/description> "" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/155> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/propose%20closing> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/satisfied> <http://schema.org/name> "satisfied" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/satisfied> <http://schema.org/color> "4be23b" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/satisfied> <http://schema.org/description> "Requirement Satisfied" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/155> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/satisfied> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/security-tracker> <http://schema.org/name> "security-tracker" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/security-tracker> <http://schema.org/color> "ffff00" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/security-tracker> <http://schema.org/description> "Group bringing to attention of security, or tracked by the security Group but not needing response." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/155> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/security-tracker> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:bug> <http://schema.org/name> "spec:bug" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:bug> <http://schema.org/color> "ba39ce" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:bug> <http://schema.org/description> "" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/155> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:bug> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:enhancement> <http://schema.org/name> "spec:enhancement" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:enhancement> <http://schema.org/color> "c11537" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:enhancement> <http://schema.org/description> "" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/155> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:enhancement> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:substantive> <http://schema.org/name> "spec:substantive" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:substantive> <http://schema.org/color> "cff9a4" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:substantive> <http://schema.org/description> "" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/155> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:substantive> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/155> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#OpenIssue> .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/155> <http://example.com/ns#assignee> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/155> <http://schema.org/startDate> "2019-03-29T21:31:31Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/155> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/155> <http://schema.org/description> "JSON-LD provided no real limits on what can be defined as term. In fact, it's possible to define either a Compact IRI or an absolute IRI as a term which maps to something completely different, which is likely a security problem.\r\n\r\nThis  needs to be fixed in JSON-LD 1.1 and marked as an errata for JSON-LD 1.0.\r\n\r\nConsider the following document:\r\n\r\n```json\r\n{\r\n  \"@context\": {\r\n    \"schema\": \"http://schema.org/\",\r\n    \"foaf\": \"http://xmlns.com/foaf/0.1/\",\r\n    \"foaf:name\": {\"@id\": \"schema:name\"},\r\n    \"http://xmlns.com/foaf/0.1/Person\": {\"@id\": \"schema:Person\"}\r\n  },\r\n  \"@type\": \"http://xmlns.com/foaf/0.1/Person\",\r\n  \"foaf:name\": \"Danbri\"\r\n}\r\n```\r\n\r\nThis actually expands to the following:\r\n\r\n```json\r\n[\r\n  {\r\n    \"@type\": [\r\n      \"http://schema.org/Person\"\r\n    ],\r\n    \"http://schema.org/name\": [\r\n      {\r\n        \"@value\": \"Danbri\"\r\n      }\r\n    ]\r\n  }\r\n]\r\n```\r\n\r\nThe syntax document needs to place restrictions on terms which are compact IRI or absolute IRIs that they either do _not_ include `@id` in their definition, or that it expand to the same IRI as if there was no `@id` present. A term looking like a compact IRI without a corresponding prefix definition would be treated as an absolute IRI.\r\n\r\nMoreover, context processing should reject any term which looks like an absolute IRI (e.g., `http://xmlns.com/foaf/0.1/Person` above), as it opens another corner-case when compacting and no term is available to match the value to be compacted, which falls back to use the absolute IRI, but if that's defined as a term, it will be incorrect.\r\n\r\nGiven the following input document:\r\n\r\n```json\r\n{\r\n  \"@context\": {\r\n    \"schema\": \"http://schema.org/\",\r\n    \"foaf\": \"http://xmlns.com/foaf/0.1/\"\r\n  },\r\n  \"@type\": \"http://xmlns.com/foaf/0.1/Person\",\r\n  \"foaf:name\": \"Danbri\"\r\n}\r\n```\r\n\r\nand the following context:\r\n\r\n```json\r\n{\r\n  \"@context\": {\r\n    \"schema\": \"http://schema.org/\",\r\n    \"foaf\": \"http://xmlns.com/foaf/0.1/\",\r\n    \"foaf:name\": {\"@language\": \"de\"},\r\n    \"http://xmlns.com/foaf/0.1/name\": {\"@language\": \"en\"}\r\n  },\r\n  \"@type\": \"http://xmlns.com/foaf/0.1/Person\",\r\n  \"foaf:name\": \"Danbri\"\r\n}\r\n```\r\n\r\nThe result will be \r\n\r\n```json\r\n{\r\n  \"@context\": {\r\n    \"schema\": \"http://schema.org/\",\r\n    \"foaf\": \"http://xmlns.com/foaf/0.1/\",\r\n    \"foaf:name\": {\r\n      \"@language\": \"de\"\r\n    },\r\n    \"http://xmlns.com/foaf/0.1/name\": {\r\n      \"@language\": \"en\"\r\n    }\r\n  },\r\n  \"@type\": \"foaf:Person\",\r\n  \"http://xmlns.com/foaf/0.1/name\": \"Danbri\"\r\n}\r\n```\r\n\r\nBut, as `\"http://xmlns.com/foaf/0.1/name` is defined to have `@language: en`, expanding this won't get back to the original, it will add `@language: en` to the \"Danbri\" value object.\r\n\r\n```json\r\n[\r\n  {\r\n    \"@type\": [\r\n      \"http://xmlns.com/foaf/0.1/Person\"\r\n    ],\r\n    \"http://xmlns.com/foaf/0.1/name\": [\r\n      {\r\n        \"@language\": \"en\",\r\n        \"@value\": \"Danbri\"\r\n      }\r\n    ]\r\n  }\r\n]\r\n```" .
<https://api.github.com/repos/w3c/json-ld-syntax> <http://example.com/ns#issue> <https://api.github.com/repos/w3c/json-ld-syntax/issues/154> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/154> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/154"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/154> <http://schema.org/identifier> "154"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/154> <http://schema.org/name> "Update default vocabulary used in examples to avoid schema.org" .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/154> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/154> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/154> <http://schema.org/startDate> "2019-03-28T22:09:46Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/154> <http://schema.org/endDate> "2019-03-28T23:16:47Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/154> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/pulls/154> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/154"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/154> <http://example.com/ns#pullRequest> <https://api.github.com/repos/w3c/json-ld-syntax/pulls/154> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/154> <http://schema.org/description> "`\"@vocab\": \"http://sche…ma.org/\"`. Sometimes this means using `foaf`, others it means simply using \"http://schema.org/\" as the context, rather than `@vocab`.\n\nFor #144\n\n\n<!--\n    This comment and the below content is programatically generated.\n    You may add a comma-separated list of anchors you'd like a\n    direct link to below (e.g. #idl-serializers, #idl-sequence):\n\n    Don't remove this comment or modify anything below this line.\n    If you don't want a preview generated for this pull request,\n    just replace the whole of this comment's content by \"no preview\"\n    and remove what's below.\n-->\n***\n<a href=\"https://pr-preview.s3.amazonaws.com/w3c/json-ld-syntax/pull/154.html\" title=\"Last updated on Mar 28, 2019, 10:10 PM UTC (151f80c)\">Preview</a> | <a href=\"https://pr-preview.s3.amazonaws.com/w3c/json-ld-syntax/154/8c01dfd...151f80c.html\" title=\"Last updated on Mar 28, 2019, 10:10 PM UTC (151f80c)\">Diff</a>" .
<https://api.github.com/repos/w3c/json-ld-syntax> <http://example.com/ns#issue> <https://api.github.com/repos/w3c/json-ld-syntax/issues/153> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/153> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/153"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/153> <http://schema.org/identifier> "153"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/153> <http://schema.org/name> "Does @sealed consider order?" .
<https://api.github.com/users/rubensworks> <http://schema.org/accountId> "rubensworks" .
<https://api.github.com/users/rubensworks> <http://schema.org/image> "https://avatars1.githubusercontent.com/u/440384?v=4" .
<https://api.github.com/users/rubensworks> <http://schema.org/url> "https://github.com/rubensworks"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/rubensworks> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/153> <http://schema.org/creator> <https://api.github.com/users/rubensworks> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/propose%20closing> <http://schema.org/name> "propose closing" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/propose%20closing> <http://schema.org/color> "bf5315" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/propose%20closing> <http://schema.org/description> "" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/153> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/propose%20closing> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/153> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/153> <http://schema.org/startDate> "2019-03-28T09:00:46Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/153> <http://schema.org/endDate> "2019-03-29T17:17:22Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/153> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/153> <http://schema.org/description> "Due to the definition of `@sealed`, the following context will throw an error:\r\n\r\n```json\r\n{\r\n  \"@context\": [\r\n    {\r\n      \"@version\": 1.1,\r\n      \"Person\": \"http://schema.org/Person\",\r\n      \"knows\": \"http://schema.org/knows\",\r\n      \"name\": {\r\n        \"@id\": \"http://schema.org/name\",\r\n        \"@sealed\": true\r\n      }\r\n    },\r\n    {\r\n      \"name\": \"this_attempt_to_override_name_will_fail\"\r\n    }\r\n  ]\r\n}\r\n```\r\n\r\nAs far as I can see, the spec does not seem to mention what should happen if sealing is done within a context that extends an existing context. Concretely, should the following also error?\r\n\r\n```json\r\n{\r\n  \"@context\": [\r\n    {\r\n      \"name\": \"this_attempt_to_override_name_will_fail\"\r\n    },\r\n    {\r\n      \"@version\": 1.1,\r\n      \"Person\": \"http://schema.org/Person\",\r\n      \"knows\": \"http://schema.org/knows\",\r\n      \"name\": {\r\n        \"@id\": \"http://schema.org/name\",\r\n        \"@sealed\": true\r\n      }\r\n    }\r\n  ]\r\n}\r\n```\r\n\r\nTwo things are possible here:\r\n1. **No error**: The sealed scope only starts from the moment `@sealed` is used. This would allow modifications of term definitions up to this point, but not later on. (May be useful when combining multiple external contexts, and sealing afterwards)\r\n2. **Error**: The sealed scope propagates backwards from the moment `@sealed` is used. This may be useful for cases where context extensions need to be handled very strictly.\r\n\r\nI have a slight preference for option 1. But either way, I think this should be clarified in the spec." .
<https://api.github.com/repos/w3c/json-ld-syntax> <http://example.com/ns#issue> <https://api.github.com/repos/w3c/json-ld-syntax/issues/152> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/152> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/152"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/152> <http://schema.org/identifier> "152"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/152> <http://schema.org/name> "Better phrasing of object equality" .
<https://api.github.com/users/pchampin> <http://schema.org/accountId> "pchampin" .
<https://api.github.com/users/pchampin> <http://schema.org/image> "https://avatars1.githubusercontent.com/u/304612?v=4" .
<https://api.github.com/users/pchampin> <http://schema.org/url> "https://github.com/pchampin"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/pchampin> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/152> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/152> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/152> <http://schema.org/startDate> "2019-03-27T15:44:35Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/152> <http://schema.org/endDate> "2019-03-28T21:07:36Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/152> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/pulls/152> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/152"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/152> <http://example.com/ns#pullRequest> <https://api.github.com/repos/w3c/json-ld-syntax/pulls/152> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/152> <http://schema.org/description> "I think the current phrasing is actually inaccurate. It seemed to imply (at least to me, a non-native speaker) that *one* equal member was enough for the objects to be considered equal.\n\n\n<!--\n    This comment and the below content is programatically generated.\n    You may add a comma-separated list of anchors you'd like a\n    direct link to below (e.g. #idl-serializers, #idl-sequence):\n\n    Don't remove this comment or modify anything below this line.\n    If you don't want a preview generated for this pull request,\n    just replace the whole of this comment's content by \"no preview\"\n    and remove what's below.\n-->\n***\n<a href=\"https://pr-preview.s3.amazonaws.com/w3c/json-ld-syntax/pull/152.html\" title=\"Last updated on Mar 27, 2019, 4:54 PM UTC (36ece32)\">Preview</a> | <a href=\"https://pr-preview.s3.amazonaws.com/w3c/json-ld-syntax/152/1e85d7a...36ece32.html\" title=\"Last updated on Mar 27, 2019, 4:54 PM UTC (36ece32)\">Diff</a>" .
<https://api.github.com/repos/w3c/json-ld-syntax> <http://example.com/ns#issue> <https://api.github.com/repos/w3c/json-ld-syntax/issues/151> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/151> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/151"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/151> <http://schema.org/identifier> "151"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/151> <http://schema.org/name> "Using explicit @prefix declaration to create compact IRIs" .
<https://api.github.com/users/rubensworks> <http://schema.org/accountId> "rubensworks" .
<https://api.github.com/users/rubensworks> <http://schema.org/image> "https://avatars1.githubusercontent.com/u/440384?v=4" .
<https://api.github.com/users/rubensworks> <http://schema.org/url> "https://github.com/rubensworks"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/rubensworks> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/151> <http://schema.org/creator> <https://api.github.com/users/rubensworks> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/151> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/151> <http://schema.org/startDate> "2019-03-27T14:14:55Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/151> <http://schema.org/endDate> "2019-03-27T23:33:47Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/151> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/151> <http://schema.org/description> "This issue is regarding one of the new [examples](https://w3c.github.io/json-ld-syntax/#example-32-using-explicit-prefix-declaration-to-create-compact-iris) regarding term expansion where the term definition ends in a non-gen-delim character:\r\n\r\n```json\r\n{\r\n  \"@context\": {\r\n    \"compact-iris\": {\"@id\": \"http://example.com/compact-iris-\", \"@prefix\": true},\r\n    \"property\": \"http://example.com/property\"\r\n  },\r\n  \"property\": {\r\n    \"@id\": \"compact-iris:are-considered\",\r\n    \"property\": \"@prefix does not require a gen-delim\"\r\n  }\r\n}\r\n```\r\n\r\nIf I understand the JSON-LD 1.1 versioning mechanic correctly,\r\nthis should be tagged with `\"@version\": 1.1` to avoid that 1.0 processors handle this inconsistently.\r\n\r\nAs such, am I correct to assume that this example should be changed to the following?:\r\n\r\n```json\r\n{\r\n  \"@context\": {\r\n    \"@version\": 1.1,\r\n    \"compact-iris\": {\"@id\": \"http://example.com/compact-iris-\", \"@prefix\": true},\r\n    \"property\": \"http://example.com/property\"\r\n  },\r\n  \"property\": {\r\n    \"@id\": \"compact-iris:are-considered\",\r\n    \"property\": \"@prefix does not require a gen-delim\"\r\n  }\r\n}\r\n```\r\n\r\nIf so, I can send in a PR for this." .
<https://api.github.com/repos/w3c/json-ld-syntax> <http://example.com/ns#issue> <https://api.github.com/repos/w3c/json-ld-syntax/issues/150> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/150> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/150"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/150> <http://schema.org/identifier> "150"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/150> <http://schema.org/name> "Define JSON literal and the `rdf:JSON` datatype." .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/150> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/150> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/150> <http://schema.org/startDate> "2019-03-25T22:47:45Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/150> <http://schema.org/endDate> "2019-03-26T22:48:10Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/150> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/pulls/150> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/150"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/150> <http://example.com/ns#pullRequest> <https://api.github.com/repos/w3c/json-ld-syntax/pulls/150> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/150> <http://schema.org/description> "For #4.\n\n\n<!--\n    This comment and the below content is programatically generated.\n    You may add a comma-separated list of anchors you'd like a\n    direct link to below (e.g. #idl-serializers, #idl-sequence):\n\n    Don't remove this comment or modify anything below this line.\n    If you don't want a preview generated for this pull request,\n    just replace the whole of this comment's content by \"no preview\"\n    and remove what's below.\n-->\n***\n<a href=\"https://pr-preview.s3.amazonaws.com/w3c/json-ld-syntax/pull/150.html\" title=\"Last updated on Mar 26, 2019, 10:31 PM UTC (7688a73)\">Preview</a> | <a href=\"https://pr-preview.s3.amazonaws.com/w3c/json-ld-syntax/150/ab6be57...7688a73.html\" title=\"Last updated on Mar 26, 2019, 10:31 PM UTC (7688a73)\">Diff</a>" .
<https://api.github.com/repos/w3c/json-ld-syntax> <http://example.com/ns#issue> <https://api.github.com/repos/w3c/json-ld-syntax/issues/149> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/149> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/149"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/149> <http://schema.org/identifier> "149"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/149> <http://schema.org/name> "DocumentLoader should be more visible in the specs" .
<https://api.github.com/users/azaroth42> <http://schema.org/accountId> "azaroth42" .
<https://api.github.com/users/azaroth42> <http://schema.org/image> "https://avatars3.githubusercontent.com/u/871868?v=4" .
<https://api.github.com/users/azaroth42> <http://schema.org/url> "https://github.com/azaroth42"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/azaroth42> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/149> <http://schema.org/creator> <https://api.github.com/users/azaroth42> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/propose%20closing> <http://schema.org/name> "propose closing" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/propose%20closing> <http://schema.org/color> "bf5315" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/propose%20closing> <http://schema.org/description> "" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/149> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/propose%20closing> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:editorial> <http://schema.org/name> "spec:editorial" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:editorial> <http://schema.org/color> "58820a" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:editorial> <http://schema.org/description> "" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/149> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:editorial> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/149> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#OpenIssue> .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/149> <http://example.com/ns#assignee> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/149> <http://schema.org/startDate> "2019-03-22T18:43:53Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/149> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/149> <http://schema.org/description> "\r\nMany issues around resolution of contexts come down to a lack of understanding about the use of the documentLoader.  These questions might not come up as often if documentloader was more visible in the specifications, including in the syntax document even though it's an API feature.\r\n\r\nThe issue is editorial to try to explain why network/resolution related issues are the concern of the document loader. Related to #148, but not necessarily to security directly." .
<https://api.github.com/repos/w3c/json-ld-syntax> <http://example.com/ns#issue> <https://api.github.com/repos/w3c/json-ld-syntax/issues/148> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/148> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/148"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/148> <http://schema.org/identifier> "148"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/148> <http://schema.org/name> "Add security considerations section for URI schemes" .
<https://api.github.com/users/azaroth42> <http://schema.org/accountId> "azaroth42" .
<https://api.github.com/users/azaroth42> <http://schema.org/image> "https://avatars3.githubusercontent.com/u/871868?v=4" .
<https://api.github.com/users/azaroth42> <http://schema.org/url> "https://github.com/azaroth42"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/azaroth42> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/148> <http://schema.org/creator> <https://api.github.com/users/azaroth42> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/propose%20closing> <http://schema.org/name> "propose closing" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/propose%20closing> <http://schema.org/color> "bf5315" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/propose%20closing> <http://schema.org/description> "" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/148> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/propose%20closing> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/security-tracker> <http://schema.org/name> "security-tracker" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/security-tracker> <http://schema.org/color> "ffff00" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/security-tracker> <http://schema.org/description> "Group bringing to attention of security, or tracked by the security Group but not needing response." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/148> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/security-tracker> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:editorial> <http://schema.org/name> "spec:editorial" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:editorial> <http://schema.org/color> "58820a" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:editorial> <http://schema.org/description> "" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/148> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:editorial> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/148> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#OpenIssue> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/148> <http://schema.org/startDate> "2019-03-22T18:37:49Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/148> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/148> <http://schema.org/description> "\r\nAs discussed at TPAC, there are no normative requirements about the URI schemes that are permitted in JSON-LD.  This means that `javascript:`, `tel:` and `data:` URIs are allowed. Combined with the string concatenation (see #147) it is very easy to construct malicious IRIs in several situations in JSON-LD.\r\n\r\nIt is the responsibility of the document loader to determine whether to try to resolve or process, and if so how, any given IRI. This needs to be called out in a security considerations section.\r\n\r\nOnce complete, the content should be flagged for security horizontal review." .
<https://api.github.com/repos/w3c/json-ld-syntax> <http://example.com/ns#issue> <https://api.github.com/repos/w3c/json-ld-syntax/issues/147> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/147> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/147"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/147> <http://schema.org/identifier> "147"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/147> <http://schema.org/name> "Add security consideration about IRI concatenation" .
<https://api.github.com/users/azaroth42> <http://schema.org/accountId> "azaroth42" .
<https://api.github.com/users/azaroth42> <http://schema.org/image> "https://avatars3.githubusercontent.com/u/871868?v=4" .
<https://api.github.com/users/azaroth42> <http://schema.org/url> "https://github.com/azaroth42"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/azaroth42> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/147> <http://schema.org/creator> <https://api.github.com/users/azaroth42> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/propose%20closing> <http://schema.org/name> "propose closing" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/propose%20closing> <http://schema.org/color> "bf5315" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/propose%20closing> <http://schema.org/description> "" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/147> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/propose%20closing> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/security-tracker> <http://schema.org/name> "security-tracker" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/security-tracker> <http://schema.org/color> "ffff00" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/security-tracker> <http://schema.org/description> "Group bringing to attention of security, or tracked by the security Group but not needing response." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/147> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/security-tracker> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:editorial> <http://schema.org/name> "spec:editorial" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:editorial> <http://schema.org/color> "58820a" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:editorial> <http://schema.org/description> "" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/147> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:editorial> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/147> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#OpenIssue> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/147> <http://schema.org/startDate> "2019-03-22T18:32:59Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/147> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/147> <http://schema.org/description> "\r\nAs discussed at TPAC, we should warn about the dangers of constructing IRIs by simple string concatenation without any validation of the result. \r\n\r\nFor example, when string concatenation is used, then \r\n\r\nif you set `@vocab` to `../#` and the base is `https://example.org/ns` then you get `https://example.org/ns../#` not what might be expected via the relative IRI resolution rules.\r\nThus, it is possible to construct malicious IRIs without the usual backstop of the relative resolution rules.\r\n\r\nThis issue can be closed when there is a security considerations section that describes this, and every time there is string concatenation used, it references that section.\r\n \r\n" .
<https://api.github.com/repos/w3c/json-ld-syntax> <http://example.com/ns#issue> <https://api.github.com/repos/w3c/json-ld-syntax/issues/146> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/146> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/146"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/146> <http://schema.org/identifier> "146"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/146> <http://schema.org/name> "typo (?) in section 9 intro - https://w3c.github.io/json-ld-syntax/#json-ld-grammar" .
<https://api.github.com/users/rdewaele> <http://schema.org/accountId> "rdewaele" .
<https://api.github.com/users/rdewaele> <http://schema.org/image> "https://avatars2.githubusercontent.com/u/1044505?v=4" .
<https://api.github.com/users/rdewaele> <http://schema.org/url> "https://github.com/rdewaele"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/rdewaele> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/146> <http://schema.org/creator> <https://api.github.com/users/rdewaele> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/146> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/146> <http://schema.org/startDate> "2019-03-20T05:53:52Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/146> <http://schema.org/endDate> "2019-03-21T10:05:58Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/146> <http://example.com/ns#authorAssociation> "NONE" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/146> <http://schema.org/description> "https://w3c.github.io/json-ld-syntax/#json-ld-grammar\r\n\r\nThe subject sentence currently states:\r\n> A JSON-LD document MUST be a single node object, a dictionary consisting of only the members @context and/or @graph, or an array or zero or more node objects.\r\n\r\nI believe what is meant is (strikethrough / bold):\r\n> A JSON-LD document MUST be a single node object, a dictionary consisting of only the members @context and/or @graph, or an array ~or~ **of** zero or more node objects.\r\n\r\nIf my interpretation / suggestion is incorrect, I would like to propose adding an Oxford comma. However, this would still confuse me as that would not seem to imply valid JSON syntax." .
<https://api.github.com/repos/w3c/json-ld-syntax> <http://example.com/ns#issue> <https://api.github.com/repos/w3c/json-ld-syntax/issues/145> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/145> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/145"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/145> <http://schema.org/identifier> "145"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/145> <http://schema.org/name> "describing property-based indexing as a variant of data indexing" .
<https://api.github.com/users/pchampin> <http://schema.org/accountId> "pchampin" .
<https://api.github.com/users/pchampin> <http://schema.org/image> "https://avatars1.githubusercontent.com/u/304612?v=4" .
<https://api.github.com/users/pchampin> <http://schema.org/url> "https://github.com/pchampin"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/pchampin> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/145> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/145> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/145> <http://schema.org/startDate> "2019-03-19T17:54:17Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/145> <http://schema.org/endDate> "2019-04-17T18:47:01Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/145> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/pulls/145> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/145"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/145> <http://example.com/ns#pullRequest> <https://api.github.com/repos/w3c/json-ld-syntax/pulls/145> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/145> <http://schema.org/description> "\n\n\n<!--\n    This comment and the below content is programatically generated.\n    You may add a comma-separated list of anchors you'd like a\n    direct link to below (e.g. #idl-serializers, #idl-sequence):\n\n    Don't remove this comment or modify anything below this line.\n    If you don't want a preview generated for this pull request,\n    just replace the whole of this comment's content by \"no preview\"\n    and remove what's below.\n-->\n***\n<a href=\"https://pr-preview.s3.amazonaws.com/w3c/json-ld-syntax/pull/145.html\" title=\"Last updated on Mar 26, 2019, 10:55 PM UTC (f2dc97d)\">Preview</a> | <a href=\"https://pr-preview.s3.amazonaws.com/w3c/json-ld-syntax/145/dbb3103...f2dc97d.html\" title=\"Last updated on Mar 26, 2019, 10:55 PM UTC (f2dc97d)\">Diff</a>" .
<https://api.github.com/repos/w3c/json-ld-syntax> <http://example.com/ns#issue> <https://api.github.com/repos/w3c/json-ld-syntax/issues/144> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/144> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/144"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/144> <http://schema.org/identifier> "144"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/144> <http://schema.org/name> "Don't use `@vocab` with `http://schema.org/`" .
<https://api.github.com/users/BigBlueHat> <http://schema.org/accountId> "BigBlueHat" .
<https://api.github.com/users/BigBlueHat> <http://schema.org/image> "https://avatars1.githubusercontent.com/u/43209?v=4" .
<https://api.github.com/users/BigBlueHat> <http://schema.org/url> "https://github.com/BigBlueHat"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/BigBlueHat> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/144> <http://schema.org/creator> <https://api.github.com/users/BigBlueHat> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/propose%20closing> <http://schema.org/name> "propose closing" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/propose%20closing> <http://schema.org/color> "bf5315" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/propose%20closing> <http://schema.org/description> "" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/144> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/propose%20closing> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/144> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/144> <http://schema.org/startDate> "2019-03-12T13:18:46Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/144> <http://schema.org/endDate> "2019-03-28T23:17:34Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/144> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/144> <http://schema.org/description> "This is used several places throughout the document--such as https://w3c.github.io/json-ld-syntax/#default-vocabulary\r\n\r\nSchema.org has a context file, so using `@vocab` is actually a significant step backwards. It also means that developers copying/pasting or learning from the spec will pick-up a bad habit that will result in either incorrect data or just under-powered JSON-LD expressions.\r\n\r\nThe related danger is that developers can get the idea that one uses `@vocab` when extending any context--since `\"@context\": \"http://schema.org/\"` is what Schema.org examples use, but this spec shows examples such as https://w3c.github.io/json-ld-syntax/#example-24-using-the-null-keyword-to-ignore-data which move `http://schema.org/` to `@vocab` and then extend/alter the vocabulary. The result in this particular case may work as expected, but it sets a bad precedence.\r\n\r\nIf there's some other scenario we can use instead to demo the default vocabulary, that would be great.\r\n\r\nI'll be working to think of one, and am happy to do the edits when we find a suitable replacement." .
<https://api.github.com/repos/w3c/json-ld-syntax> <http://example.com/ns#issue> <https://api.github.com/repos/w3c/json-ld-syntax/issues/143> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/143> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/143"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/143> <http://schema.org/identifier> "143"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/143> <http://schema.org/name> "Fix typo." .
<https://api.github.com/users/davidlehn> <http://schema.org/accountId> "davidlehn" .
<https://api.github.com/users/davidlehn> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/109587?v=4" .
<https://api.github.com/users/davidlehn> <http://schema.org/url> "https://github.com/davidlehn"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/davidlehn> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/143> <http://schema.org/creator> <https://api.github.com/users/davidlehn> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/143> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/143> <http://schema.org/startDate> "2019-03-01T02:21:58Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/143> <http://schema.org/endDate> "2019-03-01T02:34:17Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/143> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/pulls/143> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/143"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/143> <http://example.com/ns#pullRequest> <https://api.github.com/repos/w3c/json-ld-syntax/pulls/143> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/143> <http://schema.org/description> "\n\n\n<!--\n    This comment and the below content is programatically generated.\n    You may add a comma-separated list of anchors you'd like a\n    direct link to below (e.g. #idl-serializers, #idl-sequence):\n\n    Don't remove this comment or modify anything below this line.\n    If you don't want a preview generated for this pull request,\n    just replace the whole of this comment's content by \"no preview\"\n    and remove what's below.\n-->\n***\n<a href=\"https://pr-preview.s3.amazonaws.com/davidlehn/json-ld-syntax/pull/143.html\" title=\"Last updated on Mar 1, 2019, 2:22 AM UTC (1913df7)\">Preview</a> | <a href=\"https://pr-preview.s3.amazonaws.com/w3c/json-ld-syntax/143/9b80a30...davidlehn:1913df7.html\" title=\"Last updated on Mar 1, 2019, 2:22 AM UTC (1913df7)\">Diff</a>" .
<https://api.github.com/repos/w3c/json-ld-syntax> <http://example.com/ns#issue> <https://api.github.com/repos/w3c/json-ld-syntax/issues/142> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/142> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/142"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/142> <http://schema.org/identifier> "142"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/142> <http://schema.org/name> "Change from \"sealed\" to \"protected\"." .
<https://api.github.com/users/davidlehn> <http://schema.org/accountId> "davidlehn" .
<https://api.github.com/users/davidlehn> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/109587?v=4" .
<https://api.github.com/users/davidlehn> <http://schema.org/url> "https://github.com/davidlehn"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/davidlehn> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/142> <http://schema.org/creator> <https://api.github.com/users/davidlehn> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/142> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/142> <http://schema.org/startDate> "2019-03-01T02:17:25Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/142> <http://schema.org/endDate> "2019-03-28T22:31:34Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/142> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/pulls/142> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/142"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/142> <http://example.com/ns#pullRequest> <https://api.github.com/repos/w3c/json-ld-syntax/pulls/142> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/142> <http://schema.org/description> "If it's decided to change the naming from `@sealed` to `@protected`, here's a patch.\n\n\n<!--\n    This comment and the below content is programatically generated.\n    You may add a comma-separated list of anchors you'd like a\n    direct link to below (e.g. #idl-serializers, #idl-sequence):\n\n    Don't remove this comment or modify anything below this line.\n    If you don't want a preview generated for this pull request,\n    just replace the whole of this comment's content by \"no preview\"\n    and remove what's below.\n-->\n***\n<a href=\"https://pr-preview.s3.amazonaws.com/davidlehn/json-ld-syntax/pull/142.html\" title=\"Last updated on Mar 1, 2019, 2:17 AM UTC (60cd846)\">Preview</a> | <a href=\"https://pr-preview.s3.amazonaws.com/w3c/json-ld-syntax/142/9b80a30...davidlehn:60cd846.html\" title=\"Last updated on Mar 1, 2019, 2:17 AM UTC (60cd846)\">Diff</a>" .
<https://api.github.com/repos/w3c/json-ld-syntax> <http://example.com/ns#issue> <https://api.github.com/repos/w3c/json-ld-syntax/issues/141> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/141> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/141"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/141> <http://schema.org/identifier> "141"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/141> <http://schema.org/name> "can jsonld express multiple top-level graphs?" .
<https://api.github.com/users/VladimirAlexiev> <http://schema.org/accountId> "VladimirAlexiev" .
<https://api.github.com/users/VladimirAlexiev> <http://schema.org/image> "https://avatars3.githubusercontent.com/u/536250?v=4" .
<https://api.github.com/users/VladimirAlexiev> <http://schema.org/url> "https://github.com/VladimirAlexiev"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/VladimirAlexiev> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/141> <http://schema.org/creator> <https://api.github.com/users/VladimirAlexiev> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/141> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/141> <http://schema.org/startDate> "2019-02-26T10:41:36Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/141> <http://schema.org/endDate> "2019-02-26T21:21:44Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/141> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/141> <http://schema.org/description> "https://w3c.github.io/json-ld-syntax/#example-90-identifying-and-making-statements-about-a-graph\r\n\"When a JSON-LD document's top-level structure is an dictionary that contains no other keys than `@graph` and optionally `@context`, `@graph` is considered to express the otherwise implicit default graph.\"\r\n\r\nIt would seem to the uninitiated that JSONLD cannot express multiple named graphs at the top level in the same payload \r\n- later examples produce multiple *anonymous* graphs\r\n- https://w3c.github.io/json-ld-syntax/#example-96-referencing-named-graphs-using-an-id-map shows multiple named graphs, but they are attached as objects of a particular property:\r\n\r\n```ttl\r\n#<http://example.org/foaf-graph>\r\n#  <http://example.org/graphMap>\r\n#    <http://manu.sporny.org/about#manu>,\r\n#    <http://greggkellogg.net/foaf#me>;\r\n#  prov:generatedAtTime \"2012-04-09\"^^xsd:date .\r\n\r\n<http://greggkellogg.net/foaf#me> {\r\n  <http://greggkellogg.net/foaf#me> a foaf:Person;\r\n     foaf:knows <http://manu.sporny.org/about#manu>;\r\n     foaf:name \"Gregg Kellogg\" .\r\n}\r\n\r\n<http://manu.sporny.org/about#manu> {\r\n  <http://manu.sporny.org/about#manu> a foaf:Person;\r\n     foaf:knows <http://greggkellogg.net/foaf#me>;\r\n     foaf:name \"Manu Sporny\" .\r\n}\r\n```\r\n\r\nCan I express the turtle above, but without the commented-out part?\r\n" .
<https://api.github.com/repos/w3c/json-ld-syntax> <http://example.com/ns#issue> <https://api.github.com/repos/w3c/json-ld-syntax/issues/140> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/140> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/140"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/140> <http://schema.org/identifier> "140"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/140> <http://schema.org/name> "what's the use of \"@container\": [\"@id\", \"@set\"]" .
<https://api.github.com/users/VladimirAlexiev> <http://schema.org/accountId> "VladimirAlexiev" .
<https://api.github.com/users/VladimirAlexiev> <http://schema.org/image> "https://avatars3.githubusercontent.com/u/536250?v=4" .
<https://api.github.com/users/VladimirAlexiev> <http://schema.org/url> "https://github.com/VladimirAlexiev"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/VladimirAlexiev> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/140> <http://schema.org/creator> <https://api.github.com/users/VladimirAlexiev> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/propose%20closing> <http://schema.org/name> "propose closing" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/propose%20closing> <http://schema.org/color> "bf5315" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/propose%20closing> <http://schema.org/description> "" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/140> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/propose%20closing> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:editorial> <http://schema.org/name> "spec:editorial" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:editorial> <http://schema.org/color> "58820a" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:editorial> <http://schema.org/description> "" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/140> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:editorial> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/140> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/140> <http://schema.org/startDate> "2019-02-26T10:26:53Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/140> <http://schema.org/endDate> "2019-03-29T17:17:48Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/140> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/140> <http://schema.org/description> "https://w3c.github.io/json-ld-syntax/#example-82-indexing-data-in-json-ld-by-node-identifiers-with-set-representation\r\nMaybe I'm missing something but what use is `\"@container\": [\"@id\", \"@set\"]`?\r\nI think that with `@id` indexing, every `@id` gets one JSON object.\r\nSo `@set` will turn them all into singleton arrays: what is the use of that?" .
<https://api.github.com/repos/w3c/json-ld-syntax> <http://example.com/ns#issue> <https://api.github.com/repos/w3c/json-ld-syntax/issues/139> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/139> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/139"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/139> <http://schema.org/identifier> "139"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/139> <http://schema.org/name> "small typo in Indexed Values" .
<https://api.github.com/users/VladimirAlexiev> <http://schema.org/accountId> "VladimirAlexiev" .
<https://api.github.com/users/VladimirAlexiev> <http://schema.org/image> "https://avatars3.githubusercontent.com/u/536250?v=4" .
<https://api.github.com/users/VladimirAlexiev> <http://schema.org/url> "https://github.com/VladimirAlexiev"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/VladimirAlexiev> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/139> <http://schema.org/creator> <https://api.github.com/users/VladimirAlexiev> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:editorial> <http://schema.org/name> "spec:editorial" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:editorial> <http://schema.org/color> "58820a" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:editorial> <http://schema.org/description> "" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/139> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:editorial> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/139> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/139> <http://example.com/ns#assignee> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/139> <http://schema.org/startDate> "2019-02-26T10:20:37Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/139> <http://schema.org/endDate> "2019-03-01T22:34:34Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/139> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/139> <http://schema.org/description> "https://w3c.github.io/json-ld-syntax/#x4-6-indexed-values:\r\n\"As described in section § 4.6.1 Data Indexing, data indexing allows an arbitrary **WHAT** to reference a node or value\"" .
<https://api.github.com/repos/w3c/json-ld-syntax> <http://example.com/ns#issue> <https://api.github.com/repos/w3c/json-ld-syntax/issues/138> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/138> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/138"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/138> <http://schema.org/identifier> "138"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/138> <http://schema.org/name> "json-ld 1.1: @vocab gets ignored in nested @context with @id-typed values" .
<https://api.github.com/users/lukasheinrich> <http://schema.org/accountId> "lukasheinrich" .
<https://api.github.com/users/lukasheinrich> <http://schema.org/image> "https://avatars2.githubusercontent.com/u/2318083?v=4" .
<https://api.github.com/users/lukasheinrich> <http://schema.org/url> "https://github.com/lukasheinrich"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/lukasheinrich> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/138> <http://schema.org/creator> <https://api.github.com/users/lukasheinrich> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/138> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/138> <http://schema.org/startDate> "2019-02-23T18:54:08Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/138> <http://schema.org/endDate> "2019-02-25T02:06:46Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/138> <http://example.com/ns#authorAssociation> "NONE" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/138> <http://schema.org/description> "(originally opened in https://github.com/json-ld/json-ld.org/issues/689 but realized it was the wrong repo)\r\n\r\non the dev playground, specifying a nested context for the expansion of a object of type \"@id\" correctly expands a namespace defined in the nested context\r\n\r\n```\r\n{\r\n  \"@context\": {\r\n    \"@vocab\": \"http://myvobab/\",\r\n    \"@version\": 1.1,\r\n    \"pred\": {\r\n      \"@id\": \"http://a/predicate\",\r\n      \"@type\": \"@id\",\r\n      \"@context\": {\r\n        \"mv\": \"http://myvobab/\"\r\n      }\r\n    }\r\n  },\r\n  \"pred\": \"mv:identifier\",\r\n  \"name\": \"identifier\"\r\n}\r\n```\r\n\r\nexpands to \r\n\r\n```\r\n[\r\n  {\r\n    \"http://myvobab/name\": [\r\n      {\r\n        \"@value\": \"identifier\"\r\n      }\r\n    ],\r\n    \"http://a/predicate\": [\r\n      {\r\n        \"@id\": \"http://myvobab/identifier\"\r\n      }\r\n    ]\r\n  }\r\n]\r\n```\r\n\r\nbut when using `@vocab` it does not work:\r\n\r\n```\r\n{\r\n  \"@context\": {\r\n    \"@vocab\": \"http://myvobab/\",\r\n    \"@version\": 1.1,\r\n    \"pred\": {\r\n      \"@id\": \"http://a/predicate\",\r\n      \"@type\": \"@id\",\r\n      \"@context\": {\r\n        \"@vocab\": \"http://myvobab/\"\r\n      }\r\n    }\r\n  },\r\n  \"pred\": \"identifier\",\r\n  \"name\": \"identifier\"\r\n}\r\n```\r\n\r\nexpands to \r\n\r\n```\r\n[\r\n  {\r\n    \"http://myvobab/name\": [\r\n      {\r\n        \"@value\": \"identifier\"\r\n      }\r\n    ],\r\n    \"http://a/predicate\": [\r\n      {\r\n        \"@id\": \"https://json-ld.org/playground-dev/identifier\"\r\n      }\r\n    ]\r\n  }\r\n]\r\n```\r\n\r\nis this expected behavior? I would have expected both documents to expand in the same manner\r\n\r\n" .
<https://api.github.com/repos/w3c/json-ld-syntax> <http://example.com/ns#issue> <https://api.github.com/repos/w3c/json-ld-syntax/issues/137> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/137> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/137"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/137> <http://schema.org/identifier> "137"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/137> <http://schema.org/name> "Rename `@sealed` to `@protected`" .
<https://api.github.com/users/dlongley> <http://schema.org/accountId> "dlongley" .
<https://api.github.com/users/dlongley> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/168137?v=4" .
<https://api.github.com/users/dlongley> <http://schema.org/url> "https://github.com/dlongley"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/dlongley> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/137> <http://schema.org/creator> <https://api.github.com/users/dlongley> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/propose%20closing> <http://schema.org/name> "propose closing" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/propose%20closing> <http://schema.org/color> "bf5315" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/propose%20closing> <http://schema.org/description> "" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/137> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/propose%20closing> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:editorial> <http://schema.org/name> "spec:editorial" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:editorial> <http://schema.org/color> "58820a" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:editorial> <http://schema.org/description> "" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/137> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:editorial> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:enhancement> <http://schema.org/name> "spec:enhancement" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:enhancement> <http://schema.org/color> "c11537" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:enhancement> <http://schema.org/description> "" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/137> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:enhancement> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/137> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/137> <http://schema.org/startDate> "2019-02-21T23:07:24Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/137> <http://schema.org/endDate> "2019-03-28T23:14:54Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/137> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/137> <http://schema.org/description> "I recommend we rename `@sealed` to `@protected` because it seems to better match the intent of the feature and the notion that terms may be protected -- but this protection can be removed under circumstances that allow it to be safely removed.\r\n\r\nThe purpose of the `@sealed`/`@protected` feature is to protect JSON-only developers who want to read a spec and then write applications that safely consume JSON-LD data by applying validation rules only, without the need for JSON-LD processing. In order to give this sort of assurance, `@protected` terms can be used. These protections are not necessary for data that is nested under *new terms* that are not in the specification -- as these would be disallowed by validation or ignored (not traversed) by such applications. Therefore, the protections can only be removed by creating a new term definition with a scoped `@context` that clears the protected terms and is used as a property to extend the JSON tree.\r\n\r\nRelated to #136." .
<https://api.github.com/repos/w3c/json-ld-syntax> <http://example.com/ns#issue> <https://api.github.com/repos/w3c/json-ld-syntax/issues/136> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/136> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/136"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/136> <http://schema.org/identifier> "136"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/136> <http://schema.org/name> "Additional restriction to `@sealed` term clearing" .
<https://api.github.com/users/dlongley> <http://schema.org/accountId> "dlongley" .
<https://api.github.com/users/dlongley> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/168137?v=4" .
<https://api.github.com/users/dlongley> <http://schema.org/url> "https://github.com/dlongley"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/dlongley> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/136> <http://schema.org/creator> <https://api.github.com/users/dlongley> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:editorial> <http://schema.org/name> "spec:editorial" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:editorial> <http://schema.org/color> "58820a" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:editorial> <http://schema.org/description> "" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/136> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:editorial> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:enhancement> <http://schema.org/name> "spec:enhancement" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:enhancement> <http://schema.org/color> "c11537" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:enhancement> <http://schema.org/description> "" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/136> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:enhancement> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/136> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/136> <http://schema.org/startDate> "2019-02-21T23:00:46Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/136> <http://schema.org/endDate> "2019-04-19T21:20:17Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/136> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/136> <http://schema.org/description> "We've completed a preliminary implementation of `@sealed` terms here:\r\n\r\nhttps://github.com/digitalbazaar/jsonld.js/pull/289\r\n\r\nOur implementation:\r\n\r\n* Allows terms to be sealed using `\"@sealed\": true` in a term definition (or not sealed with `\"@sealed\": false`)\r\n* Allows setting the default `\"@sealed\"` for all terms in an `@context` via `\"@sealed\": true` at the top level\r\n* Does not affect existing term clearing rules when there are no `@sealed` terms\r\n* **Allows clearing `@sealed` terms ONLY via a new property term definition with a scoped `@context` (note: and the new term does not need to be sealed)**\r\n\r\nNote that the last item is a slight tweak (additional restriction) on what is in the spec. We believe this approach better matches the use cases and expectations of the target audience for JSON-only application developers. The high-level idea is that a `@sealed` term is assured to maintain its meaning unless cleared by a new term (with a scoped context) that creates a new branch in the JSON tree.\r\n\r\nThis approach:\r\n\r\n* Provides sufficient assurance for the meaning of `@sealed` terms without a need for JSON-LD processing: a JSON-only dev can read a spec and write **safe** code that traverses JSON-LD data via `@sealed` terms ... without a need for JSON-LD processing, instead using only validation rules (e.g. json-schema)\r\n* Allows extensions to the JSON tree to occur **safely** in an idiomatic way where `@sealed` terms can only be cleared under new branches in the JSON tree (matches common JSON developer intuitions/expectations)\r\n* Very closely mirrors what @pchampin articulated so well a while back but has the added benefit of being simpler to implement: there is no need to track the `@context` from whence `@sealed` terms came\r\n\r\nWe'd like to see the spec updated to restrict clearing `@sealed` terms in the way articulated here and implemented in the above link. This approach seems to fully address the original need for the feature and has a simple implementation." .
<https://api.github.com/repos/w3c/json-ld-syntax> <http://example.com/ns#issue> <https://api.github.com/repos/w3c/json-ld-syntax/issues/135> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/135> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/135"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/135> <http://schema.org/identifier> "135"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/135> <http://schema.org/name> "Add grammar pieces for framing." .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/135> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/135> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/135> <http://schema.org/startDate> "2019-02-21T00:33:57Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/135> <http://schema.org/endDate> "2019-02-26T22:03:50Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/135> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/pulls/135> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/135"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/135> <http://example.com/ns#pullRequest> <https://api.github.com/repos/w3c/json-ld-syntax/pulls/135> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/135> <http://schema.org/description> "Relates to w3c/json-ld-framing#28.\n\n\n<!--\n    This comment and the below content is programatically generated.\n    You may add a comma-separated list of anchors you'd like a\n    direct link to below (e.g. #idl-serializers, #idl-sequence):\n\n    Don't remove this comment or modify anything below this line.\n    If you don't want a preview generated for this pull request,\n    just replace the whole of this comment's content by \"no preview\"\n    and remove what's below.\n-->\n***\n<a href=\"https://pr-preview.s3.amazonaws.com/w3c/json-ld-syntax/pull/135.html\" title=\"Last updated on Feb 26, 2019, 9:34 PM UTC (e20c54b)\">Preview</a> | <a href=\"https://pr-preview.s3.amazonaws.com/w3c/json-ld-syntax/135/1e8d60f...e20c54b.html\" title=\"Last updated on Feb 26, 2019, 9:34 PM UTC (e20c54b)\">Diff</a>" .
<https://api.github.com/repos/w3c/json-ld-syntax> <http://example.com/ns#issue> <https://api.github.com/repos/w3c/json-ld-syntax/issues/134> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/134> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/134"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/134> <http://schema.org/identifier> "134"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/134> <http://schema.org/name> "Does HTML's `<base>` effect `@context` IRI resolution?" .
<https://api.github.com/users/BigBlueHat> <http://schema.org/accountId> "BigBlueHat" .
<https://api.github.com/users/BigBlueHat> <http://schema.org/image> "https://avatars1.githubusercontent.com/u/43209?v=4" .
<https://api.github.com/users/BigBlueHat> <http://schema.org/url> "https://github.com/BigBlueHat"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/BigBlueHat> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/134> <http://schema.org/creator> <https://api.github.com/users/BigBlueHat> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:editorial> <http://schema.org/name> "spec:editorial" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:editorial> <http://schema.org/color> "58820a" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:editorial> <http://schema.org/description> "" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/134> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:editorial> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/134> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#OpenIssue> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/134> <http://schema.org/startDate> "2019-02-20T18:40:11Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/134> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/134> <http://schema.org/description> "Our current draft explains how HTML's `<base>` tag relates to the `@base` value in JSON-LD--see [Section 7.1](https://w3c.github.io/json-ld-syntax/#inheriting-base-iri-from-html-s-base-element).\r\n\r\nHowever, we haven't yet discussed how `<base>` might effect `@context` IRI resolution. For example:\r\n\r\n```html\r\n<base href=\"http://cdn.example.com/\">\r\n<script type=\"application/ld+json\">\r\n{\r\n  \"@context\": \"context-file.jsonld\",\r\n  \"@id\": \"demo-page\",\r\n  \"@type\": \"WebPage\",\r\n  \"name\": \"Demo\"\r\n}\r\n</script>\r\n```\r\n\r\nCurrently we only specify how\r\n - `@id` would be expanded to `http://cdn.example.com/demo-page\"\r\n - `@type` (if `WebPage` was *not* defined in the context) would expand to `http://cdn.example.com/WebPage`\r\n\r\nWe do not yet explain how `context-file.jsonld` is resolved.\r\n\r\nIf the processing were done \"in page\" by a [jsonld.js](https://github.com/digitalbazaar/jsonld.js/), then the base URL would effect the resolution of `context-file.jsonld`. However, it's currently not stated how that same HTML processed via Python, PHP, Go, etc, would \"absolutize\" that context URL.\r\n\r\nOptions and scenarios include:\r\n - using the `<base>` tag\r\n - using the document URL (if still known)\r\n - using a filesystem path (if processing of disk with no URLs?)" .
<https://api.github.com/repos/w3c/json-ld-syntax> <http://example.com/ns#issue> <https://api.github.com/repos/w3c/json-ld-syntax/issues/133> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/133> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/133"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/133> <http://schema.org/identifier> "133"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/133> <http://schema.org/name> "Update implicit named graph example." .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/133> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/133> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/133> <http://schema.org/startDate> "2019-02-20T00:02:08Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/133> <http://schema.org/endDate> "2019-02-22T02:13:03Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/133> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/pulls/133> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/133"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/133> <http://example.com/ns#pullRequest> <https://api.github.com/repos/w3c/json-ld-syntax/pulls/133> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/133> <http://schema.org/description> "Note, this will need to be updated when vc-data-model changes and their context is updated. Liberties were taken.\n\nFixes #122.\n\n\n<!--\n    This comment and the below content is programatically generated.\n    You may add a comma-separated list of anchors you'd like a\n    direct link to below (e.g. #idl-serializers, #idl-sequence):\n\n    Don't remove this comment or modify anything below this line.\n    If you don't want a preview generated for this pull request,\n    just replace the whole of this comment's content by \"no preview\"\n    and remove what's below.\n-->\n***\n<a href=\"https://pr-preview.s3.amazonaws.com/w3c/json-ld-syntax/pull/133.html\" title=\"Last updated on Feb 22, 2019, 12:15 AM UTC (f9ef6c9)\">Preview</a> | <a href=\"https://pr-preview.s3.amazonaws.com/w3c/json-ld-syntax/133/f08ced8...f9ef6c9.html\" title=\"Last updated on Feb 22, 2019, 12:15 AM UTC (f9ef6c9)\">Diff</a>" .
<https://api.github.com/repos/w3c/json-ld-syntax> <http://example.com/ns#issue> <https://api.github.com/repos/w3c/json-ld-syntax/issues/132> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/132> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/132"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/132> <http://schema.org/identifier> "132"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/132> <http://schema.org/name> "Add a bit more explanation on `@version`." .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/132> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/132> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/132> <http://schema.org/startDate> "2019-02-19T22:54:20Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/132> <http://schema.org/endDate> "2019-02-20T05:54:35Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/132> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/pulls/132> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/132"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/132> <http://example.com/ns#pullRequest> <https://api.github.com/repos/w3c/json-ld-syntax/pulls/132> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/132> <http://schema.org/description> "Fixes #85.\n\ncc/ @bertvannuffelen\n\n\n<!--\n    This comment and the below content is programatically generated.\n    You may add a comma-separated list of anchors you'd like a\n    direct link to below (e.g. #idl-serializers, #idl-sequence):\n\n    Don't remove this comment or modify anything below this line.\n    If you don't want a preview generated for this pull request,\n    just replace the whole of this comment's content by \"no preview\"\n    and remove what's below.\n-->\n***\n<a href=\"https://pr-preview.s3.amazonaws.com/w3c/json-ld-syntax/pull/132.html\" title=\"Last updated on Feb 19, 2019, 10:54 PM UTC (da85f57)\">Preview</a> | <a href=\"https://pr-preview.s3.amazonaws.com/w3c/json-ld-syntax/132/f08ced8...da85f57.html\" title=\"Last updated on Feb 19, 2019, 10:54 PM UTC (da85f57)\">Diff</a>" .
<https://api.github.com/repos/w3c/json-ld-syntax> <http://example.com/ns#issue> <https://api.github.com/repos/w3c/json-ld-syntax/issues/131> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/131> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/131"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/131> <http://schema.org/identifier> "131"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/131> <http://schema.org/name> "Expand compaction section" .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/131> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/131> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/131> <http://schema.org/startDate> "2019-02-19T00:12:47Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/131> <http://schema.org/endDate> "2019-02-21T23:14:24Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/131> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/pulls/131> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/131"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/131> <http://example.com/ns#pullRequest> <https://api.github.com/repos/w3c/json-ld-syntax/pulls/131> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/131> <http://schema.org/description> "…different term definitions on compaction. This includes describing `@type: @none`.\n\nFor w3c/json-ld-api#33.\n\n\n<!--\n    This comment and the below content is programatically generated.\n    You may add a comma-separated list of anchors you'd like a\n    direct link to below (e.g. #idl-serializers, #idl-sequence):\n\n    Don't remove this comment or modify anything below this line.\n    If you don't want a preview generated for this pull request,\n    just replace the whole of this comment's content by \"no preview\"\n    and remove what's below.\n-->\n***\n<a href=\"https://pr-preview.s3.amazonaws.com/w3c/json-ld-syntax/pull/131.html\" title=\"Last updated on Feb 20, 2019, 6:38 PM UTC (9c1cbcc)\">Preview</a> | <a href=\"https://pr-preview.s3.amazonaws.com/w3c/json-ld-syntax/131/f08ced8...9c1cbcc.html\" title=\"Last updated on Feb 20, 2019, 6:38 PM UTC (9c1cbcc)\">Diff</a>" .
<https://api.github.com/repos/w3c/json-ld-syntax> <http://example.com/ns#issue> <https://api.github.com/repos/w3c/json-ld-syntax/issues/130> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/130> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/130"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/130> <http://schema.org/identifier> "130"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/130> <http://schema.org/name> "Editorial issues" .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/130> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/130> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/130> <http://example.com/ns#assignee> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/130> <http://schema.org/startDate> "2019-02-13T01:05:31Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/130> <http://schema.org/endDate> "2019-02-15T17:01:24Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/130> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/pulls/130> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/130"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/130> <http://example.com/ns#pullRequest> <https://api.github.com/repos/w3c/json-ld-syntax/pulls/130> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/130> <http://schema.org/description> "For #124 and #127.\n\n\n<!--\n    This comment and the below content is programatically generated.\n    You may add a comma-separated list of anchors you'd like a\n    direct link to below (e.g. #idl-serializers, #idl-sequence):\n\n    Don't remove this comment or modify anything below this line.\n    If you don't want a preview generated for this pull request,\n    just replace the whole of this comment's content by \"no preview\"\n    and remove what's below.\n-->\n***\n<a href=\"https://pr-preview.s3.amazonaws.com/w3c/json-ld-syntax/pull/130.html\" title=\"Last updated on Feb 15, 2019, 1:25 AM UTC (7031cc2)\">Preview</a> | <a href=\"https://pr-preview.s3.amazonaws.com/w3c/json-ld-syntax/130/5776e7f...7031cc2.html\" title=\"Last updated on Feb 15, 2019, 1:25 AM UTC (7031cc2)\">Diff</a>" .
<https://api.github.com/repos/w3c/json-ld-syntax> <http://example.com/ns#issue> <https://api.github.com/repos/w3c/json-ld-syntax/issues/129> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/129> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/129"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/129> <http://schema.org/identifier> "129"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/129> <http://schema.org/name> "Define term without @id if term previously defined" .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/129> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:editorial> <http://schema.org/name> "spec:editorial" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:editorial> <http://schema.org/color> "58820a" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:editorial> <http://schema.org/description> "" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/129> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:editorial> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:enhancement> <http://schema.org/name> "spec:enhancement" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:enhancement> <http://schema.org/color> "c11537" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:enhancement> <http://schema.org/description> "" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/129> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:enhancement> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/129> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/129> <http://schema.org/startDate> "2019-02-11T22:31:32Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/129> <http://schema.org/endDate> "2019-03-29T21:32:37Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/129> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/129> <http://schema.org/description> "This issue was discussed in [a meeting](https://www.w3.org/2018/json-ld-wg/Meetings/Minutes/2019/2019-02-07-json-ld#section2).\r\n\r\n- `RESOLVED:  Adopt the following rules for sealing\r\n  1) If `@sealed:true` is encountered on a term definition in the active context, then attempts to redefine the term will fail and result in a warning.\r\n  2) If `@sealed:true` is encountered on a context, then all terms defined within the context should be treated as having `@sealed:true` in their definition\r\n  3) If `@sealed:false` is encountered on a term definition in the active context, where the context has been sealed with `@sealed:true`, then the sealing for that term is removed. {: #resolution1 .resolution}`\r\n- `RESOLVED:  Close #87, as unnecessary given above rules. {: #resolution2 .resolution}`\r\n- `RESOLVED:  Close #98, as `@context: null` clears context definitions {: #resolution3 .resolution}`\r\n- `RESOLVED:  Close #98, as `@context: null` clears context definitions {: #resolution4 .resolution}`\r\n- `RESOLVED:  if `@id` is not present in a term definition, and there is no default vocabulary, but has an expansion to an absolute IRI in the active context, then the `@id` of the new definition is taken from the active context (otherwise this is still an error) {: #resolution5 .resolution}`\r\n- `RESOLVED:  Once previous is done, we can close #116 {: #resolution6 .resolution}`\r\n- `RESOLVED:  We agree with the processing order per #61: scoped definition from property, then from type, then embedded. PR to update docs to come. {: #resolution7 .resolution}`\r\n<details><summary><i class=\"differentiate\">View the transcript</i></summary>\r\nSealed contexts<br/>\r\nIvan Herman: If we can’t get to a clear model and agreement on sealing today, I propose we defer it.<br/>\r\nAdam Soroka: If we happen to do that, what do we say to verifiable claims, etc?<br/>\r\nRob Sanderson: (reads guiding principles)<br/>\r\nRob Sanderson: <a href=\"https://www.w3.org/2018/json-ld-wg/WorkMode/guiding_principles\">https://www.w3.org/2018/json-ld-wg/WorkMode/guiding_principles</a><br/>\r\nRob Sanderson: sealed contexts - goal is to solve by end of day<br/>\r\nIvan Herman: one thing from last week’s discussions - sealing seems to be a very dangerous thing to do…<br/>\r\n… if Google decides to put a seal on schema.org, community will be unhappy …<br/>\r\nGregg Kellogg: we need to understand who we’re serving. Not there for schema.org, rather verifiable claims<br/>\r\n… specs as verifiable claims have a shared vocabulary, with some domains wide open, but people can’t change semantics<br/>\r\n… in spec, intentionally or otherwise<br/>\r\nBenjamin Young: chief aim of proposal is that json and json-ld world co-exist. Term sealing is to guarantee that …<br/>\r\n… json and json-ld authors work on exact same shape<br/>\r\n… maybe take a step back from sealing and see what other options there may be<br/>\r\n… notion of foundational shape surviving framing<br/>\r\nIvan Herman: what I understand from ver. claim. is that they have a wrapper w/ properties whose value is an object…<br/>\r\n… want to give total freedom for another vocabulary to leave locally. How about a syntax that says this is an extension point…<br/>\r\n… @context null + specific situation that is sealing + @context null<br/>\r\n… concentrate on this use case and try not to generalize<br/>\r\nRob Sanderson: sealing doesn’t solve actual shapes - just relationship between key and class. Not producing necessary structure<br/>\r\n… it is intersection of RDF semantic layer and JSON keys. Not shape thing as an API. Mapping not API<br/>\r\nPierre-Antoine Champin: goal of sealing is not to guarantee LD has same shape as plain JSON, but JSON LD that has the same shape…<br/>\r\n… has the same semantics.<br/>\r\n… agree with ivan – sealed is sealed from point to rest of subtree and not try to address unsealed point.<br/>\r\nDavid Newbury: Use case for unsealing is to insert user specified documents into structure. Unstructured JSON into LD…<br/>\r\nIvan Herman: may try to pick up json literal again<br/>\r\nIvan Herman: some examples don’t want literal, but piece of RDF graph but based on another vocabulary on its own<br/>\r\nDavid Newbury: do we need ability to interpret unsealed part in context of whole document?<br/>\r\nGregg Kellogg: yes<br/>\r\nDavid Newbury: do we have use cases where sealed and unsealed need to be interpreted?<br/>\r\nRob Sanderson: I think so<br/>\r\nRob Sanderson: Note - if we can’t solve by the end of the day, revisit the fallback position of JSON literals<br/>\r\nGregg Kellogg: We’re making this too hard. A sealed context is a collection of sealed terms – maintains original interpretation<br/>\r\n… an extension point is where you use a term that is not sealed…<br/>\r\n… say there is a named term in VC that has a given meaning, but want to be able to add other properties that aren’t sealed…<br/>\r\n… also need a “this is a place for you to put stuff” – creating a scoped context where properties can be re-interpreted.<br/>\r\n… sealed terms have fixed meaning when you use them.<br/>\r\nPierre-Antoine Champin: a term may be sealed (i.e. its meaning, esp. its IRI, can not be overridden) and an extension point (allow sealed terms to be overridden in its subtree)<br/>\r\nDavid I. Lehn: common use will be use an example, preserving semantics and adding on…<br/>\r\nAdam Soroka: we have ways to control shapes of json and RDF, but now we’re talking about a third way… controlling semantics<br/>\r\nPierre-Antoine Champin: gregg says extension points are properties that aren’t sealed — sealed means one cannot override<br/>\r\nGregg Kellogg: one approach is sealed context that allows context underneath to be unsealed…<br/>\r\nPierre-Antoine Champin: thanks @gkellogg, that’s clearer :)<br/>\r\nIvan Herman: i would like to hear a description of the exact sealing proposal<br/>\r\nGregg Kellogg: that would be pchampin’s PR<br/>\r\nIvan Herman: if we cannot explain where we are, we have a problem<br/>\r\nPierre-Antoine Champin: I agree with first 2 parts of the PR, the 3rd one is related to extension points<br/>\r\n… we don’t have the same model for unsealing<br/>\r\n… especially when it happens automatically<br/>\r\n… I think the sealed definitions in a context cannot be overwritten by anything in that context<br/>\r\nIvan Herman: if you seal a context, then the only way the terms can be overridden is in a scoped context within the sealed context?<br/>\r\nPierre-Antoine Champin: I think so<br/>\r\nGregg Kellogg: explicates example on whiteboard Test so03<br/>\r\nDavid I. Lehn: there are problems with this example because the inner context has no effect<br/>\r\nIvan Herman: we often use such examples, which I find a little unnatural<br/>\r\nHarold Solbrig: That confuses me<br/>\r\nIvan Herman: [discusses example]<br/>\r\nGregg Kellogg, Ivan Herman, Rob Sanderson: [edit and discuss example]<br/>\r\nIvan Herman: sealing seems to mean that the terms are cast in concrete<br/>\r\nIvan Herman: it is very difficult to explain exception<br/>\r\nDavid I. Lehn: Not sure why it’s unnatural?<br/>\r\nIvan Herman: if the context says “Sealed” that would seem to me to mean that everything is cast in concrete<br/>\r\n… but that doesn’t seem to be the case<br/>\r\n… we can change things with scoped contexts etc<br/>\r\nGregg Kellogg: this comes out of discussion of multiple sealed contexts<br/>\r\nHarold Solbrig: by changing this one term to add a typo, I can open up everything I thought I was sealing<br/>\r\nDavid Newbury: I would have assumed that by sealing a term, it would remain sealed<br/>\r\nGregg Kellogg: so once sealed, always sealed<br/>\r\nGregg Kellogg: that didn’t work for Verifiable Claims because they don’t want to intro a constraint on the JSON-LD within the wrapper<br/>\r\njeff mixer: can I constrain the type of value used with a term this way?<br/>\r\n<b>all:</b> no, JSON-LD has no way to constrain the types of values<br/>\r\nAdam Soroka: Agree completely. The wrapper compresses the protocol into the document<br/>\r\n… It pulls us toward sealing other things beyond just the mapping, but into complex chains<br/>\r\nHarold Solbrig: preventing people from accidentally overwriting contexts seems within our scope, but not all the further ramifications<br/>\r\nPierre-Antoine Champin: re: when terms become unsealed<br/>\r\n… it is genuinely hard to explain<br/>\r\n… I would say that a sealed term is sealed anywhere, except when the sealed context opens it<br/>\r\n… there are two situations in which one can redefine a sealed term<br/>\r\n… plain JSON users don’t expect the semantics to be sealed any more<br/>\r\n… we should leave the decision of when to unseal terms to the authors of the sealed context<br/>\r\nIvan Herman: an extension point means a combination of “context now” and “I cannot touch what is on the upper level”<br/>\r\nGregg Kellogg: {discusses Ivan’s example]<br/>\r\nIvan Herman: how about a keyword “extension” that means you cannot redefine anything you inherit?<br/>\r\nGregg Kellogg: not quite @context: null.<br/>\r\nDavid Newbury: if we have a context that defines ‘name’ within a sealed context, [points to examples]<br/>\r\nGregg Kellogg: [discusses examples]<br/>\r\n… it may be simpler in the end to say that sealed terms are always sealed except for @context:null<br/>\r\n… but subtleties arise when two sealed contexts interact<br/>\r\nRob Sanderson: can we do that example?<br/>\r\nIvan Herman: the only place where @context:null would have a nuclear option would be in the context that is sealed<br/>\r\nAdam Soroka: [discussion of various examples]<br/>\r\nGregg Kellogg: [refers to examples]<br/>\r\nDavid Newbury: ditto<br/>\r\nPierre-Antoine Champin: [example of two contexts conflicting]<br/>\r\nDavid Newbury: the confusion caused by accounting for the complex interactions outweighs the utility<br/>\r\nHarold Solbrig: what if we turned the pattern inside out and let contexts signify that they don’t intend to override?<br/>\r\n… if you want to enforce that, you do it on a vocabulary-specific basis<br/>\r\n… with rules for that particular context<br/>\r\nGregg Kellogg: so if a context lacked that flag, it would be harder to reuse it<br/>\r\nHarold Solbrig: depends on how much you care about this relationship between the contexts<br/>\r\nAdam Soroka: [discussion of what is or is not in scope for the use case and interoperability concern]<br/>\r\nGregg Kellogg: not clear how to specify that<br/>\r\nIvan Herman: going back to David’s example<br/>\r\nIvan Herman: [discusses example]<br/>\r\nRob Sanderson: [discusses example]<br/>\r\nGregg Kellogg: @context: null has a specific meaning and we are altering it<br/>\r\nIvan Herman: if we go down the road of “sealing”, then @context:null is going to conflict in some way and we will have to resolve it<br/>\r\nHarold Solbrig: that’s why I went for an extension-based approach<br/>\r\nGregg Kellogg: we have until noon!<br/>\r\nHarold Solbrig: can we get the use case in a more concrete form?<br/>\r\nDavid Newbury: I’m increasingly fond of Harold’s idea to put in an “extension” property that errors if something with it overrides a term<br/>\r\n… this allows me to write extensions that will work, but it may not be what VC need<br/>\r\nPierre-Antoine Champin: I have to think about that idea (Harold’s idea). gkellogg convinced me to try to explain again how a context becomes ineffective.<br/>\r\n… I’m in favor of saying that whenever I traverse a term that is not part of a sealed context, it’s not sealed anymore<br/>\r\n… after which a term could have been redefined: no guarantees about the semantics!<br/>\r\n… as for @context:null– maybe the “extension” idea is a better way to make extension points; it makes the unsealing specific<br/>\r\n… to make @context:null work one goes through both extension properties<br/>\r\nGregg Kellogg: let’s for the moment let’s put off the table any terms from a non-sealed context<br/>\r\n… the behavior I heard dlongley describe<br/>\r\n… is that history is wiped out and we start from scratch<br/>\r\nIvan Herman: I’m good so far<br/>\r\nGregg Kellogg: but if you do want to allow a mixture of sealed and unsealed terms, we get into the case that pchampin discussed<br/>\r\n… two ways to have an extension point: 1) an unsealed term, under which anything goes, 2) a sealed term that is defined as an extension point<br/>\r\n… and 2) doesn’t satisfy the use case<br/>\r\nIvan Herman: let’s say I have a claim, and I put into the context a @context:null to make an extension point.<br/>\r\n… the danger is that I will redefine a term from VC, accidentally or maliciously<br/>\r\n… IIUC VC, it’s a bit like Annotation<br/>\r\n… outsiders are expected to use their own vocabularies with these guys, without having to understand VC or Annotation<br/>\r\nGregg Kellogg: one case is that everything is wiped out, but the other is that you intermingle the use of properties<br/>\r\nIvan Herman: so I can add my own context<br/>\r\nGregg Kellogg: but not redefine terms<br/>\r\n… we would end up with semantics that differ between JSON and JSON-LD<br/>\r\nDavid I. Lehn: the way that Activity Streams does this is to say “You must not override or change contexts” as a normative piece (see <a href=\"https://www.w3.org/TR/activitystreams-core/#jsonld)\">https://www.w3.org/TR/activitystreams-core/#jsonld)</a><br/>\r\nRob Sanderson: people do this now by ordering the contexts<br/>\r\nRob Sanderson: [returns to examples]<br/>\r\nRob Sanderson: you can say that a sealed context can have an extension<br/>\r\n… having sealed on the context is confusing and makes more sense at the term level<br/>\r\nIvan Herman: what is the difference between sealed and extension<br/>\r\n… if extension was not true then there would be a warning<br/>\r\nIvan Herman: why not just say extension:true – it’s not setting a context?<br/>\r\nRob Sanderson: to distinguish from the case of this term being an extension<br/>\r\nGregg Kellogg: two different keywords that act on the context are unclear<br/>\r\nRob Sanderson: the change is that the default condition is “sealed”<br/>\r\nDave Longley: i’m on another call and can’t join, so i apologize… but was reading what’s here and thought i’d throw this in here… if there is a fear that schema.org (or contexts like it) might get sealed … we could allow {\"@context\": [{\"@contextref\": \"<a href=\"http://schema.org\",\">http://schema.org\",</a> \"@sealed\": false}, ...]} and the reason that would be ok for the sealed case we care about in VC community and so on, is because JSON processors would reject that … the context MUST be specified as a simple string, that’s what JSON-only processors would be looking for: {\"@context\": [\"<a href=\"https://w3id.org/credentials/v1\",\">https://w3id.org/credentials/v1\",</a> ...]}<br/>\r\nDavid Newbury: I thought we were talking about three use cases, one of which is ability to delete context, which is @context:null<br/>\r\n… are we trying to prevent people from overriding accidentally or maliciously?<br/>\r\nGregg Kellogg: we can’t prevent malice<br/>\r\nIvan Herman: it’s a clean slate… but not<br/>\r\nHarold Solbrig: @context:null is often too much<br/>\r\nAdam Soroka: gkellogg and ivan: [thrash more examples]<br/>\r\nRob Sanderson: we fundamentally don’t want the semantics to slip between JSON and JSON-lD<br/>\r\nRob Sanderson: [more examples]<br/>\r\nRob Sanderson: gkellogg: “extension” unseals everything, which is not @context:null<br/>\r\nAdam Soroka: [discusion of @context:null and whether it is a problem for the original use case]<br/>\r\nGregg Kellogg: if there’s another context with sealed terms and extension points<br/>\r\nRob Sanderson: regardless of which context has the sealing, extension overrides it.<br/>\r\nGregg Kellogg: that’s the simplest way<br/>\r\nBenjamin Young: <a href=\"https://github.com/w3c/json-ld-syntax/issues/20#issuecomment-442896360\">https://github.com/w3c/json-ld-syntax/issues/20#issuecomment-442896360</a><br/>\r\nBenjamin Young: dlongley and I discuss term ordering and inheritance<br/>\r\n… there is a problematic example there<br/>\r\n… [discusses vocabulary]<br/>\r\nBenjamin Young: <a href=\"https://github.com/w3c/json-ld-syntax/issues/20#issuecomment-454485321\">https://github.com/w3c/json-ld-syntax/issues/20#issuecomment-454485321</a><br/>\r\nBenjamin Young: this example shows how to avoid that by being verbose<br/>\r\n… [discusses problems that concern @type usage and inheritance]<br/>\r\nDavid Newbury: if I have two sealed contexts that define the same term, who wins?<br/>\r\nGregg Kellogg: last one in<br/>\r\nRob Sanderson: Reviewing the rules that we think we’re talking about.<br/>\r\nAdam Soroka: the use case is to avoid semantic slippage around terms when interpreted as JSON.<br/>\r\nRob Sanderson: If @extension:true is encountered in scoped context definition, then attempts to redefine terms from the active context will succeed.<br/>\r\nIvan Herman: If this is the rule, in the embedded context, I can also change the ID of that term?<br/>\r\nRob Sanderson: yes. You can redefine anything.<br/>\r\nIvan Herman: so if I have @extension : {}, the extension of the original key remains.<br/>\r\nGregg Kellogg: the effect of extensions: true is to update the active context and remove the sealed status of all terms within that context<br/>\r\n… allowing those terms to be renamed within the value of the extension property<br/>\r\nIvan Herman: so inside, something may be different than outside?<br/>\r\nGregg Kellogg: yes. It only makes sense within a scoped context, and only makes sense on a sealed term.<br/>\r\n… if you extend an unsealed property…<br/>\r\nGregg Kellogg: within an extension property, we can only define additional properties within that context.<br/>\r\nRob Sanderson: this is an error: [{\"extension\": { @id: extension_property, @sealed:true, @context: {@extension:true}}}}, { \"extension\":{@id: extension_propery}]<br/>\r\nRob Sanderson: extending unsealed terms is dumb, but not an error.<br/>\r\nPierre-Antoine Champin: I’m fine with this…in practice, this would mean that the plain JSON interpretation can only trust terms from the sealed context in the subtrees I defined.<br/>\r\n… because when there is a term from another context, theydon’t know anything about that term.<br/>\r\n… if we’re happy with this, we’re happy, but it seems like a lot of work to get to the same point.<br/>\r\nGregg Kellogg: I don’t think we’re at the same point.<br/>\r\n… it’s only when we transition to a property when it’s extension: true that we transition<br/>\r\nPierre-Antoine Champin: the assumption that JSON-only is the same–it’s only trustworthy when looking at sealed terms.<br/>\r\nGregg Kellogg: that’s consistent with the spec.<br/>\r\nPierre-Antoine Champin: right. that’s why I’m OK with this.<br/>\r\nRob Sanderson: the thing we’re not able to deal with is nulling out terms and then redetermining them. So it works.<br/>\r\n… so for VC, the context for the claim can start with null, which wipes out their context.<br/>\r\n… so I don’t think that VC will use extension: true.<br/>\r\nGregg Kellogg: do we have a use case for this?<br/>\r\nIvan Herman: I thought that they want to avoid that anyone includes in the claim things that redefine things within verifiable claims<br/>\r\nGregg Kellogg: I think that applies to the envelope<br/>\r\n… within the envelope, naive applications may not need to understand them.<br/>\r\n… for example, annotation properties<br/>\r\n… they come from another context<br/>\r\n… so if you introduce another term in the envelope, those envelope extensions won’t override the VC<br/>\r\nRob Sanderson: don’t mess with our stuff<br/>\r\n… vs:issuer should not be overridden, but if an extension defines ex:date, that’s fine. but the extension should not be able to override vs:issuer.<br/>\r\nGregg Kellogg: …explaining his example…<br/>\r\n… since we have both a sealed context and schema, name remains it’s context. within the extension, something could set the scoped context to null.<br/>\r\n… it could add a new context, and it could be anything.<br/>\r\n… thus, VC does not need extension<br/>\r\nIvan Herman: why are we doing this?<br/>\r\n… if this can be met with sealed and nullification, what is the use case for extension?<br/>\r\n… this is the simplest thing that can work. That’s what we should do.<br/>\r\n… do we need extension at any point?<br/>\r\nGregg Kellogg: I agree.<br/>\r\nAdam Soroka: so there’s no need for nullification<br/>\r\n… (i mean extension)<br/>\r\nGregg Kellogg: what we determined is that we’re not going to restrict @context: null. In that case, we don’t need the exceptions.<br/>\r\n… you can always do @context: null<br/>\r\n… thus, you can do it in a scoped context<br/>\r\n… meeting VC’s use case<br/>\r\nBenjamin Young: this VC is something that we haven’t discussed<br/>\r\n… We don’t have anything that addresses it .<br/>\r\n… since it’s type term usage, not property-term usage<br/>\r\n… can we describe it as a use-case?<br/>\r\n… term inheritance works…they don’t need sealing…<br/>\r\n… but the scoped context around @type breaks things<br/>\r\n… see the comment further down about getting around this by being verbose, but…this is how those things are extended.<br/>\r\n… using a base type, and adding additional types…so type ordering matters.<br/>\r\n… endorsed by handwaving, but would like a better mechanism<br/>\r\n… but this is where things are breaking<br/>\r\nBenjamin Young: example description is here <a href=\"https://github.com/w3c/json-ld-syntax/issues/20#issuecomment-442896360\">https://github.com/w3c/json-ld-syntax/issues/20#issuecomment-442896360</a><br/>\r\nBenjamin Young: verbosity “solution” is here <a href=\"https://github.com/w3c/json-ld-syntax/issues/20#issuecomment-454485321\">https://github.com/w3c/json-ld-syntax/issues/20#issuecomment-454485321</a><br/>\r\nGregg Kellogg: this example: we would process the scoped context for specificCredential…issue is defined in an example.<br/>\r\n… this is dlongley’s example, not mine<br/>\r\n… he was saying that the context ordering gets nullified by scope contexts and type…core vocabulary at the end doesn’t work, since types can override that.<br/>\r\nGregg Kellogg: scoped context would not override this if issuer is a sealed term<br/>\r\nBenjamin Young: we have two inheritance orders: CSS and FIFO<br/>\r\n… so we would flip them, so if sealing isn’t done properly, then we have problems<br/>\r\n… don’t know if there’s a solution here…other than a core vocabulary that comes first<br/>\r\nRob Sanderson: this seems to me to be application-logic-layer<br/>\r\n… so VC would have a sealed context…<br/>\r\nBenjamin Young: {\"@context\": {\"@sealed\": \"<a href=\"http://vc-data.example/\",\">http://vc-data.example/\",</a> \"@extensions\": [\"<a href=\"http://extension-1.exampe/\",\">http://extension-1.exampe/\",</a> \"<a href=\"http://other.example/extension\"]}}\">http://other.example/extension\"]}}</a><br/>\r\nRob Sanderson: …typing on the whiteboard…<br/>\r\nGregg Kellogg: so there’s a new extension keyword that imports without redefining?<br/>\r\nBenjamin Young: this is something totally different<br/>\r\nRob Sanderson: this just inverts where the properties live<br/>\r\nBenjamin Young: this means that the core is at the top, and the extensions below<br/>\r\nRob Sanderson: with would work with term definitions<br/>\r\nBenjamin Young: currently, you put the core last.<br/>\r\n… now you need to move it to the top, or potentially to both places<br/>\r\nGregg Kellogg: this means that the thing at the front and seal it, then it can’t be changed<br/>\r\nRob Sanderson: to me, sealing is the inversion of the property rules.<br/>\r\nBenjamin Young: this means that the scope documents now need to be explicitly 1.1<br/>\r\nRob Sanderson: if you’re using 1.1, but interpreting as 1.0, it will be strange.<br/>\r\nGregg Kellogg: I think we can only talk about what 1.1 will do<br/>\r\n… the reason that 1.1 is needed, so that if a 1.0 processor sees it, it will die<br/>\r\nBenjamin Young: so in 1.1 we’re inverting the order?<br/>\r\nGregg Kellogg: I don’t see it as inverting, I see it as a new effect.<br/>\r\nBenjamin Young: this sounds like !important in CSS<br/>\r\nGregg Kellogg: it continues to work<br/>\r\nBenjamin Young: even if someone else seals it first?<br/>\r\nGregg Kellogg: I think we need to table multiple contexts that seal<br/>\r\n… I don’t think it’s what we’re promoting<br/>\r\n… as a best practice, there should be only one<br/>\r\n… as a corner case, we should…<br/>\r\nIvan Herman: the usage of sealed in the grand scale of things will be minimal<br/>\r\n… if it’s awkward, then that’s OK, because this is rarely used.<br/>\r\nAdam Soroka: we don’t know this will be rare<br/>\r\nIvan Herman: our schema discussion showed us that we should not use sealed regularly.<br/>\r\n… common, vague vocabularies should not used sealed.<br/>\r\n… there are good use cases, but let’s be careful.<br/>\r\nGregg Kellogg: IMO, sealed should only be used by contexts defined in specifications where there is a dual JSON/JSON-LD processing mode, and then only rairly<br/>\r\nRob Sanderson: the other thing that’s important to put down is sealed is not a guarantee that it can’t be changed, but to prevent unintentional.<br/>\r\n… you can always put in a version 1.0…<br/>\r\nGregg Kellogg: you can’t go back<br/>\r\nIvan Herman: the @context:null option is there, so we can not defend against all malicious use<br/>\r\nRob Sanderson: so we don’t need extension: true, because there’s no use case and we can cover it by nulling and re-i porting?<br/>\r\n… so are we back to the simple rule?<br/>\r\n… If @sealed: true is encountered on a term definition, then attempts to redefine the term will fail and result in a warning.<br/>\r\nGregg Kellogg: with a note about using context:null<br/>\r\nAdam Soroka: so there’s no way that a term picks up an unintentional meaning<br/>\r\nHarold Solbrig: can I put a @sealed on the external context?<br/>\r\nGregg Kellogg: you can’t do that<br/>\r\nIvan Herman: you can’t seal someone else’s context<br/>\r\nHarold Solbrig: I would still like to be able to make sure that I don’t unintentionally reuse terms<br/>\r\nGregg Kellogg: can this be solved with SHEX?<br/>\r\nHarold Solbrig: maybe…<br/>\r\nPierre-Antoine Champin: what happened to redefining a term within a sealed context?<br/>\r\nGregg Kellogg: we said that’s not possible.<br/>\r\n… the only way to do this is to null the context<br/>\r\nPierre-Antoine Champin: so context:null could happen anywhere?<br/>\r\nRob Sanderson: correct<br/>\r\nPierre-Antoine Champin: so sealing prevents explicit redefining the sealed terms, but not guaranteeing their stability.<br/>\r\nGregg Kellogg: correct<br/>\r\nRob Sanderson: context: null is the way out of things, and you’d only do that in the VC case if you were trying to be malicious, and we’ve decided we can’t guard against that.<br/>\r\n… the intent is to avoid unintentional redefining.<br/>\r\n… to fix that, you need a preprocessor.<br/>\r\nAdam Soroka: is sealing now to strong a name?<br/>\r\nGregg Kellogg: it is sealed in the active context.<br/>\r\nPierre-Antoine Champin: I disagree; freezing (and sealing, for that matter) in JS is a quite different thing<br/>\r\nIvan Herman: let’s make a resolution, and go to lunch<br/>\r\nProposed resolution: Adopt the following rules for sealing - 1: If @sealed:true is encountered on a term definition in the active context, then attempts to redefine the term will fail and result in a warning. 2 - If @sealed:true is encountered on a context, then all terms defined within the context should be treated as having @sealed:true in their definition. 3- If @sealed:false is encountered on a term definition in the active context, where the context has been sealed with @sealed:true, then the sealing for that term is removed. (Rob Sanderson)<br/>\r\nHarold Solbrig: if there’s a sealed: false for an unsealed term, what happens?<br/>\r\nRob Sanderson: +1<br/>\r\nIvan Herman: +1<br/>\r\nGregg Kellogg: nothing–that doesn’t mean anything<br/>\r\nAdam Soroka: should we warn?<br/>\r\nGregg Kellogg: +1<br/>\r\nJeff Mixter: +1<br/>\r\nDavid Newbury: +1<br/>\r\nSimon Steyskal: +1<br/>\r\nHarold Solbrig: +1<br/>\r\nPierre-Antoine Champin: +0.5<br/>\r\nGregg Kellogg: we SHOULD<br/>\r\nAdam Soroka: +1<br/>\r\nBenjamin Young: +0 (would like to see use case mappings for all these things)<br/>\r\nDavid I. Lehn: +1<br/>\r\nResolution #1: Adopt the following rules for sealing - 1: If @sealed:true is encountered on a term definition in the active context, then attempts to redefine the term will fail and result in a warning. 2 - If @sealed:true is encountered on a context, then all terms defined within the context should be treated as having @sealed:true in their definition. 3- If @sealed:false is encountered on a term definition in the active context, where the context has been sealed with @sealed:true, then the sealing for that term is removed. {: #resolution1 .resolution}<br/>\r\nDave Longley: “If @sealed:false is encountered on a term definition in the active context, where the context has been sealed with @sealed:true, then the sealing for that term is removed.” &lt;– this sounds like a big problem as written …<br/>\r\nDave Longley: is this saying that with {\"@context\": [1, 2]} that 2 can unseal anything it wants?<br/>\r\nDave Longley: if so, that defeats the purpose of sealing … so i can only imagine that something else was meant by that text.<br/>\r\nDave Longley: it sounds like an attacker that defines 2 can get a VC to be successfully processed by a JSON-only processor in a different way from a JSON-LD processor under that condition<br/>\r\nDave Longley: i’ll check back here later to see if there’s a clarification<br/>\r\nDave Longley: if the ability to unseal a sealed context is a requirement (as opposed to just extending in an acceptable way) … it seems like we could do it without messing up JSON-only processors by using some other syntax that they would otherwise reject.<br/>\r\nDave Longley: JSON-only processors will be looking for {\"@context\": [<specific string>, <specific string>, ...ignored]}<br/>\r\nDave Longley: or could perhaps be further limited to: {\"@context\": [<specific string>, <specific string>, ...<must be a string but value is ignored>]}<br/>\r\nDave Longley: in other words, any deviation from some very rigid rules would cause a JSON-only processor to reject the input … which could be potentially used to our advantage if we need to cover other use cases where we are fearful of people sealing things that JSON-LD aware entities would like to unseal in a way that would not impact JSON-only processors.<br/>\r\nDave Longley: but what is key is that that any mechanism that is used to unseal would not impact JSON-only processors.<br/>\r\nDave Longley: if we can abide by that rule, i don’t see why i wouldn’t be supportive.<br/>\r\nRob Sanderson: dlongley: The @sealed:false would only work for the original definition, no subsequent attempt to redefine it<br/>\r\nRob Sanderson: It overrides the @sealed:true on the context<br/>\r\nRob Sanderson: But not @sealed:true on a term<br/>\r\nDave Longley: azaroth: ok, if I understand you I think that’s fine<br/>\r\nAdam Soroka: <a href=\"https://github.com/w3c/json-ld-syntax/issues/87\">https://github.com/w3c/json-ld-syntax/issues/87</a><br/>\r\n2.1. closing related issues<br/>\r\nProposed resolution: Close #87, as unnecessary given above rules. (Rob Sanderson)<br/>\r\nRob Sanderson: +1<br/>\r\nIvan Herman: +1<br/>\r\nGregg Kellogg: +1<br/>\r\nDavid Newbury: +1<br/>\r\nJeff Mixter: +1<br/>\r\nSimon Steyskal: +1<br/>\r\nDavid I. Lehn: +1<br/>\r\nResolution #2: Close #87, as unnecessary given above rules. {: #resolution2 .resolution}<br/>\r\nSimon Steyskal: <a href=\"https://github.com/w3c/json-ld-syntax/issues/98\">https://github.com/w3c/json-ld-syntax/issues/98</a><br/>\r\nProposed resolution: close #98, as unnecessary given the rules above (Ivan Herman)<br/>\r\nDavid Newbury: +1<br/>\r\nIvan Herman: +1<br/>\r\nProposed resolution: Close #98, as @context: null clears context definitions (Rob Sanderson)<br/>\r\nGregg Kellogg: +1<br/>\r\nRob Sanderson: +1<br/>\r\nHarold Solbrig: +1<br/>\r\nDavid I. Lehn: +1<br/>\r\nResolution #3: Close #98, as @context: null clears context definitions {: #resolution3 .resolution}<br/>\r\nResolution #4: Close #98, as @context: null clears context definitions {: #resolution4 .resolution}<br/>\r\nDavid I. Lehn: <a href=\"https://github.com/w3c/json-ld-syntax/issues/116\">https://github.com/w3c/json-ld-syntax/issues/116</a><br/>\r\nDavid I. Lehn: discussion of [<a href=\"https://github.com/w3c/json-ld-syntax/issues/116#issuecomment-460681505]\">https://github.com/w3c/json-ld-syntax/issues/116#issuecomment-460681505]</a><br/>\r\nDavid I. Lehn: [missed scribing much back and forth, trying to catch up on the gist]<br/>\r\nGregg Kellogg: [pointing out current algorithm could be modified based on some rules to handle the partial redefinition]<br/>\r\nIvan Herman: [concerns about backwards compatibility]<br/>\r\nGregg Kellogg: based on algorithm, 1.0 would fall through to new 1.1 behavior<br/>\r\nIvan Herman: sounds like adding more hacks<br/>\r\nDave Longley: also want it to be easier for json authors<br/>\r\nGregg Kellogg: we go towards side of being easier for authors<br/>\r\nDavid Newbury: hard to follow what is going on without knowing all the processing steps<br/>\r\nGregg Kellogg: not overriding term itself […?]<br/>\r\nRob Sanderson: more authors to explain to than people needing to understand this feature. on side of authors.<br/>\r\nDavid Newbury: issue with how things are overridden. seeing next term definition would think it fully overrode first one.<br/>\r\nIvan Herman: [worries about more complications]<br/>\r\nDavid Newbury: example seems like json in json-ld<br/>\r\nDavid I. Lehn: it’s a mix in this case, using json tools to process json-ld. would want to know the context of the data.<br/>\r\nRob Sanderson: [discussing how some examples would be processed]<br/>\r\nIvan Herman: adding new features to already complex system. really worried about it.<br/>\r\nDave Longley: understand ivan. A goal is to make ergonomics of 1.1 easier for users and better than 1.0<br/>\r\nProposed resolution: if @id is not present in a term definition, and there is no default vocabulary, but has an expansion to an absolute IRI in the active context, then the @id of the new definition is taken from the active context (otherwise this is still an error) (Rob Sanderson)<br/>\r\nRob Sanderson: +1<br/>\r\nIvan Herman: +1<br/>\r\nSimon Steyskal: +1<br/>\r\nGregg Kellogg: +1<br/>\r\nDave Longley: +1<br/>\r\nDavid I. Lehn: +1<br/>\r\nJeff Mixter: +1<br/>\r\nDavid Newbury: +0.5<br/>\r\nAdam Soroka: +1<br/>\r\nResolution #5: if @id is not present in a term definition, and there is no default vocabulary, but has an expansion to an absolute IRI in the active context, then the @id of the new definition is taken from the active context (otherwise this is still an error) {: #resolution5 .resolution}<br/>\r\nProposed resolution: Once previous is done, we can close #116 (Rob Sanderson)<br/>\r\nHarold Solbrig: +1<br/>\r\nIvan Herman: +1<br/>\r\nRob Sanderson: +1<br/>\r\nDavid Newbury: +1<br/>\r\nSimon Steyskal: +1<br/>\r\nJeff Mixter: +1<br/>\r\nDavid Newbury: +1<br/>\r\nRob Sanderson: +1<br/>\r\nHarold Solbrig: +1<br/>\r\nAdam Soroka: +1<br/>\r\nIvan Herman: +1<br/>\r\nRob Sanderson: Really 116 :)<br/>\r\nDavid I. Lehn: +1<br/>\r\nResolution #6: Once previous is done, we can close #116 {: #resolution6 .resolution}<br/>\r\nProposed resolution: We agree with the processing order per #61: scoped definition from property, then from type, then embedded. PR to update docs to come. (Rob Sanderson)<br/>\r\nIvan Herman: +1<br/>\r\nRob Sanderson: +1<br/>\r\nAdam Soroka: +1<br/>\r\nDavid I. Lehn: +1<br/>\r\nSimon Steyskal: +1<br/>\r\nDavid Newbury: +1<br/>\r\nJeff Mixter: +1<br/>\r\nHarold Solbrig: +1<br/>\r\nGregg Kellogg: +1<br/>\r\nResolution #7: We agree with the processing order per #61: scoped definition from property, then from type, then embedded. PR to update docs to come. {: #resolution7 .resolution}<br/>\r\nHarold Solbrig: scribnic hsolbrig<br/>\r\nGregg Kellogg: what if you said context null?<br/>\r\nRob Sanderson: it would wipe out all definitions<br/>\r\nGregg Kellogg: you could also seal activities<br/>\r\n</details>" .
<https://api.github.com/repos/w3c/json-ld-syntax> <http://example.com/ns#issue> <https://api.github.com/repos/w3c/json-ld-syntax/issues/128> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/128> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/128"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/128> <http://schema.org/identifier> "128"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/128> <http://schema.org/name> "TriG graphs in JSON-LD" .
<https://api.github.com/users/iherman> <http://schema.org/accountId> "iherman" .
<https://api.github.com/users/iherman> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/520723?v=4" .
<https://api.github.com/users/iherman> <http://schema.org/url> "https://github.com/iherman"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/iherman> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/128> <http://schema.org/creator> <https://api.github.com/users/iherman> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/128> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#OpenIssue> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/128> <http://schema.org/startDate> "2019-02-06T00:31:22Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/128> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/128> <http://schema.org/description> "I just try to test my understanding...\r\n\r\nConsider the following TriG dataset:\r\n\r\n```\r\n@prefix a <http://example.org/a> .\r\n@prefix b <http://example.org/b> .\r\n@prefix c <http://example.org/c> .\r\n\r\n<http://example.org/gr1> {\r\n    a:something a:predicate \"value1\",\r\n                b:predicate c:something1 .\r\n}\r\n<http://example.org/gr2> {\r\n    a:something a:predicate \"value2\",\r\n                b:predicate c:something2 .\r\n}\r\n```\r\n\r\nThe only way to express this in JSON-LD to repeat a `@context`, i.e.,\r\n\r\n```json\r\n[\r\n    {\r\n        \"@context\" : {\r\n            \"a\": \"http://example.org/a\",\r\n            \"b\": \"http://example.org/b\",\r\n            \"c\":  \"http://example.org/c\",\r\n            \"b:predicate\" : { \"@type\" : \"@id\" }\r\n        },\r\n        \"@id\" : \"http://example.org/gr1\",\r\n        \"@graph\" : {\r\n            \"@id\" : \"a:something\",\r\n            \"a:predicate\" : \"value1\",\r\n            \"b:predicate\" : \"c:something1\"\r\n        }\r\n    },\r\n    {\r\n        \"@context\" : {\r\n            \"a\": \"http://example.org/a\",\r\n            \"b\": \"http://example.org/b\",\r\n            \"c\":  \"http://example.org/c\",\r\n            \"b:predicate\" : { \"@type\" : \"@id\" }\r\n        },\r\n        \"@id\" : \"http://example.org/gr2\",\r\n        \"@graph\" : {\r\n            \"@id\" : \"a:something\",\r\n            \"a:predicate\" : \"value2\",\r\n            \"b:predicate\" : \"c:something2\"\r\n        }\r\n    }\r\n]\r\n```\r\n\r\nI.e., the context must be repeated.; there is no way of using a \"global\" context. I am not sure whether this is a problem in practice, but it may become one if JSON-ID is used for large datasets. In any case, this may have to be documented somewhere because it may not be 100% obvious for a first-time reader (best practices document?).\r\n\r\n---\r\n\r\nThat being said: one way of handling that over the Web is if the server returns\r\n\r\n```\r\n[\r\n    {\r\n        \"@id\" : \"http://example.org/gr1\",\r\n        \"@graph\" : {\r\n            \"@id\" : \"a:something\",\r\n            \"a:predicate\" : \"value1\",\r\n            \"b:predicate\" : \"c:something1\"\r\n        }\r\n    },\r\n    {\r\n        \"@id\" : \"http://example.org/gr2\",\r\n        \"@graph\" : {\r\n            \"@id\" : \"a:something\",\r\n            \"a:predicate\" : \"value2\",\r\n            \"b:predicate\" : \"c:something2\"\r\n        }\r\n    }\r\n]\r\n```\r\n\r\nand the `@context` is returned via an HTTP Link. According to section 6, the processor is supposed to repeat the context for each element of the array... \r\n" .
<https://api.github.com/repos/w3c/json-ld-syntax> <http://example.com/ns#issue> <https://api.github.com/repos/w3c/json-ld-syntax/issues/127> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/127> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/127"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/127> <http://schema.org/identifier> "127"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/127> <http://schema.org/name> "Bunch of editorial issues, part II" .
<https://api.github.com/users/iherman> <http://schema.org/accountId> "iherman" .
<https://api.github.com/users/iherman> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/520723?v=4" .
<https://api.github.com/users/iherman> <http://schema.org/url> "https://github.com/iherman"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/iherman> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/127> <http://schema.org/creator> <https://api.github.com/users/iherman> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:editorial> <http://schema.org/name> "spec:editorial" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:editorial> <http://schema.org/color> "58820a" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:editorial> <http://schema.org/description> "" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/127> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:editorial> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/127> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/127> <http://example.com/ns#assignee> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/127> <http://schema.org/startDate> "2019-02-06T00:27:47Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/127> <http://schema.org/endDate> "2019-02-16T21:25:47Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/127> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/127> <http://schema.org/description> "As before, some comments are questions that may be the result of my lack of understanding.\r\n\r\n- [x] I referred, in #124, to the problem of `@graph` appearing out of the blue in example 67. A forward reference to what `\"@graph\"` means to example 86 may be a partial solution. (Actually, example 86 is more or less the same as 67! It may be possible to change 67 so that that it makes the usage of `\"@graph\"` unnecessary. After all, cross-references within a graph with the same root is also possible.)\r\n- [x] In 4.8.1. \"Strictly speaking, the value of such a term is not a named graph, rather it is the graph name associated with the named graph, which exists separately within the dataset.\" is of course true. But I have the impression that for 99% of the readers this statements is meaningless, I wonder whether it is not more harmful than helpful to have it here:-) (No strong opinion, actually)\r\n- [x] Section 6 says:\r\n \r\n    > In order to use an external context with an ordinary JSON document, when retrieving an ordinary JSON document via HTTP, processors MUST retrieve any JSON-LD document referenced by a Link Header with:\r\n\r\n    I am a little bit bothered by the formulation because, after all, it is not (only) the processor that MUST retrieve, but the server that must play game as well, ie, all this depends (also) on the correct setup server-side. This is somehow missing from the formulation, although it is clear in the example...\r\n- [x] Section 7: we should not cast HTML 5.2 in concrete as the reference to HTML. Afaik `https://www.w3.org/TR/html/` always refers to the latest Rec and there are plans to, possibly, make explicit something like `https://www.w3.org/TR/html/rec`. Better use one of those. (Yep, I am not sure about specref/respec)\r\n- [x] 7.1 the reference to #23 should be removed; that issue is closed.\r\n- [x] I know I am being very picky, so we may decide to ignore this, but section 8 says: \r\n    \r\n    > \"Every node is an IRI, a blank node, a JSON-LD value, or a list.\". \r\n    \r\n    Strictly speaking this is not according to the RDF data model, which does not have a special notion for a list. This difference is not reflected in section 10: the note in that section whereby \r\n    \r\n    > \"In JSON-LD lists use native JSON syntax, either contained in a list object, or described as such within a context. Consequently, developers using the JSON representation can access list elements directly rather than using the vocabulary for collections described in [RDF-SCHEMA]..\r\n\r\n    could also be said about Turtle, which uses `(...)` to denote lists, i.e., hiding the list vocabulary of RDF. I am not sure how to put this in a better way, and we may ignore this because (to refer to my statement above) for 99% of the readers this is meaningless, but maybe somebody has a bright idea...\r\n\r\n    (Incidentally, the last quote has two full stops at the end)\r\n- [x] Section 9 begins with \"This appendix restates the syntactic...\". But this is not an appendix, but a bona fide section:-)\r\n- [x] Section 9.1 long paragraph starting with \"When used...\": any reasons why we use _SHOULD NOT_ and not _MUST NOT_? (Or is it a backward compatibility issue? If so we should find a formulation that says, for example, if this is a JSON-LD 1.1 document than it _MUST NOT_). Same remark on the paragraph that follows.\r\n- [x] 9.2 says:\r\n\r\n    > If the node object contains the `@nest` key, its value MUST be an dictionary or an array of dictionaries which MUST NOT include a value object.\r\n\r\n    There is a bit of a discrepancy between the syntax as used and the terminology here. The only occurrence of `@nest` as a key is with a _term_ value (or possibly values, I guess) and not with objects; on the other hand, as also described in 9.10, I guess the reason of using _objects_ is because the nesting labels are associated with a specific term and are not absolute. It took me a while to realize this (if my understanding is correct), maybe it is worth emphasizing it.\r\n- [x] I must admit I am a little bit lost by 9.3. If I read that text, I would deduce that the content of example 85 is _not_ a graph object, because it does include a term `generatedAt`. Or is the graph object the value of `\"@graph\"`? But then the text says that I could use `\"@graph\"` within the object on example 85: what does that mean?\r\n- [x] The very end of 9.7 says:\r\n\r\n    > Index Maps may also be used to map indexes to associated named graphs, if the term is defined with @container set to an array containing both @graph and @index, and optionally including @set. The value consists of the node objects contained within the named graph which is named using the referencing key, which can be represented as a simple graph object.\r\n\r\n    However, the very usage of index is to define graphs _with a name_ and my understanding is that the term \"simple graph object\" is for graphs that does not have an explicit name (i.e., their name is a blank node). What do I misunderstand here?\r\n- [x] Is this correct (in 9.11)? \"If the expanded term definition contains the `@nest` keyword, its value MUST be either `@nest`, or a term which expands to `@nest`.\" This sounds circular to me; isn't the value of `@nest` a term, or an array of terms?\r\n- [x] Appendix E includes references to the closed issues #8, #23, #56, #75, #91; these should be removed. (I cannot check whether other issues should be listed, I am on a plane:-)\r\n" .
<https://api.github.com/repos/w3c/json-ld-syntax> <http://example.com/ns#issue> <https://api.github.com/repos/w3c/json-ld-syntax/issues/126> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/126> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/126"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/126> <http://schema.org/identifier> "126"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/126> <http://schema.org/name> "Clarify compact IRI term example" .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/126> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:editorial> <http://schema.org/name> "spec:editorial" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:editorial> <http://schema.org/color> "58820a" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:editorial> <http://schema.org/description> "" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/126> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:editorial> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/126> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/126> <http://schema.org/startDate> "2019-02-05T22:23:30Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/126> <http://schema.org/endDate> "2019-02-12T23:32:13Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/126> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/pulls/126> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/126"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/126> <http://example.com/ns#pullRequest> <https://api.github.com/repos/w3c/json-ld-syntax/pulls/126> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/126> <http://schema.org/description> "Make example 36 \"Using a compact IRI as a term\" clearer, but only defining `foaf:homepage` using the compact IRI term form.\n\nFixes #123.\n\n\n<!--\n    This comment and the below content is programatically generated.\n    You may add a comma-separated list of anchors you'd like a\n    direct link to below (e.g. #idl-serializers, #idl-sequence):\n\n    Don't remove this comment or modify anything below this line.\n    If you don't want a preview generated for this pull request,\n    just replace the whole of this comment's content by \"no preview\"\n    and remove what's below.\n-->\n***\n<a href=\"https://pr-preview.s3.amazonaws.com/w3c/json-ld-syntax/pull/126.html\" title=\"Last updated on Feb 12, 2019, 11:22 PM UTC (bc3a64c)\">Preview</a> | <a href=\"https://pr-preview.s3.amazonaws.com/w3c/json-ld-syntax/126/1533ca9...bc3a64c.html\" title=\"Last updated on Feb 12, 2019, 11:22 PM UTC (bc3a64c)\">Diff</a>" .
<https://api.github.com/repos/w3c/json-ld-syntax> <http://example.com/ns#issue> <https://api.github.com/repos/w3c/json-ld-syntax/issues/125> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/125> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/125"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/125> <http://schema.org/identifier> "125"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/125> <http://schema.org/name> "Alternative to graph containers?" .
<https://api.github.com/users/iherman> <http://schema.org/accountId> "iherman" .
<https://api.github.com/users/iherman> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/520723?v=4" .
<https://api.github.com/users/iherman> <http://schema.org/url> "https://github.com/iherman"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/iherman> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/125> <http://schema.org/creator> <https://api.github.com/users/iherman> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:enhancement> <http://schema.org/name> "spec:enhancement" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:enhancement> <http://schema.org/color> "c11537" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:enhancement> <http://schema.org/description> "" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/125> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:enhancement> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/125> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/125> <http://schema.org/startDate> "2019-02-05T10:30:25Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/125> <http://schema.org/endDate> "2019-02-05T10:37:24Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/125> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/125> <http://schema.org/description> "I am a bit bothered by the fact that the graph containers have b-nodes 'built-in', so to say. Ie, the only thing I can generate that way is a series of graphs as objects with all with blank node id-s.\r\n\r\nWhy can't we define as an alternative a similar mechanism to `\"@container\":\"@id\"`? Ie, \r\n\r\n```json\r\n\"@context\" : {\r\n    \"example\" : {\r\n       \"@id\" : \"https:/...\",\r\n      \"@container\" : \"@graph\"\r\n   }\r\n}\r\n...\r\n\"example\" : {\r\n   \"https://.../g1\" : { ....},\r\n   \"https://.../g2\" : {....},\r\n}\r\n```\r\n\r\nWhich would generate a number of graphs with explicit URL-s. It is symmetrical to `\"@container\":\"@id\"`, and the user can of course use blank node id-s in place of the URL-s.\r\n\r\nIf there is huge need for the automatic blank node generation, we may add a separate keyword for blank nodes, something like `\"@container\":[\"@graph\", \"@bid\"]` to fall back to the current syntax. But if we do that, we should also add this to the `\"@container\":\"@id\"` case imho." .
<https://api.github.com/repos/w3c/json-ld-syntax> <http://example.com/ns#issue> <https://api.github.com/repos/w3c/json-ld-syntax/issues/124> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/124> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/124"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/124> <http://schema.org/identifier> "124"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/124> <http://schema.org/name> "Bunch of editorial issues, part I" .
<https://api.github.com/users/iherman> <http://schema.org/accountId> "iherman" .
<https://api.github.com/users/iherman> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/520723?v=4" .
<https://api.github.com/users/iherman> <http://schema.org/url> "https://github.com/iherman"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/iherman> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/124> <http://schema.org/creator> <https://api.github.com/users/iherman> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:editorial> <http://schema.org/name> "spec:editorial" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:editorial> <http://schema.org/color> "58820a" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:editorial> <http://schema.org/description> "" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/124> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:editorial> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/124> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/124> <http://example.com/ns#assignee> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/124> <http://schema.org/startDate> "2019-02-04T16:56:31Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/124> <http://schema.org/endDate> "2019-02-16T21:25:30Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/124> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/124> <http://schema.org/description> "In preparing for the F2F I am re-reading the syntax document. I have spotted a bunch of issues that I consider editorial. Instead of filing a whole lot of mini issues, I have collected them here; I guess that these are really of interest for @gkellogg  and @pchampin.\r\n\r\nThis is the first batch; I have to go to do something else now. I will try to get to the end of the document tomorrow, using my airport waiting time and so...\r\n\r\n- [x] Section Set of Documents: I guess the reference to JSON-LD should go to the /TR URL (like for the API and framing) and not to the editor's draft...\r\n- [x] The terms embedded and scoped contexts should be added to the list of terms in 1.4.\r\n- [x] I 1.4, it says \"A list object is a dictionary that has a @list key.\". Shouldn't it say \"... that has @list as a unique key.\"? I guess the same for **set**.\r\n- [x] in 1.6: \"Within a directed graph, nodes with may be unnamed,...\": 'with' is probably superfluous.\r\n- [x] section 2: the first and third paragraphs are repetitive. I would think the first one is automatically generated by respec...\r\n- [x] section 2, namespace table: the only occurrence of the cred namespace is in its full expanded (URI) form, and not as a prefix. Should be removed from the table. The same holds for geojson and prov.\r\n- [x] In both example 3 & 4 the comments overflow, ie, one has to scroll horizontally. Not very pleasant...\r\n- [x] In 3.2: also in view of the separate discussion in #25 it may be a good idea to emphasize that IRI-s may also include non-URL-s, and that is absolutely fine as far as JSON-LD goes. A separate example using, for example, a `uuid` or `doi` IRI, or somethings similar, maybe helpful at that point...\r\n- [x] in 3.5: in the last two nodes the `@type` is not systematically marked with a `<code>`...\r\n- [x] in 3.5: it is difficult to understand what this quote:\r\n\r\n    > The ability coerce a value using a term definition is distinct from setting one or more types on a node object, as the former does not result in new data being added to the graph, while the later manages node types through adding additional relationships to the graph.\r\n\r\n    means at this point. I wonder whether it is not better placed in the section that describes type coercion...\r\n- [x] Section 4.1 example 18 is the first example where the top level of the JSON-LD fragment is an array and not an object. I think this deserves a somewhat more detailed explanation, because (this is the same graph with two different objects, ie, this is a bush and not tree, etc). This also emphasizes why the fact that \"contexts may be used any time a dictionary is defined.\" makes real sense even on the top level.\r\n- [x] Also, in the same section: isn't what is described the in example 19 what we refer to as 'embedded context'? It may be worth naming this, it helped us in the discussions, it may help others...\r\n- [x] For some reasons, the link to the playground from example 24 yields a bunch of strange errors...\r\n- [x] No tabs to the various version ins example 25\r\n- [x] I am not sure I understand the two paragraphs after example 30 in section 4.1.4. Is the first paragraph, ie,\r\n\r\n    > In JSON-LD 1.0, terms may be chosen as compact IRI prefixes when compacting only if a simple term definition is used where the value ends with a URI gen-delim character (e.g, /, # and others, see [RFC3986]). The previous specification allows any term to be chosen as a compact IRI prefix, which led to a poor experience.\r\n\r\n    The second sentence seems to contradict the first. And I looked into 1.0 and did not find such a restriction, although I may have missed it. Isn't it possible that the first sentence (which is repeated in the paragraph that follows) is what we introduce in 1.1? On the other hand, the paragraph _after_ the note seems to repeat the same information as the one _before_ the note.\r\n- [x] After example 32: \"the term is a keyword are be ignored.\" the word 'be' is superfluous.\r\n- [x] I failed to understand, I must admit, the description after example 32. Also: as a casual reader, at this point, I do not know what 'compaction algorithm; and `@container` with a value `@set` means, so the whole paragraph, and the following example, is a mystery. Maybe this whole part should be moved to the compaction algorithm where it gets some sense...\r\n- [x] In the note \"Aliased keywords MUST NOT be used within a context, itself.\": is the comma necessary before 'itself'?\r\n- [x] This description (after example 40):\r\n\r\n    > When expanding, each value of @type is considered (ordering them lexographically) where that value is also a term in the active context having its own embedded context. If so, that embedded context is applied to the active context. When compacting, if a term is chosen to represent an IRI used as a value of @type where that term definition also has an embedded context, it is then applied to the active context to affect further compaction.\r\n\r\n    would deserve its own example. It is very difficult to understand what it is (I failed...) Most notably, the first-time reader does not understand what 'Compacting' means, in fact. Maybe move that into the compaction section? (B.t.w., it should be 'lexicographically'...)\r\n- [x] (still barney...) after 46 it may be worth adding _why_ the expansion of barney is different: the first occurrence is based on `@id`, hence is a relative URL, etc... Just to help the reader!\r\n- [x] Example 61, lists of lists... the definition does not really make it clear that `\"@container\":\"@list\"` is, sort of, recursive. At first read what it says that the immediate children are lists, but that does _not_ necessary means (from the text) that the array:\r\n  \r\n    ```\r\n            [-10.0, -10.0],\r\n            [10.0, -10.0],\r\n            [10.0, 10.0],\r\n            [-10.0, -10.0]\r\n    ```\r\n    is itself a list. It only says that if I have several of these groups, those constitute a list. (is this an editorial comment, actually?)\r\n- [x] for the first time reader, the usage of `@graph` to denote a bush does come a bit out of the blue in example 67. This explains a separate explanation (including emphasizing the difference between a tree and a bush?).\r\n- [x] end of 4.5.1 says:\r\n\r\n    > It is worth noting that blank node identifiers may be relabeled during processing. If a developer finds that they refer to the blank node more than once, they should consider naming the node using a dereferenceable IRI so that it can also be referenced from other documents.\r\n\r\n    Was this fact also true in JSON-LD 1.0? I thought the algorithm included an explicit way of generating the blank node id-s, which made them, essentially, fixed. If so, it may be worth emphasizing that in 1.1 the user should not expect that...\r\n- [x] After example 71 in 4.6.1 it says:\r\n\r\n    > This allows a developer to access the German version of the post using the following code snippet: `obj.post.de`.\r\n\r\n    I think this should deserve a little bit more explanation as for `obj.post.de`: something whereby if the JSON-LD snippet is used by a traditional JSON processor in, e.g., Javascript, then this type of access to the values is made available, or something like that. Just say \"code snippet\" is a bit unclear for the reader and would look for something related to the JSON-LD processor code or something similar...\r\n- [x] I really believe that Section 4.8 should be separated from the rest of section 4. It is a very different ballgame when one begins to fiddle around with graphs...\r\n" .
<https://api.github.com/repos/w3c/json-ld-syntax> <http://example.com/ns#issue> <https://api.github.com/repos/w3c/json-ld-syntax/issues/123> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/123> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/123"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/123> <http://schema.org/identifier> "123"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/123> <http://schema.org/name> "IRI expansions in the context... a bit messy:-(" .
<https://api.github.com/users/iherman> <http://schema.org/accountId> "iherman" .
<https://api.github.com/users/iherman> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/520723?v=4" .
<https://api.github.com/users/iherman> <http://schema.org/url> "https://github.com/iherman"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/iherman> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/123> <http://schema.org/creator> <https://api.github.com/users/iherman> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/propose%20closing> <http://schema.org/name> "propose closing" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/propose%20closing> <http://schema.org/color> "bf5315" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/propose%20closing> <http://schema.org/description> "" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/123> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/propose%20closing> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/123> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/123> <http://schema.org/startDate> "2019-02-04T15:32:12Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/123> <http://schema.org/endDate> "2019-02-12T23:32:13Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/123> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/123> <http://schema.org/description> "While re-reading the syntax document I got to [example 36](https://w3c.github.io/json-ld-syntax/#example-36-using-a-compact-iri-as-a-term) and [example 37](https://w3c.github.io/json-ld-syntax/#example-37-associating-context-definitions-with-absolute-iris) and I must admit it is still a mystery to me. I wonder whether this is purely editorial and can be explained better or whether it _is_ messy.\r\n\r\nIf the latter, we may want to consider revising this part of the algorithm and possibly disallowing certain combination. As it stands, this is the type of complication that may drive away people from JSON-LD... ☹️ " .
<https://api.github.com/repos/w3c/json-ld-syntax> <http://example.com/ns#issue> <https://api.github.com/repos/w3c/json-ld-syntax/issues/122> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/122> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/122"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/122> <http://schema.org/identifier> "122"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/122> <http://schema.org/name> "Graph container text and implementation do not match..." .
<https://api.github.com/users/iherman> <http://schema.org/accountId> "iherman" .
<https://api.github.com/users/iherman> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/520723?v=4" .
<https://api.github.com/users/iherman> <http://schema.org/url> "https://github.com/iherman"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/iherman> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/122> <http://schema.org/creator> <https://api.github.com/users/iherman> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/propose%20closing> <http://schema.org/name> "propose closing" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/propose%20closing> <http://schema.org/color> "bf5315" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/propose%20closing> <http://schema.org/description> "" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/122> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/propose%20closing> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:editorial> <http://schema.org/name> "spec:editorial" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:editorial> <http://schema.org/color> "58820a" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:editorial> <http://schema.org/description> "" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/122> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:editorial> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/122> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/122> <http://example.com/ns#assignee> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/122> <http://schema.org/startDate> "2019-02-04T10:24:17Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/122> <http://schema.org/endDate> "2019-02-22T02:13:03Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/122> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/122> <http://schema.org/description> "The text underneath https://w3c.github.io/json-ld-syntax/#ex-88-implicitly-named-graph says:\r\n\r\n> The example above expresses a named graph that is identified by the blank node identifier _:b0. That graph is composed of the statements about Manu and Gregg. Metadata about the graph itself is expressed via the generatedAt property, which specifies when the graph was generated.\r\n\r\nThis seems to be wrong. The playground result, as well as the text above the example suggests that it should say something like:\r\n\r\n> The example above expresses two named graphs, identified by blank nodes. These graphs are composed of the statements about Manu and Gregg, respectively, each in its own separate graphs. \r\n\r\nStrictly speaking, the `generatedAt` is about a _resource_ (`http://example.org/foaf-graph`) which is not a dataset/graph, \"just\" a resource.\r\n\r\nWe may want to spend some time looking over the whole section..." .
<https://api.github.com/repos/w3c/json-ld-syntax> <http://example.com/ns#issue> <https://api.github.com/repos/w3c/json-ld-syntax/issues/121> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/121> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/121"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/121> <http://schema.org/identifier> "121"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/121> <http://schema.org/name> "Term definitions in context that support multiple values for @type?" .
<https://api.github.com/users/tcole3> <http://schema.org/accountId> "tcole3" .
<https://api.github.com/users/tcole3> <http://schema.org/image> "https://avatars2.githubusercontent.com/u/7622978?v=4" .
<https://api.github.com/users/tcole3> <http://schema.org/url> "https://github.com/tcole3"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/tcole3> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/121> <http://schema.org/creator> <https://api.github.com/users/tcole3> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:wontfix> <http://schema.org/name> "spec:wontfix" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:wontfix> <http://schema.org/color> "2bafa2" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:wontfix> <http://schema.org/description> "" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/121> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:wontfix> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/121> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/121> <http://schema.org/startDate> "2019-02-02T20:53:59Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/121> <http://schema.org/endDate> "2019-02-09T15:02:22Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/121> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/121> <http://schema.org/description> "As noted in another issue, https://github.com/w3c/json-ld-syntax/issues/20#issuecomment-459996322, and elsewhere, schema.org has several properties that can take a value which can be either a schema:Text or a schema:URL. For example, regarding the schema.org property _encodingFormat_ (which supersedes the _fileFormat_ property), schema.org suggests that values for this property be a: \r\n> \"Media type typically expressed using a MIME format (see IANA site and MDN reference) e.g. _application/zip_ for a SoftwareApplication binary, _audio/mpeg_ for .mp3 etc.). ... Unregistered or niche encoding and file formats can be indicated instead via the most appropriate URL, e.g. defining Web page or a Wikipedia/Wikidata entry.\" \r\n\r\nTheir 3 examples use string values for _encodingFormat_: image/png, audio/mpeg, text/html, text/javascript, and text/css, but as explicitly specified in the definition quoted above, a URL would also be an acceptable value for _encodingFormat_. \r\n\r\nTerm definitions like this suggest a need for a new feature in json-ld that supports defining a term in a context so as to say that values for that term may be either a string or an @id (and similar combinations of primitive data types). \r\n\r\nOr possibly a way in json-ld context to support user defined types that are unions of primitive data types. \r\n\r\nIs this functionality already supported in some way? Or did this idea for a feature extension already come up in the Community Group and get rejected for some reason? \r\n " .
<https://api.github.com/repos/w3c/json-ld-syntax> <http://example.com/ns#issue> <https://api.github.com/repos/w3c/json-ld-syntax/issues/120> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/120> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/120"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/120> <http://schema.org/identifier> "120"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/120> <http://schema.org/name> "What if a sealed context sets `@vocab`?" .
<https://api.github.com/users/pchampin> <http://schema.org/accountId> "pchampin" .
<https://api.github.com/users/pchampin> <http://schema.org/image> "https://avatars1.githubusercontent.com/u/304612?v=4" .
<https://api.github.com/users/pchampin> <http://schema.org/url> "https://github.com/pchampin"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/pchampin> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/120> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/propose%20closing> <http://schema.org/name> "propose closing" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/propose%20closing> <http://schema.org/color> "bf5315" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/propose%20closing> <http://schema.org/description> "" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/120> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/propose%20closing> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/120> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/120> <http://schema.org/startDate> "2019-01-30T17:28:09Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/120> <http://schema.org/endDate> "2019-02-20T05:37:47Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/120> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/120> <http://schema.org/description> "Consider the following context\r\n```json\r\n{\r\n  \"@context\": {\r\n    \"@vocab\": \"http://schema.org/\"\r\n  }\r\n}\r\n```\r\nBasically, it provides a blanket interpretation for any term. Now, what if I add `\"@sealed\":true` in that context? Should it prevent further contexts to redefine *any* term at all? And, of course, to reset `@vocab` to another value?\r\n\r\nI don't think that the use-cases addressed by sealed contexts require the functionality offered by `@vocab`. In my view, only the *term definitions* of a sealed context are sealed, not the `@vocab`. As such, if a sealed context defines `@vocab`, it would probably be useful to issue a warning explaining that, unless the rest of the sealed context, `@vocab` might be overridden.\r\n" .
<https://api.github.com/repos/w3c/json-ld-syntax> <http://example.com/ns#issue> <https://api.github.com/repos/w3c/json-ld-syntax/issues/119> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/119> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/119"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/119> <http://schema.org/identifier> "119"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/119> <http://schema.org/name> "Proposed description of sealed contexts" .
<https://api.github.com/users/pchampin> <http://schema.org/accountId> "pchampin" .
<https://api.github.com/users/pchampin> <http://schema.org/image> "https://avatars1.githubusercontent.com/u/304612?v=4" .
<https://api.github.com/users/pchampin> <http://schema.org/url> "https://github.com/pchampin"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/pchampin> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/119> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/119> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/119> <http://schema.org/startDate> "2019-01-30T17:17:20Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/119> <http://schema.org/endDate> "2019-02-13T18:37:41Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/119> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/pulls/119> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/119"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/119> <http://example.com/ns#pullRequest> <https://api.github.com/repos/w3c/json-ld-syntax/pulls/119> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/119> <http://schema.org/description> "As per my action during last call, here is a first proposal to describe sealed contexts in the Syntax document. A few comments about this text:\n\n* After writing this, I take back what I said about multiple sealed contexts; I think it can work. I'm still not comfortable with sealing individual terms, though (and the algorithm that I am about the propose does not handle them). However I chose not to mention them in this non-normative section, to keep it short enough.\n\n* Resetting `@context` to `null` must also be prevented by sealed contexts, since it resets *all* term definitions. I didn't mention that in the text, though, because the effect of setting `@context` to null is never described in the document (it is in the API doc).\n\n* Finally, I didn't mention \"extension points\" in sealed contexts (i.e. terms of a sealed context that explicit reset the context and hence stop the sealing).\n\n* The first example in the \"Sealed contexts\" section will actually fail(?) and thus provide no result. So may be the alternative versions should not even be included??\n\n\n<!--\n    This comment and the below content is programatically generated.\n    You may add a comma-separated list of anchors you'd like a\n    direct link to below (e.g. #idl-serializers, #idl-sequence):\n\n    Don't remove this comment or modify anything below this line.\n    If you don't want a preview generated for this pull request,\n    just replace the whole of this comment's content by \"no preview\"\n    and remove what's below.\n-->\n***\n<a href=\"https://pr-preview.s3.amazonaws.com/w3c/json-ld-syntax/pull/119.html\" title=\"Last updated on Feb 13, 2019, 6:18 PM UTC (876c194)\">Preview</a> | <a href=\"https://pr-preview.s3.amazonaws.com/w3c/json-ld-syntax/119/1533ca9...876c194.html\" title=\"Last updated on Feb 13, 2019, 6:18 PM UTC (876c194)\">Diff</a>" .
<https://api.github.com/repos/w3c/json-ld-syntax> <http://example.com/ns#issue> <https://api.github.com/repos/w3c/json-ld-syntax/issues/117> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/117> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/117"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/117> <http://schema.org/identifier> "117"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/117> <http://schema.org/name> "Distinguishing between strings and relative URIs" .
<https://api.github.com/users/markwilkinson> <http://schema.org/accountId> "markwilkinson" .
<https://api.github.com/users/markwilkinson> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/986414?v=4" .
<https://api.github.com/users/markwilkinson> <http://schema.org/url> "https://github.com/markwilkinson"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/markwilkinson> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/117> <http://schema.org/creator> <https://api.github.com/users/markwilkinson> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/117> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/117> <http://schema.org/startDate> "2019-01-22T12:09:57Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/117> <http://schema.org/endDate> "2019-01-23T08:00:01Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/117> <http://example.com/ns#authorAssociation> "NONE" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/117> <http://schema.org/description> "https://w3c.github.io/json-ld-syntax/#ex-106-using-the-document-base-url-to-establish-the-default-base-iri\r\n\r\nYour example seems to be able to distinguish the value of the \"name\" property as being a string, and the \"spouse\" property as being a relative URL.... but I don't see the structural difference (other than the \"name\" value contains a string... but that surely isn't the discriminating feature...?)\r\n\r\nAdvice please, \r\n\r\nMark\r\n" .
<https://api.github.com/repos/w3c/json-ld-syntax> <http://example.com/ns#issue> <https://api.github.com/repos/w3c/json-ld-syntax/issues/116> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/116> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/116"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/116> <http://schema.org/identifier> "116"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/116> <http://schema.org/name> "Allow partial definition / redefinition of terms" .
<https://api.github.com/users/azaroth42> <http://schema.org/accountId> "azaroth42" .
<https://api.github.com/users/azaroth42> <http://schema.org/image> "https://avatars3.githubusercontent.com/u/871868?v=4" .
<https://api.github.com/users/azaroth42> <http://schema.org/url> "https://github.com/azaroth42"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/azaroth42> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/116> <http://schema.org/creator> <https://api.github.com/users/azaroth42> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/propose%20closing> <http://schema.org/name> "propose closing" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/propose%20closing> <http://schema.org/color> "bf5315" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/propose%20closing> <http://schema.org/description> "" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/116> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/propose%20closing> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/satisfied> <http://schema.org/name> "satisfied" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/satisfied> <http://schema.org/color> "4be23b" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/satisfied> <http://schema.org/description> "Requirement Satisfied" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/116> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/satisfied> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/116> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/116> <http://schema.org/startDate> "2019-01-18T20:09:28Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/116> <http://schema.org/endDate> "2019-03-22T17:59:43Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/116> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/116> <http://schema.org/description> "From #20, there is the notion of partially defining or redefining terms in separate contexts.\r\n\r\nFor example, removing the sealing from the picture, ...\r\n\r\n```\r\n{\r\n  \"@context\": [\r\n    {\"wild_west\": {\"@id\": \"eg:playground\"}},\r\n    {\"wild_west\": {\"@context\": \"http://schema.org\"}}\r\n  ]\r\n}\r\n```\r\n\r\nShould set the scoped context for `wild_west` to schema.org in the second context of the list, without resetting the predicate defined in the first.\r\n" .
<https://api.github.com/repos/w3c/json-ld-syntax> <http://example.com/ns#issue> <https://api.github.com/repos/w3c/json-ld-syntax/issues/115> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/115> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/115"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/115> <http://schema.org/identifier> "115"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/115> <http://schema.org/name> "Enable @context to map a property differently depending on its hierarchical path" .
<https://api.github.com/users/dbooth-boston> <http://schema.org/accountId> "dbooth-boston" .
<https://api.github.com/users/dbooth-boston> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/5123226?v=4" .
<https://api.github.com/users/dbooth-boston> <http://schema.org/url> "https://github.com/dbooth-boston"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/dbooth-boston> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/115> <http://schema.org/creator> <https://api.github.com/users/dbooth-boston> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/satisfied> <http://schema.org/name> "satisfied" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/satisfied> <http://schema.org/color> "4be23b" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/satisfied> <http://schema.org/description> "Requirement Satisfied" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/115> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/satisfied> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:duplicate> <http://schema.org/name> "spec:duplicate" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:duplicate> <http://schema.org/color> "e0082c" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:duplicate> <http://schema.org/description> "" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/115> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:duplicate> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/115> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/115> <http://schema.org/startDate> "2019-01-16T18:25:54Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/115> <http://schema.org/endDate> "2019-01-16T18:59:36Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/115> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/115> <http://schema.org/description> "In mapping a JSON property to an RDF URI, it is not currently possible (in JSON-LD 1.0) to use a single `@context` to map the same property name to different RDF URIs depending on that property's position in the JSON hierarchy.  It would be helpful to be able to do this, perhaps by using the hierarchical path of the property.  For example, in the following JSON, notice that the \"code\" property appears twice, at different levels of the hierarchy, and its value is an object in one case and a string in another.  (See [slide 9](http://dbooth.org/2015/fhir/json-ld/fhir-in-json-ld-OLD.pdf).)  \r\n\r\n```\r\n{ \"resourceType\": \"Observation\",\r\n  \"id\": \"example\",\r\n  \"code\": {\r\n    \"coding\": [\r\n      {\r\n        \"system\": \"http://loinc.org\",\r\n        \"code\": \"3141­9\",\r\n        \"display\": \"Weight Measured\"\r\n      }\r\n    ]\r\n  }\r\n```\r\n\r\nIf the `@context` could allow a path-dependent mapping, then this problem could have been solved.  For example, these two paths would allow the above \"code\" properties to be distinguished:\r\n\r\n```\r\ncode\r\ncode/coding/code\r\n```\r\n\r\n**BACKGROUND** This issue derives from an important use case that we faced in healthcare.  In 2015 as part of a collaboration between HL7 and W3C we were trying to figure out an acceptable way to provide a JSON-LD serialization for FHIR.  ([FHIR](http://build.fhir.org/) is the latest up-and-coming HL7 standard for exchanging healthcare data.)  FHIR already offered XML and plain JSON serializations, and the goal was to add support for RDF.  Since JSON-LD can be used either as plain JSON or as RDF, we were hoping that we could figure out a JSON-LD `@context` and serialization that would be friendly to plain JSON users but also provide the desired mapping to RDF.  We explored possibilities but reached a show-stopper when we discovered the above limitation, because the only work-arounds that we were able to figure out would have put too much burden on plain JSON users.   \r\n\r\nFor example, one potential work-around would have been to include an addition @context nested in the instance data whenever the nested use of the \"code\" property appears.  This would have achieved the RDF compatibility goal, but it would have been too onerous for plain JSON users who would have seen no good reason for having it there.\r\n\r\nAnother potential work-around would have been to change the JSON property names to make them unique, such as using \"code\" and \"codeValue\".  But the design philosophy of FHIR did not allow this much central control over different parts of a FHIR data object, and the FHIR/RDF camp did not have the clout to convince plain JSON users of the need, since we are far outnumbered.\r\n\r\nBecause of this limitation we had to abandon the option of using a single JSON-LD serialization for both plain JSON users and RDF users.  That seemed quite unfortunate given that a major goal of JSON-LD is to bridge these worlds.  We are hoping that this limitation can be addressed in the next version of JSON-LD." .
<https://api.github.com/repos/w3c/json-ld-syntax> <http://example.com/ns#issue> <https://api.github.com/repos/w3c/json-ld-syntax/issues/114> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/114> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/114"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/114> <http://schema.org/identifier> "114"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/114> <http://schema.org/name> "Update text on vocabulary mapping and `@vocab` to allow relative IRIs" .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/114> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/114> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/114> <http://schema.org/startDate> "2019-01-09T21:19:38Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/114> <http://schema.org/endDate> "2019-01-15T21:06:38Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/114> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/pulls/114> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/114"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/114> <http://example.com/ns#pullRequest> <https://api.github.com/repos/w3c/json-ld-syntax/pulls/114> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/114> <http://schema.org/description> "which are resolved relative to the `base IRI`. This subsumes the previous usage of allowing just the empty string.\n\nThis is for #72.\n\n\n<!--\n    This comment and the below content is programatically generated.\n    You may add a comma-separated list of anchors you'd like a\n    direct link to below (e.g. #idl-serializers, #idl-sequence):\n\n    Don't remove this comment or modify anything below this line.\n    If you don't want a preview generated for this pull request,\n    just replace the whole of this comment's content by \"no preview\"\n    and remove what's below.\n-->\n***\n<a href=\"https://pr-preview.s3.amazonaws.com/w3c/json-ld-syntax/pull/114.html\" title=\"Last updated on Jan 12, 2019, 10:45 PM UTC (e3dbac5)\">Preview</a> | <a href=\"https://pr-preview.s3.amazonaws.com/w3c/json-ld-syntax/114/174c2f9...e3dbac5.html\" title=\"Last updated on Jan 12, 2019, 10:45 PM UTC (e3dbac5)\">Diff</a>" .
<https://api.github.com/repos/w3c/json-ld-syntax> <http://example.com/ns#issue> <https://api.github.com/repos/w3c/json-ld-syntax/issues/111> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/111> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/111"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/111> <http://schema.org/identifier> "111"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/111> <http://schema.org/name> "Define additional profile URIs" .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/111> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/111> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/111> <http://schema.org/startDate> "2018-12-21T20:11:34Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/111> <http://schema.org/endDate> "2019-01-12T20:36:31Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/111> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/pulls/111> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/111"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/111> <http://example.com/ns#pullRequest> <https://api.github.com/repos/w3c/json-ld-syntax/pulls/111> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/111> <http://schema.org/description> "... and the interpretation of an unspecified URL for specifying context or frame.\n\nFor #8.\n\n\n<!--\n    This comment and the below content is programatically generated.\n    You may add a comma-separated list of anchors you'd like a\n    direct link to below (e.g. #idl-serializers, #idl-sequence):\n\n    Don't remove this comment or modify anything below this line.\n    If you don't want a preview generated for this pull request,\n    just replace the whole of this comment's content by \"no preview\"\n    and remove what's below.\n-->\n***\n<a href=\"https://pr-preview.s3.amazonaws.com/w3c/json-ld-syntax/pull/111.html\" title=\"Last updated on Jan 12, 2019, 8:29 PM UTC (c212913)\">Preview</a> | <a href=\"https://pr-preview.s3.amazonaws.com/w3c/json-ld-syntax/111/6f92b1d...c212913.html\" title=\"Last updated on Jan 12, 2019, 8:29 PM UTC (c212913)\">Diff</a>" .
<https://api.github.com/repos/w3c/json-ld-syntax> <http://example.com/ns#issue> <https://api.github.com/repos/w3c/json-ld-syntax/issues/110> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/110> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/110"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/110> <http://schema.org/identifier> "110"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/110> <http://schema.org/name> "Added informative reference to SPARQL11-OVERVIEW in intro" .
<https://api.github.com/users/pchampin> <http://schema.org/accountId> "pchampin" .
<https://api.github.com/users/pchampin> <http://schema.org/image> "https://avatars1.githubusercontent.com/u/304612?v=4" .
<https://api.github.com/users/pchampin> <http://schema.org/url> "https://github.com/pchampin"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/pchampin> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/110> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/110> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/110> <http://schema.org/startDate> "2018-12-18T10:42:50Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/110> <http://schema.org/endDate> "2018-12-18T19:29:44Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/110> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/pulls/110> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/110"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/110> <http://example.com/ns#pullRequest> <https://api.github.com/repos/w3c/json-ld-syntax/pulls/110> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/110> <http://schema.org/description> "@gkellogg I'd rather use a PR for the moment, to be sure I don't mess things up.\n\nYou'll have to explain to me what magic inserted the correct text for SPARQL11-OVERVIEW in the reference section -- and what would have been required to insert it in the *normative* references instead...\n\n\n<!--\n    This comment and the below content is programatically generated.\n    You may add a comma-separated list of anchors you'd like a\n    direct link to below (e.g. #idl-serializers, #idl-sequence):\n\n    Don't remove this comment or modify anything below this line.\n    If you don't want a preview generated for this pull request,\n    just replace the whole of this comment's content by \"no preview\"\n    and remove what's below.\n-->\n***\n<a href=\"https://pr-preview.s3.amazonaws.com/w3c/json-ld-syntax/pull/110.html\" title=\"Last updated on Dec 18, 2018, 10:43 AM UTC (7ad37e3)\">Preview</a> | <a href=\"https://pr-preview.s3.amazonaws.com/w3c/json-ld-syntax/110/fa04af8...7ad37e3.html\" title=\"Last updated on Dec 18, 2018, 10:43 AM UTC (7ad37e3)\">Diff</a>" .
<https://api.github.com/repos/w3c/json-ld-syntax> <http://example.com/ns#issue> <https://api.github.com/repos/w3c/json-ld-syntax/issues/109> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/109> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/109"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/109> <http://schema.org/identifier> "109"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/109> <http://schema.org/name> "Add SPARQL to the section I " .
<https://api.github.com/users/PaulJeong14> <http://schema.org/accountId> "PaulJeong14" .
<https://api.github.com/users/PaulJeong14> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/22092729?v=4" .
<https://api.github.com/users/PaulJeong14> <http://schema.org/url> "https://github.com/PaulJeong14"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/PaulJeong14> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/109> <http://schema.org/creator> <https://api.github.com/users/PaulJeong14> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:editorial> <http://schema.org/name> "spec:editorial" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:editorial> <http://schema.org/color> "58820a" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:editorial> <http://schema.org/description> "" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/109> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:editorial> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/109> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/users/pchampin> <http://schema.org/accountId> "pchampin" .
<https://api.github.com/users/pchampin> <http://schema.org/image> "https://avatars1.githubusercontent.com/u/304612?v=4" .
<https://api.github.com/users/pchampin> <http://schema.org/url> "https://github.com/pchampin"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/pchampin> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/109> <http://example.com/ns#assignee> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/109> <http://schema.org/startDate> "2018-12-18T07:52:01Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/109> <http://schema.org/endDate> "2019-01-04T19:21:46Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/109> <http://example.com/ns#authorAssociation> "NONE" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/109> <http://schema.org/description> "In the introduction section, SPARQL is referred like below. \r\n\r\n> JSON-LD is designed to be usable directly as JSON, with no knowledge of RDF [RDF11-CONCEPTS]. It is also designed to be usable as RDF, if desired, for use with other Linked Data technologies like SPARQL. \r\n\r\nBut no reference for that in section I.  \r\nI suggest putting the SPARQL(https://www.w3.org/TR/sparql11-query/) standard into the section I as an informative reference." .
<https://api.github.com/repos/w3c/json-ld-syntax> <http://example.com/ns#issue> <https://api.github.com/repos/w3c/json-ld-syntax/issues/108> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/108> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/108"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/108> <http://schema.org/identifier> "108"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/108> <http://schema.org/name> "Consider context by reference with metadata" .
<https://api.github.com/users/azaroth42> <http://schema.org/accountId> "azaroth42" .
<https://api.github.com/users/azaroth42> <http://schema.org/image> "https://avatars3.githubusercontent.com/u/871868?v=4" .
<https://api.github.com/users/azaroth42> <http://schema.org/url> "https://github.com/azaroth42"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/azaroth42> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/108> <http://schema.org/creator> <https://api.github.com/users/azaroth42> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/defer-future-version> <http://schema.org/name> "defer-future-version" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/defer-future-version> <http://schema.org/color> "000000" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/defer-future-version> <http://schema.org/description> "Defer this issue until a future version of JSON-LD" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/108> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/defer-future-version> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/privacy-tracker> <http://schema.org/name> "privacy-tracker" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/privacy-tracker> <http://schema.org/color> "d4af37" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/privacy-tracker> <http://schema.org/description> "Group bringing to attention of Privacy, or tracked by the Privacy Group but not needing response." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/108> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/privacy-tracker> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/security-tracker> <http://schema.org/name> "security-tracker" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/security-tracker> <http://schema.org/color> "ffff00" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/security-tracker> <http://schema.org/description> "Group bringing to attention of security, or tracked by the security Group but not needing response." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/108> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/security-tracker> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/108> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#OpenIssue> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/108> <http://schema.org/startDate> "2018-12-14T22:34:26Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/108> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/108> <http://schema.org/description> "\r\nOn the call of 2018-12-14, we discussed (briefly) #20, #98, and #86. One realization that came out of the discussion was that we currently have two ways to refer to contexts - either by references as a single string (the URI of the context) or by value as a JSON object (the actual context). In order to have in-document metadata about the context, such as asserting fixity such as via the SRI specification, we would need to have a URI with additional metadata about it.\r\n\r\nQuestions that arise:\r\n\r\n* How to distinguish between a context by value JSON object and a context by reference with metadata JSON object?\r\n* As the version is in the context, and this functionality is only version 1.1, how would we signal the processing requirement - some sort of transclusion within a context that has the version?\r\n* Are metadata properties extensible or fixed in the specification? If they're extensible, we would need some sort of meta-context wherein the mapping is asserted. If they're fixed, we would need to be very careful to accommodate the various use cases otherwise the tendency will be to simply add in new keys regardless and hope for the best.\r\n\r\nFor example:\r\n\r\n```\r\n{\r\n  \"@context\": [\r\n    \"https://example.com/context-by-reference\",\r\n    {\"id\": \"@id\"},\r\n    {\"@version\": 1.1, \"@context\": \"https://example.com/context-with-metadata\", \"@sri\": \"sha256-abcd\"}\r\n  ]\r\n}\r\n```\r\n" .
<https://api.github.com/repos/w3c/json-ld-syntax> <http://example.com/ns#issue> <https://api.github.com/repos/w3c/json-ld-syntax/issues/103> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/103> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/103"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/103> <http://schema.org/identifier> "103"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/103> <http://schema.org/name> "what is null base URL for an embedded json-ld?" .
<https://api.github.com/users/iherman> <http://schema.org/accountId> "iherman" .
<https://api.github.com/users/iherman> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/520723?v=4" .
<https://api.github.com/users/iherman> <http://schema.org/url> "https://github.com/iherman"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/iherman> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/103> <http://schema.org/creator> <https://api.github.com/users/iherman> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:enhancement> <http://schema.org/name> "spec:enhancement" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:enhancement> <http://schema.org/color> "c11537" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:enhancement> <http://schema.org/description> "" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/103> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:enhancement> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/103> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#OpenIssue> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/103> <http://schema.org/startDate> "2018-12-06T08:14:26Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/103> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/103> <http://schema.org/description> "This issue came up in the Publishing Working Group, see https://github.com/w3c/wpub/issues/374. The question is what exactly the JSON-LD processor's behavior should be if, for some reasons the `baseURI` value for the `<script>` element is null. An example for such a situation is in https://github.com/w3c/wpub/issues/374#issuecomment-444537196, brought up by @danielweck." .
<https://api.github.com/repos/w3c/json-ld-syntax> <http://example.com/ns#issue> <https://api.github.com/repos/w3c/json-ld-syntax/issues/99> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/99> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/99"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/99> <http://schema.org/identifier> "99"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/99> <http://schema.org/name> "Confused about version triggering" .
<https://api.github.com/users/BigBlueHat> <http://schema.org/accountId> "BigBlueHat" .
<https://api.github.com/users/BigBlueHat> <http://schema.org/image> "https://avatars1.githubusercontent.com/u/43209?v=4" .
<https://api.github.com/users/BigBlueHat> <http://schema.org/url> "https://github.com/BigBlueHat"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/BigBlueHat> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/99> <http://schema.org/creator> <https://api.github.com/users/BigBlueHat> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/propose%20closing> <http://schema.org/name> "propose closing" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/propose%20closing> <http://schema.org/color> "bf5315" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/propose%20closing> <http://schema.org/description> "" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/99> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/propose%20closing> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/99> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/99> <http://schema.org/startDate> "2018-11-29T22:19:52Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/99> <http://schema.org/endDate> "2019-02-20T05:38:49Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/99> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/99> <http://schema.org/description> "Current text states...\r\n> <p>The first <code>context</code> encountered when processing a document which contains <code>@version</code> determines the <code>processing mode</code>, unless it is defined explicitly through an API option.</p>\r\n\r\nHowever, the [1.1 playground](http://json-ld.org/playground-dev/) at least, seems to \"switch\" on the first context object even if it does *not* have an `@version`.\r\n\r\n[For example](https://json-ld.org/playground-dev/#startTab=tab-nquads&json-ld=%7B%22%40context%22%3A%5B%22http%3A%2F%2Fschema.org%2F%22%2C%7B%22%40version%22%3A1.1%7D%5D%2C%22%40type%22%3A%22Person%22%2C%22name%22%3A%22bar%22%7D):\r\n```json\r\n{\r\n  \"@context\": [\r\n    \"http://schema.org/\",\r\n    {\r\n      \"@version\": 1.1\r\n    }\r\n  ],\r\n  \"@type\": \"Person\",\r\n  \"name\": \"bar\"\r\n}\r\n```\r\n\r\nThrows:\r\n```\r\njsonld.ProcessingModeConflict: @version: 1.1 not compatible with json-ld-1.0\r\n```\r\n\r\nSo, my current proposal is to reword that text to:\r\n> <p>Unless it is defined explicitly through an API option, the first <code>context</code> encountered when processing a document determines the <code>processing mode</code>.</p>\r\n\r\nHowever, I'm not sure if that matches any pre-existing thoughts/plans for version triggering.\r\n\r\nDoes a `@context` *without* `@version` state that it should be processed as `json-ld-1.0`? Or since it hasn't stated an `@version` does it just fallback to the default set in the JSON-LD processor (which is currently 1.0 most places)?\r\n\r\nThe API's [4.1.2. Algorithm step 3.5](https://w3c.github.io/json-ld-api/#x4-1-2-algorithm) describes the scenario when `@version` has been set to *something* within the context, but doesn't explain what happens when one is *not* present.\r\n\r\nSo, beyond updating the text above, we may also need to address this in the API spec also." .
<https://api.github.com/repos/w3c/json-ld-syntax> <http://example.com/ns#issue> <https://api.github.com/repos/w3c/json-ld-syntax/issues/98> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/98> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/98"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/98> <http://schema.org/identifier> "98"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/98> <http://schema.org/name> "Is there a scope context mechanism for clearing context definitions?" .
<https://api.github.com/users/dlongley> <http://schema.org/accountId> "dlongley" .
<https://api.github.com/users/dlongley> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/168137?v=4" .
<https://api.github.com/users/dlongley> <http://schema.org/url> "https://github.com/dlongley"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/dlongley> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/98> <http://schema.org/creator> <https://api.github.com/users/dlongley> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/satisfied> <http://schema.org/name> "satisfied" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/satisfied> <http://schema.org/color> "4be23b" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/satisfied> <http://schema.org/description> "Requirement Satisfied" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/98> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/satisfied> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/98> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/98> <http://schema.org/startDate> "2018-11-29T16:31:07Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/98> <http://schema.org/endDate> "2019-02-09T13:46:15Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/98> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/98> <http://schema.org/description> "Is there a way to use the scoped context mechanism to \"embed\" information in a JSON-LD document such that all term definitions are cleared? So, for example, suppose we had this:\r\n\r\n```js\r\n{\r\n  \"@context\": {\r\n    \"@version\": 1.1,\r\n    \"someTermToClear\": \"ex:someTermToClear\",\r\n    \"record\": {\"@id\": \"ex:record\", \"@container\": \"@graph\", \"@context\": null}\r\n  },\r\n  \"someTermToClear\": \"should be defined here\",\r\n  \"record\": {\r\n    \"@context\": {\r\n      \"someOtherStuff\": \"ex:someOtherStuff\"\r\n    },\r\n    \"@id\": \"ex:someId\",\r\n    \"someOtherStuff\": \"this should be defined here\",\r\n    \"someTermToClear\": \"this should NOT be defined here\"\r\n  }\r\n}\r\n```\r\n\r\nThe goal here is to avoid requiring the author of `record` value (or a user of it) to have to know to clear any terms in an \"outer container\". This may allow \"safer\" composition/embedding of JSON-LD documents." .
<https://api.github.com/repos/w3c/json-ld-syntax> <http://example.com/ns#issue> <https://api.github.com/repos/w3c/json-ld-syntax/issues/91> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/91> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/91"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/91> <http://schema.org/identifier> "91"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/91> <http://schema.org/name> "Allow @type for @none in Language Maps" .
<https://api.github.com/users/BigBlueHat> <http://schema.org/accountId> "BigBlueHat" .
<https://api.github.com/users/BigBlueHat> <http://schema.org/image> "https://avatars1.githubusercontent.com/u/43209?v=4" .
<https://api.github.com/users/BigBlueHat> <http://schema.org/url> "https://github.com/BigBlueHat"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/BigBlueHat> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/91> <http://schema.org/creator> <https://api.github.com/users/BigBlueHat> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:wontfix> <http://schema.org/name> "spec:wontfix" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:wontfix> <http://schema.org/color> "2bafa2" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:wontfix> <http://schema.org/description> "" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/91> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:wontfix> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/91> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/91> <http://schema.org/startDate> "2018-11-06T18:04:58Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/91> <http://schema.org/endDate> "2018-12-08T05:59:29Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/91> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/91> <http://schema.org/description> "Multilingual values in JSON-LD is currently best handled by using the `rdf:HTML` datatype on a value in JSON-LD. However, that currently cannot be used alongside language maps.\r\n\r\nThe following example is cribbed from https://github.com/w3c/wpub/issues/299 + the addition of `@none`:\r\n```json\r\n{\r\n  \"@context\": {\r\n    \"occupation\": { \"@id\": \"ex:occupation\", \"@container\": \"@language\" },\r\n    \"description\": \"ex:description\"\r\n  },\r\n  \"name\": \"Yagyū Muneyoshi\",\r\n  \"occupation\": {\r\n    \"ja\": \"忍者\",\r\n    \"en\": \"Ninja\",\r\n    \"cs\": \"Nindža\",\r\n    \"@none\": \"<span lang=en>Ninja in japanese: <span lang=jp>忍者</span>\"\r\n  }\r\n}\r\n```\r\n\r\nThe output n-quads looks like:\r\n```turtle\r\n_:b0 <ex:occupation> \"<span lang=en>Ninja in japanese: <span lang=jp>忍者</span>\" .\r\n_:b0 <ex:occupation> \"Nindža\"@cs .\r\n_:b0 <ex:occupation> \"Ninja\"@en .\r\n_:b0 <ex:occupation> \"忍者\"@ja .\r\n```\r\n\r\nIf the content is in fact multilingual, then that first triple should look like:\r\n```turtle\r\n_:b0 <ex:occupation> \"<span lang=en>Ninja in japanese: <span lang=jp>忍者</span>\" ^^rdf:HTML.\r\n```\r\n\r\nThe first alternative I tried to express this was:\r\n```json\r\n{\r\n  \"occupation\": {\r\n    \"ja\": \"忍者\",\r\n    \"en\": \"Ninja\",\r\n    \"cs\": \"Nindža\",\r\n    \"@none\": {\r\n      \"@value\": \"<span lang=en>Ninja in japanese: <span lang=jp>忍者</span>\",\r\n      \"@type\": \"rdf:HTML\"\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nWhich currently throws:\r\n```\r\njsonld.SyntaxError: Invalid JSON-LD syntax; language map values must be strings.\r\n```\r\n\r\nGiven that `rdf:HTML` is the current recommendation for multilingual content in RDF, JSON, YAML, etc, I'd propose we find ways to express `rdf:HTML` (and perhaps future datatypes) as the type of `@none` would found in a language map--at the `@context` level and/or within the data.\r\n\r\nCheers!\r\n🎩 " .
<https://api.github.com/repos/w3c/json-ld-syntax> <http://example.com/ns#issue> <https://api.github.com/repos/w3c/json-ld-syntax/issues/89> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/89> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/89"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/89> <http://schema.org/identifier> "89"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/89> <http://schema.org/name> "TAG Review Request: Base used to resolve relative URIs to absolute URIs in HTML5 data-blocks" .
<https://api.github.com/users/azaroth42> <http://schema.org/accountId> "azaroth42" .
<https://api.github.com/users/azaroth42> <http://schema.org/image> "https://avatars3.githubusercontent.com/u/871868?v=4" .
<https://api.github.com/users/azaroth42> <http://schema.org/url> "https://github.com/azaroth42"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/azaroth42> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/89> <http://schema.org/creator> <https://api.github.com/users/azaroth42> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/satisfied> <http://schema.org/name> "satisfied" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/satisfied> <http://schema.org/color> "4be23b" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/satisfied> <http://schema.org/description> "Requirement Satisfied" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/89> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/satisfied> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/89> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/89> <http://schema.org/startDate> "2018-10-26T14:56:57Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/89> <http://schema.org/endDate> "2018-10-28T16:02:11Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/89> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/89> <http://schema.org/description> "This issue is to create a TAG review issue. Partially filled template is below.\r\n\r\n---\r\n\r\nSalut TAG,\r\n\r\nI'm requesting a TAG review of:\r\n\r\n  - Name: JSON-LD embedded in HTML with relative URIs\r\n  - Specification URL: https://github.com/w3c/json-ld-syntax/issues/23 \r\n  - Explainer, Requirements Doc, or Example code: [url]\r\n  - Tests: [wpt folder(s), if available]\r\n  - Primary contacts: @azaroth42 @bigbluehat @iherman @gkellogg\r\n\r\nFurther details (optional):\r\n\r\n  - Relevant time constraints or deadlines: [please provide]\r\n  - [ ] I have read and filled out the [Self-Review Questionnaire on Security and Privacy](https://www.w3.org/TR/security-privacy-questionnaire/). The [assessment is here](url).\r\n  - [X] I have reviewed the TAG's [API Design Principles](https://w3ctag.github.io/design-principles/)\r\n\r\nWe'd prefer the TAG provide feedback as (please select one):\r\n\r\n  - [ ] open issues in our Github repo for each point of feedback\r\n  - [ ] open a single issue in our Github repo for the entire review\r\n  - [X] leave review feedback as a comment in this issue and @-notify @azaroth42 @bigbluehat @iherman @gkellogg\r\n\r\nYou should also know that...\r\n\r\n[please tell us anything you think is relevant to this review]\r\n\r\n\r\n\r\n\r\n--------------------------\r\n" .
<https://api.github.com/repos/w3c/json-ld-syntax> <http://example.com/ns#issue> <https://api.github.com/repos/w3c/json-ld-syntax/issues/87> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/87> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/87"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/87> <http://schema.org/identifier> "87"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/87> <http://schema.org/name> "Add ability to restrict overriding of terms with graph containers" .
<https://api.github.com/users/BigBlueHat> <http://schema.org/accountId> "BigBlueHat" .
<https://api.github.com/users/BigBlueHat> <http://schema.org/image> "https://avatars1.githubusercontent.com/u/43209?v=4" .
<https://api.github.com/users/BigBlueHat> <http://schema.org/url> "https://github.com/BigBlueHat"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/BigBlueHat> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/87> <http://schema.org/creator> <https://api.github.com/users/BigBlueHat> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/87> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/87> <http://schema.org/startDate> "2018-10-25T12:51:43Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/87> <http://schema.org/endDate> "2019-02-09T13:45:39Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/87> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/87> <http://schema.org/description> "Related to #20 -- or at least proposed off the cuff by yours truly. 😁 " .
<https://api.github.com/repos/w3c/json-ld-syntax> <http://example.com/ns#issue> <https://api.github.com/repos/w3c/json-ld-syntax/issues/86> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/86> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/86"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/86> <http://schema.org/identifier> "86"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/86> <http://schema.org/name> "Can SRI be used in JSON-LD and for which use cases?" .
<https://api.github.com/users/ajs6f> <http://schema.org/accountId> "ajs6f" .
<https://api.github.com/users/ajs6f> <http://schema.org/image> "https://avatars1.githubusercontent.com/u/110994?v=4" .
<https://api.github.com/users/ajs6f> <http://schema.org/url> "https://github.com/ajs6f"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/ajs6f> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/86> <http://schema.org/creator> <https://api.github.com/users/ajs6f> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/security-tracker> <http://schema.org/name> "security-tracker" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/security-tracker> <http://schema.org/color> "ffff00" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/security-tracker> <http://schema.org/description> "Group bringing to attention of security, or tracked by the security Group but not needing response." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/86> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/security-tracker> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/86> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/86> <http://schema.org/startDate> "2018-10-25T09:59:24Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/86> <http://schema.org/endDate> "2019-04-27T07:25:18Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/86> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/86> <http://schema.org/description> "[Subresource Integrity](https://www.w3.org/TR/SRI) can be used in HTML to provide integrity support for portions of HTML documents. It may be possible to reuse that pattern in JSON-LD, and it might support various use cases around integrity, but the basic question of whether it can be done in JSON-LD syntax is still open." .
<https://api.github.com/repos/w3c/json-ld-syntax> <http://example.com/ns#issue> <https://api.github.com/repos/w3c/json-ld-syntax/issues/85> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/85> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/85"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/85> <http://schema.org/identifier> "85"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/85> <http://schema.org/name> "how to set \"@version\" for a list of contexts?" .
<https://api.github.com/users/bertvannuffelen> <http://schema.org/accountId> "bertvannuffelen" .
<https://api.github.com/users/bertvannuffelen> <http://schema.org/image> "https://avatars1.githubusercontent.com/u/1999213?v=4" .
<https://api.github.com/users/bertvannuffelen> <http://schema.org/url> "https://github.com/bertvannuffelen"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/bertvannuffelen> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/85> <http://schema.org/creator> <https://api.github.com/users/bertvannuffelen> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/propose%20closing> <http://schema.org/name> "propose closing" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/propose%20closing> <http://schema.org/color> "bf5315" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/propose%20closing> <http://schema.org/description> "" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/85> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/propose%20closing> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:editorial> <http://schema.org/name> "spec:editorial" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:editorial> <http://schema.org/color> "58820a" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:editorial> <http://schema.org/description> "" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/85> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:editorial> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/85> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/85> <http://example.com/ns#assignee> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/85> <http://schema.org/startDate> "2018-10-16T10:28:16Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/85> <http://schema.org/endDate> "2019-02-20T05:54:35Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/85> <http://example.com/ns#authorAssociation> "NONE" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/85> <http://schema.org/description> "I would like to specify for a list of contexts \r\n\r\n```\r\n{ \"@context\": [\"http://domain1.org/context1.jsonld\", \"http://domain2.org/context2.jsonld\"]}\r\n...\r\n```\r\nthe version of the processor.\r\n\r\nIt seems that  \"@version\" is only defined in case an expanded context is used. And that the above reuse case is not supported.\r\n\r\nkr,\r\n\r\nBert\r\n\r\n" .
<https://api.github.com/repos/w3c/json-ld-syntax> <http://example.com/ns#issue> <https://api.github.com/repos/w3c/json-ld-syntax/issues/82> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/82> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/82"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/82> <http://schema.org/identifier> "82"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/82> <http://schema.org/name> "Better styling on example buttons" .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/82> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:editorial> <http://schema.org/name> "spec:editorial" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:editorial> <http://schema.org/color> "58820a" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:editorial> <http://schema.org/description> "" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/82> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:editorial> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/82> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#OpenIssue> .
<https://api.github.com/users/BigBlueHat> <http://schema.org/accountId> "BigBlueHat" .
<https://api.github.com/users/BigBlueHat> <http://schema.org/image> "https://avatars1.githubusercontent.com/u/43209?v=4" .
<https://api.github.com/users/BigBlueHat> <http://schema.org/url> "https://github.com/BigBlueHat"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/BigBlueHat> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/82> <http://example.com/ns#assignee> <https://api.github.com/users/BigBlueHat> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/82> <http://schema.org/startDate> "2018-10-12T17:49:53Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/82> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/82> <http://schema.org/description> "Example buttons could be styled better, and the link to playground should look different from the others which serve to switch example views." .
<https://api.github.com/repos/w3c/json-ld-syntax> <http://example.com/ns#issue> <https://api.github.com/repos/w3c/json-ld-syntax/issues/81> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/81> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/81"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/81> <http://schema.org/identifier> "81"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/81> <http://schema.org/name> "Better styling of changes" .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/81> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/propose%20closing> <http://schema.org/name> "propose closing" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/propose%20closing> <http://schema.org/color> "bf5315" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/propose%20closing> <http://schema.org/description> "" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/81> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/propose%20closing> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:editorial> <http://schema.org/name> "spec:editorial" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:editorial> <http://schema.org/color> "58820a" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:editorial> <http://schema.org/description> "" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/81> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:editorial> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/81> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#OpenIssue> .
<https://api.github.com/users/BigBlueHat> <http://schema.org/accountId> "BigBlueHat" .
<https://api.github.com/users/BigBlueHat> <http://schema.org/image> "https://avatars1.githubusercontent.com/u/43209?v=4" .
<https://api.github.com/users/BigBlueHat> <http://schema.org/url> "https://github.com/BigBlueHat"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/BigBlueHat> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/81> <http://example.com/ns#assignee> <https://api.github.com/users/BigBlueHat> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/81> <http://schema.org/startDate> "2018-10-12T17:48:42Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/81> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/81> <http://schema.org/description> "All documents include classes that make it easy to see what's changed from 1.0. This could be styled better." .
<https://api.github.com/repos/w3c/json-ld-syntax> <http://example.com/ns#issue> <https://api.github.com/repos/w3c/json-ld-syntax/issues/76> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/76> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/76"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/76> <http://schema.org/identifier> "76"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/76> <http://schema.org/name> "Node Types in @context" .
<https://api.github.com/users/AtesComp> <http://schema.org/accountId> "AtesComp" .
<https://api.github.com/users/AtesComp> <http://schema.org/image> "https://avatars3.githubusercontent.com/u/23365631?v=4" .
<https://api.github.com/users/AtesComp> <http://schema.org/url> "https://github.com/AtesComp"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/AtesComp> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/76> <http://schema.org/creator> <https://api.github.com/users/AtesComp> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/out%20of%20scope:%20transformation> <http://schema.org/name> "out of scope: transformation" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/out%20of%20scope:%20transformation> <http://schema.org/color> "000000" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/out%20of%20scope:%20transformation> <http://schema.org/description> "" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/76> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/out%20of%20scope:%20transformation> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/propose%20closing> <http://schema.org/name> "propose closing" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/propose%20closing> <http://schema.org/color> "bf5315" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/propose%20closing> <http://schema.org/description> "" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/76> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/propose%20closing> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:editorial> <http://schema.org/name> "spec:editorial" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:editorial> <http://schema.org/color> "58820a" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:editorial> <http://schema.org/description> "" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/76> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:editorial> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/76> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/76> <http://schema.org/startDate> "2018-10-04T21:40:29Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/76> <http://schema.org/endDate> "2019-02-26T04:14:35Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/76> <http://example.com/ns#authorAssociation> "NONE" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/76> <http://schema.org/description> "So, reading the specification, I see the the line:\r\n  \"Specifically, @type cannot be used in a context to define a node's type.\"\r\nwhere I ask, WTF? Why not?  Why so short-sighted?  Why do node types need to be red-headed stepchildren?\r\n\r\nGiven conversions from JSON to JSON-LD , it would be **extremely** useful to apply type (coercion) to IRIs and blank nodes via @context.  Example:\r\n\r\nGiven\r\n```\r\n{\r\n  \"type\": \"indicator\",\r\n  \"id\": \"indicator--e2e1a340-4415-4ba8-9671-f7343fbf0836\",\r\n  \"external_references\": [\r\n    {\r\n      \"source_name\": \"veris\",\r\n      \"external_id\": \"0001AA7F-C601-424A-B2B8-BE6C9F5164E7\",\r\n      \"url\": \"https://github.com/vz-risk/VCDB/blob/master/data/json/0001AA7F-C601-424A-B2B8-BE6C9F5164E7.json\"\r\n    }\r\n  ]\r\n}\r\n```\r\nI can header the data with a context:\r\n```\r\n  \"@context\": {\r\n    \"@version\": 1.1,\r\n    \"@base\": \"http://purl.org/cyber/stix/identifier/\",\r\n    \"@vocab\": \"http://purl.org/cyber/stix/vocab/\",\r\n\r\n    \"stix\": \"http://purl.org/cyber/stix#\",\r\n    \"id\": \"@id\",\r\n    \"type\": \"@type\",\r\n    \"indicator\": \"stix:Indicator\",\r\n    \"external_references\": {\r\n      \"@type\": \"@id\",\r\n      \"@context\": {\r\n        \"url\": { \"@type\": \"@id\" }\r\n      }\r\n    }\r\n  },\r\n```\r\nwhich converts the data somewhat nicely.  Pop it into the JSON-LD 1.1 Playground and view the table.  I've severely limited the example for clarity.\r\n\r\nGenerally the properties \"external_references\", \"url\", and others would have ontology definitions to cast the un-typed nodes.  However, this is not always the case.  As an example, let's assume \"external_references\" does not cast to a single definitive node type.  The \"external_references\" structure will produce a blank node without type.  We have applications where a property key name may be used in different contexts (thanks for scoped @context !!!) and therefore may indicate different node types.  An ontology can define multiple types for a given property, but its not definitive.  The data may specify the definitive node type by context.  Without a method to type nodes in context, the specification severely limits the usefulness of the conversion.\r\n\r\nSUGGESTION:\r\n\r\nSince \"@type\" allows for all manner of data typing, why not allow \"@type\" to also provide node typing.  It seems a simple addition to the specification, such as:\r\n```\r\n  \"@type\": { \"@id\": \"http://my.friggin.org/has/class\" }\r\n```\r\nwhere we specify the context is a node, as before, with the addition of the node type(s) [sure, more than one node type using \"@id\": { \"nt1\", \"nt2\" } or maybe multiple \"@type\" statements, why not?].  I'm not saying we NEED multiple types for the specification.  Allowing for just one node type would be monumental.  In fact, \r\n```\r\n  \"@type\": { \"http://my.friggin.org/has/class\" }\r\n```\r\nmight be enough or a short form as it might imply \"@id\".  Or maybe add a specification for value types as well (just to be thoughtful about values):\r\n```\r\n  \"@type\": { \"@value\": \"http://my.friggin.org/has/valueType\" }\r\n```\r\nAhh, uniformity!  So, here are the different context types:\r\n```\r\n  \"@type\": valuetype\r\n  \"@type\": { \"@value\": valuetype }\r\n  \"@type\": \"@id\"\r\n  \"@type\": { \"@id\": nodetype }\r\n```\r\nNOTE: There was some discussion about allowing the value to be both a node type and a data type.  There is something very wrong about that kind of data pattern.\r\n\r\nThe above context would be modified as follows:\r\n```\r\n  \"@context\": {\r\n    \"@version\": 1.1,\r\n    \"@base\": \"http://purl.org/cyber/stix/identifier/\",\r\n    \"@vocab\": \"http://purl.org/cyber/stix/vocab/\",\r\n\r\n    \"stix\": \"http://purl.org/cyber/stix#\",\r\n    \"id\": \"@id\",\r\n    \"type\": \"@type\",\r\n    \"indicator\": \"stix:Indicator\",\r\n    \"external_references\": {\r\n      \"@type\": { \"@id\": \"stix:ExternalReference\" },\r\n      \"@context\": {\r\n        \"url\": { \"@type\": {\"@id\": \"stix:URL\"} }\r\n      }\r\n    }\r\n  },\r\n```\r\nNow, I could query for all things \"stix:ExternalReference\" or \"stix:URL\" without resorting to a bastardized conversion therapy." .
<https://api.github.com/repos/w3c/json-ld-syntax> <http://example.com/ns#issue> <https://api.github.com/repos/w3c/json-ld-syntax/issues/72> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/72> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/72"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/72> <http://schema.org/identifier> "72"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/72> <http://schema.org/name> "Allow relative IRIs for @vocab" .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/72> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/propose%20closing> <http://schema.org/name> "propose closing" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/propose%20closing> <http://schema.org/color> "bf5315" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/propose%20closing> <http://schema.org/description> "" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/72> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/propose%20closing> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/satisfied> <http://schema.org/name> "satisfied" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/satisfied> <http://schema.org/color> "4be23b" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/satisfied> <http://schema.org/description> "Requirement Satisfied" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/72> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/satisfied> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:editorial> <http://schema.org/name> "spec:editorial" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:editorial> <http://schema.org/color> "58820a" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:editorial> <http://schema.org/description> "" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/72> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:editorial> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:enhancement> <http://schema.org/name> "spec:enhancement" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:enhancement> <http://schema.org/color> "c11537" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:enhancement> <http://schema.org/description> "" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/72> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:enhancement> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/72> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/72> <http://example.com/ns#assignee> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/72> <http://schema.org/startDate> "2018-09-28T18:27:35Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/72> <http://schema.org/endDate> "2019-01-15T21:06:55Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/72> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/72> <http://schema.org/description> "JSON-LD separates handling of IRI conversions for document- and vocabulary-relative IRIs. At times, it is useful to have more vocabulary items be considered in the document space. A change was made to allow the empty string (\"\") as a value for `@vocab`, but this may not be adequate.\r\n\r\nIssue #56 somewhat complains about this, as does #37.\r\n\r\nCurrently, the Syntax document describes this in [§4.1.2.1 Using the Document Base as the Default Vocabulary](https://www.w3.org/TR/json-ld11/#using-the-document-base-as-the-default-vocabulary), but the use of a term `\"#breweats\"` is not a natural JSON property. If `@vocab` could be set to `\"#\"`, this would allow a more natural expression.\r\n\r\nThe API document has a carve-out for the empty string, but otherwise require `@vocab` to resolve to an absolute IRI:\r\n\r\n> Otherwise, if value is an _absolute IRI_ or _blank node identifier_, the vocabulary mapping of result is set to value. If it is not an _absolute IRI_, or a _blank node identifier_, an `invalid vocab mapping` error has been detected and processing is aborted.\r\n\r\nThe proposal would be to treat things that are not absolute IRIs as IRIs relative to the document base as does the current empty-string carveout:\r\n\r\n> Otherwise, if value the empty string (\"\"), the effective value is the current _base IRI_.\r\n\r\nResolving vocabulary-relative IRIs is done with simply concatenation, so the proposal would be to concatenate any non-absolute IRI value of `@vocab` to _base IRI_ by concatenating the value of `@vocab` to _base IRI_; if the result is not then a valid _absolute IRI_ we would continue to generate an `invalid vocab mapping` error. Note that this sill not invalidate any 1.0 documents, but will allow things which were previously not valid." .
<https://api.github.com/repos/w3c/json-ld-syntax> <http://example.com/ns#issue> <https://api.github.com/repos/w3c/json-ld-syntax/issues/67> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/67> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/67"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/67> <http://schema.org/identifier> "67"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/67> <http://schema.org/name> "Improved examples" .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/67> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:editorial> <http://schema.org/name> "spec:editorial" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:editorial> <http://schema.org/color> "58820a" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:editorial> <http://schema.org/description> "" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/67> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:editorial> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/67> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/67> <http://schema.org/startDate> "2018-09-21T22:46:41Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/67> <http://schema.org/endDate> "2018-09-24T16:17:02Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/67> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/pulls/67> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/67"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/67> <http://example.com/ns#pullRequest> <https://api.github.com/repos/w3c/json-ld-syntax/pulls/67> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/67> <http://schema.org/description> "Makes most of the changes called for in #26.\r\n\r\nTabbed UI could use some styling assistance.\r\n\r\nThere remain some examples which didn't make sense to use the tabular format, and in some cases, examples are interrelated (as before), but include attributes to allow them to be checked against each other.\r\n\r\nExamples _do not_ include graphical images representing the equivalent graphs. These would add even more of a burden, and each would require it's own separate accessibility explanation, so doesn't seem worth it. That said, we may want to include more graphics on a case-by-case basis.\r\n\r\nVisually, the document is somewhat shorter, but the HTML source is inflated quite a bit. I'm not in favor of splitting the document into multiple parts, regardless." .
<https://api.github.com/repos/w3c/json-ld-syntax> <http://example.com/ns#issue> <https://api.github.com/repos/w3c/json-ld-syntax/issues/66> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/66> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/66"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/66> <http://schema.org/identifier> "66"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/66> <http://schema.org/name> "Fragment identifiers with ':'" .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/66> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/satisfied> <http://schema.org/name> "satisfied" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/satisfied> <http://schema.org/color> "4be23b" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/satisfied> <http://schema.org/description> "Requirement Satisfied" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/66> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/satisfied> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:bug> <http://schema.org/name> "spec:bug" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:bug> <http://schema.org/color> "ba39ce" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:bug> <http://schema.org/description> "" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/66> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:bug> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:editorial> <http://schema.org/name> "spec:editorial" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:editorial> <http://schema.org/color> "58820a" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:editorial> <http://schema.org/description> "" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/66> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:editorial> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/66> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/66> <http://schema.org/startDate> "2018-09-17T20:34:08Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/66> <http://schema.org/endDate> "2018-10-04T20:05:49Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/66> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/66> <http://schema.org/description> "A bug was noted where the following was not expanded properly:\r\n\r\n```json\r\n{\r\n  \"@context\": {\r\n    \"@base\": \"https://ex.org/\",\r\n    \"u\": {\"@id\": \"urn:u:\", \"@type\": \"@id\"}\r\n  },\r\n  \"u\": [\"#Test\", \"#Test:2\"]\r\n}\r\n```\r\n\r\nThe issue is that the expand IRI algorithm splits \"#Test:2\" on the colon, where it is intended to be part of the fragment identifier, which is legal.\r\n\r\nEither the algorithm needs to be made more complex by detecting this, or we should explicitly say that fragment identifiers containing ':' are not supported.\r\n\r\ncc /@davidlehn " .
<https://api.github.com/repos/w3c/json-ld-syntax> <http://example.com/ns#issue> <https://api.github.com/repos/w3c/json-ld-syntax/issues/57> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/57> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/57"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/57> <http://schema.org/identifier> "57"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/57> <http://schema.org/name> "Make processing of embedded HTML normative" .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/57> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/satisfied> <http://schema.org/name> "satisfied" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/satisfied> <http://schema.org/color> "4be23b" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/satisfied> <http://schema.org/description> "Requirement Satisfied" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/57> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/satisfied> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:enhancement> <http://schema.org/name> "spec:enhancement" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:enhancement> <http://schema.org/color> "c11537" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:enhancement> <http://schema.org/description> "" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/57> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:enhancement> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/test:needs%20tests> <http://schema.org/name> "test:needs tests" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/test:needs%20tests> <http://schema.org/color> "e587ca" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/test:needs%20tests> <http://schema.org/description> "" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/57> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/test:needs%20tests> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/57> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/57> <http://schema.org/startDate> "2018-08-23T20:35:41Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/57> <http://schema.org/endDate> "2018-11-16T19:03:28Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/57> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/57> <http://schema.org/description> "Currently, [Embedding JSON-LD in HTML Documents](https://w3c.github.io/json-ld-syntax/#embedding-json-ld-in-html-documents) is entirely informative. We've discussed making this normative, requiring JSON-LD processors to be able to identify and extract JSON-LD from a script tag with type `application/ld+json` within the HTML document.\r\n\r\n* Given multiple such script tags, which one is used?\r\n* Should we define a parameterized content-type to allow the version to be specified (e.g., `application/ld+json;version=1.1`)\r\n* Does the current document base affect the base for JSON-LD processing?\r\n  * location of  HTML document\r\n  * `html>head>base@href`\r\n * `xml:base` of closest ancestor element\r\n* Does the document language affect the default language for JSON-LD processing?\r\n  * HTTP header- `Content-Language`\r\n  * `@lang`, `@xml:lang`\r\n\r\n" .
<https://api.github.com/repos/w3c/json-ld-syntax> <http://example.com/ns#issue> <https://api.github.com/repos/w3c/json-ld-syntax/issues/56> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/56> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/56"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/56> <http://schema.org/identifier> "56"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/56> <http://schema.org/name> "Expanding @vocab properties consistently" .
<https://api.github.com/users/pjohnston-wiley> <http://schema.org/accountId> "pjohnston-wiley" .
<https://api.github.com/users/pjohnston-wiley> <http://schema.org/image> "https://avatars2.githubusercontent.com/u/11592786?v=4" .
<https://api.github.com/users/pjohnston-wiley> <http://schema.org/url> "https://github.com/pjohnston-wiley"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/pjohnston-wiley> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/56> <http://schema.org/creator> <https://api.github.com/users/pjohnston-wiley> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/propose%20closing> <http://schema.org/name> "propose closing" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/propose%20closing> <http://schema.org/color> "bf5315" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/propose%20closing> <http://schema.org/description> "" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/56> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/propose%20closing> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:editorial> <http://schema.org/name> "spec:editorial" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:editorial> <http://schema.org/color> "58820a" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:editorial> <http://schema.org/description> "" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/56> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:editorial> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/56> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/users/pjohnston-wiley> <http://schema.org/accountId> "pjohnston-wiley" .
<https://api.github.com/users/pjohnston-wiley> <http://schema.org/image> "https://avatars2.githubusercontent.com/u/11592786?v=4" .
<https://api.github.com/users/pjohnston-wiley> <http://schema.org/url> "https://github.com/pjohnston-wiley"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/pjohnston-wiley> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/56> <http://example.com/ns#assignee> <https://api.github.com/users/pjohnston-wiley> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/56> <http://schema.org/startDate> "2018-08-22T22:56:20Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/56> <http://schema.org/endDate> "2018-12-08T05:52:58Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/56> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/56> <http://schema.org/description> "(I wasn't sure if this was a syntax or an API issue. If i got the wrong one, please let me know and i will refile)\r\n\r\nConsider the following:\r\n\r\n```json\r\n{\r\n  \"@context\": {\r\n    \"@base\": \"http://example1.com/\",\r\n    \"ex1\": \"http://example1.com/\",\r\n    \"ex2\": \"http://example2.com/\",\r\n    \"id\": \"@id\",\r\n    \"fred\": {\r\n      \"@id\": \"ex1:fred\",\r\n      \"@type\": \"@vocab\"\r\n    },\r\n    \"barney\": {\r\n      \"@id\": \"ex2:barney\"\r\n    },\r\n    \"mnemonic\": \"rdf:value\"\r\n  },\r\n  \"fred\": [\r\n    {\r\n      \"id\": \"barney\",\r\n      \"mnemonic\": \"the sidekick\"\r\n    },\r\n    \"barney\"\r\n  ]\r\n}\r\n```\r\n\r\nThe counterintuitive result of expansion is:\r\n\r\n```json\r\n[\r\n  {\r\n    \"http://example1.com/fred\": [\r\n      {\r\n        \"@id\": \"http://example1.com/barney\",\r\n        \"rdf:value\": [\r\n          {\r\n            \"@value\": \"the sidekick\"\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        \"@id\": \"http://example2.com/barney\"\r\n      }\r\n    ]\r\n  }\r\n]\r\n```\r\n\r\nIn other words, one `barney` registers as a result of the top-level `@vocab` declaration, while the other registers as a result of the specific `barney` alias against the `fred` property of type `@vocab`. \r\n\r\nI understand _why_ this happens, the spec has different algorithms for strings on the right of a property vs objects, but it's a bit odd. To the lay reader (i.e. me), it seems like an inconsistent application. If the IRI expansion algorithm were able to take into account explicit aliases for `@vocab` properties, it could be made consistent, and a similar application to compaction would deliver a symmetric behavior.\r\n\r\nThe context, in terms of practical application, is that we maintain an overarching RDF model to govern our data and i would like the folks implementing our APIs to know as little about the RDF-ness of it as possible, which is where JSON-LD comes in. By using `@vocab` i was able to get implementers to omit a namespace qualifier on plain taxonomy values (the second `barney` in the original example), but as soon as they want to include anything richer they have to qualify it. Using the same context, to guarantee semantic consistency the example would have to be written as:  \r\n\r\n```json\r\n{\r\n    \"fred\": [\r\n      \"barney\",\r\n      {\r\n         \"id\": \"ex2:barney\",\r\n         \"mnemonic\": \"the sidekick\"\r\n      }\r\n    ]\r\n}\r\n```\r\ni.e. we have to qualify the second `barney` with `ex2` for it to work consistently, which means exposing API developers to the RDF-ness of our model, or breaking the connection." .
<https://api.github.com/repos/w3c/json-ld-syntax> <http://example.com/ns#issue> <https://api.github.com/repos/w3c/json-ld-syntax/issues/42> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/42> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/42"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/42> <http://schema.org/identifier> "42"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/42> <http://schema.org/name> "Propose `@documentation` for providing URL of resource documenting context or frame" .
<https://api.github.com/users/tcole3> <http://schema.org/accountId> "tcole3" .
<https://api.github.com/users/tcole3> <http://schema.org/image> "https://avatars2.githubusercontent.com/u/7622978?v=4" .
<https://api.github.com/users/tcole3> <http://schema.org/url> "https://github.com/tcole3"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/tcole3> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/42> <http://schema.org/creator> <https://api.github.com/users/tcole3> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:enhancement> <http://schema.org/name> "spec:enhancement" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:enhancement> <http://schema.org/color> "c11537" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:enhancement> <http://schema.org/description> "" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/42> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:enhancement> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:wontfix> <http://schema.org/name> "spec:wontfix" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:wontfix> <http://schema.org/color> "2bafa2" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:wontfix> <http://schema.org/description> "" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/42> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:wontfix> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/42> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/42> <http://schema.org/startDate> "2018-08-07T16:31:13Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/42> <http://schema.org/endDate> "2018-08-13T20:06:16Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/42> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/42> <http://schema.org/description> "The discussion surrounding Issue #32 (Is there a way to define additional metadata in JSON-LD `@context`?) identified possible use cases for wanting to provide comments or documentation (e.g., metadata) about JSON-LD context and framing documents. The [JSON-LD 1.0 Recommendation](https://www.w3.org/TR/json-ld/#the-context) (and the [JSON-LD 1.1 Community Report](https://json-ld.org/spec/latest/json-ld/#the-context)) anticipate the value of `@context` documentation: \r\n\r\n> External JSON-LD context documents may contain extra information located outside of the `@context` key, such as documentation about the terms declared in the document. Information contained outside of the `@context` value is ignored when the document is used as an external JSON-LD context document. \r\n\r\nHowever, this method does not support documentation of context included inline in a JSON-LD instance, does not facilitate the reuse of pre-existing vocabulary and ontology documentation already available online, and does not provide an option for human-readable documentation of terms declared in the context document (or documentation of the associated ontology as a whole), nor for machine readable documentation in a format other than JSON-LD. Additionally, this mechanism is of no help for those wanting to describe the logic and flow of a framing document.\r\n\r\nAdding `@documentation` as a key (with range URL) available only in context and framing documents would allow including documentation by reference. Taking schema.org context document as an example, any of the following might be reasonable values for `@documentation`:\r\n\r\n- https://schema.org/docs/documents.html (incomplete, human-readable list of documentation)\r\n- https://schema.org/docs/full.html (human-readable hierarchy view with links to RDFa term descriptions)\r\n- https://schema.org/docs/schema_org_rdfa.html (RDFa documentation of schema.org vocabulary)\r\n- https://schema.org/version/3.4/schema.rdf (RDF/XML documentation of schema.org vocabulary)\r\n- https://schema.org/docs/schemaorg.owl (OWL documentation of schema.org vocabulary)\r\n\r\nThe latter 3 illustrations listed are all machine-actionable and provide (for example) domain and range information for each schema.org property, as well as sub-class relationships for schema.org Classes. \r\n\r\nGiven the variety of ways that semantics are documented today, if `@documentation` were adopted for 1.1, my suggestion would be to avoid over-specifying what precisely the URL value links to - in other words I would define this new key such that any of the above 5 illustrations would be allowable values for `@documentation`. We probably also would need to agree (or not) that the value of `@documentation` is unary (no arrays of URLs) and would need to identify any other constraints on its value.  \r\n\r\nNote, credit to @azaroth42 for suggesting `@documentation` in the course of issue #32 discussion, and please note that this issue is being raised concurrently with 2 or 3 other approaches, as an outgrowth of the decision to close issue #32.  " .
<https://api.github.com/repos/w3c/json-ld-syntax> <http://example.com/ns#issue> <https://api.github.com/repos/w3c/json-ld-syntax/issues/37> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/37> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/37"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/37> <http://schema.org/identifier> "37"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/37> <http://schema.org/name> "Consider obsoleting use of blank nodes for properties and \"generalized RDF\"" .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/37> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/needs%20discussion> <http://schema.org/name> "needs discussion" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/needs%20discussion> <http://schema.org/color> "c5def5" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/needs%20discussion> <http://schema.org/description> "" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/37> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/needs%20discussion> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/satisfied> <http://schema.org/name> "satisfied" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/satisfied> <http://schema.org/color> "4be23b" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/satisfied> <http://schema.org/description> "Requirement Satisfied" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/37> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/satisfied> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:editorial> <http://schema.org/name> "spec:editorial" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:editorial> <http://schema.org/color> "58820a" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:editorial> <http://schema.org/description> "" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/37> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:editorial> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/37> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#OpenIssue> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/37> <http://schema.org/startDate> "2018-07-25T23:43:32Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/37> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/37> <http://schema.org/description> "This is one of the major things that makes JSON-LD out of step with the RDF data model, and it's not clear if the feature is used or valuable. IIRC, the original issue was making it easy to support mapping ad-hoc JSON structures without creating IRIs, but the use of `@vocab`, and document-relative IRIs for properties would seem to obviate the need for this.\r\n\r\nThis would likely prohibit the direct use of blank node identifiers in the property position, as well as the mapping of terms to blank node identifiers.\r\n\r\nDownsides: another area of potential incompatibility with JSON-LD 1.0. A backwards-compatible solution would be to preserve the feature, but mark it archaic. This might cause warnings to be generated if encountered with a processor running in 1.1 mode." .
<https://api.github.com/repos/w3c/json-ld-syntax> <http://example.com/ns#issue> <https://api.github.com/repos/w3c/json-ld-syntax/issues/36> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/36> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/36"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/36> <http://schema.org/identifier> "36"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/36> <http://schema.org/name> "Support recursive @list usage" .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/36> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/satisfied> <http://schema.org/name> "satisfied" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/satisfied> <http://schema.org/color> "4be23b" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/satisfied> <http://schema.org/description> "Requirement Satisfied" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/36> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/satisfied> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:enhancement> <http://schema.org/name> "spec:enhancement" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:enhancement> <http://schema.org/color> "c11537" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:enhancement> <http://schema.org/description> "" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/36> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:enhancement> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/36> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/36> <http://example.com/ns#assignee> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/36> <http://schema.org/startDate> "2018-07-25T23:33:45Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/36> <http://schema.org/endDate> "2018-08-11T21:49:28Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/36> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/36> <http://schema.org/description> "From [Should we support lists of lists?](https://github.com/json-ld/json-ld.org/issues/52)\r\n\r\nWe did not support recursive RDF lists in 1.0 due to perceived complexity and lack of a use case. Since then there are numerous use cases that can make use of recursive lists in JSON-LD, and it goes further towards full idiomatic support of RDF 1.1 in JSON-LD.\r\n\r\nChanges to the syntax document are minimal, there are substantial API implications." .
<https://api.github.com/repos/w3c/json-ld-syntax> <http://example.com/ns#issue> <https://api.github.com/repos/w3c/json-ld-syntax/issues/34> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/34> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/34"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/34> <http://schema.org/identifier> "34"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/34> <http://schema.org/name> "@type as @container:@set?" .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/34> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/satisfied> <http://schema.org/name> "satisfied" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/satisfied> <http://schema.org/color> "4be23b" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/satisfied> <http://schema.org/description> "Requirement Satisfied" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/34> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/satisfied> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:editorial> <http://schema.org/name> "spec:editorial" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:editorial> <http://schema.org/color> "58820a" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:editorial> <http://schema.org/description> "" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/34> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:editorial> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/test:needs%20tests> <http://schema.org/name> "test:needs tests" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/test:needs%20tests> <http://schema.org/color> "e587ca" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/test:needs%20tests> <http://schema.org/description> "" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/34> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/test:needs%20tests> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/34> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/34> <http://example.com/ns#assignee> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/34> <http://schema.org/startDate> "2018-07-08T21:36:11Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/34> <http://schema.org/endDate> "2018-10-03T17:30:13Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/34> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/34> <http://schema.org/description> "The purpose of the `@container:@set` functionality (AFAIU) is to ensure that the output is consistent in shape. Thus if there can ever be multiple values, the structure is always an array.\r\n\r\nThere are two situations in which this functionality could be desirable but is currently not possible:\r\n\r\n1.  `@type` As it's a keyword, we can only alias it (e.g. as `type`) but not define it to have `@container:@set` functionality. Meaning that there's a gotcha waiting to happen for ontologies that require or use multiple classes for a single resource instance. See [playground](https://json-ld.org/playground/#startTab=tab-compacted&json-ld=%7B%22%40context%22%3A%7B%22cls%22%3A%7B%22%40id%22%3A%22http%3A%2F%2Fexample.org%2Fclass%22%7D%2C%22type%22%3A%7B%22%40id%22%3A%22%40type%22%2C%22%40container%22%3A%22%40set%22%7D%7D%2C%22%40id%22%3A%22foo%22%2C%22type%22%3A%22cls%22%7D&context=%7B%22%40context%22%3A%7B%22cls%22%3A%7B%22%40id%22%3A%22http%3A%2F%2Fexample.org%2Fclass%22%7D%2C%22type%22%3A%7B%22%40id%22%3A%22%40type%22%2C%22%40container%22%3A%22%40set%22%7D%7D%7D)\r\n2.  `@context` Less useful, but `@context` will also compact to a single string/object when there might be multiple contexts.  See [playground](https://json-ld.org/playground/#startTab=tab-compacted&copyContext=true&json-ld=%7B%22%40context%22%3A%5B%7B%22cls%22%3A%7B%22%40id%22%3A%22http%3A%2F%2Fexample.org%2Fclass%22%7D%2C%22type%22%3A%7B%22%40id%22%3A%22%40type%22%2C%22%40container%22%3A%22%40set%22%7D%7D%5D%2C%22%40id%22%3A%22foo%22%2C%22type%22%3A%22cls%22%7D)\r\n\r\n`@context` modifying itself seems particularly strange, but the inconsistency for `@type` seems solvable if the restrictions in its definition were loosened?\r\n\r\nOriginal issue [@type as @container:@set? #512](https://github.com/json-ld/json-ld.org/issues/512).\r\n\r\n(Edit: Note that the playground links demonstrate that these do not work as one might expect, due to the keyword definitions of @type and @context)" .
<https://api.github.com/repos/w3c/json-ld-syntax> <http://example.com/ns#issue> <https://api.github.com/repos/w3c/json-ld-syntax/issues/33> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/33> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/33"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/33> <http://schema.org/identifier> "33"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/33> <http://schema.org/name> "Feature Detection in JSON-LD Processors" .
<https://api.github.com/users/msporny> <http://schema.org/accountId> "msporny" .
<https://api.github.com/users/msporny> <http://schema.org/image> "https://avatars3.githubusercontent.com/u/108611?v=4" .
<https://api.github.com/users/msporny> <http://schema.org/url> "https://github.com/msporny"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/msporny> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/33> <http://schema.org/creator> <https://api.github.com/users/msporny> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:wontfix> <http://schema.org/name> "spec:wontfix" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:wontfix> <http://schema.org/color> "2bafa2" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:wontfix> <http://schema.org/description> "" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/33> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:wontfix> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/33> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/33> <http://schema.org/startDate> "2018-07-06T14:15:56Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/33> <http://schema.org/endDate> "2019-02-09T14:56:30Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/33> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/33> <http://schema.org/description> "If you look at the latest syntax specification, I count roughly 32 features slated to be included in JSON-LD 1.1:\r\n\r\nhttps://json-ld.org/spec/latest/json-ld/#advanced-concepts\r\n\r\nJSON-LD was always intended to be simple to understand and use. In fact, the appearance of simplicity (even though the processors are not simple) was a driving design goal. It's why the specification is written the way it is... we wanted everyday developers to be able to read it as the primary documentation. I think we started losing that a bit toward the end, but we have received multiple compliments from Web developers that knew nothing about RDF (and still don't know anything about RDF) on how simple it was to understand and use JSON-LD by just reading the specification.\r\n\r\nI think we're going to lose that if we keep adding features. I don't think the argument is to *not* add new features, but rather to do so in a way that keeps the core JSON-LD 1.1 spec readable by regular Web developers.\r\n\r\nI also think that there is a way to enable experimental features to be specified in CGs and then later pulled into \"official W3C specifications\" without getting into a brawl over whether the feature is useful or not prematurely.\r\n\r\nSo, here's a proposal:\r\n\r\n1. Give each JSON-LD feature a name. For example: aliasing, reverseProperties, typeCoercion, etc.\r\n2. Each JSON-LD version will officially support a set of these features. For example, JSON-LD 1.0 supports roughly ~20, JSON-LD 1.1 supports roughly ~30, and so on.\r\n3. Move some of these less-used features (based on real world data/usage) into a \"Advanced JSON-LD Features\" specification to keep the base specification simpler and more easily readable.\r\n4. Extend the `@version` keyword to take an array, where you can specify experimental extensions. For example: `\"@version\": [1.1, \"amazingExtensionFoo\", \"nicheExtensionBar\"] - processors throw if they don't understand every extension listed.\r\n\r\nBenefits of this proposal:\r\n* We simplify the prose and length of the JSON-LD Core Syntax specification.\r\n* We enable people to suggest and spec out new features without having to go through the JSON-LD WG gauntlet, which will inevitably kill innovation before it has a chance in the wild.\r\n\r\nDrawbacks of this proposal:\r\n* Not thoroughly thought through idea - may not be possible at this stage... wish we had built this into JSON-LD 1.0.\r\n* Added technical complexity for implementers.\r\n* Potential explosion in extensions resulting in reduced interop." .
<https://api.github.com/repos/w3c/json-ld-syntax> <http://example.com/ns#issue> <https://api.github.com/repos/w3c/json-ld-syntax/issues/32> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/32> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/32"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/32> <http://schema.org/identifier> "32"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/32> <http://schema.org/name> "Is there a way to define additional metadata in JSON-LD @context?" .
<https://api.github.com/users/jechterhoff> <http://schema.org/accountId> "jechterhoff" .
<https://api.github.com/users/jechterhoff> <http://schema.org/image> "https://avatars2.githubusercontent.com/u/4831647?v=4" .
<https://api.github.com/users/jechterhoff> <http://schema.org/url> "https://github.com/jechterhoff"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/jechterhoff> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/32> <http://schema.org/creator> <https://api.github.com/users/jechterhoff> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:duplicate> <http://schema.org/name> "spec:duplicate" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:duplicate> <http://schema.org/color> "e0082c" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:duplicate> <http://schema.org/description> "" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/32> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:duplicate> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:enhancement> <http://schema.org/name> "spec:enhancement" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:enhancement> <http://schema.org/color> "c11537" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:enhancement> <http://schema.org/description> "" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/32> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:enhancement> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:wontfix> <http://schema.org/name> "spec:wontfix" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:wontfix> <http://schema.org/color> "2bafa2" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:wontfix> <http://schema.org/description> "" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/32> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:wontfix> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/32> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/32> <http://schema.org/startDate> "2018-07-05T13:54:00Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/32> <http://schema.org/endDate> "2018-08-04T17:20:16Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/32> <http://example.com/ns#authorAssociation> "NONE" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/32> <http://schema.org/description> "Hello,\r\nI'm currently analysing JSON-LD 1.1 (reviewed the [Final Community Group Report](https://www.w3.org/2018/jsonld-cg-reports/json-ld)) with the goal of semantically enabling JSON data. Is there a way to define additional metadata in a JSON-LD context?\r\n\r\n(I hope it is ok to ask this question here. If I should ask somewhere else, for example the mailing list, let me know, please.)\r\n\r\nLet me explain what I mean with an example:\r\n```json\r\n{\r\n \"@context\": {\r\n  \"@base\": \"http://example.org/baumregister/\",\r\n  \"@version\": 1.1,\r\n  \"xsd\": \"http://www.w3.org/2001/XMLSchema#\",\r\n  \"geosparql\": \"http://www.opengis.net/ont/geosparql#\",\r\n  \"ex\": \"http://example.org/ontology/flora/\",\r\n  \"ort\": \"geosparql:hasGeometry\",\r\n  \"wkt\": {\r\n   \"@id\": \"geosparql:asWKT\",\r\n   \"@type\": \"geosparql:wktLiteral\"\r\n  },\r\n  \"eid\": \"@id\",\r\n  \"art\": \"@type\",\r\n  \"Eiche\": \"ex:oak\",\r\n  \"Walnuss\": \"ex:walnut\",\r\n  \"hoehe\": {   \r\n   \"@id\": \"ex:height\",\r\n   \"@type\": \"xsd:double\",\r\n   \"@derivedBy\": \"A specific description ...\",\r\n   \"uom\": \"m\"\r\n  },\r\n  \"alter\": {\r\n   \"@id\": \"ex:age\",\r\n   \"@type\": \"xsd:integer\"\r\n  }\r\n },\r\n \"art\": \"Eiche\",\r\n \"hoehe\": \"16\",\r\n \"eid\": \"08218adf-7947-4f28-bcaf-e069ef43e012\",\r\n \"alter\": 242,\r\n \"ort\": {\"wkt\": \"POINT(8.191035,51.899666)\"}\r\n}\r\n```\r\n\r\nIn this example, the key \"hoehe\" expands to the IRI http://example.org/ontology/flora/height. In addition, the value type is defined as http://www.w3.org/2001/XMLSchema#double. \r\n\r\nIn the example, I've added two keys as metadata to the definition of term \"hoehe\": \r\n\r\n* \"@derivedBy\" - The value is supposed to contain a textual description. I used the leading \"@\" on purpose for testing. \r\n* \"uom\" - An indication of the unit of measure for \"hoehe\".\r\n\r\nWhen I test this on the [JSON-LD dev playground](https://json-ld.org/playground-dev/) (a great tool, by the way - so helpful!), I get the following syntax errors:\r\n\r\n* For \"@derivedBy\": Invalid JSON-LD syntax; a term definition must not contain @derivedBy\r\n* For \"uom\": Invalid JSON-LD syntax; a term definition must not contain uom\r\n\r\nWhen the two keys are removed, the example \"works\".\r\nIn the JSON-LD 1.1 specification I find the following: \r\n\r\n> An expanded term definition MUST be a JSON object composed of zero or more keys from @id, @reverse, @type, @language, @context, @prefix, or @container. An expanded term definition SHOULD NOT contain any other keys.\r\n\r\nApparently I should not use the two additional keys, but they do not appear to be explicitly forbidden either. Now I am wondering if the dev playground is too strict or not. Can someone please enlighten me as to where in a JSON-LD context I can add custom keys - if at all - and what restrictions, if any, I need to be aware of? Any additional insight would be highly appreciated.\r\n\r\nI did come across the following two issues, which may be related to my question:\r\n\r\n* [Warn or error if non-keyword strings having \"@\" are encountered](https://github.com/w3c/json-ld-syntax/issues/16)\r\n* [Reserved keywords](https://github.com/json-ld/json-ld.org/issues/88)" .
<https://api.github.com/repos/w3c/json-ld-syntax> <http://example.com/ns#issue> <https://api.github.com/repos/w3c/json-ld-syntax/issues/31> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/31> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/31"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/31> <http://schema.org/identifier> "31"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/31> <http://schema.org/name> "type coercion: coerce node types" .
<https://api.github.com/users/lukasheinrich> <http://schema.org/accountId> "lukasheinrich" .
<https://api.github.com/users/lukasheinrich> <http://schema.org/image> "https://avatars2.githubusercontent.com/u/2318083?v=4" .
<https://api.github.com/users/lukasheinrich> <http://schema.org/url> "https://github.com/lukasheinrich"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/lukasheinrich> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/31> <http://schema.org/creator> <https://api.github.com/users/lukasheinrich> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/out%20of%20scope:%20transformation> <http://schema.org/name> "out of scope: transformation" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/out%20of%20scope:%20transformation> <http://schema.org/color> "000000" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/out%20of%20scope:%20transformation> <http://schema.org/description> "" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/31> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/out%20of%20scope:%20transformation> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/propose%20closing> <http://schema.org/name> "propose closing" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/propose%20closing> <http://schema.org/color> "bf5315" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/propose%20closing> <http://schema.org/description> "" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/31> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/propose%20closing> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:enhancement> <http://schema.org/name> "spec:enhancement" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:enhancement> <http://schema.org/color> "c11537" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:enhancement> <http://schema.org/description> "" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/31> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:enhancement> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:substantive> <http://schema.org/name> "spec:substantive" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:substantive> <http://schema.org/color> "cff9a4" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:substantive> <http://schema.org/description> "" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/31> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:substantive> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/31> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/31> <http://schema.org/startDate> "2018-07-03T11:13:54Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/31> <http://schema.org/endDate> "2018-07-30T20:27:22Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/31> <http://example.com/ns#authorAssociation> "NONE" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/31> <http://schema.org/description> "I think it would be interesting to add type coercion also to node objects in JSON-LD. Consider a document like\r\n\r\n```\r\n{\r\n    \"@context\": {\r\n        \"@version\": 1.1,\r\n        \"ex\": \"http://example.org/\",\r\n        \"things\": {\"@id\":\"ex:thing\"}\r\n    },\r\n    \"things\": [\r\n      {\"@type\": \"ex:typeofthing\",\"ex:attribute\":\"value1\"},\r\n      {\"@type\": \"ex:typeofthing\",\"ex:attribute\":\"value2\"},\r\n      {\"@type\": \"ex:typeofthing\",\"ex:attribute\":\"value3\"}\r\n    ]\r\n}\r\n```\r\n\r\nit would be nice it I could specify in the context what the \"@type\" of each node referred to by the predicate \"ex:thing\" is in order to reduce repetitiveness. Similar how I can do it for terms pointing to literals.\r\n\r\n```\r\n{\r\n    \"@context\": {\r\n        \"@version\": 1.1,\r\n        \"ex\": \"http://example.org/\",\r\n        \"things\": {\"@id\":\"ex:thing\", \"@type\": \"ex:typeofthing\"}\r\n    },\r\n    \"things\": [\r\n      {\"ex:attribute\":\"value1\"},\r\n      {\"ex:attribute\":\"value2\"},\r\n      {\"ex:attribute\":\"value3\"}\r\n    ]\r\n}\r\n```\r\n\r\nRight now, `@type` seems to just be ignored when the object in the triple is not a literal -- so perhaps it is straight forward to add?\r\n\r\n```\r\n{\r\n    \"@context\": {\r\n        \"@version\": 1.1,\r\n        \"ex\": \"http://example.org/\",\r\n        \"ex:term\": {\"@type\":\"ex:literaltype\"}\r\n    },\r\n	\"ex:term\": \"literalvalue\"\r\n}\r\n```\r\nexpands to \r\n\r\n```\r\n[\r\n  {\r\n    \"http://example.org/term\": [\r\n      {\r\n        \"@type\": \"http://example.org/literaltype\",\r\n        \"@value\": \"literalvalue\"\r\n      }\r\n    ]\r\n  }\r\n]\r\n```\r\n\r\nwhile \r\n```\r\n{\r\n    \"@context\": {\r\n        \"@version\": 1.1,\r\n        \"ex\": \"http://example.org/\",\r\n        \"ex:term\": {\"@type\":\"ex:nodetype\"}\r\n    },\r\n    \"ex:term\": {\"@id\":\"ex:anode\"}\r\n}\r\n```\r\n\r\nexpands to:\r\n```\r\n[\r\n  {\r\n    \"http://example.org/term\": [\r\n      {\r\n        \"@id\": \"http://example.org/anode\"\r\n      }\r\n    ]\r\n  }\r\n]\r\n```\r\n\r\n" .
<https://api.github.com/repos/w3c/json-ld-syntax> <http://example.com/ns#issue> <https://api.github.com/repos/w3c/json-ld-syntax/issues/30> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/30> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/30"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/30> <http://schema.org/identifier> "30"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/30> <http://schema.org/name> "Rethinking datasets and graphs?" .
<https://api.github.com/users/iherman> <http://schema.org/accountId> "iherman" .
<https://api.github.com/users/iherman> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/520723?v=4" .
<https://api.github.com/users/iherman> <http://schema.org/url> "https://github.com/iherman"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/iherman> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/30> <http://schema.org/creator> <https://api.github.com/users/iherman> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/propose%20closing> <http://schema.org/name> "propose closing" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/propose%20closing> <http://schema.org/color> "bf5315" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/propose%20closing> <http://schema.org/description> "" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/30> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/propose%20closing> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:enhancement> <http://schema.org/name> "spec:enhancement" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:enhancement> <http://schema.org/color> "c11537" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:enhancement> <http://schema.org/description> "" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/30> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:enhancement> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:substantive> <http://schema.org/name> "spec:substantive" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:substantive> <http://schema.org/color> "cff9a4" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:substantive> <http://schema.org/description> "" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/30> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:substantive> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/30> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/30> <http://schema.org/startDate> "2018-07-02T15:06:04Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/30> <http://schema.org/endDate> "2019-02-08T20:47:47Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/30> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/30> <http://schema.org/description> "I decided to start with some controversy:-)\r\n\r\nIn short, I have always been confused by the ways Datasets are treated in JSON-LD, and I propose to re-open that can of worms. I have jotted down my idea in a [separate wiki page](https://github.com/w3c/json-ld-syntax/wiki/Rethinking-datasets-and-graphs%3F)  (it would have been too long for an issue).\r\n\r\nTL;DR: My proposal is to start from scratch, ie, deprecating `@graph` and replacing the functionalities with something cleaner. See the wiki page...\r\n" .
<https://api.github.com/repos/w3c/json-ld-syntax> <http://example.com/ns#issue> <https://api.github.com/repos/w3c/json-ld-syntax/issues/25> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/25> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/25"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/25> <http://schema.org/identifier> "25"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/25> <http://schema.org/name> "IRI-s vs. URL-s" .
<https://api.github.com/users/iherman> <http://schema.org/accountId> "iherman" .
<https://api.github.com/users/iherman> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/520723?v=4" .
<https://api.github.com/users/iherman> <http://schema.org/url> "https://github.com/iherman"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/iherman> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/25> <http://schema.org/creator> <https://api.github.com/users/iherman> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:enhancement> <http://schema.org/name> "spec:enhancement" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:enhancement> <http://schema.org/color> "c11537" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:enhancement> <http://schema.org/description> "" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/25> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:enhancement> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:substantive> <http://schema.org/name> "spec:substantive" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:substantive> <http://schema.org/color> "cff9a4" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:substantive> <http://schema.org/description> "" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/25> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:substantive> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/25> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/25> <http://schema.org/startDate> "2018-07-01T10:08:06Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/25> <http://schema.org/endDate> "2019-02-09T15:00:46Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/25> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/25> <http://schema.org/description> "Wonder whether we should not adopt URL-s in the terminology, with the remark that the term encompasses IRI-s like done, eg, in the [HTML document reference](https://www.w3.org/TR/html5/references.html#normative). This is where developers have gone, and it may be silly to ignore it and continue using the IRI term...\r\n\r\n(The same comment applies to the other two documents, too, obviously.)" .
<https://api.github.com/repos/w3c/json-ld-syntax> <http://example.com/ns#issue> <https://api.github.com/repos/w3c/json-ld-syntax/issues/23> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/23> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/23"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/23> <http://schema.org/identifier> "23"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/23> <http://schema.org/name> "What is 'base' for an embedded json-ld?" .
<https://api.github.com/users/iherman> <http://schema.org/accountId> "iherman" .
<https://api.github.com/users/iherman> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/520723?v=4" .
<https://api.github.com/users/iherman> <http://schema.org/url> "https://github.com/iherman"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/iherman> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/23> <http://schema.org/creator> <https://api.github.com/users/iherman> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/satisfied> <http://schema.org/name> "satisfied" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/satisfied> <http://schema.org/color> "4be23b" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/satisfied> <http://schema.org/description> "Requirement Satisfied" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/23> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/satisfied> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:enhancement> <http://schema.org/name> "spec:enhancement" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:enhancement> <http://schema.org/color> "c11537" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:enhancement> <http://schema.org/description> "" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/23> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:enhancement> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/23> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/23> <http://schema.org/startDate> "2018-07-01T04:50:55Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/23> <http://schema.org/endDate> "2018-11-16T19:03:29Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/23> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/23> <http://schema.org/description> "The definition of the [embedded JSON-LD](https://w3c.github.io/json-ld-syntax/#embedding-json-ld-in-html-documents) does not specify what the 'base' for that JSON-LD must be. It should specify it.\r\n\r\n(cf #22)" .
<https://api.github.com/repos/w3c/json-ld-syntax> <http://example.com/ns#issue> <https://api.github.com/repos/w3c/json-ld-syntax/issues/22> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/22> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/22"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/22> <http://schema.org/identifier> "22"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/22> <http://schema.org/name> "Normativeness of the embedded form of JSON-LD" .
<https://api.github.com/users/iherman> <http://schema.org/accountId> "iherman" .
<https://api.github.com/users/iherman> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/520723?v=4" .
<https://api.github.com/users/iherman> <http://schema.org/url> "https://github.com/iherman"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/iherman> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/22> <http://schema.org/creator> <https://api.github.com/users/iherman> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:duplicate> <http://schema.org/name> "spec:duplicate" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:duplicate> <http://schema.org/color> "e0082c" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:duplicate> <http://schema.org/description> "" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/22> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:duplicate> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:enhancement> <http://schema.org/name> "spec:enhancement" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:enhancement> <http://schema.org/color> "c11537" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:enhancement> <http://schema.org/description> "" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/22> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:enhancement> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/22> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/22> <http://schema.org/startDate> "2018-07-01T04:47:53Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/22> <http://schema.org/endDate> "2018-08-27T16:03:47Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/22> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/22> <http://schema.org/description> "Section [4.28](https://w3c.github.io/json-ld-syntax/#embedding-json-ld-in-html-documents) of the draft defines JSON-LD embedded in HTML via the `script` tag. However, the section is marked as 'non-normative'.\r\n\r\nIn view of the importance of that format (e.g., this is the main format accepted by schema.org processors these days) we should consider giving it a normative status." .
<https://api.github.com/repos/w3c/json-ld-syntax> <http://example.com/ns#issue> <https://api.github.com/repos/w3c/json-ld-syntax/issues/20> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/20> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/20"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/20> <http://schema.org/identifier> "20"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/20> <http://schema.org/name> "Introduce concept of \"sealed” contexts" .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/20> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/propose%20closing> <http://schema.org/name> "propose closing" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/propose%20closing> <http://schema.org/color> "bf5315" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/propose%20closing> <http://schema.org/description> "" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/20> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/propose%20closing> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/satisfied> <http://schema.org/name> "satisfied" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/satisfied> <http://schema.org/color> "4be23b" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/satisfied> <http://schema.org/description> "Requirement Satisfied" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/20> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/satisfied> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:enhancement> <http://schema.org/name> "spec:enhancement" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:enhancement> <http://schema.org/color> "c11537" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:enhancement> <http://schema.org/description> "" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/20> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:enhancement> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/20> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/20> <http://schema.org/startDate> "2018-06-30T16:31:51Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/20> <http://schema.org/endDate> "2019-02-26T04:15:00Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/20> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/20> <http://schema.org/description> "A number of standards track specifications use JSON-LD for extensibility but intentionally place limitations on overriding the terms defined in a core context. For example:\r\n\r\n> Implementations may augment the provided @context with additional @context definitions but must not override or change the normative context.\r\n\r\nhttps://www.w3.org/TR/activitystreams-core/#jsonld\r\n\r\n> Implementations MUST produce an error when an extension JSON-LD Context overrides the expanded URL for a term specified in the base JSON-LD Context (https://w3id.org/credentials/v1). To avoid the possibility of accidentally overriding terms, developers are urged to scope their extensions.\r\n\r\nhttps://w3c.github.io/vc-data-model/#extensibility\r\n\r\nIt seems like it would be a nice feature to allow enforcement of this desire by JSON-LD processors. Then authors could be assured that the interpretation of a context would be proper and properly implemented JSON-LD processors would throw errors if rules were violated.\r\n\r\nIn short, I propose we add a keyword with boolean value such as `\"@sealed\": true` (that could appear in contexts) to JSON-LD 1.1 that enables processors to enforce a desire to prevent defined terms from being redefined in subsequent contexts, but allows for new terms (aka extensions) to be defined.\r\n\r\nOriginal issue: [Introduce concept of \"sealed\" contexts #656](https://github.com/json-ld/json-ld.org/issues/656)\r\n" .
<https://api.github.com/repos/w3c/json-ld-syntax> <http://example.com/ns#issue> <https://api.github.com/repos/w3c/json-ld-syntax/issues/19> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/19> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/19"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/19> <http://schema.org/identifier> "19"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/19> <http://schema.org/name> "Indexing without a predicate" .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/19> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/propose%20closing> <http://schema.org/name> "propose closing" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/propose%20closing> <http://schema.org/color> "bf5315" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/propose%20closing> <http://schema.org/description> "" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/19> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/propose%20closing> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/satisfied> <http://schema.org/name> "satisfied" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/satisfied> <http://schema.org/color> "4be23b" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/satisfied> <http://schema.org/description> "Requirement Satisfied" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/19> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/satisfied> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:enhancement> <http://schema.org/name> "spec:enhancement" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:enhancement> <http://schema.org/color> "c11537" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:enhancement> <http://schema.org/description> "" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/19> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:enhancement> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:substantive> <http://schema.org/name> "spec:substantive" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:substantive> <http://schema.org/color> "cff9a4" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:substantive> <http://schema.org/description> "" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/19> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:substantive> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/19> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#OpenIssue> .
<https://api.github.com/users/workergnome> <http://schema.org/accountId> "workergnome" .
<https://api.github.com/users/workergnome> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/34536?v=4" .
<https://api.github.com/users/workergnome> <http://schema.org/url> "https://github.com/workergnome"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/workergnome> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/19> <http://example.com/ns#assignee> <https://api.github.com/users/workergnome> .
<https://api.github.com/users/azaroth42> <http://schema.org/accountId> "azaroth42" .
<https://api.github.com/users/azaroth42> <http://schema.org/image> "https://avatars3.githubusercontent.com/u/871868?v=4" .
<https://api.github.com/users/azaroth42> <http://schema.org/url> "https://github.com/azaroth42"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/azaroth42> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/19> <http://example.com/ns#assignee> <https://api.github.com/users/azaroth42> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/19> <http://schema.org/startDate> "2018-06-30T16:31:09Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/19> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/19> <http://schema.org/description> "For consideration by the JSON-LD 1.1 WG...\r\n\r\nAssuming a nested set of resources where leaf nodes are frequently repeated, it is difficult to find the definition of the node after compaction.  Imagine a classification that is used on the second item in a list, and again on the 26th.  It would be nice to have a place to look up the label for the classification, instead of repeating it on both 2 and 26.  Similarly, information about repeated people, services, or anything else could benefit from this pattern.\r\n\r\nAs prior art, and use case for inclusion, [JSON API](http://jsonapi.org/format/#document-top-level) has the notion of \"included\" -- a slot where you can put resources that are included in others, such that developers can always know where to find them.  In my work, this has come up with repeated services in IIIF, and classifications, people and places when describing the cultural heritage objects they relate to.\r\n\r\nThe identifier map pattern is already in this space, but insufficient as it requires a predicate to map to, and the relationship is to a resource somewhere nested in the data structure, not the top level resource. There would also need to be framing support as an extension to `@embed:@never` such that the inclusions were not embedded in the object data, but with a pointer to where they should go.\r\n\r\nExample data:\r\n\r\n```\r\n{\r\n  \"id\": \"1\",\r\n  \"type\": \"eg:Thing-with-Items\",\r\n  \"eg:items\": [\r\n    {\r\n      \"id\":\"2\",\r\n      \"classification\": \"enum:c6\",\r\n      \"service\": \"enum:s2\",\r\n    },\r\n    { \"id\": \"3...26 go here\", \"type\": \"eg:X\"}, \r\n    {\r\n      \"id\": \"27\",\r\n      \"classification\": \"enum:c6\"\r\n    }    \r\n  ],\r\n  \"included\": {\r\n    \"enum:c6\": {\"type\": \"eg:Type\", \"label\": \"Classification 6\"},\r\n    \"enum:p1\": {\"type\": \"eg:Person\", \"label\": \"Person 1\"},\r\n    \"enum:s2\": {\"type\": \"eg:Service\", \"label\": \"Login Service\"}\r\n  }  \r\n}\r\n```\r\n\r\nPlayground example with identifier map:  http://tinyurl.com/yd5z87xg\r\n\r\nThe inclusion term could either be a new keyword like `@id` (`@included` or `@inclusions`) that was then re-aliased in the context (to, e.g. `included`), or it could be a new keyword value for `@container` (`included: {@container: @included}`).  I think the former is the (slightly) better design, as it makes it more obviously a field rather than a data structure. It would only be usable in a resource that is not nested within other resources (e.g. the top level JSON object ... which might be in an array or @graph). Framing could then use the same keyword: `@embed: @included`.\r\n\r\nOriginal issue: [Indexing without a predicate #650](https://github.com/json-ld/json-ld.org/issues/650)\r\n" .
<https://api.github.com/repos/w3c/json-ld-syntax> <http://example.com/ns#issue> <https://api.github.com/repos/w3c/json-ld-syntax/issues/18> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/18> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/18"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/18> <http://schema.org/identifier> "18"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/18> <http://schema.org/name> "The absence of being" .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/18> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/out%20of%20scope:%20transformation> <http://schema.org/name> "out of scope: transformation" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/out%20of%20scope:%20transformation> <http://schema.org/color> "000000" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/out%20of%20scope:%20transformation> <http://schema.org/description> "" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/18> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/out%20of%20scope:%20transformation> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/propose%20closing> <http://schema.org/name> "propose closing" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/propose%20closing> <http://schema.org/color> "bf5315" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/propose%20closing> <http://schema.org/description> "" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/18> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/propose%20closing> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:enhancement> <http://schema.org/name> "spec:enhancement" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:enhancement> <http://schema.org/color> "c11537" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:enhancement> <http://schema.org/description> "" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/18> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:enhancement> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:wontfix> <http://schema.org/name> "spec:wontfix" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:wontfix> <http://schema.org/color> "2bafa2" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:wontfix> <http://schema.org/description> "" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/18> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:wontfix> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/18> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/18> <http://schema.org/startDate> "2018-06-30T16:30:33Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/18> <http://schema.org/endDate> "2018-10-18T22:10:51Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/18> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/18> <http://schema.org/description> "### A standard model of emptiness\r\n\r\nIn summary, it would be useful if JSON-LD recognized the quantum duality of the empty list, in that it can be both value (`rdf:nil`) and list (`[]`). I would propose:\r\n\r\n* Expansion standardizes what it does with empty lists whatever the form of the input. For consistency, `rdf:nil` might be best.\r\n* Framing adapts to the needs of the frame. My current half-baked thought would be if i say `\"hasValue\": {}` in my frame, and the input is `\"hasValue\": \"rdf:nil\"`, output would be a contextualized `rdf:nil`, unless `\"hasValue\": {\"@container\": \"@list\"}`, in which case output would be `[]`. I realize this likely brings up other issues.\r\n\r\nFinally, it would be good if the working group, once established, were to re-examine the definition of `@null` in the spec, or at least clarifies its relationship to RDF, and `rdf:nil` in particular. Currently, `rdf:nil` is not the same as `@null`, and framing treats `@null` as `null` in the output JSON, which is swallowed by at least Java deserializers, so just takes up space, and emptiness should never take up space. I touched on the this in [issue 641](https://github.com/json-ld/json-ld.org/issues/641): it would be better if a property were only set to `@null` if it actually meant something.\r\n\r\nOriginal issue [The absence of being #648](https://github.com/json-ld/json-ld.org/issues/648)\r\n" .
<https://api.github.com/repos/w3c/json-ld-syntax> <http://example.com/ns#issue> <https://api.github.com/repos/w3c/json-ld-syntax/issues/16> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/16> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/16"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/16> <http://schema.org/identifier> "16"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/16> <http://schema.org/name> "Warn or error if non-keyword strings having \"@\" are encountered" .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/16> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/satisfied> <http://schema.org/name> "satisfied" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/satisfied> <http://schema.org/color> "4be23b" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/satisfied> <http://schema.org/description> "Requirement Satisfied" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/16> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/satisfied> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:editorial> <http://schema.org/name> "spec:editorial" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:editorial> <http://schema.org/color> "58820a" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:editorial> <http://schema.org/description> "" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/16> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:editorial> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/16> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#OpenIssue> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/16> <http://schema.org/startDate> "2018-06-30T16:28:43Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/16> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/16> <http://schema.org/description> "Looking at a [schema.org example for ItemList](http://schema.org/ItemList#ItemList-gen-306), there is a JSON-LD example which includes the fictitious `@url` keyword, where they likely meant `@id`.\r\n\r\n```jsonld\r\n{\r\n  \"@context\": \"http://schema.org\",\r\n  \"@type\": \"ItemList\",\r\n  \"@url\": \"http://en.wikipedia.org/wiki/Billboard_200\",\r\n  \"name\": \"Top music artists\",\r\n  \"description\": \"The artists with the most cumulative weeks at number one according to Billboard 200\",\r\n  \"itemListElement\": [\r\n    {\r\n      \"@type\": \"ListItem\",\r\n      \"position\": 1,\r\n      \"item\": {\r\n        \"@type\": \"MusicGroup\",\r\n        \"name\": \"Beatles\"\r\n      }\r\n    },\r\n    {\r\n      \"@type\": \"ListItem\",\r\n      \"position\": 2,\r\n      \"item\": {\r\n        \"@type\": \"MusicGroup\",\r\n        \"name\": \"Elvis Presley\"\r\n      }\r\n    },\r\n    {\r\n      \"@type\": \"ListItem\",\r\n      \"position\": 3,\r\n      \"item\": {\r\n        \"@type\": \"MusicGroup\",\r\n        \"name\": \"Michael Jackson\"\r\n      }\r\n    },\r\n    {\r\n      \"@type\": \"ListItem\",\r\n      \"position\": 3,\r\n      \"item\": {\r\n        \"@type\": \"MusicGroup\",\r\n        \"name\": \"Garth Brooks\"\r\n      }\r\n    }\r\n  ]\r\n}\r\n```\r\n\r\nThere's nothing to signal an issue, and a JSON-LD processor will happily resolve this relative to `@vocab` as `http://schema.org/@url`. This creates a potential forward-compatibility issue if new keywords are introduced, as they are in 1.1. We might want to describe normative or suggested behavior if a processor encounters a string which could hold a keyword, but holds something else starting with `@`.\r\n\r\ncc/ @danbri\r\n\r\nOriginal issue: [Warn or error if non-keyword strings having \"@\" are encountered #598](https://github.com/json-ld/json-ld.org/issues/598)\r\n" .
<https://api.github.com/repos/w3c/json-ld-syntax> <http://example.com/ns#issue> <https://api.github.com/repos/w3c/json-ld-syntax/issues/14> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/14> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/14"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/14> <http://schema.org/identifier> "14"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/14> <http://schema.org/name> "\"Lax” IRIs" .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/14> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/propose%20closing> <http://schema.org/name> "propose closing" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/propose%20closing> <http://schema.org/color> "bf5315" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/propose%20closing> <http://schema.org/description> "" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/14> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/propose%20closing> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:wontfix> <http://schema.org/name> "spec:wontfix" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:wontfix> <http://schema.org/color> "2bafa2" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:wontfix> <http://schema.org/description> "" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/14> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:wontfix> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/14> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/14> <http://schema.org/startDate> "2018-06-30T16:26:55Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/14> <http://schema.org/endDate> "2018-07-30T20:28:24Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/14> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/14> <http://schema.org/description> "Allows arbitrary strings to be used as IRIs\r\n\r\nOriginal issue: [\"Lax\" IRIs #590](https://github.com/json-ld/json-ld.org/issues/590)\r\n" .
<https://api.github.com/repos/w3c/json-ld-syntax> <http://example.com/ns#issue> <https://api.github.com/repos/w3c/json-ld-syntax/issues/13> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/13> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/13"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/13> <http://schema.org/identifier> "13"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/13> <http://schema.org/name> "Allow @value, @language and @type simultaneously" .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/13> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:enhancement> <http://schema.org/name> "spec:enhancement" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:enhancement> <http://schema.org/color> "c11537" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:enhancement> <http://schema.org/description> "" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/13> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:enhancement> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:wontfix> <http://schema.org/name> "spec:wontfix" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:wontfix> <http://schema.org/color> "2bafa2" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:wontfix> <http://schema.org/description> "" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/13> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:wontfix> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/13> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/13> <http://schema.org/startDate> "2018-06-30T16:26:10Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/13> <http://schema.org/endDate> "2018-08-04T17:14:50Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/13> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/13> <http://schema.org/description> "It is currently not possible to have all three of `@value`, `@language` and `@type`.  Meaning that for text with embedded mark up, it is impossible to have both language and format (the datatype given in `@type`) ... neither of which can be reliably introspected from the value.\r\n\r\nAny time there is markdown, html, xml, json, yaml, latex, or any other formatting instructions beyond simply print the string to the user, this becomes extremely valuable. Given the usage of those formats on the web, it would enable appropriate management of internationalized texts.\r\n\r\nExample:\r\n```\r\n{\r\n  \"description\": {\r\n    \"@value\":\"<p>Some <b>description</b></p>\",\r\n    \"@type\": \"rdf:XMLLiteral\",\r\n    \"@language\" : \"en-latn\"\r\n  }\r\n}\r\n```\r\n\r\nReference: https://lists.w3.org/Archives/Public/public-linked-json/2014Aug/0031.html\r\nDoor-Opened-By: https://github.com/json-ld/json-ld.org/issues/583\r\n\r\nOriginal issue: [Allow @value, @language and @type simultaneously #585](https://github.com/json-ld/json-ld.org/issues/585)\r\n" .
<https://api.github.com/repos/w3c/json-ld-syntax> <http://example.com/ns#issue> <https://api.github.com/repos/w3c/json-ld-syntax/issues/11> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/11> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/11"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/11> <http://schema.org/identifier> "11"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/11> <http://schema.org/name> "Introducing @dir" .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/11> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/i18n-tracker> <http://schema.org/name> "i18n-tracker" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/i18n-tracker> <http://schema.org/color> "F9C9FF" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/i18n-tracker> <http://schema.org/description> "Group bringing to attention of Internationalization, or tracked by i18n but not needing response." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/11> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/i18n-tracker> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/propose%20closing> <http://schema.org/name> "propose closing" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/propose%20closing> <http://schema.org/color> "bf5315" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/propose%20closing> <http://schema.org/description> "" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/11> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/propose%20closing> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/satisfied> <http://schema.org/name> "satisfied" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/satisfied> <http://schema.org/color> "4be23b" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/satisfied> <http://schema.org/description> "Requirement Satisfied" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/11> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/satisfied> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:enhancement> <http://schema.org/name> "spec:enhancement" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:enhancement> <http://schema.org/color> "c11537" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:enhancement> <http://schema.org/description> "" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/11> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:enhancement> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/11> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#OpenIssue> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/11> <http://schema.org/startDate> "2018-06-30T16:23:41Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/11> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/11> <http://schema.org/description> "In some situations it is important/necessary to include the base direction of a text, alongside its language; see the [“Requirements for Language and Direction Metadata in Data Formats”](https://w3c.github.io/string-meta/) for further details. In practice, in a vanilla JSON, it would require something like:\r\n\r\n\r\n  ```\r\n  \"title\": [ { \"value\": \"Moby Dick\", \"lang\": \"en\" },\r\n	         { \"value\": \"موبي ديك\", \"lang\": \"ar\"  \"dir\": \"rtl\"}\r\n	       ]  \r\n  ```\r\n\r\n  (the example comes from that document).\r\n\r\n  At this moment, I believe the only way you can reasonably express that in JSON-LD is via cheating a bit:\r\n\r\n  ```\r\n  \"title\": [ { \"@value\": \"Moby Dick\", \"@language\": \"en\" },\r\n	         { \"@value\": \"موبي ديك\",  \"@language\": \"ar\"  \"dir\": \"rtl\"}\r\n	       ]  \r\n  ```\r\n\r\n  and making sure that the `dir` term is _not_ defined in the relevant `@context` so that, when generating the RDF output, that term is simply ignored. But that also means that there is no round-tripping, that term will disappear after expansion.\r\n\r\n  The difficulty lies in the RDF layer, in fact; RDF does not have any means (alas!) to express text direction. On the other hand, this missing feature is a general I18N problem whenever JSON-LD is used (there were issues when developing the Web Annotation Model, these issues are popping up in the Web Publication work, etc.).\r\n\r\n  Here is what I would propose as a non-complete solution\r\n\r\n  1. Let us introduce a `@dir` term, alongside `@language`. This means this term can be used in place of `dir` above, ie, it is a bona-fide part of a string representation, and would therefore be kept in the compaction/expansion steps, can also be used for framing.\r\n  2. In JSON-LD 1.1, `@dir` is _ignored_ when transforming into RDF. I.e., only the language tag would be used.\r\n  3. We _may_ initiate some work in the RDF community to solve this issue. There may be several ways, each of them require the RDF community to chime in\r\n  	3.1. Define a mechanism of \"parametrized\" standard datatypes that represent a (language,direction) pair. One would then get something like`[] ex:title \"موبي ديك\"^^rdf:internationalText(ar,rtl) ;`\r\n  	3.2. Go for a \"generalized\" RDF where strings can also appear as subjects (that has been a matter of dispute for a long time...). That would give the possibility to add such attribute to texts like directions\r\n  	3.3. Some other mechanisms that I cannot think about\r\n  4. In a future JSON-LD 1.* the `@dir` value can be properly mapped onto an RDF representing the right choices (if such choices are worked out)\r\n\r\nOriginal issue [Introducing @dir ? #583](https://github.com/json-ld/json-ld.org/issues/583)\r\n" .
<https://api.github.com/repos/w3c/json-ld-syntax> <http://example.com/ns#issue> <https://api.github.com/repos/w3c/json-ld-syntax/issues/10> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/10> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/10"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/10> <http://schema.org/identifier> "10"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/10> <http://schema.org/name> "Use version 2.0 instead of 1.1 " .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/10> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/propose%20closing> <http://schema.org/name> "propose closing" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/propose%20closing> <http://schema.org/color> "bf5315" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/propose%20closing> <http://schema.org/description> "" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/10> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/propose%20closing> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:wontfix> <http://schema.org/name> "spec:wontfix" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:wontfix> <http://schema.org/color> "2bafa2" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:wontfix> <http://schema.org/description> "" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/10> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:wontfix> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/10> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/10> <http://schema.org/startDate> "2018-06-30T16:21:36Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/10> <http://schema.org/endDate> "2018-07-30T20:29:19Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/10> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/10> <http://schema.org/description> "[Comments at TPAC](https://json-ld.org/minutes/2017-11-08/) suggested that as our work is a breaking change (causing 1.0 processors that are not 1.1 compatible to intentionally break when they see `\"@version\": 1.1`), [semantic versioning](http://semver.org) would suggest that we use a major release number, rather than a minor number.\r\n\r\nOriginal issue is [Use version 2.0 instead of 1.1 #548](https://github.com/json-ld/json-ld.org/issues/548)\r\n" .
<https://api.github.com/repos/w3c/json-ld-syntax> <http://example.com/ns#issue> <https://api.github.com/repos/w3c/json-ld-syntax/issues/9> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/9> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/9"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/9> <http://schema.org/identifier> "9"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/9> <http://schema.org/name> "Content addressable contexts" .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/9> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/propose%20closing> <http://schema.org/name> "propose closing" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/propose%20closing> <http://schema.org/color> "bf5315" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/propose%20closing> <http://schema.org/description> "" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/9> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/propose%20closing> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/satisfied> <http://schema.org/name> "satisfied" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/satisfied> <http://schema.org/color> "4be23b" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/satisfied> <http://schema.org/description> "Requirement Satisfied" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/9> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/satisfied> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/9> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#OpenIssue> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/9> <http://schema.org/startDate> "2018-06-30T16:20:41Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/9> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/9> <http://schema.org/description> "Provide a means for refering to a remote context without without requiring it to be downloaded\r\n* HTML scribe integrity?\r\n* IPFS\r\n* `duri` or `tdb` schemes\r\n* “frozen” contexts\r\n\r\nOriginal issue [Content addressable contexts #547](https://github.com/json-ld/json-ld.org/issues/547)\r\n" .
<https://api.github.com/repos/w3c/json-ld-syntax> <http://example.com/ns#issue> <https://api.github.com/repos/w3c/json-ld-syntax/issues/8> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/8> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/8"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/8> <http://schema.org/identifier> "8"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/8> <http://schema.org/name> "HTTP parameters for specifying context or frame" .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/8> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/satisfied> <http://schema.org/name> "satisfied" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/satisfied> <http://schema.org/color> "4be23b" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/satisfied> <http://schema.org/description> "Requirement Satisfied" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/8> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/satisfied> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/security-tracker> <http://schema.org/name> "security-tracker" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/security-tracker> <http://schema.org/color> "ffff00" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/security-tracker> <http://schema.org/description> "Group bringing to attention of security, or tracked by the security Group but not needing response." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/8> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/security-tracker> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:enhancement> <http://schema.org/name> "spec:enhancement" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:enhancement> <http://schema.org/color> "c11537" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:enhancement> <http://schema.org/description> "" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/8> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:enhancement> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:substantive> <http://schema.org/name> "spec:substantive" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:substantive> <http://schema.org/color> "cff9a4" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:substantive> <http://schema.org/description> "" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/8> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:substantive> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/8> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/8> <http://example.com/ns#assignee> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/8> <http://schema.org/startDate> "2018-06-30T16:19:49Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/8> <http://schema.org/endDate> "2019-01-12T20:36:51Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/8> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/8> <http://schema.org/description> "  When requesting JSON-LD from an HTTP endpoint, it would be useful to provide a reference to a context or frame which should be used by the server to put the results into the proper format.\r\n  * Note that this could be an attack vector on the server, so some provision for white-listing may be in order.\r\n\r\n  Original issue is [JSON-LD 1.1 Feature Request : define how to specify the json-ld profile in a request to a server and include framing as an option #491](https://github.com/json-ld/json-ld.org/issues/491)\r\n" .
<https://api.github.com/repos/w3c/json-ld-syntax> <http://example.com/ns#issue> <https://api.github.com/repos/w3c/json-ld-syntax/issues/7> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/7> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/7"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/7> <http://schema.org/identifier> "7"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/7> <http://schema.org/name> "support @values for describing multidimensional containers" .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/7> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/out%20of%20scope:%20transformation> <http://schema.org/name> "out of scope: transformation" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/out%20of%20scope:%20transformation> <http://schema.org/color> "000000" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/out%20of%20scope:%20transformation> <http://schema.org/description> "" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/7> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/out%20of%20scope:%20transformation> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:substantive> <http://schema.org/name> "spec:substantive" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:substantive> <http://schema.org/color> "cff9a4" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:substantive> <http://schema.org/description> "" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/7> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:substantive> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:wontfix> <http://schema.org/name> "spec:wontfix" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:wontfix> <http://schema.org/color> "2bafa2" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:wontfix> <http://schema.org/description> "" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/7> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:wontfix> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/7> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/7> <http://schema.org/startDate> "2018-06-30T16:18:45Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/7> <http://schema.org/endDate> "2018-09-13T16:56:51Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/7> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/7> <http://schema.org/description> "Allows a term definition to include an `@values` block to describe structured values, such as for GeoJSON\r\n\r\n  ### Example\r\n\r\n  ``` json\r\n  {\r\n    \"@context\": {\r\n       \"coordinates\": {\r\n          \"@id\": \"geojson:coordinates\",\r\n          \"@container\" : \"@list\",\r\n          \"@values\" : { \r\n             \"@type\" : \"geojson:Coordinate\",\r\n             \"@container\" : \"@set\",\r\n             \"@values\" : [\r\n                 {\"@type\" : \"xsd:double\", \"@id\":\"geo:longitude\"},\r\n                 {\"@type\" : \"xsd:double\", \"@id\":\"geo:latitude\"}\r\n             ]\r\n          }\r\n       }\r\n    },\r\n    \"@graph\" : [{\r\n     \"@id\" : \"ex:LineString1\",\r\n      \"coordinates\" : [\r\n            [\r\n              3.1057405471801753,\r\n              51.064216229943476\r\n            ],\r\n            [\r\n              3.1056976318359375,\r\n              51.063434090307574\r\n            ]\r\n      ]\r\n    }]\r\n  }\r\n  ```\r\n\r\n  Would transform to (and vice versa):\r\n\r\n  ``` turtle\r\n  ex:LineString1 geojson:coordinates _:b0 .\r\n  _:b0 rdf:first _:b1 .\r\n  _:b1 a geojson:Coordinate ;\r\n        geo:longitude \"3.105740547180175E0\"^^xsd:double ;\r\n        geo:latitude \"5.106421622994348E1\"^^xsd:double .\r\n  _:b0 rdf:rest _:b2 .\r\n  _:b2 rdf:first a geojson:Coordinate ;\r\n        geo:longitude \"3.1056976318359375\"^^xsd:double ;\r\n        geo:latitude \"51.063434090307574\"^^xsd:double .\r\n  _:b2 rdf:rest rdf:nil .\r\n  ```\r\n\r\nOriginal issue is [JSON-LD 1.1 Feature Request: support @values for describing multidimensional containers (list of lists) #397](https://github.com/json-ld/json-ld.org/issues/397)\r\n" .
<https://api.github.com/repos/w3c/json-ld-syntax> <http://example.com/ns#issue> <https://api.github.com/repos/w3c/json-ld-syntax/issues/6> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/6> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/6"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/6> <http://schema.org/identifier> "6"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/6> <http://schema.org/name> "New @label keyword" .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/6> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/propose%20closing> <http://schema.org/name> "propose closing" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/propose%20closing> <http://schema.org/color> "bf5315" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/propose%20closing> <http://schema.org/description> "" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/6> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/propose%20closing> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:wontfix> <http://schema.org/name> "spec:wontfix" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:wontfix> <http://schema.org/color> "2bafa2" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:wontfix> <http://schema.org/description> "" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/6> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:wontfix> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/6> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/6> <http://schema.org/startDate> "2018-06-30T16:16:37Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/6> <http://schema.org/endDate> "2018-07-30T20:29:57Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/6> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/6> <http://schema.org/description> "Syntactic sugar for `schema:label` (which doesn’t exist).\r\n\r\nOriginal issue is [JSON-LD 1.1 Feature Request: New @label keyword #371](https://github.com/json-ld/json-ld.org/issues/371)\r\n" .
<https://api.github.com/repos/w3c/json-ld-syntax> <http://example.com/ns#issue> <https://api.github.com/repos/w3c/json-ld-syntax/issues/5> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/5> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/5"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/5> <http://schema.org/identifier> "5"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/5> <http://schema.org/name> "Object-level @language" .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/5> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/propose%20closing> <http://schema.org/name> "propose closing" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/propose%20closing> <http://schema.org/color> "bf5315" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/propose%20closing> <http://schema.org/description> "" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/5> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/propose%20closing> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:wontfix> <http://schema.org/name> "spec:wontfix" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:wontfix> <http://schema.org/color> "2bafa2" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:wontfix> <http://schema.org/description> "" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/5> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:wontfix> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/5> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/5> <http://schema.org/startDate> "2018-06-30T16:15:26Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/5> <http://schema.org/endDate> "2018-07-30T20:30:40Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/5> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/5> <http://schema.org/description> "Support the use of `”@language”: “foo”` as a shorthand for `{“@context”: {“@language”: “foo”}}`.\r\n\r\nOriginal issue is [JSON-LD 1.1 Feature Request: Object-level @language #368](https://github.com/json-ld/json-ld.org/issues/368)\r\n" .
<https://api.github.com/repos/w3c/json-ld-syntax> <http://example.com/ns#issue> <https://api.github.com/repos/w3c/json-ld-syntax/issues/4> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/4> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/4"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/4> <http://schema.org/identifier> "4"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/4> <http://schema.org/name> "Support JSON values that aren’t mapped" .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/4> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/propose%20closing> <http://schema.org/name> "propose closing" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/propose%20closing> <http://schema.org/color> "bf5315" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/propose%20closing> <http://schema.org/description> "" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/4> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/propose%20closing> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/satisfied> <http://schema.org/name> "satisfied" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/satisfied> <http://schema.org/color> "4be23b" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/satisfied> <http://schema.org/description> "Requirement Satisfied" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/4> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/satisfied> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:editorial> <http://schema.org/name> "spec:editorial" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:editorial> <http://schema.org/color> "58820a" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:editorial> <http://schema.org/description> "" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/4> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:editorial> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:enhancement> <http://schema.org/name> "spec:enhancement" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:enhancement> <http://schema.org/color> "c11537" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:enhancement> <http://schema.org/description> "" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/4> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:enhancement> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:substantive> <http://schema.org/name> "spec:substantive" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:substantive> <http://schema.org/color> "cff9a4" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:substantive> <http://schema.org/description> "" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/4> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/spec:substantive> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/4> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/4> <http://schema.org/startDate> "2018-06-30T16:14:24Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/4> <http://schema.org/endDate> "2019-03-28T20:43:03Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/4> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/4> <http://schema.org/description> "* Consider using `”@type”: “@json” to describe native values in the compact form.\r\n* Native values should include all JSON types: strings, booleans, numbers, and _null_ as well as objects and arrays.\r\n* Expanded form can record these as values of `@value`.\r\n  * Does interfere with some use of `[]` and `{}` in framing\r\n\r\nOriginal issue is [Support JSON values that aren't mapped #333](https://github.com/json-ld/json-ld.org/issues/333)\r\n" .
<https://api.github.com/repos/w3c/json-ld-syntax> <http://example.com/ns#issue> <https://api.github.com/repos/w3c/json-ld-syntax/issues/3> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/3> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/3"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/3> <http://schema.org/identifier> "3"^^<http://www.w3.org/2001/XMLSchema#integer> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/3> <http://schema.org/name> "Pick a better keyword for @nest" .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/3> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/propose%20closing> <http://schema.org/name> "propose closing" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/propose%20closing> <http://schema.org/color> "bf5315" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/propose%20closing> <http://schema.org/description> "" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/3> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/propose%20closing> .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/satisfied> <http://schema.org/name> "satisfied" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/satisfied> <http://schema.org/color> "4be23b" .
<https://api.github.com/repos/w3c/json-ld-syntax/labels/satisfied> <http://schema.org/description> "Requirement Satisfied" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/3> <http://example.com/ns#label> <https://api.github.com/repos/w3c/json-ld-syntax/labels/satisfied> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/3> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#ClosedIssue> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/3> <http://schema.org/startDate> "2018-06-30T16:12:27Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/3> <http://schema.org/endDate> "2018-07-30T20:31:35Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/3> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/3> <http://schema.org/description> "People haven’t been satisfied with the @nest term for describing nested properties, although nothing better has come along.\r\n\r\nOriginal issue was [Ignoring semantically meaningless nesting #246](https://github.com/json-ld/json-ld.org/issues/246).\r\n" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/429470885> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/82#issuecomment-429470885"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/82> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/429470885> .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/429470885> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/429470885> <http://schema.org/startDate> "2018-10-12T21:43:03Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/429470885> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/429470885> <http://schema.org/description> "Generally, just better." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/451236811> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/111#issuecomment-451236811"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/111> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/451236811> .
<https://api.github.com/users/BigBlueHat> <http://schema.org/accountId> "BigBlueHat" .
<https://api.github.com/users/BigBlueHat> <http://schema.org/image> "https://avatars1.githubusercontent.com/u/43209?v=4" .
<https://api.github.com/users/BigBlueHat> <http://schema.org/url> "https://github.com/BigBlueHat"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/BigBlueHat> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/451236811> <http://schema.org/creator> <https://api.github.com/users/BigBlueHat> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/451236811> <http://schema.org/startDate> "2019-01-03T18:40:03Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/451236811> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/451236811> <http://schema.org/description> "@gkellogg the description mentions that it's \"For #19\" but that's about the included/embedded graph proposal. Could you clarify if these are indeed related?\r\n\r\nThanks!" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/451241007> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/86#issuecomment-451241007"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/86> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/451241007> .
<https://api.github.com/users/BigBlueHat> <http://schema.org/accountId> "BigBlueHat" .
<https://api.github.com/users/BigBlueHat> <http://schema.org/image> "https://avatars1.githubusercontent.com/u/43209?v=4" .
<https://api.github.com/users/BigBlueHat> <http://schema.org/url> "https://github.com/BigBlueHat"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/BigBlueHat> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/451241007> <http://schema.org/creator> <https://api.github.com/users/BigBlueHat> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/451241007> <http://schema.org/startDate> "2019-01-03T18:54:11Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/451241007> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/451241007> <http://schema.org/description> "Also relates to discussions of #9 content addressable contexts as those would come with some amount of implicit integrity checkability." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/451242826> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/9#issuecomment-451242826"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/9> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/451242826> .
<https://api.github.com/users/BigBlueHat> <http://schema.org/accountId> "BigBlueHat" .
<https://api.github.com/users/BigBlueHat> <http://schema.org/image> "https://avatars1.githubusercontent.com/u/43209?v=4" .
<https://api.github.com/users/BigBlueHat> <http://schema.org/url> "https://github.com/BigBlueHat"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/BigBlueHat> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/451242826> <http://schema.org/creator> <https://api.github.com/users/BigBlueHat> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/451242826> <http://schema.org/startDate> "2019-01-03T19:00:19Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/451242826> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/451242826> <http://schema.org/description> "I'd like to surface @msporny's \"hashlink\" email in relation to this discussion:\r\nhttps://lists.w3.org/Archives/Public/public-json-ld-wg/2019Jan/0000.html\r\n\r\nOur current approach to document loader configuration makes implementing that a possibility.\r\n\r\nHowever, the approach taken in the hashlink proposal may also address some of our other concerns such as #86 and #108 which sit along side this topic.\r\n\r\nWorth some time, regardless. 😃 " .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/451245308> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/9#issuecomment-451245308"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/9> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/451245308> .
<https://api.github.com/users/msporny> <http://schema.org/accountId> "msporny" .
<https://api.github.com/users/msporny> <http://schema.org/image> "https://avatars3.githubusercontent.com/u/108611?v=4" .
<https://api.github.com/users/msporny> <http://schema.org/url> "https://github.com/msporny"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/msporny> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/451245308> <http://schema.org/creator> <https://api.github.com/users/msporny> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/451245308> <http://schema.org/startDate> "2019-01-03T19:09:02Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/451245308> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/451245308> <http://schema.org/description> "> However, the approach taken in the hashlink proposal may also address some of our other concerns \r\n\r\nYes, I'm asserting strongly that the Hashlink proposal addresses #9, #86, and #108. :)" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/451307788> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/111#issuecomment-451307788"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/111> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/451307788> .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/451307788> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/451307788> <http://schema.org/startDate> "2019-01-03T23:12:42Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/451307788> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/451307788> <http://schema.org/description> "Should have been for #8, not #19. Fixed." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/451541888> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/109#issuecomment-451541888"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/109> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/451541888> .
<https://api.github.com/users/BigBlueHat> <http://schema.org/accountId> "BigBlueHat" .
<https://api.github.com/users/BigBlueHat> <http://schema.org/image> "https://avatars1.githubusercontent.com/u/43209?v=4" .
<https://api.github.com/users/BigBlueHat> <http://schema.org/url> "https://github.com/BigBlueHat"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/BigBlueHat> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/451541888> <http://schema.org/creator> <https://api.github.com/users/BigBlueHat> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/451541888> <http://schema.org/startDate> "2019-01-04T19:21:46Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/451541888> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/451541888> <http://schema.org/description> "Closing this one as fixed per 6f92b1d. Thanks for the request @PaulJeong14 and for the quick work @pchampin!" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/451631607> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/8#issuecomment-451631607"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/8> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/451631607> .
<https://api.github.com/users/iherman> <http://schema.org/accountId> "iherman" .
<https://api.github.com/users/iherman> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/520723?v=4" .
<https://api.github.com/users/iherman> <http://schema.org/url> "https://github.com/iherman"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/iherman> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/451631607> <http://schema.org/creator> <https://api.github.com/users/iherman> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/451631607> <http://schema.org/startDate> "2019-01-05T06:17:32Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/451631607> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/451631607> <http://schema.org/description> "This issue was discussed in [a meeting](https://www.w3.org/2018/json-ld-wg/Meetings/Minutes/2019/2019-01-04-json-ld#section4-1).\r\n\r\n- `RESOLVED:  limit profile parameter use to URI’s, but continue to pursue an alternative to the profile media type parameter for client-signaled frames and contexts URLs for servers to (potentially) use when providing responses`\r\n<details><summary><i class=\"differentiate\">View the transcript</i></summary>\r\n4.1. HTTP parameters for specifying context or frame<br/>\r\nBenjamin Young: <a href=\"https://github.com/w3c/json-ld-syntax/issues/8\">https://github.com/w3c/json-ld-syntax/issues/8</a><br/>\r\nBenjamin Young: * syntax - <a href=\"https://github.com/w3c/json-ld-syntax/pull/111\">https://github.com/w3c/json-ld-syntax/pull/111</a><br/>\r\nBenjamin Young: * framing - <a href=\"https://github.com/w3c/json-ld-framing/pull/34\">https://github.com/w3c/json-ld-framing/pull/34</a><br/>\r\nBenjamin Young: * api - <a href=\"https://github.com/w3c/json-ld-api/pull/56\">https://github.com/w3c/json-ld-api/pull/56</a> (work in progress)<br/>\r\nBenjamin Young: gkellogg has the lion’s share of the work done on this<br/>\r\nGregg Kellogg: the first PR (syntax doc, #111) pretty much ready to go<br/>\r\n… removed language about quotes for the value of profile params<br/>\r\n… which is not true in general<br/>\r\n… only if multiple URIs are used, and added some examples with different types of profile params<br/>\r\nIvan Herman: I had a comment on that<br/>\r\n… content, not editorial<br/>\r\n… a sentence says that JSON-LD processors may restrict URIs for context and frames<br/>\r\n… which I read as saying, “If I’m a JSON-LD processor, I can refuse any context except this particular one”<br/>\r\n… is that really what we mean<br/>\r\nGregg Kellogg: well, this could become an attack vector, so we allow servers to restrict the action<br/>\r\nGregg Kellogg: framing is potentially expensive computationally<br/>\r\n… and people have demonstrated attacks via context<br/>\r\n… which we think we’ve mostly fixed, but obviously we can’t rule it entirely out<br/>\r\n… going back to the CG, there was this desire to restrict present there<br/>\r\nIvan Herman: i have two problems…<br/>\r\n… this is clearly non-editorial<br/>\r\n… have we discussed/voted on this restriction?<br/>\r\n… shouldn’t be in an editorial PR.<br/>\r\n… I don’t understand the problem this solves<br/>\r\nGregg Kellogg: this is part of the request header.<br/>\r\nIvan Herman: oh, the request header? (not the response)<br/>\r\nGregg Kellogg: this signals the server as to what the client wants<br/>\r\n… the server must examine the profile param and if it isn’t acceptable, return a 406<br/>\r\n… this new language just gives license to the server to do just that if the context is unacceptable<br/>\r\n… you could also fall-back in various ways<br/>\r\nIvan Herman: Okay, I misunderstood what was done, so that’s okay<br/>\r\n… but still, this is more than editorial<br/>\r\nGregg Kellogg: I don’t say that this is editorial<br/>\r\n… I folded in the previous discussions on this<br/>\r\nIvan Herman: sorry for the interrupt, fine with this. I will put in a link to this discussion into the PR<br/>\r\n… must be documented, now it is<br/>\r\n… we just want to document that everyone is fine with this<br/>\r\nBenjamin Young: I’ve got a nit<br/>\r\n… about the quotes being optional save for multiple URIs<br/>\r\nGregg Kellogg: for spaces<br/>\r\n… and I show examples of this<br/>\r\n… we don’t mandate that single spaces must be used<br/>\r\n… it’s just whitespace as defined by the rFC<br/>\r\nBenjamin Young: okay, thanks<br/>\r\nGregg Kellogg: we have also the PR for the API doc<br/>\r\nGregg Kellogg: <a href=\"https://github.com/w3c/json-ld-api/pull/56\">https://github.com/w3c/json-ld-api/pull/56</a><br/>\r\nGregg Kellogg: there is w-i-p on the API at that PR<br/>\r\n… framing was a more minor change<br/>\r\nGregg Kellogg: <a href=\"https://github.com/w3c/json-ld-framing/pull/34\">https://github.com/w3c/json-ld-framing/pull/34</a><br/>\r\nGregg Kellogg: the controversial point bigbluehat raised is whether adding a framing URI changes the semantics enough to make it inappropriate<br/>\r\n… as a profile param<br/>\r\n… online discussion indicates not<br/>\r\n… the change requires the profile param<br/>\r\n… which changes current behavior for people requesting frames<br/>\r\n… there might b more changes requireed for this for optinality<br/>\r\nGregg Kellogg: the idea was that a frame would be represented by a mimetype<br/>\r\n… but no one implemented that<br/>\r\n… and now we’ve moved to using a profile param for frame<br/>\r\n… so the question is, must the profile param appear, or is it optional/advisory<br/>\r\n… this param is for getting a doc that is a frame<br/>\r\n… and would appear on the response as well<br/>\r\nBenjamin Young: yes, we would want that on the response as well<br/>\r\nBenjamin Young: <a href=\"https://tools.ietf.org/html/rfc6906\">https://tools.ietf.org/html/rfc6906</a><br/>\r\nGregg Kellogg: we need more discussion on that PR<br/>\r\nAdam Soroka: <a href=\"https://github.com/w3c/json-ld-framing/pull/34\">https://github.com/w3c/json-ld-framing/pull/34</a><br/>\r\nGregg Kellogg: the API PR (<a href=\"https://github.com/w3c/json-ld-api/pull/56)\">https://github.com/w3c/json-ld-api/pull/56)</a> is just tests for this new behavior<br/>\r\n… I couldn’t see what language to add to the API, otherwise<br/>\r\n… the API do is concerned with what happens once you’ve requested a doc and are processing the result<br/>\r\n… we don’t need to specify how to use an Accept header<br/>\r\nBenjamin Young: this would only be for requesting a single doc in various representation<br/>\r\n… I’m glad that framed docs aren’t new mediatypes<br/>\r\n… but it seems unlikely that one document would be all the things at once (frame, context, instance)<br/>\r\nGregg Kellogg: but you aren’t requesting a doc, you are requesting a resource.<br/>\r\n… e.g. for SPARQL users<br/>\r\nGregg Kellogg: profile contains one or more of our URIs, as well as URLs to contexts, frames, etc.<br/>\r\nDavid Newbury: a real-world example: we have resources we’d like to be able to provide either as schema.org or CIDOC-CRM<br/>\r\n… same data, difference context/framing<br/>\r\nGregg Kellogg: only the non-registered URLS would be treated as dereferencable<br/>\r\n… similar to when the mimetype is just application/json and you stick the contet in a header<br/>\r\nBenjamin Young: this is where I get concerned about violating the RFC– the profile param shouldn’t be dereferenced<br/>\r\nGregg Kellogg: good point…<br/>\r\n… my impression was that we could define this behavior, but we do need to review<br/>\r\nBenjamin Young: in the Web Annotation we avoided triggering new representations via the profile param, only selecting from extant representations<br/>\r\nIvan Herman: <a href=\"https://tools.ietf.org/html/rfc6906\">https://tools.ietf.org/html/rfc6906</a><br/>\r\nBenjamin Young: this is a supernice feature, but is this where it belongs?<br/>\r\nIvan Herman: what the RFC (<a href=\"https://tools.ietf.org/html/rfc6906#section-3)\">https://tools.ietf.org/html/rfc6906#section-3)</a> does say is:<br/>\r\n“A profile MUST NOT change the semantics of the resource representation when processed without profile knowledge, so that clients both with and without knowledge of a profiled resource can safely use the same representation.”<br/>\r\nBenjamin Young: There is also <a href=\"https://tools.ietf.org/html/rfc4288#section-4.3\">https://tools.ietf.org/html/rfc4288#section-4.3</a><br/>\r\nIvan Herman: so this may indeed be a problem<br/>\r\nGregg Kellogg: the use of a context does not change the semantics of a representation, just the syntax<br/>\r\nBenjamin Young: it’s the functionality concern<br/>\r\n… if these are URLs (not merely URIs) they will be looked up and used for computation<br/>\r\nIvan Herman: it is an identifier; to quote further from <a href=\"https://tools.ietf.org/html/rfc6906#section-3:\">https://tools.ietf.org/html/rfc6906#section-3:</a><br/>\r\n“Profiles are identified by URI. However, as is the case with, for example, XML namespace URIs, the URI in this case only serves as an identifier,”<br/>\r\nIvan Herman: it is at the beginning of that section<br/>\r\nGregg Kellogg: rfc4288#section-4.3 is a different case of profile: that’s the header vs the mimetype<br/>\r\nGregg Kellogg: e.g. dc:name vs schema:name<br/>\r\n… totally different graphs<br/>\r\n… but for framing, it’s the same graph<br/>\r\n… and client can reframe or re-compact or whatever<br/>\r\n… for bigbluehat’s case, where there’s a range of possible contexts…<br/>\r\n… two ways to interpret that: first, I want the Schema context vs the DC context<br/>\r\n… or, I want “name” vs “schema:name” where the terms used are different<br/>\r\nBenjamin Young: in the case of conneg, you could list several contexts<br/>\r\n… and the sever will compute on your request and select something<br/>\r\n… that’s not a processing instruction<br/>\r\n… that’s a great idea, but it should go in a different box<br/>\r\nPierre-Antoine Champin: not fully agree with gkellogg about changing strings in the JSON for different contexts<br/>\r\n… in both cases, the semantics are the same<br/>\r\n… the condition for selecting different vocabularies is that the semantics of the vocabularies is the same<br/>\r\n… in both cases, the changes are at the syntax level, just at concrete or abstract syntax<br/>\r\nGregg Kellogg: if we look at the test suite, what might be considered?<br/>\r\n… one, you can take the result, expand it, and compare<br/>\r\n… or two, turn them into RDF and compare the graphs for isomorphism<br/>\r\n… (or in framing, a strict subgraph relationship)<br/>\r\nIvan Herman: +1 to gregg<br/>\r\nDavid Newbury: I’m assuming that I have all the data and am just selecting from it, not doing new processing<br/>\r\nIvan Herman: whither shall we wander?<br/>\r\n… what do we do if profiles are not the correct choice?<br/>\r\n… our own request header?<br/>\r\n… is there an extant header we can adopt?<br/>\r\nBenjamin Young: Profile seems like the wrong vehicle for this signaling, but we cannot discard the use case<br/>\r\nProposed resolution: limit profile parameter use to URI’s, but continue to pursue an alternative to the profile media type parameter for client-signaled frames and contexts URLs for servers to (potentially) use when providing responses (Benjamin Young)<br/>\r\nGregg Kellogg: <a href=\"https://www.w3.org/TR/json-ld11/#interpreting-json-as-json-ld\">https://www.w3.org/TR/json-ld11/#interpreting-json-as-json-ld</a><br/>\r\nGregg Kellogg: we might borrow from the way we handle application/json<br/>\r\n… in a response header, we add a link header targeting the context<br/>\r\n… we could use a Link header on the request<br/>\r\nIvan Herman: we would need a more detailed description<br/>\r\nBenjamin Young: <a href=\"https://tools.ietf.org/html/rfc8288\">https://tools.ietf.org/html/rfc8288</a><br/>\r\nBenjamin Young: you sure can use a Link header on the request<br/>\r\n… but let’s get to a proposal<br/>\r\n… we need to get URLs out of the profiles<br/>\r\n… and there is clear desire in the group for this functionality<br/>\r\n… link rel= might be a nice way to do that<br/>\r\nProposed resolution: limit profile parameter use to URI’s, but continue to pursue an alternative to the profile media type parameter for client-signaled frames and contexts URLs for servers to (potentially) use when providing responses (Benjamin Young)<br/>\r\nGregg Kellogg: +1<br/>\r\nBenjamin Young: +1<br/>\r\nAdam Soroka: +1<br/>\r\nJeff Mixter: +1<br/>\r\nHarold Solbrig: +1<br/>\r\nTim Cole: +1<br/>\r\nIvan Herman: do we suspend all three PRs?<br/>\r\nGregg Kellogg: not necessarily framing, but that needs its own discussion<br/>\r\nDavid Newbury: +1<br/>\r\nPierre-Antoine Champin: +1<br/>\r\nIvan Herman: +1<br/>\r\nGregg Kellogg: if there is no actual language in the API doc, the tests that have been added there might belong in the syntax doc<br/>\r\nResolution #2: limit profile parameter use to URI’s, but continue to pursue an alternative to the profile media type parameter for client-signaled frames and contexts URLs for servers to (potentially) use when providing responses<br/>\r\nBenjamin Young: let’s leave it to gkellogg as to how he’d like to manage the PRs, whether to add more commits or start afresh or whatever<br/>\r\n</details>" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/451631620> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/111#issuecomment-451631620"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/111> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/451631620> .
<https://api.github.com/users/iherman> <http://schema.org/accountId> "iherman" .
<https://api.github.com/users/iherman> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/520723?v=4" .
<https://api.github.com/users/iherman> <http://schema.org/url> "https://github.com/iherman"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/iherman> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/451631620> <http://schema.org/creator> <https://api.github.com/users/iherman> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/451631620> <http://schema.org/startDate> "2019-01-05T06:17:50Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/451631620> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/451631620> <http://schema.org/description> "This issue was discussed in [a meeting](https://www.w3.org/2018/json-ld-wg/Meetings/Minutes/2019/2019-01-04-json-ld#section4-1).\r\n\r\n- `RESOLVED:  limit profile parameter use to URI’s, but continue to pursue an alternative to the profile media type parameter for client-signaled frames and contexts URLs for servers to (potentially) use when providing responses`\r\n<details><summary><i class=\"differentiate\">View the transcript</i></summary>\r\n4.1. HTTP parameters for specifying context or frame<br/>\r\nBenjamin Young: <a href=\"https://github.com/w3c/json-ld-syntax/issues/8\">https://github.com/w3c/json-ld-syntax/issues/8</a><br/>\r\nBenjamin Young: * syntax - <a href=\"https://github.com/w3c/json-ld-syntax/pull/111\">https://github.com/w3c/json-ld-syntax/pull/111</a><br/>\r\nBenjamin Young: * framing - <a href=\"https://github.com/w3c/json-ld-framing/pull/34\">https://github.com/w3c/json-ld-framing/pull/34</a><br/>\r\nBenjamin Young: * api - <a href=\"https://github.com/w3c/json-ld-api/pull/56\">https://github.com/w3c/json-ld-api/pull/56</a> (work in progress)<br/>\r\nBenjamin Young: gkellogg has the lion’s share of the work done on this<br/>\r\nGregg Kellogg: the first PR (syntax doc, #111) pretty much ready to go<br/>\r\n… removed language about quotes for the value of profile params<br/>\r\n… which is not true in general<br/>\r\n… only if multiple URIs are used, and added some examples with different types of profile params<br/>\r\nIvan Herman: I had a comment on that<br/>\r\n… content, not editorial<br/>\r\n… a sentence says that JSON-LD processors may restrict URIs for context and frames<br/>\r\n… which I read as saying, “If I’m a JSON-LD processor, I can refuse any context except this particular one”<br/>\r\n… is that really what we mean<br/>\r\nGregg Kellogg: well, this could become an attack vector, so we allow servers to restrict the action<br/>\r\nGregg Kellogg: framing is potentially expensive computationally<br/>\r\n… and people have demonstrated attacks via context<br/>\r\n… which we think we’ve mostly fixed, but obviously we can’t rule it entirely out<br/>\r\n… going back to the CG, there was this desire to restrict present there<br/>\r\nIvan Herman: i have two problems…<br/>\r\n… this is clearly non-editorial<br/>\r\n… have we discussed/voted on this restriction?<br/>\r\n… shouldn’t be in an editorial PR.<br/>\r\n… I don’t understand the problem this solves<br/>\r\nGregg Kellogg: this is part of the request header.<br/>\r\nIvan Herman: oh, the request header? (not the response)<br/>\r\nGregg Kellogg: this signals the server as to what the client wants<br/>\r\n… the server must examine the profile param and if it isn’t acceptable, return a 406<br/>\r\n… this new language just gives license to the server to do just that if the context is unacceptable<br/>\r\n… you could also fall-back in various ways<br/>\r\nIvan Herman: Okay, I misunderstood what was done, so that’s okay<br/>\r\n… but still, this is more than editorial<br/>\r\nGregg Kellogg: I don’t say that this is editorial<br/>\r\n… I folded in the previous discussions on this<br/>\r\nIvan Herman: sorry for the interrupt, fine with this. I will put in a link to this discussion into the PR<br/>\r\n… must be documented, now it is<br/>\r\n… we just want to document that everyone is fine with this<br/>\r\nBenjamin Young: I’ve got a nit<br/>\r\n… about the quotes being optional save for multiple URIs<br/>\r\nGregg Kellogg: for spaces<br/>\r\n… and I show examples of this<br/>\r\n… we don’t mandate that single spaces must be used<br/>\r\n… it’s just whitespace as defined by the rFC<br/>\r\nBenjamin Young: okay, thanks<br/>\r\nGregg Kellogg: we have also the PR for the API doc<br/>\r\nGregg Kellogg: <a href=\"https://github.com/w3c/json-ld-api/pull/56\">https://github.com/w3c/json-ld-api/pull/56</a><br/>\r\nGregg Kellogg: there is w-i-p on the API at that PR<br/>\r\n… framing was a more minor change<br/>\r\nGregg Kellogg: <a href=\"https://github.com/w3c/json-ld-framing/pull/34\">https://github.com/w3c/json-ld-framing/pull/34</a><br/>\r\nGregg Kellogg: the controversial point bigbluehat raised is whether adding a framing URI changes the semantics enough to make it inappropriate<br/>\r\n… as a profile param<br/>\r\n… online discussion indicates not<br/>\r\n… the change requires the profile param<br/>\r\n… which changes current behavior for people requesting frames<br/>\r\n… there might b more changes requireed for this for optinality<br/>\r\nGregg Kellogg: the idea was that a frame would be represented by a mimetype<br/>\r\n… but no one implemented that<br/>\r\n… and now we’ve moved to using a profile param for frame<br/>\r\n… so the question is, must the profile param appear, or is it optional/advisory<br/>\r\n… this param is for getting a doc that is a frame<br/>\r\n… and would appear on the response as well<br/>\r\nBenjamin Young: yes, we would want that on the response as well<br/>\r\nBenjamin Young: <a href=\"https://tools.ietf.org/html/rfc6906\">https://tools.ietf.org/html/rfc6906</a><br/>\r\nGregg Kellogg: we need more discussion on that PR<br/>\r\nAdam Soroka: <a href=\"https://github.com/w3c/json-ld-framing/pull/34\">https://github.com/w3c/json-ld-framing/pull/34</a><br/>\r\nGregg Kellogg: the API PR (<a href=\"https://github.com/w3c/json-ld-api/pull/56)\">https://github.com/w3c/json-ld-api/pull/56)</a> is just tests for this new behavior<br/>\r\n… I couldn’t see what language to add to the API, otherwise<br/>\r\n… the API do is concerned with what happens once you’ve requested a doc and are processing the result<br/>\r\n… we don’t need to specify how to use an Accept header<br/>\r\nBenjamin Young: this would only be for requesting a single doc in various representation<br/>\r\n… I’m glad that framed docs aren’t new mediatypes<br/>\r\n… but it seems unlikely that one document would be all the things at once (frame, context, instance)<br/>\r\nGregg Kellogg: but you aren’t requesting a doc, you are requesting a resource.<br/>\r\n… e.g. for SPARQL users<br/>\r\nGregg Kellogg: profile contains one or more of our URIs, as well as URLs to contexts, frames, etc.<br/>\r\nDavid Newbury: a real-world example: we have resources we’d like to be able to provide either as schema.org or CIDOC-CRM<br/>\r\n… same data, difference context/framing<br/>\r\nGregg Kellogg: only the non-registered URLS would be treated as dereferencable<br/>\r\n… similar to when the mimetype is just application/json and you stick the contet in a header<br/>\r\nBenjamin Young: this is where I get concerned about violating the RFC– the profile param shouldn’t be dereferenced<br/>\r\nGregg Kellogg: good point…<br/>\r\n… my impression was that we could define this behavior, but we do need to review<br/>\r\nBenjamin Young: in the Web Annotation we avoided triggering new representations via the profile param, only selecting from extant representations<br/>\r\nIvan Herman: <a href=\"https://tools.ietf.org/html/rfc6906\">https://tools.ietf.org/html/rfc6906</a><br/>\r\nBenjamin Young: this is a supernice feature, but is this where it belongs?<br/>\r\nIvan Herman: what the RFC (<a href=\"https://tools.ietf.org/html/rfc6906#section-3)\">https://tools.ietf.org/html/rfc6906#section-3)</a> does say is:<br/>\r\n“A profile MUST NOT change the semantics of the resource representation when processed without profile knowledge, so that clients both with and without knowledge of a profiled resource can safely use the same representation.”<br/>\r\nBenjamin Young: There is also <a href=\"https://tools.ietf.org/html/rfc4288#section-4.3\">https://tools.ietf.org/html/rfc4288#section-4.3</a><br/>\r\nIvan Herman: so this may indeed be a problem<br/>\r\nGregg Kellogg: the use of a context does not change the semantics of a representation, just the syntax<br/>\r\nBenjamin Young: it’s the functionality concern<br/>\r\n… if these are URLs (not merely URIs) they will be looked up and used for computation<br/>\r\nIvan Herman: it is an identifier; to quote further from <a href=\"https://tools.ietf.org/html/rfc6906#section-3:\">https://tools.ietf.org/html/rfc6906#section-3:</a><br/>\r\n“Profiles are identified by URI. However, as is the case with, for example, XML namespace URIs, the URI in this case only serves as an identifier,”<br/>\r\nIvan Herman: it is at the beginning of that section<br/>\r\nGregg Kellogg: rfc4288#section-4.3 is a different case of profile: that’s the header vs the mimetype<br/>\r\nGregg Kellogg: e.g. dc:name vs schema:name<br/>\r\n… totally different graphs<br/>\r\n… but for framing, it’s the same graph<br/>\r\n… and client can reframe or re-compact or whatever<br/>\r\n… for bigbluehat’s case, where there’s a range of possible contexts…<br/>\r\n… two ways to interpret that: first, I want the Schema context vs the DC context<br/>\r\n… or, I want “name” vs “schema:name” where the terms used are different<br/>\r\nBenjamin Young: in the case of conneg, you could list several contexts<br/>\r\n… and the sever will compute on your request and select something<br/>\r\n… that’s not a processing instruction<br/>\r\n… that’s a great idea, but it should go in a different box<br/>\r\nPierre-Antoine Champin: not fully agree with gkellogg about changing strings in the JSON for different contexts<br/>\r\n… in both cases, the semantics are the same<br/>\r\n… the condition for selecting different vocabularies is that the semantics of the vocabularies is the same<br/>\r\n… in both cases, the changes are at the syntax level, just at concrete or abstract syntax<br/>\r\nGregg Kellogg: if we look at the test suite, what might be considered?<br/>\r\n… one, you can take the result, expand it, and compare<br/>\r\n… or two, turn them into RDF and compare the graphs for isomorphism<br/>\r\n… (or in framing, a strict subgraph relationship)<br/>\r\nIvan Herman: +1 to gregg<br/>\r\nDavid Newbury: I’m assuming that I have all the data and am just selecting from it, not doing new processing<br/>\r\nIvan Herman: whither shall we wander?<br/>\r\n… what do we do if profiles are not the correct choice?<br/>\r\n… our own request header?<br/>\r\n… is there an extant header we can adopt?<br/>\r\nBenjamin Young: Profile seems like the wrong vehicle for this signaling, but we cannot discard the use case<br/>\r\nProposed resolution: limit profile parameter use to URI’s, but continue to pursue an alternative to the profile media type parameter for client-signaled frames and contexts URLs for servers to (potentially) use when providing responses (Benjamin Young)<br/>\r\nGregg Kellogg: <a href=\"https://www.w3.org/TR/json-ld11/#interpreting-json-as-json-ld\">https://www.w3.org/TR/json-ld11/#interpreting-json-as-json-ld</a><br/>\r\nGregg Kellogg: we might borrow from the way we handle application/json<br/>\r\n… in a response header, we add a link header targeting the context<br/>\r\n… we could use a Link header on the request<br/>\r\nIvan Herman: we would need a more detailed description<br/>\r\nBenjamin Young: <a href=\"https://tools.ietf.org/html/rfc8288\">https://tools.ietf.org/html/rfc8288</a><br/>\r\nBenjamin Young: you sure can use a Link header on the request<br/>\r\n… but let’s get to a proposal<br/>\r\n… we need to get URLs out of the profiles<br/>\r\n… and there is clear desire in the group for this functionality<br/>\r\n… link rel= might be a nice way to do that<br/>\r\nProposed resolution: limit profile parameter use to URI’s, but continue to pursue an alternative to the profile media type parameter for client-signaled frames and contexts URLs for servers to (potentially) use when providing responses (Benjamin Young)<br/>\r\nGregg Kellogg: +1<br/>\r\nBenjamin Young: +1<br/>\r\nAdam Soroka: +1<br/>\r\nJeff Mixter: +1<br/>\r\nHarold Solbrig: +1<br/>\r\nTim Cole: +1<br/>\r\nIvan Herman: do we suspend all three PRs?<br/>\r\nGregg Kellogg: not necessarily framing, but that needs its own discussion<br/>\r\nDavid Newbury: +1<br/>\r\nPierre-Antoine Champin: +1<br/>\r\nIvan Herman: +1<br/>\r\nGregg Kellogg: if there is no actual language in the API doc, the tests that have been added there might belong in the syntax doc<br/>\r\nResolution #2: limit profile parameter use to URI’s, but continue to pursue an alternative to the profile media type parameter for client-signaled frames and contexts URLs for servers to (potentially) use when providing responses<br/>\r\nBenjamin Young: let’s leave it to gkellogg as to how he’d like to manage the PRs, whether to add more commits or start afresh or whatever<br/>\r\n</details>" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/451631862> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/9#issuecomment-451631862"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/9> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/451631862> .
<https://api.github.com/users/iherman> <http://schema.org/accountId> "iherman" .
<https://api.github.com/users/iherman> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/520723?v=4" .
<https://api.github.com/users/iherman> <http://schema.org/url> "https://github.com/iherman"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/iherman> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/451631862> <http://schema.org/creator> <https://api.github.com/users/iherman> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/451631862> <http://schema.org/startDate> "2019-01-05T06:23:07Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/451631862> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/451631862> <http://schema.org/description> "This issue was discussed in [a meeting](https://www.w3.org/2018/json-ld-wg/Meetings/Minutes/2019/2019-01-04-json-ld#section4-2).\r\n\r\n- No actions or resolutions\r\n<details><summary><i class=\"differentiate\">View the transcript</i></summary>\r\nIvan Herman: it is interesting, no doubt<br/>\r\n… (puts admin hat on)<br/>\r\n… these are very early drafts<br/>\r\n… Manu made this proposal in December, very early days<br/>\r\n… we’re fine, though.<br/>\r\n… if the technique becomes a standard form for URIs, we can use it as such<br/>\r\n… I’m happy to have us say that we are interested<br/>\r\n… we should try to see whether this tech really can be used to annotate links while we also pursue other avenues<br/>\r\nGregg Kellogg: really like the idea, could be very useful<br/>\r\nGregg Kellogg: but not clear that it really affects our docs at all<br/>\r\n… what would we change?<br/>\r\nIvan Herman: we shouldn’t close issues just because this new thing is a new thing<br/>\r\nGregg Kellogg: unless we think that we can do that via a reference in the best practice docs<br/>\r\nAdam Soroka: if hashlink solves for problems we have, then we may not want to recreate alternative features that solve the same issues<br/>\r\nBenjamin Young: although this new hash URI tech isn’t standardized, it has been put into use<br/>\r\n</details>" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/451631870> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/86#issuecomment-451631870"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/86> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/451631870> .
<https://api.github.com/users/iherman> <http://schema.org/accountId> "iherman" .
<https://api.github.com/users/iherman> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/520723?v=4" .
<https://api.github.com/users/iherman> <http://schema.org/url> "https://github.com/iherman"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/iherman> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/451631870> <http://schema.org/creator> <https://api.github.com/users/iherman> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/451631870> <http://schema.org/startDate> "2019-01-05T06:23:24Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/451631870> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/451631870> <http://schema.org/description> "This issue was discussed in [a meeting](https://www.w3.org/2018/json-ld-wg/Meetings/Minutes/2019/2019-01-04-json-ld#section4-2).\r\n\r\n- No actions or resolutions\r\n<details><summary><i class=\"differentiate\">View the transcript</i></summary>\r\nIvan Herman: it is interesting, no doubt<br/>\r\n… (puts admin hat on)<br/>\r\n… these are very early drafts<br/>\r\n… Manu made this proposal in December, very early days<br/>\r\n… we’re fine, though.<br/>\r\n… if the technique becomes a standard form for URIs, we can use it as such<br/>\r\n… I’m happy to have us say that we are interested<br/>\r\n… we should try to see whether this tech really can be used to annotate links while we also pursue other avenues<br/>\r\nGregg Kellogg: really like the idea, could be very useful<br/>\r\nGregg Kellogg: but not clear that it really affects our docs at all<br/>\r\n… what would we change?<br/>\r\nIvan Herman: we shouldn’t close issues just because this new thing is a new thing<br/>\r\nGregg Kellogg: unless we think that we can do that via a reference in the best practice docs<br/>\r\nAdam Soroka: if hashlink solves for problems we have, then we may not want to recreate alternative features that solve the same issues<br/>\r\nBenjamin Young: although this new hash URI tech isn’t standardized, it has been put into use<br/>\r\n</details>" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/451631880> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/108#issuecomment-451631880"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/108> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/451631880> .
<https://api.github.com/users/iherman> <http://schema.org/accountId> "iherman" .
<https://api.github.com/users/iherman> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/520723?v=4" .
<https://api.github.com/users/iherman> <http://schema.org/url> "https://github.com/iherman"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/iherman> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/451631880> <http://schema.org/creator> <https://api.github.com/users/iherman> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/451631880> <http://schema.org/startDate> "2019-01-05T06:23:40Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/451631880> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/451631880> <http://schema.org/description> "This issue was discussed in [a meeting](https://www.w3.org/2018/json-ld-wg/Meetings/Minutes/2019/2019-01-04-json-ld#section4-2).\r\n\r\n- No actions or resolutions\r\n<details><summary><i class=\"differentiate\">View the transcript</i></summary>\r\nIvan Herman: it is interesting, no doubt<br/>\r\n… (puts admin hat on)<br/>\r\n… these are very early drafts<br/>\r\n… Manu made this proposal in December, very early days<br/>\r\n… we’re fine, though.<br/>\r\n… if the technique becomes a standard form for URIs, we can use it as such<br/>\r\n… I’m happy to have us say that we are interested<br/>\r\n… we should try to see whether this tech really can be used to annotate links while we also pursue other avenues<br/>\r\nGregg Kellogg: really like the idea, could be very useful<br/>\r\nGregg Kellogg: but not clear that it really affects our docs at all<br/>\r\n… what would we change?<br/>\r\nIvan Herman: we shouldn’t close issues just because this new thing is a new thing<br/>\r\nGregg Kellogg: unless we think that we can do that via a reference in the best practice docs<br/>\r\nAdam Soroka: if hashlink solves for problems we have, then we may not want to recreate alternative features that solve the same issues<br/>\r\nBenjamin Young: although this new hash URI tech isn’t standardized, it has been put into use<br/>\r\n</details>" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/452022768> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/8#issuecomment-452022768"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/8> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/452022768> .
<https://api.github.com/users/azaroth42> <http://schema.org/accountId> "azaroth42" .
<https://api.github.com/users/azaroth42> <http://schema.org/image> "https://avatars3.githubusercontent.com/u/871868?v=4" .
<https://api.github.com/users/azaroth42> <http://schema.org/url> "https://github.com/azaroth42"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/azaroth42> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/452022768> <http://schema.org/creator> <https://api.github.com/users/azaroth42> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/452022768> <http://schema.org/startDate> "2019-01-07T17:56:24Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/452022768> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/452022768> <http://schema.org/description> "I don't understand the resolution. The profile parameter can ONLY use:\r\n\r\n> A non-empty list of space-separated URIs \r\n\r\nAccording to the IANA registration of `application/ld+json`\r\n" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/452082218> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/8#issuecomment-452082218"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/8> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/452082218> .
<https://api.github.com/users/BigBlueHat> <http://schema.org/accountId> "BigBlueHat" .
<https://api.github.com/users/BigBlueHat> <http://schema.org/image> "https://avatars1.githubusercontent.com/u/43209?v=4" .
<https://api.github.com/users/BigBlueHat> <http://schema.org/url> "https://github.com/BigBlueHat"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/BigBlueHat> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/452082218> <http://schema.org/creator> <https://api.github.com/users/BigBlueHat> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/452082218> <http://schema.org/startDate> "2019-01-07T21:07:56Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/452082218> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/452082218> <http://schema.org/description> "> I don't understand the resolution. The profile parameter can ONLY use:\r\n> \r\n> > A non-empty list of space-separated URIs\r\n> \r\n> According to the IANA registration of `application/ld+json`\r\n\r\nExactly. 😃 The original proposal was to use them as UR**L**'s--extracting them from the profile value and dereferencing them and using them when parsing the data document.\r\n\r\nIt was determined that client's requesting processing constraint documents (i.e. frames, contexts) was a potentially viable feature request, but that the `profile` media parameter was the wrong vehicle for that.\r\n\r\n@gkellogg mentioned using `Link` instead and has added that approach to the *work-in-progress* PR https://github.com/w3c/json-ld-api/pull/56\r\n\r\nThere will certainly need to be discussion about the use of `Link` (per-process), but overall it feels more correct than using `profile`.\r\n\r\nI'd propose we change the title of this issue (s/parameters/header) to match reality. That sound OK?" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/452082781> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/8#issuecomment-452082781"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/8> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/452082781> .
<https://api.github.com/users/azaroth42> <http://schema.org/accountId> "azaroth42" .
<https://api.github.com/users/azaroth42> <http://schema.org/image> "https://avatars3.githubusercontent.com/u/871868?v=4" .
<https://api.github.com/users/azaroth42> <http://schema.org/url> "https://github.com/azaroth42"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/azaroth42> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/452082781> <http://schema.org/creator> <https://api.github.com/users/azaroth42> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/452082781> <http://schema.org/startDate> "2019-01-07T21:09:52Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/452082781> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/452082781> <http://schema.org/description> "I'm :-1: on the resolution as I understand it. It conflates descriptive metadata and protocol transactions unnecessarily by applying rules intended for responses to the functionality of requests.\r\n\r\nEach entry in the Accept header is treated individually. It is perfectly reasonable to ask for json-ld or rdf/xml (syntax change) ; for json-ld or plain text (semantics are lost) ; or for two different flavors of json-ld. Those different flavors could be different contexts, which already imply an ontology selection according to that context's definition. If the context ever changes, then the semantics have changed, which according to the 100% strict reading, would not be acceptable and thus we would already be in an error state without introducing anything further usage. \r\n\r\nI'm also :-1: on changing parameter to header. Link headers are not a functional way to request content negotiable resources, as they lack all of the prioritization of q values and can't be grouped together with the media type they apply to. For example, say I want schema.org as JSON-LD, or simple Dublin Core as XML, because those are the two representation formats I have implemented. If the profile is separated from the media type, it would not be possible to determine that schema goes with json-ld, and DC goes with XML. Ergo, the profile MUST be a parameter and not in a separate header. And thus we either accept that it can go in profile, or we introduce a new parameter that quacks an awful lot like profile.\r\n\r\n" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/452089356> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/8#issuecomment-452089356"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/8> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/452089356> .
<https://api.github.com/users/BigBlueHat> <http://schema.org/accountId> "BigBlueHat" .
<https://api.github.com/users/BigBlueHat> <http://schema.org/image> "https://avatars1.githubusercontent.com/u/43209?v=4" .
<https://api.github.com/users/BigBlueHat> <http://schema.org/url> "https://github.com/BigBlueHat"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/BigBlueHat> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/452089356> <http://schema.org/creator> <https://api.github.com/users/BigBlueHat> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/452089356> <http://schema.org/startDate> "2019-01-07T21:32:22Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/452089356> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/452089356> <http://schema.org/description> "@azaroth42 this has moved beyond content negotiation--which is I think where things are getting tangled and why it probably needs it's own issue(s).\r\n\r\nFirst, using `profile` with the media type parameter is still (and will remain!) a viable way to content negotiate for a resource:\r\n```http\r\nAccept: application/ld+json;profile=\"http://www.w3.org/ns/anno.jsonld\"\r\n```\r\nand\r\n```http\r\nAccept: application/ld+json, application/ld+json;profile=\"http://www.w3.org/ns/anno.jsonld\"\r\n```\r\nstill request that the server send back something that matches one of those (possibly profiled) types.\r\n\r\nHowever, this feature request included *dereferencing* the requested profile URL and *processing* that to generate the content--which per a stack of RFCs--goes against the intended use of the `profile` parameter as simply bearing identifiers and leaving it up to the server to determine the proper response for the request (i.e. `profile` should not be used to create a processing instruction).\r\n\r\nConsequently, `Link` (which is a viable header on both requests and responses) was proposed by @gkellogg as we were wrapping up the call with the promise of future exploration and follow-on discussion about that particular approach (and the feature in general).\r\n\r\nThere was not (and is not to my knowledge) any intention to replace or remove the use of `profile`, just to make sure it's not misused as a processing instruction.\r\n\r\nAny clearer? 😄 " .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/452091047> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/8#issuecomment-452091047"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/8> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/452091047> .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/452091047> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/452091047> <http://schema.org/startDate> "2019-01-07T21:38:24Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/452091047> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/452091047> <http://schema.org/description> "@BigBlueHat is correct, the `profile` parameter remains, and is used with a registered URI. We define four such URIs, and certainly other specs can define their own profiles and register them.\r\n\r\nAfter closer inspection of the RFCs it seemed that our use of the `profile` parameter to _also_ reference the context or frame to use was outside of the usage pattern proscribed for such parameters. Since we already have the Link header, used for responses, using it for requests is reasonable.\r\n\r\nHowever, your point about not being able to use a specific context URL as part of content negotiation is well taken, although it's not clear how a server would distinguish between different context or frame URLs to make a decision, without first dereferencing them, or using an internal registry.\r\n\r\nI'm not sure how we could allow for content negotiation on a context URL given the RFCs available to us." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/452094545> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/8#issuecomment-452094545"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/8> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/452094545> .
<https://api.github.com/users/azaroth42> <http://schema.org/accountId> "azaroth42" .
<https://api.github.com/users/azaroth42> <http://schema.org/image> "https://avatars3.githubusercontent.com/u/871868?v=4" .
<https://api.github.com/users/azaroth42> <http://schema.org/url> "https://github.com/azaroth42"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/azaroth42> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/452094545> <http://schema.org/creator> <https://api.github.com/users/azaroth42> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/452094545> <http://schema.org/startDate> "2019-01-07T21:50:49Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/452094545> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/452094545> <http://schema.org/description> "> However, this feature request included dereferencing the requested profile URL and processing that to generate the content\r\n\r\nI don't see that anywhere in this issue, nor the referenced original issue. Can you provide a link?\r\n" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/452095251> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/8#issuecomment-452095251"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/8> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/452095251> .
<https://api.github.com/users/BigBlueHat> <http://schema.org/accountId> "BigBlueHat" .
<https://api.github.com/users/BigBlueHat> <http://schema.org/image> "https://avatars1.githubusercontent.com/u/43209?v=4" .
<https://api.github.com/users/BigBlueHat> <http://schema.org/url> "https://github.com/BigBlueHat"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/BigBlueHat> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/452095251> <http://schema.org/creator> <https://api.github.com/users/BigBlueHat> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/452095251> <http://schema.org/startDate> "2019-01-07T21:53:19Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/452095251> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/452095251> <http://schema.org/description> "> I don't see that anywhere in this issue, nor the referenced original issue. Can you provide a link?\r\n\r\nHrm. It may have first come up at our TPAC conversations minuted above: https://github.com/w3c/json-ld-syntax/issues/8#issuecomment-433597582\r\n\r\nWhich is why this is marked as having security concerns. There's no security concern if these are just opaque identifiers." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/452096204> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/8#issuecomment-452096204"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/8> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/452096204> .
<https://api.github.com/users/azaroth42> <http://schema.org/accountId> "azaroth42" .
<https://api.github.com/users/azaroth42> <http://schema.org/image> "https://avatars3.githubusercontent.com/u/871868?v=4" .
<https://api.github.com/users/azaroth42> <http://schema.org/url> "https://github.com/azaroth42"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/azaroth42> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/452096204> <http://schema.org/creator> <https://api.github.com/users/azaroth42> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/452096204> <http://schema.org/startDate> "2019-01-07T21:56:28Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/452096204> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/452096204> <http://schema.org/description> "It came up as a concern, certainly. Don't do that then, if there is a concern :) Just use a whitelisted set of profiles. IOW, there is no issue here about URI vs URL that isn't already addressed by an expanded security considerations section." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/452112893> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/8#issuecomment-452112893"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/8> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/452112893> .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/452112893> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/452112893> <http://schema.org/startDate> "2019-01-07T23:00:03Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/452112893> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/452112893> <http://schema.org/description> "From [RFC 6906 3.0](https://tools.ietf.org/html/rfc6906#page-3)\r\n\r\n> Profiles are identified by URI.  However, as is the case with, for\r\n   example, XML namespace URIs, the URI in this case **only serves as an\r\n   identifier, meaning that the presence of a specific URI has to be\r\n   sufficient for a client to assert that a resource representation\r\n   conforms to a profile**.\r\n\r\nThis implies that an opaque URL is not appropriate for use in the profile, as, unless specifically registered, it cannot be dereferenced to affect the representation of the resource; at least, that was my take away from our discussion. This implies that our resolution, which @BigBlueHat mentioned from TPAC violates the stated purpose of the profile parameter." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/452117660> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/8#issuecomment-452117660"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/8> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/452117660> .
<https://api.github.com/users/azaroth42> <http://schema.org/accountId> "azaroth42" .
<https://api.github.com/users/azaroth42> <http://schema.org/image> "https://avatars3.githubusercontent.com/u/871868?v=4" .
<https://api.github.com/users/azaroth42> <http://schema.org/url> "https://github.com/azaroth42"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/azaroth42> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/452117660> <http://schema.org/creator> <https://api.github.com/users/azaroth42> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/452117660> <http://schema.org/startDate> "2019-01-07T23:20:23Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/452117660> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/452117660> <http://schema.org/description> "The next sentence, however clarifies that:\r\n\r\n> profiles MAY be defined in a way\r\n>  that the URIs do identify retrievable profile description and thus\r\n>  can be accessed by clients by dereferencing the profile URI\r\n\r\nSo I continue to disagree that there's anything wrong with our usage." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/452129126> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/8#issuecomment-452129126"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/8> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/452129126> .
<https://api.github.com/users/BigBlueHat> <http://schema.org/accountId> "BigBlueHat" .
<https://api.github.com/users/BigBlueHat> <http://schema.org/image> "https://avatars1.githubusercontent.com/u/43209?v=4" .
<https://api.github.com/users/BigBlueHat> <http://schema.org/url> "https://github.com/BigBlueHat"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/BigBlueHat> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/452129126> <http://schema.org/creator> <https://api.github.com/users/BigBlueHat> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/452129126> <http://schema.org/startDate> "2019-01-08T00:16:17Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/452129126> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/452129126> <http://schema.org/description> "> For profiles intended for use in environments where clients may encounter\r\n   unknown profile URIs, profile maintainers SHOULD consider to make the\r\n   profile URI dereferencable and provide useful documentation at that\r\n   URI.\r\n\r\n@azaroth42 from what I can tell from the rest of the surrounding examples (mostly about podcasts), the intent is that at most a \"dereferencable URI\" (aka a URL) value for `profile` is meant to return *documentation* (for machines or humans). Most of the examples point to using human-friendly HTML documentation URLs as the identifier (however derefencable) of the \"profile\" of the format.\r\n\r\nThe use case of *applying* a profile seems a bit different than asking if the server has a resource *conforming* to a profile--hence the processing instruction comments from earlier." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/452129877> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/8#issuecomment-452129877"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/8> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/452129877> .
<https://api.github.com/users/BigBlueHat> <http://schema.org/accountId> "BigBlueHat" .
<https://api.github.com/users/BigBlueHat> <http://schema.org/image> "https://avatars1.githubusercontent.com/u/43209?v=4" .
<https://api.github.com/users/BigBlueHat> <http://schema.org/url> "https://github.com/BigBlueHat"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/BigBlueHat> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/452129877> <http://schema.org/creator> <https://api.github.com/users/BigBlueHat> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/452129877> <http://schema.org/startDate> "2019-01-08T00:20:11Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/452129877> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/452129877> <http://schema.org/description> "As an example, if I send `Accept: application/ld+json;profile=\"http://www.w3.org/ns/anno.jsonld\"` to a server, I would *not* expect the server to take whatever JSON(-LD) it had for the resource and attempt to apply that context URL to it.\r\n\r\nHowever, it *would* be my expectation that the response would [406](https://http.cat/406) if the only thing on disc were JSON(-LD) which did *not* conform to that profile (since I only asked for the profiled variant).\r\n\r\nThe distinction seems important from a server implementation perspective, and having a means to intentionally request or initiate such processing *does* seem useful...but seems best signaled by something less implicitly inert." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/453233057> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/72#issuecomment-453233057"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/72> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/453233057> .
<https://api.github.com/users/BigBlueHat> <http://schema.org/accountId> "BigBlueHat" .
<https://api.github.com/users/BigBlueHat> <http://schema.org/image> "https://avatars1.githubusercontent.com/u/43209?v=4" .
<https://api.github.com/users/BigBlueHat> <http://schema.org/url> "https://github.com/BigBlueHat"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/BigBlueHat> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/453233057> <http://schema.org/creator> <https://api.github.com/users/BigBlueHat> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/453233057> <http://schema.org/startDate> "2019-01-10T19:59:20Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/453233057> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/453233057> <http://schema.org/description> "@azaroth42 you're noted in a couple of actions above:\r\n```\r\nACTION: Rob Sanderson to make a security consideration issue re relative IRI concatenation\r\nACTION: Rob Sanderson to create security consideration re javascript URIs and relative IRIs\r\n```\r\n\r\nDid those get made? They're not linked here if so. 😕 \r\n\r\n@iherman are the actions we take via Zakim recorded somewhere? I think most of them are disappearing or remain lurking in these call logs on GitHub.\r\n\r\nMaybe if we `@` mention the GitHub name for the person taking the action that would help close the loop and make it easier to curate all this stuff? No idea...but I would like it to be simpler. 😜 " .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/453423601> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/72#issuecomment-453423601"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/72> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/453423601> .
<https://api.github.com/users/iherman> <http://schema.org/accountId> "iherman" .
<https://api.github.com/users/iherman> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/520723?v=4" .
<https://api.github.com/users/iherman> <http://schema.org/url> "https://github.com/iherman"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/iherman> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/453423601> <http://schema.org/creator> <https://api.github.com/users/iherman> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/453423601> <http://schema.org/startDate> "2019-01-11T08:17:16Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/453423601> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/453423601> <http://schema.org/description> "> @iherman are the actions we take via Zakim recorded somewhere? I think most of them are disappearing or remain lurking in these call logs on GitHub\r\n\r\nI am not sure \"lurking\" is a good term, but indeed they only appear in the issue comments like https://github.com/w3c/json-ld-syntax/issues/72#issuecomment-433597475. " .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/453552264> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/72#issuecomment-453552264"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/72> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/453552264> .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/453552264> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/453552264> <http://schema.org/startDate> "2019-01-11T15:23:55Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/453552264> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/453552264> <http://schema.org/description> "Perhaps we should revisit the idea of a minute index, highlighting the topics, resolutions and actions of each meeting on one page." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/453601665> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/114#issuecomment-453601665"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/114> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/453601665> .
<https://api.github.com/users/BigBlueHat> <http://schema.org/accountId> "BigBlueHat" .
<https://api.github.com/users/BigBlueHat> <http://schema.org/image> "https://avatars1.githubusercontent.com/u/43209?v=4" .
<https://api.github.com/users/BigBlueHat> <http://schema.org/url> "https://github.com/BigBlueHat"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/BigBlueHat> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/453601665> <http://schema.org/creator> <https://api.github.com/users/BigBlueHat> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/453601665> <http://schema.org/startDate> "2019-01-11T17:53:50Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/453601665> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/453601665> <http://schema.org/description> "Some weird whitespace happening in [example 25](https://pr-preview.s3.amazonaws.com/w3c/json-ld-syntax/114/6f92b1d...43dfbfb.html#ex-25-using-as-the-vocabulary-mapping-expanded) for the Turtle:\r\n```\r\n<http://example.org/places#BrewEats> a <http://example/document#Restaurant>;\r\n<http://example/document#name>\r\n\"Brew\r\nEats\"\r\n.\r\n```\r\n\r\nDon't think that's intentional though. Thoughts?" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/453694654> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/114#issuecomment-453694654"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/114> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/453694654> .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/453694654> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/453694654> <http://schema.org/startDate> "2019-01-11T23:55:26Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/453694654> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/453694654> <http://schema.org/description> "@BigBlueHat It seems to be an artifact of the diff view; it's okay in the source and in the normal preview." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/453731057> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/8#issuecomment-453731057"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/8> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/453731057> .
<https://api.github.com/users/iherman> <http://schema.org/accountId> "iherman" .
<https://api.github.com/users/iherman> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/520723?v=4" .
<https://api.github.com/users/iherman> <http://schema.org/url> "https://github.com/iherman"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/iherman> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/453731057> <http://schema.org/creator> <https://api.github.com/users/iherman> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/453731057> <http://schema.org/startDate> "2019-01-12T08:46:11Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/453731057> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/453731057> <http://schema.org/description> "This issue was discussed in [a meeting](https://www.w3.org/2018/json-ld-wg/Meetings/Minutes/2019/2019-01-11-json-ld#section3-1).\r\n\r\n- `RESOLVED:  remove normative discussion of use of Link header usage for response augmentation–move to best practice for now`\r\n<details><summary><i class=\"differentiate\">View the transcript</i></summary>\r\nHTTP parameters for specifying context or frame (round 2!)<br/>\r\nBenjamin Young: <a href=\"https://github.com/w3c/json-ld-syntax/issues/8\">https://github.com/w3c/json-ld-syntax/issues/8</a><br/>\r\nsyntax - <a href=\"https://github.com/w3c/json-ld-syntax/pull/111\">https://github.com/w3c/json-ld-syntax/pull/111</a> (open)<br/>\r\nframing - <a href=\"https://github.com/w3c/json-ld-framing/pull/34\">https://github.com/w3c/json-ld-framing/pull/34</a> (merged)<br/>\r\napi - <a href=\"https://github.com/w3c/json-ld-api/pull/56\">https://github.com/w3c/json-ld-api/pull/56</a> (ready for review)<br/>\r\nBenjamin Young: the framing PR is already merged — mostly clerical, regarding IANA registration.<br/>\r\nGregg Kellogg: the PR is about the possibility for a client to specify the contex with which it wishes the retrieved data to be processed.<br/>\r\n… Last week, we discussed this, and realized that dereferencing the value of the profile attribute is something that we don’t want to do.<br/>\r\n… I had to rewrite this part. This information is now to be conveyed with a Link header.<br/>\r\n… A consequence is that the context URL can no more be used for content negotiation.<br/>\r\nRob Sanderson: my understanding about the move away from the profile parameter is about the dereferencability?<br/>\r\nGregg Kellogg: not exactly. The RFC indicates that the URI used as profile parameter can be dereferencable, for documentation.<br/>\r\n… But the execution should not be determined by derefencing it.<br/>\r\nRob Sanderson: Why not simply specify that, if a server receives a profile URI that it does not know,<br/>\r\n… it just answers with 406?<br/>\r\n… We should not specify how the server does the serialization.<br/>\r\n… That’s implementation detail, not specification.<br/>\r\n… Given that, I don’t think there is any expectation that the server should dereference;<br/>\r\n… but it may do that if it thinks that’s a good thing.<br/>\r\nBenjamin Young: the spec last week was explicitly specifying that the profile parameter should be dereferenced.<br/>\r\n… Going away from this lead us away from the profile parameter all together.<br/>\r\n… But I see where you are going.<br/>\r\nGregg Kellogg: We should have both mechanisms: one to query a well known profile,<br/>\r\n… and one to provide a previously unknown context, to be processed by the server.<br/>\r\nRob Sanderson: we can’t prevent the profile from the accept header; it is part of the media-type.<br/>\r\n… We should embrace what people are going to do anyway,<br/>\r\n… which is a profile parameter in the accept header.<br/>\r\nBenjamin Young: I’m concerned we are defining a server API for JSON-LD, which is not what we are meant to do.<br/>\r\nRob Sanderson: +1 to bigbluehat to steer away from JSON-LD-REST<br/>\r\nRob Sanderson: (not because it’s a bad thing, but because we’re not chartered to do that!)<br/>\r\nBenjamin Young: We should provide a list of profile URI that we recommend.<br/>\r\n… Whatever else people use as profile URIs is their business.<br/>\r\n… The Links header is more an API spec, which would be LDP2’s job, not ours…<br/>\r\nGregg Kellogg: there was always a problem for the profile parameter for, e.g., compacted<br/>\r\n… there was no way to convey the context against which compaction was done [not sure I got it right]<br/>\r\n… This has been long discussed in the CG.<br/>\r\n… The Link header was a way to address that.<br/>\r\nBenjamin Young: Is this purely an IANA registration and suggesting good practices?<br/>\r\n… I fear that too much HTTP matter in the spec and/or the test,<br/>\r\n… will feel like a MUST or a SHOULD for any JSON-LD implementation.<br/>\r\nGregg Kellogg: that’s a way to ensure that people using it know how to use it.<br/>\r\n… The bit about the Link header could go in a different (REST?) spec or a best practices doc.<br/>\r\nRob Sanderson: +1 to best practices tests<br/>\r\nGregg Kellogg: We should remove any normative discussion about the Link header,<br/>\r\n… and replace it with a more vague mention to “header fields, to be described elsewhere”.<br/>\r\n… And move the current test elsewhere, probably a new spec.<br/>\r\nProposed resolution: remove normative discussion of use of Link header usage for response augmentation–move to best practice for now (Benjamin Young)<br/>\r\nIvan Herman: +1<br/>\r\nRob Sanderson: +1<br/>\r\nGregg Kellogg: +1<br/>\r\nBenjamin Young: +1<br/>\r\nSimon Steyskal: +1<br/>\r\nPierre-Antoine Champin: +1<br/>\r\nResolution #3: remove normative discussion of use of Link header usage for response augmentation–move to best practice for now<br/>\r\nGregg Kellogg: Do we want to create new spec for server behaviour, or a best practices document?<br/>\r\n… And then should we create a different repository?<br/>\r\nIvan Herman: I prefer many small repos, but I know not everyone agrees.<br/>\r\n… Wherever the editors feel it more conformable.<br/>\r\n… Should we close the issue?<br/>\r\nGregg Kellogg: I still have a few changes to make.<br/>\r\n… After a small period for people to concur,<br/>\r\n… I’ll merge the changes.<br/>\r\nIvan Herman: and then close the issue at the same time.<br/>\r\n</details>" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/453731087> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/111#issuecomment-453731087"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/111> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/453731087> .
<https://api.github.com/users/iherman> <http://schema.org/accountId> "iherman" .
<https://api.github.com/users/iherman> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/520723?v=4" .
<https://api.github.com/users/iherman> <http://schema.org/url> "https://github.com/iherman"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/iherman> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/453731087> <http://schema.org/creator> <https://api.github.com/users/iherman> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/453731087> <http://schema.org/startDate> "2019-01-12T08:46:38Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/453731087> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/453731087> <http://schema.org/description> "This issue was discussed in [a meeting](https://www.w3.org/2018/json-ld-wg/Meetings/Minutes/2019/2019-01-11-json-ld#section3-1).\r\n\r\n- `RESOLVED:  remove normative discussion of use of Link header usage for response augmentation–move to best practice for now`\r\n<details><summary><i class=\"differentiate\">View the transcript</i></summary>\r\nHTTP parameters for specifying context or frame (round 2!)<br/>\r\nBenjamin Young: <a href=\"https://github.com/w3c/json-ld-syntax/issues/8\">https://github.com/w3c/json-ld-syntax/issues/8</a><br/>\r\nsyntax - <a href=\"https://github.com/w3c/json-ld-syntax/pull/111\">https://github.com/w3c/json-ld-syntax/pull/111</a> (open)<br/>\r\nframing - <a href=\"https://github.com/w3c/json-ld-framing/pull/34\">https://github.com/w3c/json-ld-framing/pull/34</a> (merged)<br/>\r\napi - <a href=\"https://github.com/w3c/json-ld-api/pull/56\">https://github.com/w3c/json-ld-api/pull/56</a> (ready for review)<br/>\r\nBenjamin Young: the framing PR is already merged — mostly clerical, regarding IANA registration.<br/>\r\nGregg Kellogg: the PR is about the possibility for a client to specify the contex with which it wishes the retrieved data to be processed.<br/>\r\n… Last week, we discussed this, and realized that dereferencing the value of the profile attribute is something that we don’t want to do.<br/>\r\n… I had to rewrite this part. This information is now to be conveyed with a Link header.<br/>\r\n… A consequence is that the context URL can no more be used for content negotiation.<br/>\r\nRob Sanderson: my understanding about the move away from the profile parameter is about the dereferencability?<br/>\r\nGregg Kellogg: not exactly. The RFC indicates that the URI used as profile parameter can be dereferencable, for documentation.<br/>\r\n… But the execution should not be determined by derefencing it.<br/>\r\nRob Sanderson: Why not simply specify that, if a server receives a profile URI that it does not know,<br/>\r\n… it just answers with 406?<br/>\r\n… We should not specify how the server does the serialization.<br/>\r\n… That’s implementation detail, not specification.<br/>\r\n… Given that, I don’t think there is any expectation that the server should dereference;<br/>\r\n… but it may do that if it thinks that’s a good thing.<br/>\r\nBenjamin Young: the spec last week was explicitly specifying that the profile parameter should be dereferenced.<br/>\r\n… Going away from this lead us away from the profile parameter all together.<br/>\r\n… But I see where you are going.<br/>\r\nGregg Kellogg: We should have both mechanisms: one to query a well known profile,<br/>\r\n… and one to provide a previously unknown context, to be processed by the server.<br/>\r\nRob Sanderson: we can’t prevent the profile from the accept header; it is part of the media-type.<br/>\r\n… We should embrace what people are going to do anyway,<br/>\r\n… which is a profile parameter in the accept header.<br/>\r\nBenjamin Young: I’m concerned we are defining a server API for JSON-LD, which is not what we are meant to do.<br/>\r\nRob Sanderson: +1 to bigbluehat to steer away from JSON-LD-REST<br/>\r\nRob Sanderson: (not because it’s a bad thing, but because we’re not chartered to do that!)<br/>\r\nBenjamin Young: We should provide a list of profile URI that we recommend.<br/>\r\n… Whatever else people use as profile URIs is their business.<br/>\r\n… The Links header is more an API spec, which would be LDP2’s job, not ours…<br/>\r\nGregg Kellogg: there was always a problem for the profile parameter for, e.g., compacted<br/>\r\n… there was no way to convey the context against which compaction was done [not sure I got it right]<br/>\r\n… This has been long discussed in the CG.<br/>\r\n… The Link header was a way to address that.<br/>\r\nBenjamin Young: Is this purely an IANA registration and suggesting good practices?<br/>\r\n… I fear that too much HTTP matter in the spec and/or the test,<br/>\r\n… will feel like a MUST or a SHOULD for any JSON-LD implementation.<br/>\r\nGregg Kellogg: that’s a way to ensure that people using it know how to use it.<br/>\r\n… The bit about the Link header could go in a different (REST?) spec or a best practices doc.<br/>\r\nRob Sanderson: +1 to best practices tests<br/>\r\nGregg Kellogg: We should remove any normative discussion about the Link header,<br/>\r\n… and replace it with a more vague mention to “header fields, to be described elsewhere”.<br/>\r\n… And move the current test elsewhere, probably a new spec.<br/>\r\nProposed resolution: remove normative discussion of use of Link header usage for response augmentation–move to best practice for now (Benjamin Young)<br/>\r\nIvan Herman: +1<br/>\r\nRob Sanderson: +1<br/>\r\nGregg Kellogg: +1<br/>\r\nBenjamin Young: +1<br/>\r\nSimon Steyskal: +1<br/>\r\nPierre-Antoine Champin: +1<br/>\r\nResolution #3: remove normative discussion of use of Link header usage for response augmentation–move to best practice for now<br/>\r\nGregg Kellogg: Do we want to create new spec for server behaviour, or a best practices document?<br/>\r\n… And then should we create a different repository?<br/>\r\nIvan Herman: I prefer many small repos, but I know not everyone agrees.<br/>\r\n… Wherever the editors feel it more conformable.<br/>\r\n… Should we close the issue?<br/>\r\nGregg Kellogg: I still have a few changes to make.<br/>\r\n… After a small period for people to concur,<br/>\r\n… I’ll merge the changes.<br/>\r\nIvan Herman: and then close the issue at the same time.<br/>\r\n</details>" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/453731153> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/72#issuecomment-453731153"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/72> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/453731153> .
<https://api.github.com/users/iherman> <http://schema.org/accountId> "iherman" .
<https://api.github.com/users/iherman> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/520723?v=4" .
<https://api.github.com/users/iherman> <http://schema.org/url> "https://github.com/iherman"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/iherman> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/453731153> <http://schema.org/creator> <https://api.github.com/users/iherman> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/453731153> <http://schema.org/startDate> "2019-01-12T08:48:01Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/453731153> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/453731153> <http://schema.org/description> "This issue was discussed in [a meeting](https://www.w3.org/2018/json-ld-wg/Meetings/Minutes/2019/2019-01-11-json-ld#section3-2).\r\n\r\n- `RESOLVED:  address security concerns related to relative URIs for @vocab in current PRs before closing #72`\r\n<details><summary><i class=\"differentiate\">View the transcript</i></summary>\r\nAllow relative IRIs for @vocab<br/>\r\nBenjamin Young: <a href=\"https://github.com/w3c/json-ld-syntax/issues/72\">https://github.com/w3c/json-ld-syntax/issues/72</a><br/>\r\nsyntax - <a href=\"https://github.com/w3c/json-ld-syntax/pull/114\">https://github.com/w3c/json-ld-syntax/pull/114</a><br/>\r\napi - <a href=\"https://github.com/w3c/json-ld-api/pull/58\">https://github.com/w3c/json-ld-api/pull/58</a><br/>\r\nGregg Kellogg: when we decided to satisfy the need for using the base as the @vocab,<br/>\r\n… I came up with the idea of using an empty string as @vocab.<br/>\r\n… When I implemented it, what I ended up doing was resolve @vocab as a relative URI against the base.<br/>\r\n… So why not allow that in the spec…<br/>\r\nIvan Herman: ship it! :-)<br/>\r\nGregg Kellogg: It is uncontroversial, as it does not change past behaviour.<br/>\r\n… Now you can simply use @vocab: “#”, to use relative URIs everywhere.<br/>\r\nRob Sanderson: –> <a href=\"https://github.com/w3c/json-ld-syntax/issues/72#issuecomment-433597475\">https://github.com/w3c/json-ld-syntax/issues/72#issuecomment-433597475</a><br/>\r\nRob Sanderson: is this the issue we discussed this during TPAC?<br/>\r\n… if you set vocab to ../# and you had example.org/ns then you get example.org/ns../#<br/>\r\nGregg Kellogg: I have to improve the text to indicate when standard URI resolution is used, and when string concatenation is used<br/>\r\nProposed resolution: address security concerns related to relative URIs for @vocab in current PRs before closing #72 (Benjamin Young)<br/>\r\nIvan Herman: +1<br/>\r\nBenjamin Young: +1<br/>\r\nIvan Herman: please close issue 72 when you clarify that and merge it.<br/>\r\nGregg Kellogg: +1<br/>\r\nRob Sanderson: +1<br/>\r\nIvan Herman: Let’s reduce the number of open issue<br/>\r\nPierre-Antoine Champin: +1<br/>\r\nDavid I. Lehn: +1<br/>\r\nResolution #4: address security concerns related to relative URIs for @vocab in current PRs before closing #72<br/>\r\nSimon Steyskal: +1<br/>\r\n</details>" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/453731169> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/114#issuecomment-453731169"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/114> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/453731169> .
<https://api.github.com/users/iherman> <http://schema.org/accountId> "iherman" .
<https://api.github.com/users/iherman> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/520723?v=4" .
<https://api.github.com/users/iherman> <http://schema.org/url> "https://github.com/iherman"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/iherman> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/453731169> <http://schema.org/creator> <https://api.github.com/users/iherman> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/453731169> <http://schema.org/startDate> "2019-01-12T08:48:15Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/453731169> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/453731169> <http://schema.org/description> "This issue was discussed in [a meeting](https://www.w3.org/2018/json-ld-wg/Meetings/Minutes/2019/2019-01-11-json-ld#section3-2).\r\n\r\n- `RESOLVED:  address security concerns related to relative URIs for @vocab in current PRs before closing #72`\r\n<details><summary><i class=\"differentiate\">View the transcript</i></summary>\r\nAllow relative IRIs for @vocab<br/>\r\nBenjamin Young: <a href=\"https://github.com/w3c/json-ld-syntax/issues/72\">https://github.com/w3c/json-ld-syntax/issues/72</a><br/>\r\nsyntax - <a href=\"https://github.com/w3c/json-ld-syntax/pull/114\">https://github.com/w3c/json-ld-syntax/pull/114</a><br/>\r\napi - <a href=\"https://github.com/w3c/json-ld-api/pull/58\">https://github.com/w3c/json-ld-api/pull/58</a><br/>\r\nGregg Kellogg: when we decided to satisfy the need for using the base as the @vocab,<br/>\r\n… I came up with the idea of using an empty string as @vocab.<br/>\r\n… When I implemented it, what I ended up doing was resolve @vocab as a relative URI against the base.<br/>\r\n… So why not allow that in the spec…<br/>\r\nIvan Herman: ship it! :-)<br/>\r\nGregg Kellogg: It is uncontroversial, as it does not change past behaviour.<br/>\r\n… Now you can simply use @vocab: “#”, to use relative URIs everywhere.<br/>\r\nRob Sanderson: –> <a href=\"https://github.com/w3c/json-ld-syntax/issues/72#issuecomment-433597475\">https://github.com/w3c/json-ld-syntax/issues/72#issuecomment-433597475</a><br/>\r\nRob Sanderson: is this the issue we discussed this during TPAC?<br/>\r\n… if you set vocab to ../# and you had example.org/ns then you get example.org/ns../#<br/>\r\nGregg Kellogg: I have to improve the text to indicate when standard URI resolution is used, and when string concatenation is used<br/>\r\nProposed resolution: address security concerns related to relative URIs for @vocab in current PRs before closing #72 (Benjamin Young)<br/>\r\nIvan Herman: +1<br/>\r\nBenjamin Young: +1<br/>\r\nIvan Herman: please close issue 72 when you clarify that and merge it.<br/>\r\nGregg Kellogg: +1<br/>\r\nRob Sanderson: +1<br/>\r\nIvan Herman: Let’s reduce the number of open issue<br/>\r\nPierre-Antoine Champin: +1<br/>\r\nDavid I. Lehn: +1<br/>\r\nResolution #4: address security concerns related to relative URIs for @vocab in current PRs before closing #72<br/>\r\nSimon Steyskal: +1<br/>\r\n</details>" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/453778661> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/111#issuecomment-453778661"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/111> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/453778661> .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/453778661> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/453778661> <http://schema.org/startDate> "2019-01-12T20:30:13Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/453778661> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/453778661> <http://schema.org/description> "Fixes #8 and fixes #111." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/453786464> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/114#issuecomment-453786464"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/114> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/453786464> .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/453786464> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/453786464> <http://schema.org/startDate> "2019-01-12T22:41:32Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/453786464> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/453786464> <http://schema.org/description> "Latest changes fix #72." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/454485321> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/20#issuecomment-454485321"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/20> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/454485321> .
<https://api.github.com/users/BigBlueHat> <http://schema.org/accountId> "BigBlueHat" .
<https://api.github.com/users/BigBlueHat> <http://schema.org/image> "https://avatars1.githubusercontent.com/u/43209?v=4" .
<https://api.github.com/users/BigBlueHat> <http://schema.org/url> "https://github.com/BigBlueHat"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/BigBlueHat> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/454485321> <http://schema.org/creator> <https://api.github.com/users/BigBlueHat> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/454485321> <http://schema.org/startDate> "2019-01-15T17:47:39Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/454485321> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/454485321> <http://schema.org/description> "@dlongley musing on this some more (as I work on Verifiable Claims Data Model tests), and I'm wondering how much of this is solely \"scoped context\" related.\r\n\r\nFor example, I altered the [example you posted earlier](https://github.com/w3c/json-ld-syntax/issues/20#issuecomment-442896360), and made the `VerifiableCredential` definition use it's own (rather redundant looking) scoped context:\r\nhttp://tinyurl.com/ycldnsyv\r\n```json\r\n      \"VerifiableCredential\": {\r\n        \"@id\": \"base:VerifiableCredential\",\r\n        \"@context\": {\r\n          \"issuer\": {\r\n            \"@id\": \"base:issuer\"\r\n          }\r\n        }\r\n      }\r\n```\r\nThat, consequently, \"fixed\" the problem (in this narrow scenario). 😉 \r\n\r\nSo, what I'm wondering now is:\r\n - can this \"sealing\" be done now simply with more verbosity (however annoying)--as done above?\r\n - could that verbosity be removed by a new mechanism to express that [\"scoping on `@type`\"](https://w3c.github.io/json-ld-syntax/#ex-39-defining-an-context-within-a-term-definition-used-on-type) is essentially prevented (or limited) on that particular context's terminology (i.e. `VerifiableCredential` can't have it's context's terms overridden)--perhaps that's automatic on the last, authoritative context.\r\n\r\nThoughts?" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/454891034> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/115#issuecomment-454891034"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/115> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/454891034> .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/454891034> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/454891034> <http://schema.org/startDate> "2019-01-16T18:37:52Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/454891034> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/454891034> <http://schema.org/description> "Hi @dbooth-boston, JSON-LD 1.1 introduces the notion of [scoped contexts](https://w3c.github.io/json-ld-syntax/#scoped-contexts), which sounds like what you're looking for. In your example, the term definition for \"coding\" could introduce a scoped context that re-defines the URI associated with \"code. For example, look at the [playground link](https://json-ld.org/playground-dev/#startTab=tab-nquads&json-ld=%7B%22%40context%22%3A%7B%22%40version%22%3A1.1%2C%22%40vocab%22%3A%22http%3A%2F%2Fexample.com%2F%22%2C%22coding%22%3A%7B%22%40context%22%3A%7B%22code%22%3A%22http%3A%2F%2Fsomething-else.example.com%2Fcode%22%7D%7D%7D%2C%22resourceType%22%3A%22Observation%22%2C%22id%22%3A%22example%22%2C%22code%22%3A%7B%22coding%22%3A%5B%7B%22system%22%3A%22http%3A%2F%2Floinc.org%22%2C%22code%22%3A%2231419%22%2C%22display%22%3A%22Weight%20Measured%22%7D%5D%7D%7D).\r\n\r\n```json\r\n{\r\n  \"@context\": {\r\n    \"@version\": 1.1,\r\n    \"@vocab\": \"http://example.com/\",\r\n    \"coding\": {\r\n      \"@context\": {\"code\": \"http://something-else.example.com/code\"}\r\n    }\r\n  },\r\n  \"resourceType\": \"Observation\",\r\n  \"id\": \"example\",\r\n  \"code\": {\r\n    \"coding\": [\r\n      {\r\n        \"system\": \"http://loinc.org\",\r\n        \"code\": \"31419\",\r\n        \"display\": \"Weight Measured\"\r\n      }\r\n    ]\r\n  }\r\n}\r\n```\r\n" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/454898426> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/115#issuecomment-454898426"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/115> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/454898426> .
<https://api.github.com/users/dbooth-boston> <http://schema.org/accountId> "dbooth-boston" .
<https://api.github.com/users/dbooth-boston> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/5123226?v=4" .
<https://api.github.com/users/dbooth-boston> <http://schema.org/url> "https://github.com/dbooth-boston"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/dbooth-boston> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/454898426> <http://schema.org/creator> <https://api.github.com/users/dbooth-boston> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/454898426> <http://schema.org/startDate> "2019-01-16T18:59:36Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/454898426> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/454898426> <http://schema.org/description> "Excellent!  This looks like it is exactly what we needed.  Sorry I did not find this feature when I searched the issues list.  I will close this issue now." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/454914568> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/20#issuecomment-454914568"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/20> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/454914568> .
<https://api.github.com/users/dlongley> <http://schema.org/accountId> "dlongley" .
<https://api.github.com/users/dlongley> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/168137?v=4" .
<https://api.github.com/users/dlongley> <http://schema.org/url> "https://github.com/dlongley"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/dlongley> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/454914568> <http://schema.org/creator> <https://api.github.com/users/dlongley> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/454914568> <http://schema.org/startDate> "2019-01-16T19:47:15Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/454914568> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/454914568> <http://schema.org/description> "@BigBlueHat,\r\n\r\n> * can this \"sealing\" be done now simply with more verbosity (however annoying)--as done above?\r\n> * could that verbosity be removed by a new mechanism to express that \"scoping on @type\" is essentially prevented (or limited) on that particular context's terminology (i.e. VerifiableCredential can't have it's context's terms overridden)--perhaps that's automatic on the last, authoritative context.\r\n> \r\n> Thoughts?\r\n\r\nI suspect all of the requirements discussed in issue #98 likely can't be covered. Even so, I'm also a little apprehensive about creating contexts that may appear to have useless cruft in them -- instead using the clarity that a `@seal` feature would have.\r\n\r\nIt seemed like we arrived at a pretty good/coherent path forward for the `@seal` feature in #98." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/455286640> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/8#issuecomment-455286640"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/8> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/455286640> .
<https://api.github.com/users/ajs6f> <http://schema.org/accountId> "ajs6f" .
<https://api.github.com/users/ajs6f> <http://schema.org/image> "https://avatars1.githubusercontent.com/u/110994?v=4" .
<https://api.github.com/users/ajs6f> <http://schema.org/url> "https://github.com/ajs6f"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/ajs6f> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/455286640> <http://schema.org/creator> <https://api.github.com/users/ajs6f> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/455286640> <http://schema.org/startDate> "2019-01-17T18:52:37Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/455286640> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/455286640> <http://schema.org/description> "I'm coming in _very_ late on this, but wrt a `Link` header, could we rely on previous work [here](https://tools.ietf.org/html/rfc6906)? I understand there could be some issues with q-value ordering (or rather, the lack thereof). " .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/455305354> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/99#issuecomment-455305354"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/99> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/455305354> .
<https://api.github.com/users/azaroth42> <http://schema.org/accountId> "azaroth42" .
<https://api.github.com/users/azaroth42> <http://schema.org/image> "https://avatars3.githubusercontent.com/u/871868?v=4" .
<https://api.github.com/users/azaroth42> <http://schema.org/url> "https://github.com/azaroth42"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/azaroth42> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/455305354> <http://schema.org/creator> <https://api.github.com/users/azaroth42> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/455305354> <http://schema.org/startDate> "2019-01-17T19:41:45Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/455305354> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/455305354> <http://schema.org/description> "Propose closing as duplicate of #85" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/455317710> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/108#issuecomment-455317710"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/108> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/455317710> .
<https://api.github.com/users/azaroth42> <http://schema.org/accountId> "azaroth42" .
<https://api.github.com/users/azaroth42> <http://schema.org/image> "https://avatars3.githubusercontent.com/u/871868?v=4" .
<https://api.github.com/users/azaroth42> <http://schema.org/url> "https://github.com/azaroth42"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/azaroth42> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/455317710> <http://schema.org/creator> <https://api.github.com/users/azaroth42> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/455317710> <http://schema.org/startDate> "2019-01-17T20:18:56Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/455317710> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/455317710> <http://schema.org/description> "(this issue stems from this resolution: https://www.w3.org/2018/json-ld-wg/Meetings/Minutes/2018/2018-12-14-json-ld#resolution3)" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/455604525> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/108#issuecomment-455604525"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/108> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/455604525> .
<https://api.github.com/users/iherman> <http://schema.org/accountId> "iherman" .
<https://api.github.com/users/iherman> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/520723?v=4" .
<https://api.github.com/users/iherman> <http://schema.org/url> "https://github.com/iherman"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/iherman> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/455604525> <http://schema.org/creator> <https://api.github.com/users/iherman> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/455604525> <http://schema.org/startDate> "2019-01-18T16:25:30Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/455604525> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/455604525> <http://schema.org/description> "I realize that the example given in https://github.com/w3c/json-ld-syntax/issues/108#issuecomment-447629312, is different from the issue discussed in #98. Indeed, in https://github.com/w3c/json-ld-syntax/issues/108#issuecomment-447629312 the `\"@sealed\":\"@true\"` is set by the _caller_, i.e., by the one who _uses_ the context, whereas in all examples of #98 sealing is done by the _called_, i.e., the author of the context. I am not sure whether there are use cases for both, in case we do such sealing." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/455605682> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/108#issuecomment-455605682"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/108> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/455605682> .
<https://api.github.com/users/iherman> <http://schema.org/accountId> "iherman" .
<https://api.github.com/users/iherman> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/520723?v=4" .
<https://api.github.com/users/iherman> <http://schema.org/url> "https://github.com/iherman"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/iherman> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/455605682> <http://schema.org/creator> <https://api.github.com/users/iherman> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/455605682> <http://schema.org/startDate> "2019-01-18T16:28:47Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/455605682> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/455605682> <http://schema.org/description> "Following up on https://github.com/w3c/json-ld-syntax/issues/108#issuecomment-455604525: I can see one reason to allow for such \"caller side\" sealing. There may be (well, there are) a number of 1.0 version contexts that we may want to use, and we may not expect the authors to change those context files. That in spite of the fact that in some situations the sealing would be very useful. Doing it on the caller side means that new, 1.1 compatible contexts and data set can be properly used without expecting the original contexts to be changed... " .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/455634341> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/108#issuecomment-455634341"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/108> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/455634341> .
<https://api.github.com/users/azaroth42> <http://schema.org/accountId> "azaroth42" .
<https://api.github.com/users/azaroth42> <http://schema.org/image> "https://avatars3.githubusercontent.com/u/871868?v=4" .
<https://api.github.com/users/azaroth42> <http://schema.org/url> "https://github.com/azaroth42"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/azaroth42> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/455634341> <http://schema.org/creator> <https://api.github.com/users/azaroth42> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/455634341> <http://schema.org/startDate> "2019-01-18T17:59:57Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/455634341> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/455634341> <http://schema.org/description> "Question arose about sealing `@vocab` definition or just term definitions, or sealing `@context` references." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/455640995> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/20#issuecomment-455640995"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/20> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/455640995> .
<https://api.github.com/users/azaroth42> <http://schema.org/accountId> "azaroth42" .
<https://api.github.com/users/azaroth42> <http://schema.org/image> "https://avatars3.githubusercontent.com/u/871868?v=4" .
<https://api.github.com/users/azaroth42> <http://schema.org/url> "https://github.com/azaroth42"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/azaroth42> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/455640995> <http://schema.org/creator> <https://api.github.com/users/azaroth42> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/455640995> <http://schema.org/startDate> "2019-01-18T18:22:43Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/455640995> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/455640995> <http://schema.org/description> "Some proposed content to be turned into specification text if it meets the use cases...\r\n\r\n* We introduce a new keyword `@sealed` that has a boolean value. The default, if not present, is false.\r\n* When `@sealed` is encountered in a context as part of a term definition, it signals the processor that any subsequent attempt to redefine that term should be treated as an error.\r\n* When `@sealed` is encountered at the top level of a context, not part of a term definition, it is a shortcut for the situation that every term definition in the context should be treated as if it contained `@sealed: true`\r\n* If a context definition attempts to set the context to null, and there are terms that have been sealed by another context that has already been processed, this is an error state.\r\n\r\nThus, some examples...\r\n\r\n```\r\n{\"@context\": {\"label\": {\"@id\": \"rdfs:label\", \"@sealed\": true}}}\r\n```\r\n\r\nThis context defines `label` to be `rdfs:label`, and any subsequent context that tries to define `label` will generate a processor error.\r\n\r\n---\r\n\r\n```\r\n{\"@context\": {\"@sealed\": true, \"label\": \"rdfs:label\"}}\r\n```\r\n\r\nThis is equivalent to the first example.\r\n\r\n---\r\n\r\n```\r\n{\"@context\": {\"label\": {\"@id\": \"rdfs:label\", \"@sealed\": true}, \r\n    \"value\": {\"@id\": \"rdf:value\"}}}\r\n```\r\n\r\nLabel is sealed, but value is not sealed.\r\n\r\n---\r\n\r\n```\r\n{\"@context\": {\"@sealed\": true, \"label\": \"rdfs:label\", \r\n    \"value\": {\"@sealed\": false, \"@id\": \"rdf:value\"}}}\r\n```\r\n\r\nEquivalent to the previous, just in reverse\r\n\r\n---\r\n\r\n```\r\n{\"@context\": {\"sealed_data\": {\"@context\": \r\n    {\"@sealed\": true, \"label\": \"rdfs:label\"}}}}\r\n```\r\n\r\nWithin `sealed_data`, `label` is sealed to be rdfs:label, but can be redefined in contexts other than within `sealed_data`.\r\n\r\n---\r\n\r\n```\r\n{\"@context\": {\"sealed_data\": {\"@id\": \"rdf:value\", \"@sealed\": true, \r\n    \"@context\": {\"sealed_data\": \"eg:data\"}}}}\r\n```\r\n\r\nAn error, as sealed_data is still sealed.  (?)\r\n\r\n---\r\n\r\n```\r\n{\"@context\": {\"wild_west\": {\"@id\": \"eg:playground\", \"@sealed\": true, \"@context\": null}}}\r\n```\r\n\r\nYou can't redefine `wild_west` because it is sealed to be `eg:playground`, but within the `wild_west` there is no defined context (it has been nulled out) and thus anything goes ... including redefining sealed terms.  This should only work when the resetting and the sealing are in the same context.\r\n\r\n---\r\n\r\n```\r\n{\"@context\": [\r\n  {\"sealed_data\": {\"@id\": \"rdf:value\", \"@sealed\": true\"},\r\n  null,\r\n  {\"sealed_data\": {\"@id\": \"eg:playground\"}\r\n]}\r\n```\r\n\r\nError state, as the null would remove a sealed term.\r\n\r\n---\r\n\r\nQuestions arising:\r\n\r\n* Can you seal alias definitions, such that `id` being aliased to `@id` cannot be overridden? Propose that the answer is yes.\r\n* Can you seal the default vocabulary definition via `@vocab`? Propose that the answer is no, it's only the definitions of terms that are sealed.\r\n* Can you annotate a context with `@sealed` (c.f. #108) to seal it in your usage? Propose defer until #108 is resolved.\r\n\r\n\r\n(Tag @dlongley to take a look)\r\n\r\n" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/455657848> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/20#issuecomment-455657848"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/20> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/455657848> .
<https://api.github.com/users/dlongley> <http://schema.org/accountId> "dlongley" .
<https://api.github.com/users/dlongley> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/168137?v=4" .
<https://api.github.com/users/dlongley> <http://schema.org/url> "https://github.com/dlongley"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/dlongley> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/455657848> <http://schema.org/creator> <https://api.github.com/users/dlongley> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/455657848> <http://schema.org/startDate> "2019-01-18T19:18:57Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/455657848> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/455657848> <http://schema.org/description> "I agree with Rob's examples.\r\n\r\n> Can you seal alias definitions, such that id being aliased to @id cannot be overridden? Propose that the answer is yes.\r\n\r\nYes.\r\n\r\n> Can you seal the default vocabulary definition via @vocab? Propose that the answer is no, it's only the definitions of terms that are sealed.\r\n\r\nI think \"no\" makes more sense here, but I'm open to an argument for \"yes\".\r\n\r\n> Can you annotate a context with @sealed (c.f. #108) to seal it in your usage? Propose defer until #108 is resolved.\r\n\r\nAlso +1 to deferring.\r\n\r\nAnother example for clarity on `wild_west`:\r\n\r\n---\r\n```\r\n{\r\n  \"@context\": [\r\n    {\"wild_west\": {\"@id\": \"eg:playground\", \"@sealed\": true, \"@context\": null}},\r\n    {\"wild_west\": {\"@context\": \"http://schema.org\"}}\r\n  ]\r\n}\r\n```\r\nThis is not an error and causes the scoped context for \"wild_west\" (anything nested under that term) to be \"http://schema.org\".\r\n\r\n---" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/455658820> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/20#issuecomment-455658820"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/20> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/455658820> .
<https://api.github.com/users/dlongley> <http://schema.org/accountId> "dlongley" .
<https://api.github.com/users/dlongley> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/168137?v=4" .
<https://api.github.com/users/dlongley> <http://schema.org/url> "https://github.com/dlongley"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/dlongley> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/455658820> <http://schema.org/creator> <https://api.github.com/users/dlongley> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/455658820> <http://schema.org/startDate> "2019-01-18T19:22:10Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/455658820> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/455658820> <http://schema.org/description> "Regarding this:\r\n\r\n---\r\n```\r\n{\"@context\": {\"sealed_data\": {\"@id\": \"rdf:value\", \"@sealed\": true, \r\n    \"@context\": {\"sealed_data\": \"eg:data\"}}}}\r\n```\r\n\r\nAn error, as sealed_data is still sealed. (?)\r\n\r\n---\r\n\r\nI'm not convinced that should be an error given that it's in the same document. This seems like something someone may want to do. I would expect the sealing here to prevent other documents from changing the scoped context." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/455670354> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/20#issuecomment-455670354"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/20> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/455670354> .
<https://api.github.com/users/azaroth42> <http://schema.org/accountId> "azaroth42" .
<https://api.github.com/users/azaroth42> <http://schema.org/image> "https://avatars3.githubusercontent.com/u/871868?v=4" .
<https://api.github.com/users/azaroth42> <http://schema.org/url> "https://github.com/azaroth42"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/azaroth42> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/455670354> <http://schema.org/creator> <https://api.github.com/users/azaroth42> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/455670354> <http://schema.org/startDate> "2019-01-18T20:02:10Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/455670354> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/455670354> <http://schema.org/description> "I think we need a separate issue for the partial redefinition case for adding a context to `wild_west`.  Will create one." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/455699238> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/108#issuecomment-455699238"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/108> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/455699238> .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/455699238> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/455699238> <http://schema.org/startDate> "2019-01-18T21:50:50Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/455699238> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/455699238> <http://schema.org/description> "IMO, sealing a context for which you have no control can lead to problems, as it may change out from underneath you in the future and make data which used to be valid no longer valid. I would not support the ability to seal a context by reference." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/455700514> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/116#issuecomment-455700514"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/116> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/455700514> .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/455700514> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/455700514> <http://schema.org/startDate> "2019-01-18T21:55:45Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/455700514> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/455700514> <http://schema.org/description> "That is completely different for how term definitions are handled now. The new \"wild_west\" completely replaces the old \"wild_west\", and unless there's a default vocabulary in range, would probably lead to an error.\r\n\r\nBut, it sounds like to make this work with `@context: null` in the sealed context, the new term definition would be special, in that it would _update_ the previous term definition, and would be limited to setting `@context`. I don't see it working on anything other than a sealed term, unless we identify an important use case for it." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/455703945> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/108#issuecomment-455703945"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/108> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/455703945> .
<https://api.github.com/users/ajs6f> <http://schema.org/accountId> "ajs6f" .
<https://api.github.com/users/ajs6f> <http://schema.org/image> "https://avatars1.githubusercontent.com/u/110994?v=4" .
<https://api.github.com/users/ajs6f> <http://schema.org/url> "https://github.com/ajs6f"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/ajs6f> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/455703945> <http://schema.org/creator> <https://api.github.com/users/ajs6f> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/455703945> <http://schema.org/startDate> "2019-01-18T22:09:22Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/455703945> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/455703945> <http://schema.org/description> "Sealing a context in hand is an act on that context in that scope. Sealing a context-by-reference-- is that an act on the referent? The link? If someone later down the chain imports the same context via a different URI, is it sealed?" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/455761716> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/20#issuecomment-455761716"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/20> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/455761716> .
<https://api.github.com/users/iherman> <http://schema.org/accountId> "iherman" .
<https://api.github.com/users/iherman> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/520723?v=4" .
<https://api.github.com/users/iherman> <http://schema.org/url> "https://github.com/iherman"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/iherman> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/455761716> <http://schema.org/creator> <https://api.github.com/users/iherman> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/455761716> <http://schema.org/startDate> "2019-01-19T08:50:02Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/455761716> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/455761716> <http://schema.org/description> "This issue was discussed in [a meeting](https://www.w3.org/2018/json-ld-wg/Meetings/Minutes/2019/2019-01-18-json-ld#section4).\r\n\r\n- `ACTION:  Rob Sanderson to document simple input and expected processing of them`\r\n- `ACTION:  Dave Longley to review azaroth’s text and add further examples`\r\n<details><summary><i class=\"differentiate\">View the transcript</i></summary>\r\nRob Sanderson: Github issue: <a href=\"https://github.com/w3c/json-ld-syntax/issues/20\">https://github.com/w3c/json-ld-syntax/issues/20</a><br/>\r\nIvan Herman: Related issues: <a href=\"https://github.com/w3c/json-ld-syntax/issues/98\">https://github.com/w3c/json-ld-syntax/issues/98</a> and <a href=\"https://github.com/w3c/json-ld-syntax/issues/108\">https://github.com/w3c/json-ld-syntax/issues/108</a><br/>\r\nRob Sanderson: We want to have it such that contexts that are processed after sealed contexts are unable to change the definition of terms.<br/>\r\n… So, if you see something like “foo” in the context, you can be confident of its meaning from the sealed context.<br/>\r\n… There is also the desire to “unseal” sealed terms. dlongley is champion from Credentidals WG.<br/>\r\nDave Longley: The main reason for the feature is that there are a number of specifications that add prose to text about order of contexts, and that you can extend the context, but may not override terms. There’s no mechanism to enforce this.<br/>\r\nRob Sanderson: An example of such language: <a href=\"https://iiif.io/api/presentation/2.1/#linked-data-context-and-extensions\">https://iiif.io/api/presentation/2.1/#linked-data-context-and-extensions</a><br/>\r\nDave Longley: People sometimes don’t use JSON-LD processors, and could interpret the data differently then those using JSON-lD procesors.<br/>\r\nRob Sanderson: And: <a href=\"https://iiif.io/api/presentation/3.0/#45-linked-data-context-and-extensions\">https://iiif.io/api/presentation/3.0/#45-linked-data-context-and-extensions</a><br/>\r\nDave Longley: The other issue is related: we want a base context to define terms, and call-out an area where you can clear out the sealed contexts. You could use a scoped context to define a new scoped context for whatever is under that term.<br/>\r\nPierre-Antoine Champin: I’m not sure I understand the use case for allowing people to unseal the context. My understanding is that, in some vocabularies, a term is an extension point, so that below that term the sealed context shouldn’t apply.<br/>\r\n… I’d understand the case where it’s always cleared, but not where it “could be”<br/>\r\nDave Longley: Yes, it would be a clean-slate by definition.<br/>\r\nBenjamin Young: <a href=\"https://w3c.github.io/web-ledger/\">https://w3c.github.io/web-ledger/</a><br/>\r\nBenjamin Young: <a href=\"https://github.com/digitalbazaar/jsonld-patch/tree/implementation\">https://github.com/digitalbazaar/jsonld-patch/tree/implementation</a><br/>\r\nDave Longley: The case for unsealing is used in web ledger, which allows you to store arbitrary data, and has know knowledge of being in a ledger.<br/>\r\n… In the case of json-ld patch, you want to be able to update arbitrary values in a document, in particular, if you want to be able to digitally sign patches.<br/>\r\n… You could use a scoped context for “value” to clear the context. It’s the case that you want a clean slate and allow users to override the context using embedded or scoped contexts.<br/>\r\nBenjamin Young: Conceptually, this feels like “important!” in CSS, to not allow things to be overridden.<br/>\r\n… I think dlongley’s point about how specs are written in the last couple of years is in play in so many places that a sealing mechanism is important.<br/>\r\nDavid Newbury: We talked about JSON literals before, could that be a way to handle content that is not associated with the context?<br/>\r\nDave Longley: We looked at that, but it ends up being much more difficult, because of how signing works.<br/>\r\n… You’d end up having to canonicalize the JSON, and it becomes a mess. It avoids pitfalls where we want to avoid causing everything to be marked as a JSON literal.<br/>\r\nRob Sanderson: In IIIF, we have the same wording, but it puts the contexts at the end, rather than the beginning, but we do want to have extension points.<br/>\r\n… Similarly, we use language maps, annotations uses string, we want those to be used together.<br/>\r\nGregg Kellogg: Having something that prevents you from saying @context None would be inadvisable<br/>\r\n… it does what people have asked for to create the clean slate<br/>\r\n… it requires that values for terms to have their own context, so would need to be explicitly set<br/>\r\n… is there expectation about changing the default content is up higher.<br/>\r\n… If Annotations defines a term, data, and you want to unseal it. You add null as a scoped context<br/>\r\n… If you want to have the data in schema.org in data, you could do it with a scoped context that’s an array with null as the first entry, but it’s sealed<br/>\r\n… so the context needs to unseal itself<br/>\r\nIvan Herman: The usage of “sealed” seems to be straightforward. I wonder about unsealing only appears when we talk about embedded contexts, is that correct?<br/>\r\n… If I have an array of contexts it’s different than if I have an embedded context.<br/>\r\nDave Longley: I think that the main use case where you set context to null, should then allow the scoped context, or via an embedded context. If you defined “data” in a sealed context, you’d then say \"@context\": null, the second context could then define the term and introspects into the sealed context to see that the term can be overridden because it has a scoped context of null.<br/>\r\n… I think we should keep the cascading order we have.<br/>\r\nRob Sanderson: +1 to last in winning<br/>\r\nDave Longley: It can’t override terms, but can override scoping.<br/>\r\nRob Sanderson: I think we can’t change definition order either.<br/>\r\nDave Longley: +1 to sealing individual terms<br/>\r\nJeff Mixter: +1 to individual term sealing<br/>\r\nDave Longley: (we’ve worked out some of these details in #98)<br/>\r\nRob Sanderson: what about sealing specific terms in a context? Then, we wouldn’t need to worry about unsealing different things.<br/>\r\n… What would current processors due if they had a …?<br/>\r\nDave Longley: \"data\": {\"@id\": \"foo:data\", \"@container\": \"@graph\", \"@context\": null, \"@sealed\": true} => enables a later @context to define: \"data\": {\"@context\": \"...\"}<br/>\r\nDave Longley:<br/>\r\n<b>\"data\":</b> {<br/>\r\n<b>\"@id\":</b> \"foo:data\",<br/>\r\n<b>\"@container\":</b> \"@graph\",<br/>\r\n<b>\"@context\":</b> null, \"@sealed\": true<br/>\r\n}<br/>\r\n=> enables a later \"@context to define: \"data\": {\"@context\": \"...\"}<br/>\r\nRob Sanderson:<br/>\r\n<b>\"@context\":</b> [<br/>\r\n{<br/>\r\n<b>\"data\":</b> {<br/>\r\n<b>\"@id\":</b> \"eg:data\",<br/>\r\n<b>\"@sealed\":</b> false<br/>\r\n}<br/>\r\n},<br/>\r\n{<br/>\r\n<b>\"data\":</b> {<br/>\r\n<b>\"@context\":</b> \"<a href=\"http://example.org/data-context.jsonld\"\">http://example.org/data-context.jsonld\"</a><br/>\r\n}<br/>\r\n}<br/>\r\n]<br/>\r\nDavid Newbury: The only place I can unseal something is within the context that seals it. I can’t add something that unseals something that had previously been sealed.<br/>\r\nRob Sanderson: -1 to restricting to graph containers<br/>\r\nBenjamin Young: I about how we can express this so that the behavior is obvious.<br/>\r\nRob Sanderson: E.g. An LDP implementation for Annotations should not require a graph container to put an annotation in a page<br/>\r\nBenjamin Young: Perhaps something the scopes the sealing to the term, the content, or something else.<br/>\r\n… Perhaps the @sealed could have different values?<br/>\r\nBenjamin Young: \"@sealed\": \"@id\"<br/>\r\nBenjamin Young: \"@sealed\": \"@context\"<br/>\r\nJeff Mixter: maybe we can walk through the IIIF use case in DC next month<br/>\r\nDave Longley: I think we can safely add \"@sealed\": \"`\"` (in a backwards compatible way) if we find that `\"@sealed\": true` is insufficient for use cases<br/>\r\nRob Sanderson: My understanding is that if you seal a context (or a set of terms), you’re only sealing the terms it defines. You could have a term outside that context can do whatever it wants, including override terms that would have come from an inherited context.<br/>\r\nRob Sanderson: {\"data2\": {\"@context\": {\"data\": ... }}<br/>\r\nRob Sanderson: If “data2” is defined in a separate context, and within that you define “data”, that could conflict with a sealed “data” term.<br/>\r\nDave Longley: If you tried to use that I would expect that to be an error.<br/>\r\nPierre-Antoine Champin: I’m not a fan of sealing or unsealing individual terms, saying \"@sealed\": false would not be good.<br/>\r\nJeff Mixter: What if someone want’s to just point at a different context and seal it, but you want to also import additional contexts, wouldn’t that lead to different errors or collisions?<br/>\r\nPierre-Antoine Champin: -1 to sealing someone else’s context<br/>\r\nRob Sanderson: I don’t think you can seal someone else’s context.<br/>\r\nJeff Mixter: so sealing contexts is only within the context of the JSON-ld document?<br/>\r\nRob Sanderson: jeff_mixter: Yep.<br/>\r\nIvan Herman: Perhaps dlongley or someone else could come up with a strawman spec text that we can look at. We’re getting lost.<br/>\r\nIvan Herman: <a href=\"https://github.com/w3c/json-ld-syntax/issues/98#issuecomment-443182908\">https://github.com/w3c/json-ld-syntax/issues/98#issuecomment-443182908</a> and the last example of <a href=\"https://github.com/w3c/json-ld-syntax/issues/98#issuecomment-443241467\">https://github.com/w3c/json-ld-syntax/issues/98#issuecomment-443241467</a><br/>\r\nIvan Herman: These discussions in November we had (see #98/comment-443182908 and the last example of #98/comment-443241467 a table to talk about different ways to seal, and this seems to give a core spec; if it can be written down, we may have something.<br/>\r\n… If it becomes spaghetti, we have a problem.<br/>\r\n… We have the F2F in three weeks, so maybe we can have a goal to have a final resolution then.<br/>\r\nDave Longley: We’d also want test cases so we can experiment with test cases.<br/>\r\n… We intend to implement one way or another.<br/>\r\nRob Sanderson: I’m happy to contribute examples.<br/>\r\nJeff Mixter: so this is not valid - { \"@context\": [{\"@vocab\": \"<a href=\"http://schema.org/\",\">http://schema.org/\",</a> \"@sealed\": true}]?<br/>\r\nIvan Herman: We can also use the wiki page.<br/>\r\nAction #3: Rob Sanderson to document simple input and expected processing of them<br/>\r\nAction #4: Dave Longley to review azaroth’s text and add further examples<br/>\r\nDave Longley: +1<br/>\r\nBenjamin Young: +1<br/>\r\nDave Longley: jeff_mixter: I think as a first cut of this feature you’d have to seal all of the schema.org terms yourself (defining them yourself in your own @context)<br/>\r\nIvan Herman: That’s discussed in #108; there was a syntax that might allow for that.<br/>\r\nIvan Herman: <a href=\"https://github.com/w3c/json-ld-syntax/issues/108#issuecomment-447629312\">https://github.com/w3c/json-ld-syntax/issues/108#issuecomment-447629312</a><br/>\r\nIvan Herman: I didn’t realize I was sealing it, but it could be done. I’m not sure we want to do that.<br/>\r\nDave Longley: thanks everyone for the discussion!<br/>\r\nRob Sanderson: It’s been a useful discussion.<br/>\r\nDave Longley: I can probably dial into the F2F.<br/>\r\n</details>" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/455761731> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/98#issuecomment-455761731"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/98> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/455761731> .
<https://api.github.com/users/iherman> <http://schema.org/accountId> "iherman" .
<https://api.github.com/users/iherman> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/520723?v=4" .
<https://api.github.com/users/iherman> <http://schema.org/url> "https://github.com/iherman"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/iherman> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/455761731> <http://schema.org/creator> <https://api.github.com/users/iherman> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/455761731> <http://schema.org/startDate> "2019-01-19T08:50:25Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/455761731> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/455761731> <http://schema.org/description> "This issue was discussed in [a meeting](https://www.w3.org/2018/json-ld-wg/Meetings/Minutes/2019/2019-01-18-json-ld#section4).\r\n\r\n- `ACTION:  Rob Sanderson to document simple input and expected processing of them`\r\n- `ACTION:  Dave Longley to review azaroth’s text and add further examples`\r\n<details><summary><i class=\"differentiate\">View the transcript</i></summary>\r\nRob Sanderson: Github issue: <a href=\"https://github.com/w3c/json-ld-syntax/issues/20\">https://github.com/w3c/json-ld-syntax/issues/20</a><br/>\r\nIvan Herman: Related issues: <a href=\"https://github.com/w3c/json-ld-syntax/issues/98\">https://github.com/w3c/json-ld-syntax/issues/98</a> and <a href=\"https://github.com/w3c/json-ld-syntax/issues/108\">https://github.com/w3c/json-ld-syntax/issues/108</a><br/>\r\nRob Sanderson: We want to have it such that contexts that are processed after sealed contexts are unable to change the definition of terms.<br/>\r\n… So, if you see something like “foo” in the context, you can be confident of its meaning from the sealed context.<br/>\r\n… There is also the desire to “unseal” sealed terms. dlongley is champion from Credentidals WG.<br/>\r\nDave Longley: The main reason for the feature is that there are a number of specifications that add prose to text about order of contexts, and that you can extend the context, but may not override terms. There’s no mechanism to enforce this.<br/>\r\nRob Sanderson: An example of such language: <a href=\"https://iiif.io/api/presentation/2.1/#linked-data-context-and-extensions\">https://iiif.io/api/presentation/2.1/#linked-data-context-and-extensions</a><br/>\r\nDave Longley: People sometimes don’t use JSON-LD processors, and could interpret the data differently then those using JSON-lD procesors.<br/>\r\nRob Sanderson: And: <a href=\"https://iiif.io/api/presentation/3.0/#45-linked-data-context-and-extensions\">https://iiif.io/api/presentation/3.0/#45-linked-data-context-and-extensions</a><br/>\r\nDave Longley: The other issue is related: we want a base context to define terms, and call-out an area where you can clear out the sealed contexts. You could use a scoped context to define a new scoped context for whatever is under that term.<br/>\r\nPierre-Antoine Champin: I’m not sure I understand the use case for allowing people to unseal the context. My understanding is that, in some vocabularies, a term is an extension point, so that below that term the sealed context shouldn’t apply.<br/>\r\n… I’d understand the case where it’s always cleared, but not where it “could be”<br/>\r\nDave Longley: Yes, it would be a clean-slate by definition.<br/>\r\nBenjamin Young: <a href=\"https://w3c.github.io/web-ledger/\">https://w3c.github.io/web-ledger/</a><br/>\r\nBenjamin Young: <a href=\"https://github.com/digitalbazaar/jsonld-patch/tree/implementation\">https://github.com/digitalbazaar/jsonld-patch/tree/implementation</a><br/>\r\nDave Longley: The case for unsealing is used in web ledger, which allows you to store arbitrary data, and has know knowledge of being in a ledger.<br/>\r\n… In the case of json-ld patch, you want to be able to update arbitrary values in a document, in particular, if you want to be able to digitally sign patches.<br/>\r\n… You could use a scoped context for “value” to clear the context. It’s the case that you want a clean slate and allow users to override the context using embedded or scoped contexts.<br/>\r\nBenjamin Young: Conceptually, this feels like “important!” in CSS, to not allow things to be overridden.<br/>\r\n… I think dlongley’s point about how specs are written in the last couple of years is in play in so many places that a sealing mechanism is important.<br/>\r\nDavid Newbury: We talked about JSON literals before, could that be a way to handle content that is not associated with the context?<br/>\r\nDave Longley: We looked at that, but it ends up being much more difficult, because of how signing works.<br/>\r\n… You’d end up having to canonicalize the JSON, and it becomes a mess. It avoids pitfalls where we want to avoid causing everything to be marked as a JSON literal.<br/>\r\nRob Sanderson: In IIIF, we have the same wording, but it puts the contexts at the end, rather than the beginning, but we do want to have extension points.<br/>\r\n… Similarly, we use language maps, annotations uses string, we want those to be used together.<br/>\r\nGregg Kellogg: Having something that prevents you from saying @context None would be inadvisable<br/>\r\n… it does what people have asked for to create the clean slate<br/>\r\n… it requires that values for terms to have their own context, so would need to be explicitly set<br/>\r\n… is there expectation about changing the default content is up higher.<br/>\r\n… If Annotations defines a term, data, and you want to unseal it. You add null as a scoped context<br/>\r\n… If you want to have the data in schema.org in data, you could do it with a scoped context that’s an array with null as the first entry, but it’s sealed<br/>\r\n… so the context needs to unseal itself<br/>\r\nIvan Herman: The usage of “sealed” seems to be straightforward. I wonder about unsealing only appears when we talk about embedded contexts, is that correct?<br/>\r\n… If I have an array of contexts it’s different than if I have an embedded context.<br/>\r\nDave Longley: I think that the main use case where you set context to null, should then allow the scoped context, or via an embedded context. If you defined “data” in a sealed context, you’d then say \"@context\": null, the second context could then define the term and introspects into the sealed context to see that the term can be overridden because it has a scoped context of null.<br/>\r\n… I think we should keep the cascading order we have.<br/>\r\nRob Sanderson: +1 to last in winning<br/>\r\nDave Longley: It can’t override terms, but can override scoping.<br/>\r\nRob Sanderson: I think we can’t change definition order either.<br/>\r\nDave Longley: +1 to sealing individual terms<br/>\r\nJeff Mixter: +1 to individual term sealing<br/>\r\nDave Longley: (we’ve worked out some of these details in #98)<br/>\r\nRob Sanderson: what about sealing specific terms in a context? Then, we wouldn’t need to worry about unsealing different things.<br/>\r\n… What would current processors due if they had a …?<br/>\r\nDave Longley: \"data\": {\"@id\": \"foo:data\", \"@container\": \"@graph\", \"@context\": null, \"@sealed\": true} => enables a later @context to define: \"data\": {\"@context\": \"...\"}<br/>\r\nDave Longley:<br/>\r\n<b>\"data\":</b> {<br/>\r\n<b>\"@id\":</b> \"foo:data\",<br/>\r\n<b>\"@container\":</b> \"@graph\",<br/>\r\n<b>\"@context\":</b> null, \"@sealed\": true<br/>\r\n}<br/>\r\n=> enables a later \"@context to define: \"data\": {\"@context\": \"...\"}<br/>\r\nRob Sanderson:<br/>\r\n<b>\"@context\":</b> [<br/>\r\n{<br/>\r\n<b>\"data\":</b> {<br/>\r\n<b>\"@id\":</b> \"eg:data\",<br/>\r\n<b>\"@sealed\":</b> false<br/>\r\n}<br/>\r\n},<br/>\r\n{<br/>\r\n<b>\"data\":</b> {<br/>\r\n<b>\"@context\":</b> \"<a href=\"http://example.org/data-context.jsonld\"\">http://example.org/data-context.jsonld\"</a><br/>\r\n}<br/>\r\n}<br/>\r\n]<br/>\r\nDavid Newbury: The only place I can unseal something is within the context that seals it. I can’t add something that unseals something that had previously been sealed.<br/>\r\nRob Sanderson: -1 to restricting to graph containers<br/>\r\nBenjamin Young: I about how we can express this so that the behavior is obvious.<br/>\r\nRob Sanderson: E.g. An LDP implementation for Annotations should not require a graph container to put an annotation in a page<br/>\r\nBenjamin Young: Perhaps something the scopes the sealing to the term, the content, or something else.<br/>\r\n… Perhaps the @sealed could have different values?<br/>\r\nBenjamin Young: \"@sealed\": \"@id\"<br/>\r\nBenjamin Young: \"@sealed\": \"@context\"<br/>\r\nJeff Mixter: maybe we can walk through the IIIF use case in DC next month<br/>\r\nDave Longley: I think we can safely add \"@sealed\": \"`\"` (in a backwards compatible way) if we find that `\"@sealed\": true` is insufficient for use cases<br/>\r\nRob Sanderson: My understanding is that if you seal a context (or a set of terms), you’re only sealing the terms it defines. You could have a term outside that context can do whatever it wants, including override terms that would have come from an inherited context.<br/>\r\nRob Sanderson: {\"data2\": {\"@context\": {\"data\": ... }}<br/>\r\nRob Sanderson: If “data2” is defined in a separate context, and within that you define “data”, that could conflict with a sealed “data” term.<br/>\r\nDave Longley: If you tried to use that I would expect that to be an error.<br/>\r\nPierre-Antoine Champin: I’m not a fan of sealing or unsealing individual terms, saying \"@sealed\": false would not be good.<br/>\r\nJeff Mixter: What if someone want’s to just point at a different context and seal it, but you want to also import additional contexts, wouldn’t that lead to different errors or collisions?<br/>\r\nPierre-Antoine Champin: -1 to sealing someone else’s context<br/>\r\nRob Sanderson: I don’t think you can seal someone else’s context.<br/>\r\nJeff Mixter: so sealing contexts is only within the context of the JSON-ld document?<br/>\r\nRob Sanderson: jeff_mixter: Yep.<br/>\r\nIvan Herman: Perhaps dlongley or someone else could come up with a strawman spec text that we can look at. We’re getting lost.<br/>\r\nIvan Herman: <a href=\"https://github.com/w3c/json-ld-syntax/issues/98#issuecomment-443182908\">https://github.com/w3c/json-ld-syntax/issues/98#issuecomment-443182908</a> and the last example of <a href=\"https://github.com/w3c/json-ld-syntax/issues/98#issuecomment-443241467\">https://github.com/w3c/json-ld-syntax/issues/98#issuecomment-443241467</a><br/>\r\nIvan Herman: These discussions in November we had (see #98/comment-443182908 and the last example of #98/comment-443241467 a table to talk about different ways to seal, and this seems to give a core spec; if it can be written down, we may have something.<br/>\r\n… If it becomes spaghetti, we have a problem.<br/>\r\n… We have the F2F in three weeks, so maybe we can have a goal to have a final resolution then.<br/>\r\nDave Longley: We’d also want test cases so we can experiment with test cases.<br/>\r\n… We intend to implement one way or another.<br/>\r\nRob Sanderson: I’m happy to contribute examples.<br/>\r\nJeff Mixter: so this is not valid - { \"@context\": [{\"@vocab\": \"<a href=\"http://schema.org/\",\">http://schema.org/\",</a> \"@sealed\": true}]?<br/>\r\nIvan Herman: We can also use the wiki page.<br/>\r\nAction #3: Rob Sanderson to document simple input and expected processing of them<br/>\r\nAction #4: Dave Longley to review azaroth’s text and add further examples<br/>\r\nDave Longley: +1<br/>\r\nBenjamin Young: +1<br/>\r\nDave Longley: jeff_mixter: I think as a first cut of this feature you’d have to seal all of the schema.org terms yourself (defining them yourself in your own @context)<br/>\r\nIvan Herman: That’s discussed in #108; there was a syntax that might allow for that.<br/>\r\nIvan Herman: <a href=\"https://github.com/w3c/json-ld-syntax/issues/108#issuecomment-447629312\">https://github.com/w3c/json-ld-syntax/issues/108#issuecomment-447629312</a><br/>\r\nIvan Herman: I didn’t realize I was sealing it, but it could be done. I’m not sure we want to do that.<br/>\r\nDave Longley: thanks everyone for the discussion!<br/>\r\nRob Sanderson: It’s been a useful discussion.<br/>\r\nDave Longley: I can probably dial into the F2F.<br/>\r\n</details>" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/456045025> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/20#issuecomment-456045025"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/20> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/456045025> .
<https://api.github.com/users/iherman> <http://schema.org/accountId> "iherman" .
<https://api.github.com/users/iherman> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/520723?v=4" .
<https://api.github.com/users/iherman> <http://schema.org/url> "https://github.com/iherman"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/iherman> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/456045025> <http://schema.org/creator> <https://api.github.com/users/iherman> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/456045025> <http://schema.org/startDate> "2019-01-21T11:39:31Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/456045025> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/456045025> <http://schema.org/description> "> ```json\r\n> {\r\n>    \"@context\": {\r\n>        \"sealed_data\": {\r\n>            \"@id\": \"rdf:value\",\r\n>            \"@sealed\": true,\r\n>            \"@context\": {\r\n>                \"sealed_data\": \"eg:data\"\r\n>            }\r\n>        }\r\n>    }\r\n>}\r\n>```\r\n> An error, as sealed_data is still sealed. (?)\r\n\r\nI would agree this is a an error; I am not sure I understand @dlongley's remark \"I'm not convinced that should be an error given that it's in the same document.\". More exactly, how would one define this exception in a spec?\r\n" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/456081030> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/116#issuecomment-456081030"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/116> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/456081030> .
<https://api.github.com/users/iherman> <http://schema.org/accountId> "iherman" .
<https://api.github.com/users/iherman> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/520723?v=4" .
<https://api.github.com/users/iherman> <http://schema.org/url> "https://github.com/iherman"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/iherman> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/456081030> <http://schema.org/creator> <https://api.github.com/users/iherman> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/456081030> <http://schema.org/startDate> "2019-01-21T13:51:56Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/456081030> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/456081030> <http://schema.org/description> "I find all this a bit confusing... \r\n\r\nI wondered whether we should not use a kind of ternary logic for `@sealed` instead:\r\n\r\n- `\"@sealed: \"true\"` seals the full context and definition for that term\r\n- `\"@sealed\": \"false\"` unseals a term in a sealed context, essentially making the effect of the upper level `@sealed` ineffective\r\n- `\"@sealed\": \"partial\"` seals all definitions on the term that are explicitly present, but allows for expansions\r\n\r\n(I guess, the third value is irrelevant for full contexts)\r\n\r\nThe role of `\"@context\": null` would mean to wipe out all inherited context term definitions. It would not affect any statements explicitly listed in the term definitions, but everything implicit.  \r\n\r\n---\r\n\r\n```json\r\n{\r\n  \"@context\": [\r\n    {\"wild_west\": {\"@id\": \"eg:playground\"}},\r\n    {\"wild_west\": {\"@context\": \"http://schema.org\"}}\r\n  ]\r\n}\r\n```\r\n\r\nWould fall back on the current interpretation, i.e., it is equivalent to JSON-LD 1.0. The second definition for \"wild_west\" wipes out the `\"@id\"` definition of the first.\r\n\r\n---\r\n\r\n```json\r\n{\r\n  \"@context\": [\r\n    {\"wild_west\": {\"@id\": \"eg:playground\", \"@sealed\" : \"true\"}},\r\n    {\"wild_west\": {\"@context\": \"http://schema.org\"}}\r\n  ]\r\n}\r\n```\r\n\r\nwould be an error, because `\"@sealed\": \"true\"` means that the first definition is cast in concrete and nobody can change anything.\r\n\r\n---\r\n\r\n```json\r\n{\r\n  \"@context\": [\r\n    {\"wild_west\": {\"@id\": \"eg:playground\", \"@sealed\" : \"partial\"}},\r\n    {\"wild_west\": {\"@context\": \"http://schema.org\"}}\r\n  ]\r\n}\r\n```\r\n\r\nmeans the `\"@id\": \"eg:playground\"` would remain unchangeable, but expanding on the term definition by using `schema.org` is all right. If the creator of the first context decided to, e.g., specify the datatype of the value, this would also become sealed, too, etc.\r\n\r\n---\r\n\r\n```json\r\n{\r\n  \"@context\": [{\r\n        \"data\": {\r\n            \"@id\": \"eg:data\",\r\n            \"@sealed\" : \"partial\",\r\n            \"@context\" : null\r\n        }\r\n    },{\r\n        \"data\": {\r\n            \"@context\" : { … }\r\n        }\r\n    }]\r\n}\r\n```\r\n\r\nmeans (I think) the starting example of @dlongley: the second definition of `\"data\"` operates on a completely empty slate, ie, the content of `\"ex:data\"` can be anything the user wants except that the user _cannot_ change the URL of the `\"data\"` term itself.\r\n\r\nDoes this make sense?\r\n\r\n---\r\n\r\n(I guess this is a bit related to #20 as well, adding a cross reference...)" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/456399183> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/108#issuecomment-456399183"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/108> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/456399183> .
<https://api.github.com/users/pchampin> <http://schema.org/accountId> "pchampin" .
<https://api.github.com/users/pchampin> <http://schema.org/image> "https://avatars1.githubusercontent.com/u/304612?v=4" .
<https://api.github.com/users/pchampin> <http://schema.org/url> "https://github.com/pchampin"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/pchampin> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/456399183> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/456399183> <http://schema.org/startDate> "2019-01-22T13:29:13Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/456399183> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/456399183> <http://schema.org/description> "@gkellogg wrote:\r\n> IMO, sealing a context for which you have no control can lead to problems, as it may change out from underneath you in the future\r\n\r\nThis can be mitigated if you *also* use SRI... That being said, I'm also uncomfortable with caller-side sealing, even though @iherman 's use-case seems very valid." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/456404663> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/117#issuecomment-456404663"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/117> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/456404663> .
<https://api.github.com/users/pchampin> <http://schema.org/accountId> "pchampin" .
<https://api.github.com/users/pchampin> <http://schema.org/image> "https://avatars1.githubusercontent.com/u/304612?v=4" .
<https://api.github.com/users/pchampin> <http://schema.org/url> "https://github.com/pchampin"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/pchampin> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/456404663> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/456404663> <http://schema.org/startDate> "2019-01-22T13:47:19Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/456404663> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/456404663> <http://schema.org/description> "The difference is not in the values of those properties, it is specified in the context, indicated by the `@context` key.\r\n\r\nMore specifically, if you retrieve the context (https://json-ld.org/contexts/person.jsonld), you will see:\r\n\r\n    ...\r\n    \"spouse\": {\r\n        ...\r\n        \"@type\": \"@id\"\r\n    },\r\n    ...\r\n\r\nThis part indicates that the value of `spouse` should be interpreted as a URL (actually, an IRI). Since `Cynthia_Lennon` is clearly not an absolute URL, it is resolved against the base." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/456574893> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/20#issuecomment-456574893"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/20> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/456574893> .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/456574893> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/456574893> <http://schema.org/startDate> "2019-01-22T21:43:29Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/456574893> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/456574893> <http://schema.org/description> "I'm not sure it's an error either, as the top-level `sealed_data` is sealed, and part of what's sealed is hat it introduces a new context. I think it effectively changes the interpretation of `sealed_data` (or whatever else is defined) under the first use of `sealed_data` without unsealing anything.\r\n\r\nThe only thing that unseals is to have a scoped context include `null`, so for example:\r\n\r\n```json\r\n{\r\n   \"@context\": {\r\n       \"sealed_data\": {\r\n           \"@id\": \"rdf:value\",\r\n           \"@sealed\": true,\r\n           \"@context\": [null, {\"sealed_data\": \"eg:data\"}]\r\n       }\r\n   }\r\n}\r\n```\r\n\r\nboth unseals and introduces a new term definition. (altho, `eg` cannot then be defined as a term, so would look like an IRI scheme`)." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/456576874> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/98#issuecomment-456576874"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/98> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/456576874> .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/456576874> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/456576874> <http://schema.org/startDate> "2019-01-22T21:50:17Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/456576874> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/456576874> <http://schema.org/description> "Other than for the potential for a scoped context within a sealed context which can unseal the context underneath the term, scoped contexts should always be thought of as a short-hand for simply defining the scoped context embedded inline. So for example, @dlongley's original example is equivalent to the following:\r\n\r\n```json\r\n{\r\n  \"@context\": {\r\n    \"@version\": 1.1,\r\n    \"someTermToClear\": \"ex:someTermToClear\",\r\n    \"record\": {\"@id\": \"ex:record\", \"@container\": \"@graph\"}\r\n  },\r\n  \"someTermToClear\": \"should be defined here\",\r\n  \"record\": {\r\n    \"@context\": [null, {\"someOtherStuff\": \"ex:someOtherStuff\"}],\r\n    \"@id\": \"ex:someId\",\r\n    \"someOtherStuff\": \"this should be defined here\",\r\n    \"someTermToClear\": \"this should NOT be defined here\"\r\n  }\r\n}\r\n```\r\n\r\nIn the proposed change in https://github.com/w3c/json-ld-syntax/issues/20#issuecomment-455640995, only a scoped context definition within a sealed context/term can be used to unseal that context by setting it to `null`. You can't do the same thing outside of a term definition.\r\n" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/456578331> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/20#issuecomment-456578331"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/20> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/456578331> .
<https://api.github.com/users/dlongley> <http://schema.org/accountId> "dlongley" .
<https://api.github.com/users/dlongley> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/168137?v=4" .
<https://api.github.com/users/dlongley> <http://schema.org/url> "https://github.com/dlongley"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/dlongley> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/456578331> <http://schema.org/creator> <https://api.github.com/users/dlongley> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/456578331> <http://schema.org/startDate> "2019-01-22T21:55:17Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/456578331> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/456578331> <http://schema.org/description> "> I'm not sure it's an error either, as the top-level sealed_data is sealed, and part of what's sealed is hat it introduces a new context. I think it effectively changes the interpretation of sealed_data (or whatever else is defined) under the first use of sealed_data without unsealing anything.\r\n\r\nYes, this was my interpretation as well. And it seems like it enables more use cases. The scoped context is part of the sealed definition and it isn't `null` (which would unseal it). Whatever is in that `@context` applies even if it means providing a scoped term definition for the same term." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/456700594> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/117#issuecomment-456700594"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/117> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/456700594> .
<https://api.github.com/users/markwilkinson> <http://schema.org/accountId> "markwilkinson" .
<https://api.github.com/users/markwilkinson> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/986414?v=4" .
<https://api.github.com/users/markwilkinson> <http://schema.org/url> "https://github.com/markwilkinson"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/markwilkinson> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/456700594> <http://schema.org/creator> <https://api.github.com/users/markwilkinson> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/456700594> <http://schema.org/startDate> "2019-01-23T07:38:55Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/456700594> <http://example.com/ns#authorAssociation> "NONE" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/456700594> <http://schema.org/description> "I see.  So @context behaves like a schema, and **must** be resolved and interpreted.\r\n\r\nGot it.  Thanks!\r\n" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/456704251> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/117#issuecomment-456704251"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/117> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/456704251> .
<https://api.github.com/users/pchampin> <http://schema.org/accountId> "pchampin" .
<https://api.github.com/users/pchampin> <http://schema.org/image> "https://avatars1.githubusercontent.com/u/304612?v=4" .
<https://api.github.com/users/pchampin> <http://schema.org/url> "https://github.com/pchampin"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/pchampin> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/456704251> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/456704251> <http://schema.org/startDate> "2019-01-23T07:55:04Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/456704251> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/456704251> <http://schema.org/description> "Actually, JSON-LD is designed to allow two \"modes\" of use.\r\n\r\n* When used as \"good old-fashionned JSON\", the *developer* must have additional knowledge about the schema (and know, for example, that `spouse` contains a URL, while `name` contains a plain string). In this case they can ignore the `@context` (or consider it as an opaque \"tag\" confirming that the data is supposed to comply with the expected schema).\r\n* When used as linked data, *i.e.* self-contained machine-understandable, the `@context` provides the additional knowledge that the machine needs to have to unambiguously interpret the data.\r\n\r\nPS: is it ok for you to close the issue?\r\nObviously, the intention is that both ways ultimately produce the same information, so the machine-readable context should provide the same information as the developer-readable documentation of the format..." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/456705406> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/117#issuecomment-456705406"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/117> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/456705406> .
<https://api.github.com/users/markwilkinson> <http://schema.org/accountId> "markwilkinson" .
<https://api.github.com/users/markwilkinson> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/986414?v=4" .
<https://api.github.com/users/markwilkinson> <http://schema.org/url> "https://github.com/markwilkinson"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/markwilkinson> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/456705406> <http://schema.org/creator> <https://api.github.com/users/markwilkinson> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/456705406> <http://schema.org/startDate> "2019-01-23T08:00:00Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/456705406> <http://example.com/ns#authorAssociation> "NONE" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/456705406> <http://schema.org/description> "Understood.  Thanks!\r\n" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/457028351> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/20#issuecomment-457028351"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/20> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/457028351> .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/457028351> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/457028351> <http://schema.org/startDate> "2019-01-24T01:13:21Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/457028351> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/457028351> <http://schema.org/description> "Interesting corner case: what if two sealed contexts are used, and a term in one of them contains a scoped context which includes `null`. It probably shouldn't be able to remove all contexts, so this would just be ignored. For example:\r\n\r\n```js\r\n{\r\n  \"@context\": [\r\n    {\"term1\": {\"@id\": \"http://example.com/term1\", \"@sealed\": true}},\r\n    {\"term2\": {\"@id\": \"http://example.com/term2\", \"@sealed\": true, {\"@context\": null}}\r\n  ],\r\n  \"term2\": {\r\n    \"term1\": \"This should still evaluate to http://example.com/term1\",\r\n    \"term2\": \"This may still evaluate to http://example.com/term2 if the @context: null above was ignored\"\r\n  }\r\n}\r\n```\r\n\r\nThe problem is, how to detect this? The simplest implementation is to seal terms when they include `@sealed` or their contexts includes `@sealed` and prevent (with a warning) any attempt to change it later. When setting a new context, we can prohibit this if the active context contains any sealed terms, unless setting it to `null` (or something starting with `null`) if it comes from a scoped context of a sealed term. I'm not sure how to do this when multiple contexts are involved." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/457064401> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/20#issuecomment-457064401"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/20> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/457064401> .
<https://api.github.com/users/azaroth42> <http://schema.org/accountId> "azaroth42" .
<https://api.github.com/users/azaroth42> <http://schema.org/image> "https://avatars3.githubusercontent.com/u/871868?v=4" .
<https://api.github.com/users/azaroth42> <http://schema.org/url> "https://github.com/azaroth42"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/azaroth42> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/457064401> <http://schema.org/creator> <https://api.github.com/users/azaroth42> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/457064401> <http://schema.org/startDate> "2019-01-24T04:38:00Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/457064401> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/457064401> <http://schema.org/description> "I'd like to iron out the cases that do NOT have @context:null first. Then we can look at unsetting.\r\n\r\nFor the processing, is the sealing before or after processing scoped contexts?\r\nIf it's after, then the `sealed_data` example works (in my head) as expected by @dlongley and @gkellogg. If it happens before then it works (in my head) as expected by myself and @iherman. Is this the correct reasoning?\r\n" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/457118857> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/20#issuecomment-457118857"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/20> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/457118857> .
<https://api.github.com/users/pchampin> <http://schema.org/accountId> "pchampin" .
<https://api.github.com/users/pchampin> <http://schema.org/image> "https://avatars1.githubusercontent.com/u/304612?v=4" .
<https://api.github.com/users/pchampin> <http://schema.org/url> "https://github.com/pchampin"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/pchampin> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/457118857> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/457118857> <http://schema.org/startDate> "2019-01-24T09:01:14Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/457118857> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/457118857> <http://schema.org/description> "I'm not sure I would express this in terms of \"before / after\", but I agree with @gkellogg 's argument: \"the top-level `sealed_data` is sealed, and part of what's sealed is that it introduces a new context\"." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/457155105> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/20#issuecomment-457155105"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/20> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/457155105> .
<https://api.github.com/users/iherman> <http://schema.org/accountId> "iherman" .
<https://api.github.com/users/iherman> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/520723?v=4" .
<https://api.github.com/users/iherman> <http://schema.org/url> "https://github.com/iherman"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/iherman> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/457155105> <http://schema.org/creator> <https://api.github.com/users/iherman> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/457155105> <http://schema.org/startDate> "2019-01-24T10:54:32Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/457155105> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/457155105> <http://schema.org/description> "@azaroth42 you will have to explain this a bit... you mean whether sealing happens _before_ or _after_ the setting of the `@id` is done (in our example)?" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/457254548> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/20#issuecomment-457254548"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/20> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/457254548> .
<https://api.github.com/users/azaroth42> <http://schema.org/accountId> "azaroth42" .
<https://api.github.com/users/azaroth42> <http://schema.org/image> "https://avatars3.githubusercontent.com/u/871868?v=4" .
<https://api.github.com/users/azaroth42> <http://schema.org/url> "https://github.com/azaroth42"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/azaroth42> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/457254548> <http://schema.org/creator> <https://api.github.com/users/azaroth42> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/457254548> <http://schema.org/startDate> "2019-01-24T16:10:28Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/457254548> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/457254548> <http://schema.org/description> "When a processor encounters the term definition, it has a choice of whether to process `@sealed` first or `@context` first.  If it processes `@context` first, then it descends into the scoped context and processes the terms there (which might in turn have scoped contexts, and sealing) before processing the sealing.\r\n\r\nIn the example, my understanding is thus that `sealed_data` at the top level would not be sealed if `@context` is processed before `@sealed`. \r\n" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/457282732> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/20#issuecomment-457282732"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/20> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/457282732> .
<https://api.github.com/users/pchampin> <http://schema.org/accountId> "pchampin" .
<https://api.github.com/users/pchampin> <http://schema.org/image> "https://avatars1.githubusercontent.com/u/304612?v=4" .
<https://api.github.com/users/pchampin> <http://schema.org/url> "https://github.com/pchampin"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/pchampin> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/457282732> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/457282732> <http://schema.org/startDate> "2019-01-24T17:24:28Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/457282732> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/457282732> <http://schema.org/description> "Sorry, this is still very abstract for me. I went back to the [expansion algorithm] in the current draft.\r\n\r\n* Step 6 is about merging an embedded context; my understanding is that it should failed if the *active property* is sealed.\r\n\r\n* Step 9.5 is about merging a scoped context from the term definition, when traversing a property. This one should, I think, succeed even if the traversed property is sealed. Indeed, the scoped context comes from the term definition itself, which is also where the sealing comes from. So, to rephrase @gkellogg's comment above, we can trust that scoped context as being part of what was sealed.\r\n\r\n[expansion algorithm]: https://www.w3.org/TR/json-ld11-api/#algorithm-2\r\n\r\nEDITED: I was mistaken on the different steps. Replaced \"Step 7.1\" by \"Step 9.5\" above. I'm actually unsure about how 7.1 should handle this..." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/457376214> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/20#issuecomment-457376214"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/20> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/457376214> .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/457376214> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/457376214> <http://schema.org/startDate> "2019-01-24T22:07:23Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/457376214> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/457376214> <http://schema.org/description> "@azaroth42 asks:\r\n\r\n> For the processing, is the sealing before or after processing scoped contexts?\r\n\r\nAs @pchampin said, I believe the sealing is done in the term definition phase. Any term, sealed or unsealed, may define a scoped context, it's only when it comes into play during expansion that it might come into conflict (warning, not error IMO) if used to redefine a sealed term.\r\n\r\nI have it implement, but not yet tested, and the changes are fairly localized:\r\n\r\n* when parsing a context, if `@sealed` is true, pass it to every call to _Create Term Definition_.\r\n* within _Create Term Definition_, if a term already exists in the active context with the same _term_ (step 6) which is sealed, then issue a warning and return.\r\n* also within _Create Term Definition_, if the term definition has `@sealed` true, or _Create Term Definition_ was called with `@sealed` true, set `@sealed` true on the term definition.\r\n* In the _Context Processing Algorithm_ step 3.1, when setting the context to `null`, skip the step if the active context has any sealed term unless it was invoked from the scoped context coming from a sealed term (about three spots in the _Expansion Algorithm_. (note the hole in the logic I noted in \r\nhttps://github.com/w3c/json-ld-syntax/issues/20#issuecomment-457028351).\r\n\r\nI'll see if I can get spec text and some tests added before tomorrow's call.\r\n" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/457383678> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/20#issuecomment-457383678"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/20> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/457383678> .
<https://api.github.com/users/dlongley> <http://schema.org/accountId> "dlongley" .
<https://api.github.com/users/dlongley> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/168137?v=4" .
<https://api.github.com/users/dlongley> <http://schema.org/url> "https://github.com/dlongley"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/dlongley> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/457383678> <http://schema.org/creator> <https://api.github.com/users/dlongley> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/457383678> <http://schema.org/startDate> "2019-01-24T22:32:36Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/457383678> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/457383678> <http://schema.org/description> "@gkellogg,\r\n\r\n> Interesting corner case: what if two sealed contexts are used, and a term in one of them contains a scoped context which includes null. It probably shouldn't be able to remove all contexts, so this would just be ignored.\r\n\r\nApologies to @azaroth42 for continuing down this path, but in thinking about your corner-case...\r\n\r\nIt seems like, since the original sealed context did not define `term2` at all, there would be no expectation for what might appear underneath that term. Using sealed contexts is primarily (exclusively?) tied to making JSON-LD more compatible with JSON-only processors that rely on tree structures. This means that no such software that is relying on the first sealed context would ever traverse into `term2` (as it is not defined). So `term2` should be free to clear what is underneath it.\r\n\r\nIt may be that specifying a scoped context of `@context: null` should always be acceptable in new term definitions. If `term2` were not new (i.e. it was defined and sealed by the first context), then its definition would be ignored as expected." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/457409851> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/20#issuecomment-457409851"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/20> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/457409851> .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/457409851> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/457409851> <http://schema.org/startDate> "2019-01-25T00:27:13Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/457409851> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/457409851> <http://schema.org/description> "@dlongley said:\r\n\r\n> This means that no such software that is relying on the first sealed context would ever traverse into `term2` (as it is not defined). So `term2` should be free to clear what is underneath it.\r\n\r\nThe implication is that, when traversing into an unsealed term, the active context is cloned and all term definitions are unsealed. This could work, but it seems it will have a potentially big impact on memory and performance. Perhaps there's away to parameterize the expansion algorithm invocation, to cause all every subsequent attempt to update the context to look like it came from a sealed term.\r\n\r\n> It may be that specifying a scoped context of `@context: null`\r\n\r\nThat would fall out of the previous logic, as we don't actually check for setting the context until expanding." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/457531185> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/20#issuecomment-457531185"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/20> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/457531185> .
<https://api.github.com/users/iherman> <http://schema.org/accountId> "iherman" .
<https://api.github.com/users/iherman> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/520723?v=4" .
<https://api.github.com/users/iherman> <http://schema.org/url> "https://github.com/iherman"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/iherman> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/457531185> <http://schema.org/creator> <https://api.github.com/users/iherman> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/457531185> <http://schema.org/startDate> "2019-01-25T10:39:14Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/457531185> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/457531185> <http://schema.org/description> "Just for my understanding:\r\n\r\n```json\r\n{\r\n   \"@context\": {\r\n       \"sealed_data\": {\r\n           \"@id\": \"rdf:value\",\r\n           \"@sealed\": true,\r\n           \"@context\": {\r\n               \"sealed_data\": \"eg:data\"\r\n           }\r\n       }\r\n   },\r\n   \"sealed_data\" {\r\n       ...\r\n       \"sealed_data\" {\r\n           ...\r\n       }\r\n   }\r\n}\r\n```\r\n\r\nthe first appearance of `\"sealed_data\"` (on the top level) would expand into `\"rdf:value\"` while the second appearance would become `\"eg:data\"`. Actually, I presume this is unrelated to sealing: this would be valid without `\"@sealed\"`, too.\r\n\r\nHowever\r\n\r\n```json\r\n{\r\n   \"@context\": [{\r\n       \"sealed_data\": {\r\n           \"@id\": \"rdf:value\",\r\n           \"@sealed\": true,\r\n           \"@context\": {\r\n               \"sealed_data\": \"eg:data\"\r\n           }\r\n       }\r\n   }, {\r\n       \"sealed_data\" : {\r\n           \"@id\" : \"eg:something_else\"\r\n       }\r\n   }]\r\n}\r\n```\r\n\r\nwould be an error, because the sealing is switched on after all the embedded contexts are processed. \r\n\r\nIs this correct?\r\n\r\n" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/457599005> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/20#issuecomment-457599005"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/20> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/457599005> .
<https://api.github.com/users/dlongley> <http://schema.org/accountId> "dlongley" .
<https://api.github.com/users/dlongley> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/168137?v=4" .
<https://api.github.com/users/dlongley> <http://schema.org/url> "https://github.com/dlongley"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/dlongley> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/457599005> <http://schema.org/creator> <https://api.github.com/users/dlongley> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/457599005> <http://schema.org/startDate> "2019-01-25T14:57:42Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/457599005> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/457599005> <http://schema.org/description> "In thinking more about your \"corner-case\", @gkellogg, I think it helps highlight more about what we're trying to do with this feature.\r\n\r\nThis new `sealed` feature is intended to enable processor-enforcement of fixed semantics in JSON(-LD) of the sort typically only described in specifications. Specifications that use JSON and intend to allow for extensibility describe a set of terms with fixed semantics that must not change unless:\r\n\r\n1. The spec describes that they have different semantics when they appear at a different nesting level in the JSON tree, i.e. a term definition changes in a specified way based on a different \"scope\". For example:\r\n\r\n```js\r\n{\r\n  \"sealed1\": {\r\n    \"sealed2\": {\r\n      \"sealed1\": \"this sealed1 has a new meaning\"\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nThis is what @iherman's [example](https://github.com/w3c/json-ld-syntax/issues/20#issuecomment-457531185) is about above.\r\n\r\n2. The spec indicates that an extension term (a term to be described by another specification or an application-specific term) may appear in the JSON structure and it may have any terms with any definitions underneath it, aka \"scoped within it\".\r\n\r\nCommon patterns for extensibility here include:\r\n\r\n1. Calling out a specific term (that is defined in the core spec) underneath which any new terms may be defined:\r\n\r\n```js\r\n{\r\n  \"sealed1\": \"foo\",\r\n  \"sealed2\": {\r\n    \"sealed3\": \"bar\"\r\n  },\r\n  \"sealed4WhereExtensionsGo\": { /* anything */ }\r\n}\r\n```\r\n\r\nThis is the sort of pattern for which defining a specific `@sealed` term with a scoped `@context: null` would apply.\r\n\r\n\r\n2.  Or allowing any new term (that is not mentioned at all in the core spec) to provide its own definition and, optionally, define its own scoped context:\r\n\r\n```js\r\n{\r\n  \"sealed1\": \"foo\",\r\n  \"sealed2\": {\r\n    \"sealed3\": \"bar\",\r\n    \"extension1\": \"baz\",\r\n    \"extension2\": {\r\n      \"extension3\": \"moo\",\r\n      \"extension4\": { /* anything */ }\r\n    }\r\n  },\r\n  \"extension5\": \"woof\",\r\n  \"extension6\": { /* anything */ }\r\n}\r\n```\r\n\r\nThe latter applies to your \"corner-case\", which I don't think is so much in a corner anymore, but rather quite common. ~~This hints that we should treat any previously undefined terms as if they had been specified with a scoped `@context: null` by default.~~ This hints at a rule that terms should \"own\" their own scopes. This means that any new terms (that were previously completely undefined) should be able to define whatever they want in a scoped context. This rule would only apply to nesting, however -- not \"type-based scoping\" because it leads to [this problem](https://github.com/w3c/json-ld-syntax/issues/20#issuecomment-442896360)." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/457599690> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/20#issuecomment-457599690"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/20> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/457599690> .
<https://api.github.com/users/dlongley> <http://schema.org/accountId> "dlongley" .
<https://api.github.com/users/dlongley> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/168137?v=4" .
<https://api.github.com/users/dlongley> <http://schema.org/url> "https://github.com/dlongley"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/dlongley> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/457599690> <http://schema.org/creator> <https://api.github.com/users/dlongley> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/457599690> <http://schema.org/startDate> "2019-01-25T14:59:43Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/457599690> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/457599690> <http://schema.org/description> "@iherman,\r\n\r\n> Is this correct?\r\n\r\nYes, I agree with everything you said above." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/457608230> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/20#issuecomment-457608230"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/20> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/457608230> .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/457608230> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/457608230> <http://schema.org/startDate> "2019-01-25T15:24:17Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/457608230> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/457608230> <http://schema.org/description> "@iherman i believe both cases work the same; not, “errors”, per se, but perhaps a warning, and processing is aborted. As written, the only way to redefine a sealer term is to clear out the context. In your first example, the scoped context is handled during expansion and looks like an attempt to redefine the term, so is ignored. The second case does the same, but not during the expansion process." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/457610565> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/20#issuecomment-457610565"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/20> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/457610565> .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/457610565> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/457610565> <http://schema.org/startDate> "2019-01-25T15:30:34Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/457610565> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/457610565> <http://schema.org/description> "@dlongley to treat undefined terms (or unsealed defined terms?) as if the context is wiped out underneathwout be a major departure from current behavior, and would yield unexpected results. I would say, instead, as we discussed earlier, that under properties that are. It sealed, previously sealed terms are effectively unsealed, but their definitions remain, including any scoped contexts that may define sealed terms." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/457611328> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/20#issuecomment-457611328"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/20> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/457611328> .
<https://api.github.com/users/iherman> <http://schema.org/accountId> "iherman" .
<https://api.github.com/users/iherman> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/520723?v=4" .
<https://api.github.com/users/iherman> <http://schema.org/url> "https://github.com/iherman"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/iherman> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/457611328> <http://schema.org/creator> <https://api.github.com/users/iherman> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/457611328> <http://schema.org/startDate> "2019-01-25T15:32:48Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/457611328> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/457611328> <http://schema.org/description> "Do I detect a contradiction between the answer of @dlongley and @gkellogg here?\r\n\r\n@dlongley agreed with what I said. Ie, just to make it clear, this means\r\n\r\n```json\r\n{\r\n   \"@context\": {\r\n       \"sealed_data\": {\r\n           \"@id\": \"rdf:value\",\r\n           \"@sealed\": true,\r\n           \"@context\": {\r\n               \"sealed_data\": \"eg:data\"\r\n           }\r\n       }\r\n   },\r\n   \"sealed_data\" {\r\n       ...\r\n       \"sealed_data\" {\r\n           ...\r\n       }\r\n   }\r\n}\r\n```\r\n\r\nis fine. However, @gkellogg seems to say this is an error/warning. Which is it? Or more exactly, how should our spec go, ie, should this be correct or not correct?\r\n\r\n\r\n\r\n" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/457613239> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/20#issuecomment-457613239"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/20> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/457613239> .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/457613239> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/457613239> <http://schema.org/startDate> "2019-01-25T15:38:11Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/457613239> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/457613239> <http://schema.org/description> "I created test cases and spec text based on my understanding of our discussions that the only way to redefine a term is to clear out the context, something that can only be done from a scoped context within a sealed term.\r\n\r\nNote that scoped contexts are not processed when they are defined, but when they are encountered during expansion, as if they had been specified inline.\r\n\r\nIf we want to do something different, we could say that scoped contexts coming from sealed terms can redefine sealed terms, but IIRC, we hadn’t discussed that." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/457616139> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/20#issuecomment-457616139"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/20> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/457616139> .
<https://api.github.com/users/iherman> <http://schema.org/accountId> "iherman" .
<https://api.github.com/users/iherman> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/520723?v=4" .
<https://api.github.com/users/iherman> <http://schema.org/url> "https://github.com/iherman"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/iherman> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/457616139> <http://schema.org/creator> <https://api.github.com/users/iherman> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/457616139> <http://schema.org/startDate> "2019-01-25T15:46:41Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/457616139> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/457616139> <http://schema.org/description> "Sorry to be a drag, @gkellogg, but it is very difficult to understand the spec text as included in the API. Would it be possible to have a draft that would appear in the syntax document (that is what an end-user, like your truly, would read...) " .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/457616158> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/20#issuecomment-457616158"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/20> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/457616158> .
<https://api.github.com/users/dlongley> <http://schema.org/accountId> "dlongley" .
<https://api.github.com/users/dlongley> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/168137?v=4" .
<https://api.github.com/users/dlongley> <http://schema.org/url> "https://github.com/dlongley"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/dlongley> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/457616158> <http://schema.org/creator> <https://api.github.com/users/dlongley> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/457616158> <http://schema.org/startDate> "2019-01-25T15:46:46Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/457616158> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/457616158> <http://schema.org/description> "@gkellogg,\r\n\r\n> ...to treat undefined terms (or unsealed defined terms?) as if the context is wiped out underneathwout be a major departure from current behavior, and would yield unexpected results.\r\n\r\nHmm, I didn't mean to suggest that. So I shouldn't have said we'd treat them as if the scoped context was `@context: null` by default. Rather, what I meant by that was that a new term should be able to redefine whatever it wants via a scoped context. The rule I think I'm suggesting is that terms always \"own\" their own *nested* scopes. This rule would only apply to nesting, however -- not \"type-based scoping\" because it leads to [this problem](https://github.com/w3c/json-ld-syntax/issues/20#issuecomment-442896360)." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/457636042> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/20#issuecomment-457636042"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/20> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/457636042> .
<https://api.github.com/users/dlongley> <http://schema.org/accountId> "dlongley" .
<https://api.github.com/users/dlongley> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/168137?v=4" .
<https://api.github.com/users/dlongley> <http://schema.org/url> "https://github.com/dlongley"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/dlongley> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/457636042> <http://schema.org/creator> <https://api.github.com/users/dlongley> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/457636042> <http://schema.org/startDate> "2019-01-25T16:44:47Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/457636042> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/457636042> <http://schema.org/description> "Perhaps the \"type-scoping\" difference (vs. nesting) I mention above could be remedied by sealing type definitions in a manner similar to what @BigBlueHat did here: https://github.com/w3c/json-ld-syntax/issues/20#issuecomment-454485321" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/457807140> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/116#issuecomment-457807140"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/116> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/457807140> .
<https://api.github.com/users/iherman> <http://schema.org/accountId> "iherman" .
<https://api.github.com/users/iherman> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/520723?v=4" .
<https://api.github.com/users/iherman> <http://schema.org/url> "https://github.com/iherman"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/iherman> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/457807140> <http://schema.org/creator> <https://api.github.com/users/iherman> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/457807140> <http://schema.org/startDate> "2019-01-26T06:34:13Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/457807140> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/457807140> <http://schema.org/description> "This issue was discussed in [a meeting](https://www.w3.org/2018/json-ld-wg/Meetings/Minutes/2019/2019-01-25-json-ld#section3).\r\n\r\n- `ACTION:  Pierre-Antoine Champin to write spec text of his mental model`\r\n<details><summary><i class=\"differentiate\">View the transcript</i></summary>\r\n3. Sealed Context Issues<br/>\r\nBenjamin Young: link: <a href=\"https://github.com/w3c/json-ld-syntax/issues/116\">https://github.com/w3c/json-ld-syntax/issues/116</a><br/>\r\nBenjamin Young: Our first set of issues is the new ones that have been filed since we last spoke.<br/>\r\nBenjamin Young: Rob, you filed if you want to summarize.<br/>\r\nRob Sanderson: Last week we discussed the notion of partially defining rather than redefining completely. If there were two contexts, one that defined that the @id was playground and another term just added a scoped @context and didn’t repeat @id — this came from the sealing discussion — then you’re only sealing the aspects that are defined by the original context rather than sealing all aspects.<br/>\r\nRob Sanderson: The issue provides an example where a scoped context is added without overriding the @id property.<br/>\r\nRob Sanderson: The question is would the sealing algorithm be able to duplicate all of the sealed term definition attributes and then add something else?<br/>\r\nGregg Kellogg: This just seems a completely different thing to sealed contexts to me, it’s term updating. Which I commented on — it’s fraught with all sorts of potential issues. You need enough knowledge about the original term definition to know that what you’re doing make sense … it would be much less ambiguous to just update the term definition. I don’t see enough of a positive (or really any) to make a change like that.<br/>\r\nGregg Kellogg: I would vote against such a feature.<br/>\r\nBenjamin Young: I too have big concerns about changing how these term definitions interact from an overwrite to a merge … where this plays into sealing has to do with sealing a term but not its contents.<br/>\r\nBenjamin Young: There were proposals that were very similar to ivan’s comment on this issue last week that had things like sealed term / etc. and there’s interplay with sealing specifically.<br/>\r\nBenjamin Young: But as Gregg noted this would be a massive change and complicated to reason about.<br/>\r\nBenjamin Young: The case in practice might be more complicated than our examples.<br/>\r\nBenjamin Young: Have to be ready to deal with pain.<br/>\r\nIvan Herman: If we keep to the current version, which I’m not against, just exploring. It seems that many of the things we’ve discussed with sealing become irrelevant because they are impossible.<br/>\r\nRob Sanderson: +1 to Ivan<br/>\r\nIvan Herman: In a way — sealing becomes maybe pretty simple in a sense that if I put a seal on a given term in a context then nobody can ever do anything with that term in another context. If there’s something that could be done that would wipe out a definition, it can’t be done.<br/>\r\nIvan Herman: My mind has began to have problems with various combinations — it’s fine with me, the question is are we ok with that?<br/>\r\nDave Longley: I’m mostly in agreement with gkellogg here<br/>\r\n… I don’t think we want to enable partial redefinitions<br/>\r\n… except for explaining how sealed contexts work<br/>\r\n… I’m in agreement that we should not start specifying partial updates to terms definitions<br/>\r\n… but we should think in the context of sealing<br/>\r\n… so things behave as developers expect<br/>\r\nGregg Kellogg: As Dave was saying, I think this has to do with where sealing applies. You could potentially use a term/redefine it under a property which was not sealed. The ability to do that might make a lot of the worries about the ability to get into sealed contexts be not as important.<br/>\r\nIvan Herman: Can you explain that?<br/>\r\nGregg Kellogg: The concept is that once you’re inside of a scope you’re outside of the domain of sealing.<br/>\r\nRob Sanderson: What parts of a term definition are sealed?<br/>\r\nGregg Kellogg: The entire definition is sealed. When you are going to create a term definition, there’s currently a step to handle this.<br/>\r\nRob Sanderson: So <a href=\"https://github.com/w3c/json-ld-syntax/issues/20#issuecomment-456045025\">https://github.com/w3c/json-ld-syntax/issues/20#issuecomment-456045025</a> /is/ an error?<br/>\r\nGregg Kellogg: Currently a new term definition will remove an old one — and that’s just blocked by sealing.<br/>\r\nGregg Kellogg: There is no mechanism and there never has been one to reach into a term definition and replace it.<br/>\r\nRob Sanderson: So then, if you have a scoped context that tries to redefine a sealed term…<br/>\r\nGregg Kellogg: I commented on that on a comment earlier this morning, my understanding from last week, it would be ignored — an attempt to change it would be ignored. Scoped contexts aren’t magic, they are just specified as part of a term and introduced in the expansion phase as if they are inline.<br/>\r\nBenjamin Young: That last little bit was clearer, thanks.<br/>\r\n… I’m thinking that to even explain this to an informed JSON-LD developer is going to take use cases an flow charts of some kind.<br/>\r\n… To say this is how it works and once you add sealed this is how it changes, etc.<br/>\r\nBenjamin Young: Any time someone feels like they are reaching an understanding for how this may work and has paper, etc. that would help.<br/>\r\nDave Longley: <a href=\"https://github.com/w3c/json-ld-syntax/issues/20#issuecomment-457599005\">https://github.com/w3c/json-ld-syntax/issues/20#issuecomment-457599005</a><br/>\r\nDave Longley: now seems like a good enough time to bring up issue 20<br/>\r\n… this is an attempt to explain how this is meant to work<br/>\r\n… the focus is specifications which have JSON in them<br/>\r\n… which have fixed semantics for fixed terms<br/>\r\n… but that also have extension points<br/>\r\n… folks who write JSON specs express these things in relation to the tree<br/>\r\n… but there’s no consistent way to enforce these things<br/>\r\n… and that’s where bringing in a JSON-LD processor could help<br/>\r\n… the first example I give is a spec which has different semantics based on the nesting within the tree<br/>\r\n… where the meaning of the term changes based on where it appears<br/>\r\n… so, creating a term definition for that would be creating a sealed term with its own context<br/>\r\n… the other example is about explaining where extensions go<br/>\r\n… this term has this id/definition, but within that term you can put whatever you want in there<br/>\r\n… the other pattern is, here are all our terms, they’re all sealed, but anything inside those terms can be whatever you want them to be<br/>\r\n… we need to think about how this applies to type scoping as well<br/>\r\n… I think we can handle all of these<br/>\r\n… but I do think it would help to think about these features in terms of how people write JSON<br/>\r\n… and how they want to extend JSON-based documents<br/>\r\n… and how we can best express those extension points and semantics<br/>\r\nIvan Herman: Actually, two things, because one just came up what Dave was saying. Before that, forget about sealing for a moment. Let’s go back to the fundamental issue that Gregg raised about partial definitions. Let’s suppose that I have one context which defines something for a term.<br/>\r\n… I have another one coming after that, for the same term, the only thing I do is add the scoped context. Based on what Gregg said, the second appearance in the second context would completely wipe out what was in the first one.<br/>\r\nGregg Kellogg: That’s the behavior today.<br/>\r\nIvan Herman: I have to figure out how that works with sealed, that bothers me.<br/>\r\n… I wonder if we would be better off with trying to concentrate on that we need these extensions points and define them explicitly and have a way to say — in this term it’s a clean slate — instead of going to sealed with its semantics raises other issues.<br/>\r\nRob Sanderson: +1 to Ivan - that seems like the comprehensible compromise.<br/>\r\nIvan Herman: It came by when you were talking that we can simplify on some of the use cases and we seem to be down the road in generalizing that and it may be one of the problems we may have.<br/>\r\nPierre-Antoine Champin: One thing I wanted to mention because Dave mentioned it as well. For the moment I have a hard time wrapping around how typed-scoping interacts with sealed contexts. Apart from that I think I have a clear view of what Dave is trying to achieve with that.<br/>\r\n… So I will try to help and share with my intuitions. Couldn’t we talk about the scope of the sealing — my idea is that whenever a sealed context becomes active, simple case is at the root of the JSON object, we will honor this seal by preventing redefinitions of the sealed terms whenever we traverse them.<br/>\r\n… Whenever we traverse a term that isn’t part of the sealed then we do not honor any more.<br/>\r\nDave Longley: +1 that sounds pretty good so far (have to think about it more)<br/>\r\nGregg Kellogg: +1 that is what I was trying to describe<br/>\r\nPierre-Antoine Champin: The idea here would be that be that sealed contexts work like regular JSON and once you traverse terms that are “extensions” then fall into regular (old style/non-sealed) JSON-LD processing.<br/>\r\nGregg Kellogg: That’s basically what I was trying to relay. Sealing only applies for immediate values of the terms that are sealed. So if you have “sealed1” and its value is “object” then “sealed1” and all other sealed terms remain sealed and I would think that’s the case with a sealed type as well.<br/>\r\n… If you introduce a new term that is not sealed and that represents an extension point and sealing does not apply. I think where Dave and I might have different understanding there…<br/>\r\n… When you say that the scoped context is null you have to establish whatever context you want from that point. The other is that the context and all the terms remain in scope, they just are no longer sealed at that point.<br/>\r\n… People tend to put all of their stuff at the top to use scoping and it helps with framing, etc.<br/>\r\nGregg Kellogg: I think that this will be closer to existing behavior.<br/>\r\nDave Longley: azaroth talks about an example I can’t scribe :)<br/>\r\nRob Sanderson: I also like pchampin’s suggestion<br/>\r\n… I think type-based sealed contexts will run into issues regardless<br/>\r\n… if you have in the first context agent as foaf:agent<br/>\r\n… and in a second you have schema:producer which is not sealed<br/>\r\n… but within schema:producer the agent term would no longer be sealed, correct?<br/>\r\n… so it seems like type-based mechanisms, the sealing is irrelevant<br/>\r\nGregg Kellogg: well. I think it’s the same<br/>\r\n… if you have an object for an unsealed property<br/>\r\n… but that type is sealed<br/>\r\n… then that type introduces sealing<br/>\r\n… whether its a property or a scope, the behavior is whether it happens inline<br/>\r\n… nonetheless after that point you would be in the scope of something being sealed<br/>\r\nIvan Herman: I think that this really needs a f2f meeting<br/>\r\nGregg Kellogg: this seems like an important feature, but it does come with complication…which will decrease adoption<br/>\r\nDavid Newbury: I think I’m agreeing with the complication thing<br/>\r\nDave Longley: priority of constituencies applies here, IMO<br/>\r\nDavid Newbury: and wondering if there are ways of reducing the comprehensiveness of this feature<br/>\r\n… can we scope this to say that it does not apply in scoped contexts etc?<br/>\r\n… just at the top as a master-list?<br/>\r\n… does that meet our use cases?<br/>\r\n… are there ways to meet the use cases around this, but by reducing the various ways we use contexts?<br/>\r\nDave Longley: a couple points to make. first, pchampin’s point is really important<br/>\r\n… I think it would help both explain it and how we implement it<br/>\r\n… processors will start at the top of the document and work their way down<br/>\r\n… if it’s something they don’t understand, they’ll be ignored<br/>\r\n… anytime there’s a new thing defined, you’re introducing a new processing model<br/>\r\n… the point of the feature is to lock in the terms that were originally meant to be sealed<br/>\r\n… if you get outside of that space, then you could go back to the old processing model<br/>\r\n… the other point I wanted to make is a priority of constituents that we need to take into account<br/>\r\n… this is an extremely important feature for JSON developers<br/>\r\n… as it improves the ergonomics for end users<br/>\r\n… my last point was that there seems to be a lot of miscommunication that we seem to have resolved on this call<br/>\r\n… I’m more in agreement with gkellogg than we probably first thought<br/>\r\n… working them out on github seems better than talking them out at this point<br/>\r\nPierre-Antoine Champin: with the goal of keeping things simple<br/>\r\n… my mental model works well in two scenarios<br/>\r\n… I’m concerned about sealed contexts containing terms which are not sealed<br/>\r\n… and I think only one context should be sealed at any point in the tree<br/>\r\n… and that introduces a lot of complexity<br/>\r\n… and the corner cases don’t seem like driving reasons to support that<br/>\r\n… last point, under those conditions, the typed scoping behaves quite well<br/>\r\nIvan Herman: we should write all this down in spec text<br/>\r\nPierre-Antoine Champin: that’s my plan<br/>\r\nDave Longley: i think we’re actually making good progress, despite how it may appear :)<br/>\r\nRob Sanderson: I agree we’re making progress. It’s complicated :)<br/>\r\nIvan Herman: test cases are good, but some explanation would also be helpful<br/>\r\nPierre-Antoine Champin: please put the action for me to do that<br/>\r\nRob Sanderson: we’re at the top of the hour, but I do think we’ve made great progress<br/>\r\nAction #2: Pierre-Antoine Champin to write spec text of his mental model<br/>\r\nRob Sanderson: and I do think we’ll be helped by having a whiteboard<br/>\r\n… we’ll talk again next week!<br/>\r\n</details>" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/457807159> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/20#issuecomment-457807159"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/20> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/457807159> .
<https://api.github.com/users/iherman> <http://schema.org/accountId> "iherman" .
<https://api.github.com/users/iherman> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/520723?v=4" .
<https://api.github.com/users/iherman> <http://schema.org/url> "https://github.com/iherman"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/iherman> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/457807159> <http://schema.org/creator> <https://api.github.com/users/iherman> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/457807159> <http://schema.org/startDate> "2019-01-26T06:34:37Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/457807159> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/457807159> <http://schema.org/description> "This issue was discussed in [a meeting](https://www.w3.org/2018/json-ld-wg/Meetings/Minutes/2019/2019-01-25-json-ld#section3).\r\n\r\n- `ACTION:  Pierre-Antoine Champin to write spec text of his mental model`\r\n<details><summary><i class=\"differentiate\">View the transcript</i></summary>\r\n3. Sealed Context Issues<br/>\r\nBenjamin Young: link: <a href=\"https://github.com/w3c/json-ld-syntax/issues/116\">https://github.com/w3c/json-ld-syntax/issues/116</a><br/>\r\nBenjamin Young: Our first set of issues is the new ones that have been filed since we last spoke.<br/>\r\nBenjamin Young: Rob, you filed if you want to summarize.<br/>\r\nRob Sanderson: Last week we discussed the notion of partially defining rather than redefining completely. If there were two contexts, one that defined that the @id was playground and another term just added a scoped @context and didn’t repeat @id — this came from the sealing discussion — then you’re only sealing the aspects that are defined by the original context rather than sealing all aspects.<br/>\r\nRob Sanderson: The issue provides an example where a scoped context is added without overriding the @id property.<br/>\r\nRob Sanderson: The question is would the sealing algorithm be able to duplicate all of the sealed term definition attributes and then add something else?<br/>\r\nGregg Kellogg: This just seems a completely different thing to sealed contexts to me, it’s term updating. Which I commented on — it’s fraught with all sorts of potential issues. You need enough knowledge about the original term definition to know that what you’re doing make sense … it would be much less ambiguous to just update the term definition. I don’t see enough of a positive (or really any) to make a change like that.<br/>\r\nGregg Kellogg: I would vote against such a feature.<br/>\r\nBenjamin Young: I too have big concerns about changing how these term definitions interact from an overwrite to a merge … where this plays into sealing has to do with sealing a term but not its contents.<br/>\r\nBenjamin Young: There were proposals that were very similar to ivan’s comment on this issue last week that had things like sealed term / etc. and there’s interplay with sealing specifically.<br/>\r\nBenjamin Young: But as Gregg noted this would be a massive change and complicated to reason about.<br/>\r\nBenjamin Young: The case in practice might be more complicated than our examples.<br/>\r\nBenjamin Young: Have to be ready to deal with pain.<br/>\r\nIvan Herman: If we keep to the current version, which I’m not against, just exploring. It seems that many of the things we’ve discussed with sealing become irrelevant because they are impossible.<br/>\r\nRob Sanderson: +1 to Ivan<br/>\r\nIvan Herman: In a way — sealing becomes maybe pretty simple in a sense that if I put a seal on a given term in a context then nobody can ever do anything with that term in another context. If there’s something that could be done that would wipe out a definition, it can’t be done.<br/>\r\nIvan Herman: My mind has began to have problems with various combinations — it’s fine with me, the question is are we ok with that?<br/>\r\nDave Longley: I’m mostly in agreement with gkellogg here<br/>\r\n… I don’t think we want to enable partial redefinitions<br/>\r\n… except for explaining how sealed contexts work<br/>\r\n… I’m in agreement that we should not start specifying partial updates to terms definitions<br/>\r\n… but we should think in the context of sealing<br/>\r\n… so things behave as developers expect<br/>\r\nGregg Kellogg: As Dave was saying, I think this has to do with where sealing applies. You could potentially use a term/redefine it under a property which was not sealed. The ability to do that might make a lot of the worries about the ability to get into sealed contexts be not as important.<br/>\r\nIvan Herman: Can you explain that?<br/>\r\nGregg Kellogg: The concept is that once you’re inside of a scope you’re outside of the domain of sealing.<br/>\r\nRob Sanderson: What parts of a term definition are sealed?<br/>\r\nGregg Kellogg: The entire definition is sealed. When you are going to create a term definition, there’s currently a step to handle this.<br/>\r\nRob Sanderson: So <a href=\"https://github.com/w3c/json-ld-syntax/issues/20#issuecomment-456045025\">https://github.com/w3c/json-ld-syntax/issues/20#issuecomment-456045025</a> /is/ an error?<br/>\r\nGregg Kellogg: Currently a new term definition will remove an old one — and that’s just blocked by sealing.<br/>\r\nGregg Kellogg: There is no mechanism and there never has been one to reach into a term definition and replace it.<br/>\r\nRob Sanderson: So then, if you have a scoped context that tries to redefine a sealed term…<br/>\r\nGregg Kellogg: I commented on that on a comment earlier this morning, my understanding from last week, it would be ignored — an attempt to change it would be ignored. Scoped contexts aren’t magic, they are just specified as part of a term and introduced in the expansion phase as if they are inline.<br/>\r\nBenjamin Young: That last little bit was clearer, thanks.<br/>\r\n… I’m thinking that to even explain this to an informed JSON-LD developer is going to take use cases an flow charts of some kind.<br/>\r\n… To say this is how it works and once you add sealed this is how it changes, etc.<br/>\r\nBenjamin Young: Any time someone feels like they are reaching an understanding for how this may work and has paper, etc. that would help.<br/>\r\nDave Longley: <a href=\"https://github.com/w3c/json-ld-syntax/issues/20#issuecomment-457599005\">https://github.com/w3c/json-ld-syntax/issues/20#issuecomment-457599005</a><br/>\r\nDave Longley: now seems like a good enough time to bring up issue 20<br/>\r\n… this is an attempt to explain how this is meant to work<br/>\r\n… the focus is specifications which have JSON in them<br/>\r\n… which have fixed semantics for fixed terms<br/>\r\n… but that also have extension points<br/>\r\n… folks who write JSON specs express these things in relation to the tree<br/>\r\n… but there’s no consistent way to enforce these things<br/>\r\n… and that’s where bringing in a JSON-LD processor could help<br/>\r\n… the first example I give is a spec which has different semantics based on the nesting within the tree<br/>\r\n… where the meaning of the term changes based on where it appears<br/>\r\n… so, creating a term definition for that would be creating a sealed term with its own context<br/>\r\n… the other example is about explaining where extensions go<br/>\r\n… this term has this id/definition, but within that term you can put whatever you want in there<br/>\r\n… the other pattern is, here are all our terms, they’re all sealed, but anything inside those terms can be whatever you want them to be<br/>\r\n… we need to think about how this applies to type scoping as well<br/>\r\n… I think we can handle all of these<br/>\r\n… but I do think it would help to think about these features in terms of how people write JSON<br/>\r\n… and how they want to extend JSON-based documents<br/>\r\n… and how we can best express those extension points and semantics<br/>\r\nIvan Herman: Actually, two things, because one just came up what Dave was saying. Before that, forget about sealing for a moment. Let’s go back to the fundamental issue that Gregg raised about partial definitions. Let’s suppose that I have one context which defines something for a term.<br/>\r\n… I have another one coming after that, for the same term, the only thing I do is add the scoped context. Based on what Gregg said, the second appearance in the second context would completely wipe out what was in the first one.<br/>\r\nGregg Kellogg: That’s the behavior today.<br/>\r\nIvan Herman: I have to figure out how that works with sealed, that bothers me.<br/>\r\n… I wonder if we would be better off with trying to concentrate on that we need these extensions points and define them explicitly and have a way to say — in this term it’s a clean slate — instead of going to sealed with its semantics raises other issues.<br/>\r\nRob Sanderson: +1 to Ivan - that seems like the comprehensible compromise.<br/>\r\nIvan Herman: It came by when you were talking that we can simplify on some of the use cases and we seem to be down the road in generalizing that and it may be one of the problems we may have.<br/>\r\nPierre-Antoine Champin: One thing I wanted to mention because Dave mentioned it as well. For the moment I have a hard time wrapping around how typed-scoping interacts with sealed contexts. Apart from that I think I have a clear view of what Dave is trying to achieve with that.<br/>\r\n… So I will try to help and share with my intuitions. Couldn’t we talk about the scope of the sealing — my idea is that whenever a sealed context becomes active, simple case is at the root of the JSON object, we will honor this seal by preventing redefinitions of the sealed terms whenever we traverse them.<br/>\r\n… Whenever we traverse a term that isn’t part of the sealed then we do not honor any more.<br/>\r\nDave Longley: +1 that sounds pretty good so far (have to think about it more)<br/>\r\nGregg Kellogg: +1 that is what I was trying to describe<br/>\r\nPierre-Antoine Champin: The idea here would be that be that sealed contexts work like regular JSON and once you traverse terms that are “extensions” then fall into regular (old style/non-sealed) JSON-LD processing.<br/>\r\nGregg Kellogg: That’s basically what I was trying to relay. Sealing only applies for immediate values of the terms that are sealed. So if you have “sealed1” and its value is “object” then “sealed1” and all other sealed terms remain sealed and I would think that’s the case with a sealed type as well.<br/>\r\n… If you introduce a new term that is not sealed and that represents an extension point and sealing does not apply. I think where Dave and I might have different understanding there…<br/>\r\n… When you say that the scoped context is null you have to establish whatever context you want from that point. The other is that the context and all the terms remain in scope, they just are no longer sealed at that point.<br/>\r\n… People tend to put all of their stuff at the top to use scoping and it helps with framing, etc.<br/>\r\nGregg Kellogg: I think that this will be closer to existing behavior.<br/>\r\nDave Longley: azaroth talks about an example I can’t scribe :)<br/>\r\nRob Sanderson: I also like pchampin’s suggestion<br/>\r\n… I think type-based sealed contexts will run into issues regardless<br/>\r\n… if you have in the first context agent as foaf:agent<br/>\r\n… and in a second you have schema:producer which is not sealed<br/>\r\n… but within schema:producer the agent term would no longer be sealed, correct?<br/>\r\n… so it seems like type-based mechanisms, the sealing is irrelevant<br/>\r\nGregg Kellogg: well. I think it’s the same<br/>\r\n… if you have an object for an unsealed property<br/>\r\n… but that type is sealed<br/>\r\n… then that type introduces sealing<br/>\r\n… whether its a property or a scope, the behavior is whether it happens inline<br/>\r\n… nonetheless after that point you would be in the scope of something being sealed<br/>\r\nIvan Herman: I think that this really needs a f2f meeting<br/>\r\nGregg Kellogg: this seems like an important feature, but it does come with complication…which will decrease adoption<br/>\r\nDavid Newbury: I think I’m agreeing with the complication thing<br/>\r\nDave Longley: priority of constituencies applies here, IMO<br/>\r\nDavid Newbury: and wondering if there are ways of reducing the comprehensiveness of this feature<br/>\r\n… can we scope this to say that it does not apply in scoped contexts etc?<br/>\r\n… just at the top as a master-list?<br/>\r\n… does that meet our use cases?<br/>\r\n… are there ways to meet the use cases around this, but by reducing the various ways we use contexts?<br/>\r\nDave Longley: a couple points to make. first, pchampin’s point is really important<br/>\r\n… I think it would help both explain it and how we implement it<br/>\r\n… processors will start at the top of the document and work their way down<br/>\r\n… if it’s something they don’t understand, they’ll be ignored<br/>\r\n… anytime there’s a new thing defined, you’re introducing a new processing model<br/>\r\n… the point of the feature is to lock in the terms that were originally meant to be sealed<br/>\r\n… if you get outside of that space, then you could go back to the old processing model<br/>\r\n… the other point I wanted to make is a priority of constituents that we need to take into account<br/>\r\n… this is an extremely important feature for JSON developers<br/>\r\n… as it improves the ergonomics for end users<br/>\r\n… my last point was that there seems to be a lot of miscommunication that we seem to have resolved on this call<br/>\r\n… I’m more in agreement with gkellogg than we probably first thought<br/>\r\n… working them out on github seems better than talking them out at this point<br/>\r\nPierre-Antoine Champin: with the goal of keeping things simple<br/>\r\n… my mental model works well in two scenarios<br/>\r\n… I’m concerned about sealed contexts containing terms which are not sealed<br/>\r\n… and I think only one context should be sealed at any point in the tree<br/>\r\n… and that introduces a lot of complexity<br/>\r\n… and the corner cases don’t seem like driving reasons to support that<br/>\r\n… last point, under those conditions, the typed scoping behaves quite well<br/>\r\nIvan Herman: we should write all this down in spec text<br/>\r\nPierre-Antoine Champin: that’s my plan<br/>\r\nDave Longley: i think we’re actually making good progress, despite how it may appear :)<br/>\r\nRob Sanderson: I agree we’re making progress. It’s complicated :)<br/>\r\nIvan Herman: test cases are good, but some explanation would also be helpful<br/>\r\nPierre-Antoine Champin: please put the action for me to do that<br/>\r\nRob Sanderson: we’re at the top of the hour, but I do think we’ve made great progress<br/>\r\nAction #2: Pierre-Antoine Champin to write spec text of his mental model<br/>\r\nRob Sanderson: and I do think we’ll be helped by having a whiteboard<br/>\r\n… we’ll talk again next week!<br/>\r\n</details>" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/459051109> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/119#issuecomment-459051109"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/119> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/459051109> .
<https://api.github.com/users/dlongley> <http://schema.org/accountId> "dlongley" .
<https://api.github.com/users/dlongley> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/168137?v=4" .
<https://api.github.com/users/dlongley> <http://schema.org/url> "https://github.com/dlongley"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/dlongley> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/459051109> <http://schema.org/creator> <https://api.github.com/users/dlongley> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/459051109> <http://schema.org/startDate> "2019-01-30T18:17:46Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/459051109> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/459051109> <http://schema.org/description> "Thanks @pchampin!\r\n\r\nThis looks like a really good first cut. I agree with the reasoning. We'll need to explore it further by considering it against the specific examples we've come up with so far and make sure it covers identified use cases." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/459108931> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/120#issuecomment-459108931"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/120> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/459108931> .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/459108931> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/459108931> <http://schema.org/startDate> "2019-01-30T21:06:43Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/459108931> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/459108931> <http://schema.org/description> "IIRC, we discussed this and sealing would only involve terms, not `@vocab`, `@language`, or `@base`." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/459295952> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/119#issuecomment-459295952"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/119> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/459295952> .
<https://api.github.com/users/iherman> <http://schema.org/accountId> "iherman" .
<https://api.github.com/users/iherman> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/520723?v=4" .
<https://api.github.com/users/iherman> <http://schema.org/url> "https://github.com/iherman"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/iherman> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/459295952> <http://schema.org/creator> <https://api.github.com/users/iherman> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/459295952> <http://schema.org/startDate> "2019-01-31T10:33:25Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/459295952> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/459295952> <http://schema.org/description> "This looks very clear; as @dlongley said, we will have to compare with the use cases.\r\n\r\nOne editorial/didactic proposal: example 43 may be extended to emphasize the differences. Maybe the following example could be a bit better:\r\n\r\n```json\r\n{\r\n  \"@context\": [\r\n    {\r\n      \"@version\": 1.1,\r\n      \"@sealed\": true,\r\n      \"name\": \"http://schema.org/name\",\r\n      \"employee\": \"http://schema.org/employee\",\r\n      \"Organization\": \"http://schema.org/Organization\"\r\n    },\r\n    {\r\n      \"member\": \"http://xmlns.com/foaf/0.1/member\"\r\n    }\r\n  ],\r\n  \"@type\": \"Organization\",\r\n  \"name\": \"Digital Bazaar\",\r\n  \"employee\" : {\r\n      \"@context\": {\r\n          \"name\": \"this_attempt_will_fail\"\r\n      },\r\n      \"name\" : \"Dave Longley\"\r\n  },\r\n  \"member\": {\r\n    \"@context\": {\r\n      \"name\": \"http://xmlns.com/foaf/0.1/name\"\r\n    },\r\n    \"name\": \"Manu Sporny\"\r\n  }\r\n}\r\n```\r\n\r\n" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/459296897> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/120#issuecomment-459296897"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/120> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/459296897> .
<https://api.github.com/users/iherman> <http://schema.org/accountId> "iherman" .
<https://api.github.com/users/iherman> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/520723?v=4" .
<https://api.github.com/users/iherman> <http://schema.org/url> "https://github.com/iherman"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/iherman> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/459296897> <http://schema.org/creator> <https://api.github.com/users/iherman> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/459296897> <http://schema.org/startDate> "2019-01-31T10:36:49Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/459296897> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/459296897> <http://schema.org/description> "> IIRC, we discussed this and sealing would only involve terms, not @vocab, @language, or @base.\r\n\r\nWhat about `@container`? I would expect sealing this one might make a lot of sense for the use cases we discussed..." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/459405899> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/120#issuecomment-459405899"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/120> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/459405899> .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/459405899> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/459405899> <http://schema.org/startDate> "2019-01-31T16:19:32Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/459405899> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/459405899> <http://schema.org/description> "I was referring to non-term members of the context, not members of a term definition. Sealing a term seals all the members of the term." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/459414272> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/119#issuecomment-459414272"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/119> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/459414272> .
<https://api.github.com/users/pchampin> <http://schema.org/accountId> "pchampin" .
<https://api.github.com/users/pchampin> <http://schema.org/image> "https://avatars1.githubusercontent.com/u/304612?v=4" .
<https://api.github.com/users/pchampin> <http://schema.org/url> "https://github.com/pchampin"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/pchampin> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/459414272> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/459414272> <http://schema.org/startDate> "2019-01-31T16:40:31Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/459414272> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/459414272> <http://schema.org/description> "This makes the example clearer indeed, but may be a problem. Let me explain.\n\nI'm not sure what is expected when a context attempts to override a sealed\nterm. The processor may ignore this attempt with a warning, or fail with an\nerror.\n\nIn the first hypothesis, my example 41, and your version of example 43 are\nfine. In the second hypothesis, they will raise an error and produce no\ntriple at all., which makes them less informative.\n\nI realized this when I wrote example 41, but I kept it that way to open\ndiscussion. Then I tried to avoid the problem with the other examples...\n\nNow, the discussion is open: how do you (all) think a processor should\nreact on a failed attempt to override a sealed term?\n" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/459415200> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/119#issuecomment-459415200"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/119> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/459415200> .
<https://api.github.com/users/ajs6f> <http://schema.org/accountId> "ajs6f" .
<https://api.github.com/users/ajs6f> <http://schema.org/image> "https://avatars1.githubusercontent.com/u/110994?v=4" .
<https://api.github.com/users/ajs6f> <http://schema.org/url> "https://github.com/ajs6f"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/ajs6f> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/459415200> <http://schema.org/creator> <https://api.github.com/users/ajs6f> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/459415200> <http://schema.org/startDate> "2019-01-31T16:43:02Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/459415200> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/459415200> <http://schema.org/description> "Some (most!) of the use cases that have been presented for sealing concern security issues. From that fact, I would argue that at least the default should be failure with error unless some other mode has been enabled." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/459418454> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/119#issuecomment-459418454"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/119> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/459418454> .
<https://api.github.com/users/dlongley> <http://schema.org/accountId> "dlongley" .
<https://api.github.com/users/dlongley> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/168137?v=4" .
<https://api.github.com/users/dlongley> <http://schema.org/url> "https://github.com/dlongley"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/dlongley> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/459418454> <http://schema.org/creator> <https://api.github.com/users/dlongley> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/459418454> <http://schema.org/startDate> "2019-01-31T16:51:12Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/459418454> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/459418454> <http://schema.org/description> "> Some (most!) of the use cases that have been presented for sealing concern security issues. From that fact, I would argue that at least the default should be failure with error unless some other mode has been enabled.\r\n\r\nThe security issues have to do with allowing the sealed terms to be overridden, however. This feature would ensure that can't happen -- regardless of whether a processor outputs a warning or an error. I think we should support both modes (warning or error) ... but I'm not sure which we should default to yet." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/459419707> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/119#issuecomment-459419707"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/119> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/459419707> .
<https://api.github.com/users/ajs6f> <http://schema.org/accountId> "ajs6f" .
<https://api.github.com/users/ajs6f> <http://schema.org/image> "https://avatars1.githubusercontent.com/u/110994?v=4" .
<https://api.github.com/users/ajs6f> <http://schema.org/url> "https://github.com/ajs6f"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/ajs6f> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/459419707> <http://schema.org/creator> <https://api.github.com/users/ajs6f> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/459419707> <http://schema.org/startDate> "2019-01-31T16:54:18Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/459419707> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/459419707> <http://schema.org/description> "@dlongley I wasn't thinking of the path of execution-- I was thinking about the path of notification. A warning can more easily be ignored, whereas an actual halt inspires attention. But since you raised the use cases, if guarding against actual execution with overriding is enough for you, 'nuff said from me!" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/459422531> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/119#issuecomment-459422531"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/119> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/459422531> .
<https://api.github.com/users/dlongley> <http://schema.org/accountId> "dlongley" .
<https://api.github.com/users/dlongley> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/168137?v=4" .
<https://api.github.com/users/dlongley> <http://schema.org/url> "https://github.com/dlongley"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/dlongley> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/459422531> <http://schema.org/creator> <https://api.github.com/users/dlongley> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/459422531> <http://schema.org/startDate> "2019-01-31T17:01:36Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/459422531> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/459422531> <http://schema.org/description> "@ajs6f,\r\n\r\n> But since you raised the use cases, if guarding against actual execution with overriding is enough for you, 'nuff said from me!\r\n\r\nTo be clear -- I'm not yet convinced either way regarding the default behavior (error or warning). The only argument for warning by default is for backwards compatibility/easier ergonomics ... but that might be the  winning argument. Even if we do decide that warning is the best default, I would certainly want an error mode when authoring new contexts." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/459422850> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/20#issuecomment-459422850"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/20> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/459422850> .
<https://api.github.com/users/BigBlueHat> <http://schema.org/accountId> "BigBlueHat" .
<https://api.github.com/users/BigBlueHat> <http://schema.org/image> "https://avatars1.githubusercontent.com/u/43209?v=4" .
<https://api.github.com/users/BigBlueHat> <http://schema.org/url> "https://github.com/BigBlueHat"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/BigBlueHat> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/459422850> <http://schema.org/creator> <https://api.github.com/users/BigBlueHat> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/459422850> <http://schema.org/startDate> "2019-01-31T17:02:26Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/459422850> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/459422850> <http://schema.org/description> "On the \"bikeshedding\" front, we may want to consider the term \"frozen\" in place of \"sealed.\" From MDN:\r\n> Existing properties in objects frozen with `Object.freeze()` are made immutable. Objects sealed with `Object.seal()` can have their existing properties changed.\r\n> https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/seal#Comparison_to_Object.freeze()\r\n\r\nI've not done a wider survey of other languages yet, but as JSON's next-of-kin is JavaScript, it seems prudent to consider naming that matches there as closely as possible." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/459428168> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/20#issuecomment-459428168"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/20> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/459428168> .
<https://api.github.com/users/pchampin> <http://schema.org/accountId> "pchampin" .
<https://api.github.com/users/pchampin> <http://schema.org/image> "https://avatars1.githubusercontent.com/u/304612?v=4" .
<https://api.github.com/users/pchampin> <http://schema.org/url> "https://github.com/pchampin"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/pchampin> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/459428168> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/459428168> <http://schema.org/startDate> "2019-01-31T17:17:08Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/459428168> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/459428168> <http://schema.org/description> "That's a good point; I agree that terminology is important.\r\n\r\nThat being said, I like the metaphor of the seal, as I have used it extensively in [explaining how the processing should be done](https://lists.w3.org/Archives/Public/public-json-ld-wg/2019Jan/0016.html). I can't find an equivalent with a \"frozen\" metaphor.\r\n\r\n[[failed attempt to make a pathetic pun about seals, see ice and freezing...]]" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/459443951> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/119#issuecomment-459443951"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/119> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/459443951> .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/459443951> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/459443951> <http://schema.org/startDate> "2019-01-31T18:01:33Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/459443951> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/459443951> <http://schema.org/description> "> I'm not sure what is expected when a context attempts to override a sealed\r\nterm. The processor may ignore this attempt with a warning, or fail with an\r\nerror.\r\n\r\nFor similar issues in the past, we've chosen to ignore rather than raise an error. We don't have consistent language about issuing a warning, which would need to be application-specific, and we don't presently have a way to check for warnings being emitted in the test suite. We should probably figure that out." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/459449424> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/119#issuecomment-459449424"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/119> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/459449424> .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/459449424> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/459449424> <http://schema.org/startDate> "2019-01-31T18:18:00Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/459449424> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/459449424> <http://schema.org/description> "Also, don't forget to add yourself to the editor's list! Something like the following:\r\n\r\n        { name:       \"Pierre Antoine-Champin\",\r\n          company:    \"Université de Lyon\",\r\n          companyURL: \"http://iut.univ-lyon1.fr/\",\r\n          w3cid:      \"your w3cid from your W3C user profile\",\r\n          note:       \"v1.1\" }\r\n        ],\r\n\r\n@iherman can help with your w3cid; I believe it's required for the publication process." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/459450198> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/20#issuecomment-459450198"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/20> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/459450198> .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/459450198> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/459450198> <http://schema.org/startDate> "2019-01-31T18:20:16Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/459450198> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/459450198> <http://schema.org/description> "Maybe allow 10 minutes for bikeshedding on the call tomorrow. I can go either way." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/459679901> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/119#issuecomment-459679901"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/119> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/459679901> .
<https://api.github.com/users/iherman> <http://schema.org/accountId> "iherman" .
<https://api.github.com/users/iherman> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/520723?v=4" .
<https://api.github.com/users/iherman> <http://schema.org/url> "https://github.com/iherman"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/iherman> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/459679901> <http://schema.org/creator> <https://api.github.com/users/iherman> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/459679901> <http://schema.org/startDate> "2019-02-01T10:36:56Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/459679901> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/459679901> <http://schema.org/description> "> Now, the discussion is open: how do you (all) think a processor should react on a failed attempt to override a sealed term?\r\n\r\nMy preference would go for the warning and ignore approach. This is in line with what JSON-LD 1.0, and I think @dlongley's argument (see https://github.com/w3c/json-ld-syntax/pull/119#issuecomment-459418454) sounds convincing to me." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/459681137> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/119#issuecomment-459681137"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/119> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/459681137> .
<https://api.github.com/users/iherman> <http://schema.org/accountId> "iherman" .
<https://api.github.com/users/iherman> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/520723?v=4" .
<https://api.github.com/users/iherman> <http://schema.org/url> "https://github.com/iherman"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/iherman> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/459681137> <http://schema.org/creator> <https://api.github.com/users/iherman> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/459681137> <http://schema.org/startDate> "2019-02-01T10:41:37Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/459681137> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/459681137> <http://schema.org/description> "@pchampin,\r\n\r\n> @iherman can help with your w3cid; I believe it's required for the publication process.\r\n\r\nyes indeed, this number should be part of the respec header. Your number is 42931" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/459816739> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/119#issuecomment-459816739"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/119> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/459816739> .
<https://api.github.com/users/iherman> <http://schema.org/accountId> "iherman" .
<https://api.github.com/users/iherman> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/520723?v=4" .
<https://api.github.com/users/iherman> <http://schema.org/url> "https://github.com/iherman"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/iherman> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/459816739> <http://schema.org/creator> <https://api.github.com/users/iherman> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/459816739> <http://schema.org/startDate> "2019-02-01T18:16:20Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/459816739> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/459816739> <http://schema.org/description> "This issue was discussed in [a meeting](https://www.w3.org/2018/json-ld-wg/Meetings/Minutes/2019/2019-02-01-json-ld#section4).\r\n\r\n- No actions or resolutions\r\n<details><summary><i class=\"differentiate\">View the transcript</i></summary>\r\nReview Pierre-Antoine’s proposal for sealed context processing<br/>\r\nBenjamin Young: <a href=\"https://lists.w3.org/Archives/Public/public-json-ld-wg/2019Jan/0016.html\">https://lists.w3.org/Archives/Public/public-json-ld-wg/2019Jan/0016.html</a><br/>\r\nIvan Herman: <a href=\"https://github.com/w3c/json-ld-syntax/pull/119\">https://github.com/w3c/json-ld-syntax/pull/119</a><br/>\r\nGregg Kellogg: <a href=\"https://github.com/w3c/json-ld-syntax/issues/20\">https://github.com/w3c/json-ld-syntax/issues/20</a><br/>\r\nIvan Herman: -> the proposed text for the syntax draft: <a href=\"https://pr-preview.s3.amazonaws.com/w3c/json-ld-syntax/pull/119.html#sealed-contexts\">https://pr-preview.s3.amazonaws.com/w3c/json-ld-syntax/pull/119.html#sealed-contexts</a><br/>\r\nBenjamin Young: API PR <a href=\"https://github.com/w3c/json-ld-api/pull/60\">https://github.com/w3c/json-ld-api/pull/60</a><br/>\r\nGregg Kellogg: I can represent pchampin’s issue, since he can’t call in due to internet connectivity problems<br/>\r\n… There’s an issue, and discussion in the PR<br/>\r\n… the principle issue in #20, and pchamin’s work is around syntax<br/>\r\n… basically, he suggests sealing contexts, not terms, though it’s not design limited that way<br/>\r\n… and sealing a context, the term definitions are tagged with an identifier associated with that context<br/>\r\n… an implementation, for each term def., you know which context it comes from (for sealed contexts)<br/>\r\n… so if you attempt to update that within a sealed node, you can only update it if the update is coming from the sealing context<br/>\r\n… this would happen for embedded context<br/>\r\n… so if I define a term foo, and that context wants to update a term in that context, you can see the terms that the updated terms came from the same context<br/>\r\n… that would allow terms defined in other sealed contexts to not interfere<br/>\r\n… so you cannot create a term that interferes with a different sealed contexts.<br/>\r\n… there is a list of active sealed contexts active during expansion…<br/>\r\n… that effectively unseals all the other contexts when processing<br/>\r\n… if you were to descend into another property not associated, that would have the effect of unsealing all contexts.<br/>\r\n… if you use a term from a context, even if it’s unsealed, you now enter a mode where the context is sealed.<br/>\r\n… what this means for sealing contexts or terms, since you’re tagging the context info per-term, it seems straightforward to do that per-term. There is no support for sealing part of a term, say the ID, but not the container<br/>\r\n… no use cases<br/>\r\nRob Sanderson: does the seal ID need to be different than the context ID? is it specified explicitly?<br/>\r\n… does this mean that the top context might be sealed, but an embedded one might be unsealed?<br/>\r\nIvan Herman: he also put a text into the syntax document which describes things and makes it clear and easy to understand<br/>\r\n… there was also an issue: what happens if you do something that is not kosher? one possibility is a warning and you ignore, the other is to throw an error<br/>\r\n… and some of the examples will change based on that answer. It’s a decision<br/>\r\nBenjamin Young: This felt a lot like one context being last<br/>\r\n… it would be super if we could have our use cases written up, both verifiable claims and web of things<br/>\r\n… have use cases<br/>\r\nDave Longley: I am thinking about this and reviewing it, and looking at it, I’m not sure how it would impact caching of active contexts.<br/>\r\n… I haven’t thought through how it works…can we keep track of an ancestry tree?<br/>\r\n… whatever we put in the spec, whatever matches the output, it’s OK. Still thinking through it<br/>\r\nIvan Herman: I am worried that what’s described is an implementation strategy, not a requirement for a spec<br/>\r\nRob Sanderson: +1 to Ivan<br/>\r\nIvan Herman: we should make sure that we don’t define the process, but instead what we need to have as normative<br/>\r\nDave Longley: +1 to Ivan<br/>\r\nIvan Herman: informatively, we can put in examples. What counts is the test cases<br/>\r\nBenjamin Young: we currently don’t track term overriding and who overwrote what in what order<br/>\r\nDave Longley: +1 … that would be a helpful tool<br/>\r\nBenjamin Young: so if you have two contexts and one overrides it, there’s no awareness of that in the code. So in a context dev, and to keep sealing in, it would be helpful to know what happened and in which order. that could clear a lot of confusion<br/>\r\nGregg Kellogg: My feeling tis that we’ve been overly prescriptive to ensure interoperability<br/>\r\n… embedded contexts cerate a new ID and inherit from the one embedded<br/>\r\n… so I think we need to try and describe that in a way that stays as close as possible to the behavior, and the mental model has to be described in the syntax doc to understand orders of operations<br/>\r\n… but adding more complexity threatens to degrade performance<br/>\r\nRob Sanderson: in the proposal, does that include externally referenced, but scoped contexts? So if I had a doc that had sealing at the top level, and I scoped in schema.org within a term, would that then seal schema.org?<br/>\r\nDave Longley: {\"@context\": {\"sealed\": true, \"foo\": {\"@context\": \"<a href=\"http://schema.org\"}}}?\">http://schema.org\"}}}?</a><br/>\r\nRob Sanderson: does that seal by reference schema.org? if you had it as an externally reference, sealed context.<br/>\r\n… what dave said in the chat<br/>\r\n… what happens?<br/>\r\nGregg Kellogg: my feeling is that scoped context is not explicitly sealed. So, no. schema.org would not be sealed in that example.<br/>\r\n… what you need to know is there is a reference, and we might restrict that to being things in a local/embedded context, have the ability to affect things that were defined in the outer context, but not implicitly sealed<br/>\r\n… does the sealing act valid for everything, or are there parts like vocab that are not sealed?<br/>\r\nGregg Kellogg: three top-level directives: version, vocab, language, and base<br/>\r\n… context is not a member of a context, it’s a member of a term definition<br/>\r\nDave Longley: i’ll just say — my view of “sealed contexts” is that someone made a specification for a bunch of terms (a “sealed context”) and JSON-only devs will read that spec and apply the rules therein — not running any JSON-LD processing after that… and we should consider how sealed contexts according to that line of reasoning.<br/>\r\nGregg Kellogg: the body is an object that contains term definitions, default vocabs…a term definition can itself be sealed, and if that includes an embedded context, and if that’s sealed, then the context that it defined in not implicitly sealed<br/>\r\n… I can’t update the context with a new context…otherwise the use of context within a context is in the document, and….<br/>\r\n… . too many uses of the word “context”.<br/>\r\nDave Longley: so if we want to allow people to write specs that say: “everything under this term will use schema.org’s context” … that’s what JSON devs would expect, no changes<br/>\r\nDave Longley: we could of course, require those spec writers to redefine all those terms manually if need be<br/>\r\nBenjamin Young: the top level directives…is it imagined that those would be sealed?<br/>\r\nGregg Kellogg: we don’t seal base, vocab. if you want to seal, seal a term. if the default vocab is schema.org, and can’t override it…<br/>\r\nDave Longley: the main use is a spec, like W3c, and they’re defining terms in the spec, and will provide the context, and will only apply the rules in the spec.<br/>\r\nRob Sanderson: I agree with that too, but then to me it’s going to be clearer if the individual terms are sealed, rather than the terms defined in a context that’s sealed, but other features (e.g. base and vocab) are not sealed in that context<br/>\r\nDave Longley: first, you’re using JSON-LD to enable extensibility and semantics. that means that you want other terms to be created.<br/>\r\n… so I think that losing .vocab won’t work. Sealed contexts should not be constrain things not defined.<br/>\r\n… we should think of how they should behave within that domain.<br/>\r\n… if we want to figure out how it should work, we should think about it in the context of a spec–if there’s a term not in the spec, you can ignore them.<br/>\r\n… none of these term definitions will change. If you’ followed the path in the spec, nothing will change.<br/>\r\n… that’s what the feature should guarantee<br/>\r\n… everything else is outside of what people who care bout JSON will care about.<br/>\r\nBenjamin Young: +1<br/>\r\nDave Longley: think about this domain through the lens of JSON-only developers<br/>\r\nRob Sanderson: Also +1<br/>\r\nIvan Herman: what would happen if Schema.org sealed that context?<br/>\r\nDave Longley: all that would happen is that the terms wouldn’t change.<br/>\r\nIvan Herman: using schema.org, some of the terms are underspecified. So what we do is add our own context that defines, with the same URL, we add additional constraints to the term.<br/>\r\n… this would prevent this<br/>\r\nDave Longley: if you’re redefining these terms, this would lock that possibility.<br/>\r\nIvan Herman: even if I use the URL, but I specify the type..<br/>\r\nDave Longley: that’s a separate issue, but an important one<br/>\r\nIvan Herman: this happens a lot with schema.org a lot. Often I want to make them more precise<br/>\r\nBenjamin Young: maybe, given large vocabs, sealing many terms, this maybe an API thing, but not a syntax thing? Can the processor seal/not-sealed to create a processor that says that this context is sealed<br/>\r\n… but the developer chooses<br/>\r\n… and then these terms are sacrosanct<br/>\r\n… these are the terms my processor must understand<br/>\r\nGregg Kellogg: echoing ivan, schema.org author: Values are expected to be an org or person, but that’s defined without a type. JSON-LD processor will allow a string value there<br/>\r\nDave Longley: i’ll just say that’s interesting (doing this via an API mode/flags) Benjamin … and worth considering further.<br/>\r\nGregg Kellogg: not a URI.<br/>\r\nDave Longley: interesting, but i don’t think will work :)<br/>\r\nGregg Kellogg: that’s a case for updating it for author is explicitly a URI.<br/>\r\nRob Sanderson: +1 to dlongley, agree it needs to be syntactic<br/>\r\nDave Longley: a good idea, but there will be people who won’t know to read the spec and flip on the flags. it needs to be in the data.<br/>\r\nBenjamin Young: we’ll see you in a week or less. look through it, add your notes, etc.<br/>\r\n</details>" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/459816854> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/20#issuecomment-459816854"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/20> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/459816854> .
<https://api.github.com/users/iherman> <http://schema.org/accountId> "iherman" .
<https://api.github.com/users/iherman> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/520723?v=4" .
<https://api.github.com/users/iherman> <http://schema.org/url> "https://github.com/iherman"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/iherman> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/459816854> <http://schema.org/creator> <https://api.github.com/users/iherman> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/459816854> <http://schema.org/startDate> "2019-02-01T18:16:41Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/459816854> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/459816854> <http://schema.org/description> "This issue was discussed in [a meeting](https://www.w3.org/2018/json-ld-wg/Meetings/Minutes/2019/2019-02-01-json-ld#section4).\r\n\r\n- No actions or resolutions\r\n<details><summary><i class=\"differentiate\">View the transcript</i></summary>\r\nReview Pierre-Antoine’s proposal for sealed context processing<br/>\r\nBenjamin Young: <a href=\"https://lists.w3.org/Archives/Public/public-json-ld-wg/2019Jan/0016.html\">https://lists.w3.org/Archives/Public/public-json-ld-wg/2019Jan/0016.html</a><br/>\r\nIvan Herman: <a href=\"https://github.com/w3c/json-ld-syntax/pull/119\">https://github.com/w3c/json-ld-syntax/pull/119</a><br/>\r\nGregg Kellogg: <a href=\"https://github.com/w3c/json-ld-syntax/issues/20\">https://github.com/w3c/json-ld-syntax/issues/20</a><br/>\r\nIvan Herman: -> the proposed text for the syntax draft: <a href=\"https://pr-preview.s3.amazonaws.com/w3c/json-ld-syntax/pull/119.html#sealed-contexts\">https://pr-preview.s3.amazonaws.com/w3c/json-ld-syntax/pull/119.html#sealed-contexts</a><br/>\r\nBenjamin Young: API PR <a href=\"https://github.com/w3c/json-ld-api/pull/60\">https://github.com/w3c/json-ld-api/pull/60</a><br/>\r\nGregg Kellogg: I can represent pchampin’s issue, since he can’t call in due to internet connectivity problems<br/>\r\n… There’s an issue, and discussion in the PR<br/>\r\n… the principle issue in #20, and pchamin’s work is around syntax<br/>\r\n… basically, he suggests sealing contexts, not terms, though it’s not design limited that way<br/>\r\n… and sealing a context, the term definitions are tagged with an identifier associated with that context<br/>\r\n… an implementation, for each term def., you know which context it comes from (for sealed contexts)<br/>\r\n… so if you attempt to update that within a sealed node, you can only update it if the update is coming from the sealing context<br/>\r\n… this would happen for embedded context<br/>\r\n… so if I define a term foo, and that context wants to update a term in that context, you can see the terms that the updated terms came from the same context<br/>\r\n… that would allow terms defined in other sealed contexts to not interfere<br/>\r\n… so you cannot create a term that interferes with a different sealed contexts.<br/>\r\n… there is a list of active sealed contexts active during expansion…<br/>\r\n… that effectively unseals all the other contexts when processing<br/>\r\n… if you were to descend into another property not associated, that would have the effect of unsealing all contexts.<br/>\r\n… if you use a term from a context, even if it’s unsealed, you now enter a mode where the context is sealed.<br/>\r\n… what this means for sealing contexts or terms, since you’re tagging the context info per-term, it seems straightforward to do that per-term. There is no support for sealing part of a term, say the ID, but not the container<br/>\r\n… no use cases<br/>\r\nRob Sanderson: does the seal ID need to be different than the context ID? is it specified explicitly?<br/>\r\n… does this mean that the top context might be sealed, but an embedded one might be unsealed?<br/>\r\nIvan Herman: he also put a text into the syntax document which describes things and makes it clear and easy to understand<br/>\r\n… there was also an issue: what happens if you do something that is not kosher? one possibility is a warning and you ignore, the other is to throw an error<br/>\r\n… and some of the examples will change based on that answer. It’s a decision<br/>\r\nBenjamin Young: This felt a lot like one context being last<br/>\r\n… it would be super if we could have our use cases written up, both verifiable claims and web of things<br/>\r\n… have use cases<br/>\r\nDave Longley: I am thinking about this and reviewing it, and looking at it, I’m not sure how it would impact caching of active contexts.<br/>\r\n… I haven’t thought through how it works…can we keep track of an ancestry tree?<br/>\r\n… whatever we put in the spec, whatever matches the output, it’s OK. Still thinking through it<br/>\r\nIvan Herman: I am worried that what’s described is an implementation strategy, not a requirement for a spec<br/>\r\nRob Sanderson: +1 to Ivan<br/>\r\nIvan Herman: we should make sure that we don’t define the process, but instead what we need to have as normative<br/>\r\nDave Longley: +1 to Ivan<br/>\r\nIvan Herman: informatively, we can put in examples. What counts is the test cases<br/>\r\nBenjamin Young: we currently don’t track term overriding and who overwrote what in what order<br/>\r\nDave Longley: +1 … that would be a helpful tool<br/>\r\nBenjamin Young: so if you have two contexts and one overrides it, there’s no awareness of that in the code. So in a context dev, and to keep sealing in, it would be helpful to know what happened and in which order. that could clear a lot of confusion<br/>\r\nGregg Kellogg: My feeling tis that we’ve been overly prescriptive to ensure interoperability<br/>\r\n… embedded contexts cerate a new ID and inherit from the one embedded<br/>\r\n… so I think we need to try and describe that in a way that stays as close as possible to the behavior, and the mental model has to be described in the syntax doc to understand orders of operations<br/>\r\n… but adding more complexity threatens to degrade performance<br/>\r\nRob Sanderson: in the proposal, does that include externally referenced, but scoped contexts? So if I had a doc that had sealing at the top level, and I scoped in schema.org within a term, would that then seal schema.org?<br/>\r\nDave Longley: {\"@context\": {\"sealed\": true, \"foo\": {\"@context\": \"<a href=\"http://schema.org\"}}}?\">http://schema.org\"}}}?</a><br/>\r\nRob Sanderson: does that seal by reference schema.org? if you had it as an externally reference, sealed context.<br/>\r\n… what dave said in the chat<br/>\r\n… what happens?<br/>\r\nGregg Kellogg: my feeling is that scoped context is not explicitly sealed. So, no. schema.org would not be sealed in that example.<br/>\r\n… what you need to know is there is a reference, and we might restrict that to being things in a local/embedded context, have the ability to affect things that were defined in the outer context, but not implicitly sealed<br/>\r\n… does the sealing act valid for everything, or are there parts like vocab that are not sealed?<br/>\r\nGregg Kellogg: three top-level directives: version, vocab, language, and base<br/>\r\n… context is not a member of a context, it’s a member of a term definition<br/>\r\nDave Longley: i’ll just say — my view of “sealed contexts” is that someone made a specification for a bunch of terms (a “sealed context”) and JSON-only devs will read that spec and apply the rules therein — not running any JSON-LD processing after that… and we should consider how sealed contexts according to that line of reasoning.<br/>\r\nGregg Kellogg: the body is an object that contains term definitions, default vocabs…a term definition can itself be sealed, and if that includes an embedded context, and if that’s sealed, then the context that it defined in not implicitly sealed<br/>\r\n… I can’t update the context with a new context…otherwise the use of context within a context is in the document, and….<br/>\r\n… . too many uses of the word “context”.<br/>\r\nDave Longley: so if we want to allow people to write specs that say: “everything under this term will use schema.org’s context” … that’s what JSON devs would expect, no changes<br/>\r\nDave Longley: we could of course, require those spec writers to redefine all those terms manually if need be<br/>\r\nBenjamin Young: the top level directives…is it imagined that those would be sealed?<br/>\r\nGregg Kellogg: we don’t seal base, vocab. if you want to seal, seal a term. if the default vocab is schema.org, and can’t override it…<br/>\r\nDave Longley: the main use is a spec, like W3c, and they’re defining terms in the spec, and will provide the context, and will only apply the rules in the spec.<br/>\r\nRob Sanderson: I agree with that too, but then to me it’s going to be clearer if the individual terms are sealed, rather than the terms defined in a context that’s sealed, but other features (e.g. base and vocab) are not sealed in that context<br/>\r\nDave Longley: first, you’re using JSON-LD to enable extensibility and semantics. that means that you want other terms to be created.<br/>\r\n… so I think that losing .vocab won’t work. Sealed contexts should not be constrain things not defined.<br/>\r\n… we should think of how they should behave within that domain.<br/>\r\n… if we want to figure out how it should work, we should think about it in the context of a spec–if there’s a term not in the spec, you can ignore them.<br/>\r\n… none of these term definitions will change. If you’ followed the path in the spec, nothing will change.<br/>\r\n… that’s what the feature should guarantee<br/>\r\n… everything else is outside of what people who care bout JSON will care about.<br/>\r\nBenjamin Young: +1<br/>\r\nDave Longley: think about this domain through the lens of JSON-only developers<br/>\r\nRob Sanderson: Also +1<br/>\r\nIvan Herman: what would happen if Schema.org sealed that context?<br/>\r\nDave Longley: all that would happen is that the terms wouldn’t change.<br/>\r\nIvan Herman: using schema.org, some of the terms are underspecified. So what we do is add our own context that defines, with the same URL, we add additional constraints to the term.<br/>\r\n… this would prevent this<br/>\r\nDave Longley: if you’re redefining these terms, this would lock that possibility.<br/>\r\nIvan Herman: even if I use the URL, but I specify the type..<br/>\r\nDave Longley: that’s a separate issue, but an important one<br/>\r\nIvan Herman: this happens a lot with schema.org a lot. Often I want to make them more precise<br/>\r\nBenjamin Young: maybe, given large vocabs, sealing many terms, this maybe an API thing, but not a syntax thing? Can the processor seal/not-sealed to create a processor that says that this context is sealed<br/>\r\n… but the developer chooses<br/>\r\n… and then these terms are sacrosanct<br/>\r\n… these are the terms my processor must understand<br/>\r\nGregg Kellogg: echoing ivan, schema.org author: Values are expected to be an org or person, but that’s defined without a type. JSON-LD processor will allow a string value there<br/>\r\nDave Longley: i’ll just say that’s interesting (doing this via an API mode/flags) Benjamin … and worth considering further.<br/>\r\nGregg Kellogg: not a URI.<br/>\r\nDave Longley: interesting, but i don’t think will work :)<br/>\r\nGregg Kellogg: that’s a case for updating it for author is explicitly a URI.<br/>\r\nRob Sanderson: +1 to dlongley, agree it needs to be syntactic<br/>\r\nDave Longley: a good idea, but there will be people who won’t know to read the spec and flip on the flags. it needs to be in the data.<br/>\r\nBenjamin Young: we’ll see you in a week or less. look through it, add your notes, etc.<br/>\r\n</details>" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/459996322> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/20#issuecomment-459996322"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/20> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/459996322> .
<https://api.github.com/users/tcole3> <http://schema.org/accountId> "tcole3" .
<https://api.github.com/users/tcole3> <http://schema.org/image> "https://avatars2.githubusercontent.com/u/7622978?v=4" .
<https://api.github.com/users/tcole3> <http://schema.org/url> "https://github.com/tcole3"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/tcole3> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/459996322> <http://schema.org/creator> <https://api.github.com/users/tcole3> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/459996322> <http://schema.org/startDate> "2019-02-02T20:22:11Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/459996322> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/459996322> <http://schema.org/description> "Following up on the question @iherman raised at the end of yesterday's discussion, the need for a json-ld author to redefine select schema.org terms is real - it will create more work (or confusion for simple json developers) if there is no easy way to override a decision by schema.org to seal their context - e.g., could lead authors to clone and maintain their own variants of schema.org context. \r\n\r\nIllustration -- As has come up in the WG previously, schema.org has many properties with a range that encompasses multiple data types, e.g., per current schema.org documentation both Text and URL are listed as values expected for the properties _genre, artMedium, artworkSurface, artform, fileFormat_. But the schema.org context specifies only URL (@id) when defining each of these terms, e.g. from the current schema.org context document: \r\n\r\n`  \"fileFormat\": { \"@id\": \"schema:fileFormat\",  \"@type\": \"@id\"  } `\r\n\r\n So, in one or our applications here at Illinois we routinely reference schema.org context document and then redefine these 5 terms, e.g. (for _fileFormat_):\r\n``` \r\n     \"@context\": [\r\n        \"http://schema.org/\",\r\n        {\r\n            \"s\": \"http://schema.org/\",\r\n            \"fileFormat\": {  \"@id\": \"s:fileFormat\",  \"@type\": \"s:Text\"  }\r\n        } ] \r\n```\r\nFor full example (we have about 4,500 of these), see: \r\n    http://imagesearch-test1.library.illinois.edu/jsonld/10189v2.json\r\n\r\nCurrent JSON-LD playgrounds (both) accept these redefinitions and understands our use of text strings as values for these properties. So the following line in our json-ld instance \r\n\r\n`   \"fileFormat\": \"image/jpg\"   `\r\n\r\nis expanded by the playgrounds as we want:\r\n```\r\n        \"http://schema.org/fileFormat\": [\r\n          {\r\n            \"@type\": \"http://schema.org/Text\",\r\n            \"@value\": \"image/jpg\"\r\n          }   ],\r\n```\r\nIf we fail to redefine these schema.org terms -- or if in the future our attempt in local context to redefine these terms are ignored because schema.org someday chooses to seal their context, then the playgrounds turn our strings into relative URLs. A version of our file without the redefinitions is here:\r\n   http://imagesearch-test1.library.illinois.edu/jsonld/10189v3.json  \r\n\r\nIn this case (no redefinition) the same key-value in the instance as above:\r\n\r\n`   \"fileFormat\": \"image/jpg\"   `\r\n\r\nis expanded by the playgrounds this way (NOT the way we want):\r\n```\r\n        \"http://schema.org/fileFormat\": [\r\n          {\r\n            \"@id\": \"https://json-ld.org/playground/image/jpg\"\r\n          }   ],\r\n```\r\nOf course we can effectively work around the default term definitions on a case by case basis by using object values for the un-redefined properties and explicitly specifying @value and @type:s:Text ourselves (will this technique still work if term definition is sealed?).  \r\n\r\nBut this is not the ideal solution to prescribe (especially for simple json developers) and notably the Google SDTT does not accept this usage (one of a few issues with the tool which I don't think actually looks at context at all). \r\n\r\nSo, personally I would appreciate a more flexible seal mechanism that allowed some kind of a seal override on any externally referenced context document that includes the @sealed:true directive.\r\n " .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/460000257> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/121#issuecomment-460000257"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/121> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/460000257> .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/460000257> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/460000257> <http://schema.org/startDate> "2019-02-02T21:23:13Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/460000257> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/460000257> <http://schema.org/description> "I think that for such terms, the default is to treat them as text. This is where it's useful to redefine terms if you want string values to be interpreted as URLs, dates, or whatever. Google does some sniffing to determine the format, but I don't think we want to try to get this right in the spec.\r\n\r\nTools like my own [Structured Data Linter](http://linter.structured-data.org) can be used to help identify when values aren't interpreted properly. Otherwise, to try to create a \"smarter\" `@type` definition on a term requires something like regular expression matching to try to parse between IRI, MIME, or whatever, which we've rejected in the past." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/460039204> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/20#issuecomment-460039204"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/20> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/460039204> .
<https://api.github.com/users/iherman> <http://schema.org/accountId> "iherman" .
<https://api.github.com/users/iherman> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/520723?v=4" .
<https://api.github.com/users/iherman> <http://schema.org/url> "https://github.com/iherman"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/iherman> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/460039204> <http://schema.org/creator> <https://api.github.com/users/iherman> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/460039204> <http://schema.org/startDate> "2019-02-03T10:15:21Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/460039204> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/460039204> <http://schema.org/description> "The problem is real (as I said on the call, we do something similar for [Web Publication Manifests](https://www.w3.org/TR/wpub)). But I am not sure what that would mean...\r\n\r\n1. We could revive the approach, briefly mentioned at some point but not really retained, to be able to \"seal\" only specific terms or those terms that are explicitly mentioned. In the schema.org example, it would mean sealing the `@id` value (and possibly other values as given in the schema.org in the current context file) but allow _extending_ the term definitions like what @tcole3 has shown. The problem was that this goes against the approach in JSON-LD 1.0 (where redefinition is an all or nothing action). Specifying this properly may lead to a spaghetti specification (and implementation...)\r\n\r\n2. Another, more pragmatic approach is to make it very clear that... _if possible, you should not seal a context_. To be more specific, make it very clear that sealing an under-specified context may lead major issues, and publishers shouldn't do that. Sealing should be reserved for very specific use cases, where the context is extremely well specified and it would be an issue if they were redefined.\r\n\r\n    Schema.org is such an under-specified context (intentionally so), i.e., it would create lots of issues if it was sealed (truth must be said, I do not think they expressed interest in this). This also means that we should refrain using schema.org in any of our examples around sealing (@pchampin, this may require a slight re-write of #119). I think the same is true for FOAF and Dublin Core, b.t.w. At this moment, the VC ontology might be the only one coming to my mind that does require this. (@azaroth42, @tcole3, I am not sure the annotation vocabulary should be sealed either, but I am not sure)." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/460083446> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/20#issuecomment-460083446"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/20> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/460083446> .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/460083446> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/460083446> <http://schema.org/startDate> "2019-02-03T20:04:42Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/460083446> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/460083446> <http://schema.org/description> "> 1. We could revive the approach, briefly mentioned at some point but not really retained, to be able to \"seal\" only specific terms or those terms that are explicitly mentioned. In the schema.org example, it would mean sealing the `@id` value (and possibly other values as given in the schema.org in the current context file) but allow extending the term definitions like what @tcole3 has shown. The problem was that this goes against the approach in JSON-LD 1.0 (where redefinition is an all or nothing action). Specifying this properly may lead to a spaghetti specification (and implementation...)\r\n\r\nWe need to consider the primary use case for sealing terms/contexts, which is to allow naive JSON apps to be able to interpret values as defined in a spec; this includes how to treat string values, and if an object value should be treated as a list, a map, or whatever. Allowing these things (or anything, really) to be overridden on a term sort of by definition does not allow naive apps to be able to properly understand their values. The only possible exception would be to add `@container: @set` to ensure that compaction always uses array notation, but that's a compaction use case, which does not relate to naive JSON apps. So, I don't see a reason for us to do this.\r\n\r\n> 2. Another, more pragmatic approach is to make it very clear that... if _possible_, you should not seal a context. To be more specific, make it very clear that sealing an under-specified context may lead major issues, and publishers shouldn't do that. Sealing should be reserved for very specific use cases, where the context is extremely well specified and it would be an issue if they were redefined.\r\n\r\nYes, absolutely; we should caution that this feature should be used judiciously, if at all." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/460197828> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/87#issuecomment-460197828"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/87> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/460197828> .
<https://api.github.com/users/iherman> <http://schema.org/accountId> "iherman" .
<https://api.github.com/users/iherman> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/520723?v=4" .
<https://api.github.com/users/iherman> <http://schema.org/url> "https://github.com/iherman"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/iherman> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/460197828> <http://schema.org/creator> <https://api.github.com/users/iherman> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/460197828> <http://schema.org/startDate> "2019-02-04T10:28:29Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/460197828> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/460197828> <http://schema.org/description> "(While preparing for the F2F) I must admit I do not understand what is meant here. Can this be expanded before the meeting, @BigBlueHat ?" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/460199751> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/116#issuecomment-460199751"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/116> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/460199751> .
<https://api.github.com/users/iherman> <http://schema.org/accountId> "iherman" .
<https://api.github.com/users/iherman> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/520723?v=4" .
<https://api.github.com/users/iherman> <http://schema.org/url> "https://github.com/iherman"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/iherman> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/460199751> <http://schema.org/creator> <https://api.github.com/users/iherman> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/460199751> <http://schema.org/startDate> "2019-02-04T10:35:01Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/460199751> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/460199751> <http://schema.org/description> "Thinking about this further, I am afraid that this would open a can of worm. Whether we like it or not, JSON-LD 1.0 made a clear choice with any re-definition of a term completely wiping out the old one. We should skip to this and _not_ introduce some sort of a spaghetti spec to circumvent this..." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/460201634> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/108#issuecomment-460201634"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/108> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/460201634> .
<https://api.github.com/users/iherman> <http://schema.org/accountId> "iherman" .
<https://api.github.com/users/iherman> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/520723?v=4" .
<https://api.github.com/users/iherman> <http://schema.org/url> "https://github.com/iherman"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/iherman> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/460201634> <http://schema.org/creator> <https://api.github.com/users/iherman> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/460201634> <http://schema.org/startDate> "2019-02-04T10:41:31Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/460201634> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/460201634> <http://schema.org/description> "Just to push this aspect aside: I agree (and we discussed on the call) that sealing a referenced context is not a good idea, i.e., we should remove this. Just to have a clear reference, here is my original example without it:\r\n\r\n```json\r\n{\r\n    \"@context\" : [\r\n        \"https://...\",\r\n        {\r\n            \"@version\": 1.1,\r\n            \"@contextref\" : {\r\n                \"@url\" : [\"schema\", \"https://cdn1.../schema.org\", \"https://schema.org\"],\r\n                \"@sri\" : \"sha256-abcd\"\r\n            },\r\n            \"id\" : \"@id\"\r\n        }\r\n    ]\r\n}\r\n```\r\n\r\nThe original proposal still stands without it, including my remark, whereby:\r\n\r\n> The array of links is also to bring back the issue we had at TPAC, namely to see if some sort of a local cache reference can be used. So that array is based on the idea used in CSS for font access: the processor takes the first URL that works in returning a context file. It is not yet clear in my mind how exactly we would identify a local cache, the array would be used for something like that.\r\n\r\n" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/460217391> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/20#issuecomment-460217391"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/20> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/460217391> .
<https://api.github.com/users/pchampin> <http://schema.org/accountId> "pchampin" .
<https://api.github.com/users/pchampin> <http://schema.org/image> "https://avatars1.githubusercontent.com/u/304612?v=4" .
<https://api.github.com/users/pchampin> <http://schema.org/url> "https://github.com/pchampin"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/pchampin> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/460217391> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/460217391> <http://schema.org/startDate> "2019-02-04T11:36:32Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/460217391> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/460217391> <http://schema.org/description> "I lean towards option 2. Sealing should only be used in specific use cases,\nand schema.org does not fit in those, I think.\n\nOn Sun 3 Feb 2019, 21:04 Gregg Kellogg <notifications@github.com wrote:\n\n>\n>    1. We could revive the approach, briefly mentioned at some point but\n>    not really retained, to be able to \"seal\" only specific terms or those\n>    terms that are explicitly mentioned. In the schema.org example, it\n>    would mean sealing the @id value (and possibly other values as given\n>    in the schema.org in the current context file) but allow extending the\n>    term definitions like what @tcole3 <https://github.com/tcole3> has\n>    shown. The problem was that this goes against the approach in JSON-LD 1.0\n>    (where redefinition is an all or nothing action). Specifying this properly\n>    may lead to a spaghetti specification (and implementation...)\n>\n> We need to consider the primary use case for sealing terms/contexts, which\n> is to allow naive JSON apps to be able to interpret values as defined in a\n> spec; this includes how to treat string values, and if an object value\n> should be treated as a list, a map, or whatever. Allowing these things (or\n> anything, really) to be overridden on a term sort of by definition does not\n> allow naive apps to be able to properly understand their values. The only\n> possible exception would be to add @container: @set to ensure that\n> compaction always uses array notation, but that's a compaction use case,\n> which does not relate to naive JSON apps. So, I don't see a reason for us\n> to do this.\n>\n>\n>    1. Another, more pragmatic approach is to make it very clear that...\n>    if *possible*, you should not seal a context. To be more specific,\n>    make it very clear that sealing an under-specified context may lead major\n>    issues, and publishers shouldn't do that. Sealing should be reserved for\n>    very specific use cases, where the context is extremely well specified and\n>    it would be an issue if they were redefined.\n>\n> Yes, absolutely; we should caution that this feature should be used\n> judiciously, if at all.\n>\n> —\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/w3c/json-ld-syntax/issues/20#issuecomment-460083446>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AASl5DXM2y0LdKUGCuFr0bJH9sUxZ8YXks5vJ0DagaJpZM4U-BsL>\n> .\n>\n" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/460221358> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/20#issuecomment-460221358"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/20> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/460221358> .
<https://api.github.com/users/ajs6f> <http://schema.org/accountId> "ajs6f" .
<https://api.github.com/users/ajs6f> <http://schema.org/image> "https://avatars1.githubusercontent.com/u/110994?v=4" .
<https://api.github.com/users/ajs6f> <http://schema.org/url> "https://github.com/ajs6f"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/ajs6f> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/460221358> <http://schema.org/creator> <https://api.github.com/users/ajs6f> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/460221358> <http://schema.org/startDate> "2019-02-04T11:52:13Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/460221358> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/460221358> <http://schema.org/description> "Agreed. The risks associated with misinterpreting schema.org data seem very small in comparison with the risks of misinterpreting WoT or Verifiable Claims data." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/460275283> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/87#issuecomment-460275283"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/87> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/460275283> .
<https://api.github.com/users/BigBlueHat> <http://schema.org/accountId> "BigBlueHat" .
<https://api.github.com/users/BigBlueHat> <http://schema.org/image> "https://avatars1.githubusercontent.com/u/43209?v=4" .
<https://api.github.com/users/BigBlueHat> <http://schema.org/url> "https://github.com/BigBlueHat"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/BigBlueHat> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/460275283> <http://schema.org/creator> <https://api.github.com/users/BigBlueHat> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/460275283> <http://schema.org/startDate> "2019-02-04T14:47:21Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/460275283> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/460275283> <http://schema.org/description> "Graph containers seem to map to @dlongley's desired feature of \"sealing a term, but not its contents.\"\r\n\r\nThe idea was (iirc) to essentially limit the ability to extend a document to things within a graph container--such that a sealed *context* would still be extensible within a graph container.\r\n\r\nSo...\r\n```json\r\n{\r\n  \"@context\": \"https://example.com/sealed-context.jsonld\",\r\n  \"name\": \"Term is sealed\",\r\n  \"items\": [\r\n    {\"@context\": \"https://example.com/extended-context.jsonld\",\r\n     \"name\": \"Not the same as the one above\"}\r\n  ]\r\n}\r\n```\r\n\r\nConversations have moved forward sense, then, but I'd mainly been trying to find a \"natural\" place for context extensibility where the areas of extensibility were clear--rather than \"random\" terms being sealed upstream by which ever context happened to get there first.\r\n\r\nHowever, this clearly limits the extensibility of a JSON document to what can be expressed *under* single terms--rather than adding extensions to the top-level keys...but that has it's own advantages. 😃 \r\n\r\nEssentially, it sees the \"parent\" document as a sealed envelop for other \"child\" documents (within the graph container) to carry their own semantics within the contents of that envelop." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/460346783> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/124#issuecomment-460346783"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/124> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/460346783> .
<https://api.github.com/users/pchampin> <http://schema.org/accountId> "pchampin" .
<https://api.github.com/users/pchampin> <http://schema.org/image> "https://avatars1.githubusercontent.com/u/304612?v=4" .
<https://api.github.com/users/pchampin> <http://schema.org/url> "https://github.com/pchampin"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/pchampin> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/460346783> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/460346783> <http://schema.org/startDate> "2019-02-04T17:56:27Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/460346783> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/460346783> <http://schema.org/description> "I have a list of my own that I was planning to post as well. I'll append it\nhere ASAP, and implement the changes -- expect for those where I'm not sure\nif it's purely editorial, of course.\n\n>\n" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/460355897> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/123#issuecomment-460355897"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/123> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/460355897> .
<https://api.github.com/users/pchampin> <http://schema.org/accountId> "pchampin" .
<https://api.github.com/users/pchampin> <http://schema.org/image> "https://avatars1.githubusercontent.com/u/304612?v=4" .
<https://api.github.com/users/pchampin> <http://schema.org/url> "https://github.com/pchampin"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/pchampin> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/460355897> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/460355897> <http://schema.org/startDate> "2019-02-04T18:21:48Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/460355897> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/460355897> <http://schema.org/description> "I agree, it feels like example 36 should look like\r\n```\r\n{\r\n  \"@context\": {\r\n    \"foaf\": \"http://xmlns.com/foaf/0.1/\",\r\n    \"xsd\": \"http://www.w3.org/2001/XMLSchema#\",\r\n    \"name\": \"foaf:name\",\r\n    \"foaf:age\": {\r\n      \"@id\": \"http://xmlns.com/foaf/0.1/age\",  <<<<< isn't this line missing?\r\n      \"@type\": \"xsd:integer\"\r\n    },\r\n    \"foaf:homepage\": {\r\n      \"@type\": \"@id\"\r\n    }\r\n  },\r\n  ...\r\n}\r\n```" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/460362383> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/124#issuecomment-460362383"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/124> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/460362383> .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/460362383> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/460362383> <http://schema.org/startDate> "2019-02-04T18:40:52Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/460362383> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/460362383> <http://schema.org/description> "> In preparing for the F2F I am re-reading the syntax document. I have spotted a bunch of issues that I consider editorial. Instead of filing a whole lot of mini issues, I have collected them here; I guess that these are really of interest for @gkellogg and @pchampin.\r\n> \r\n> This is the first batch; I have to go to do something else now. I will try to get to the end of the document tomorrow, using my airport waiting time and so...\r\n> \r\n> * [ ]  Section Set of Documents: I guess the reference to JSON-LD should go to the /TR URL (like for the API and framing) and not to the editor's draft...\r\n\r\nThis is handled at publication time automatically using the [conversions described in json-ld.js](https://github.com/w3c/json-ld-syntax/blob/master/common/jsonld.js#L20-L24). This was based on something you did for CSVW. Keeping them pointing to editorial versions for the editorial drafts makes sense to me.\r\n\r\n> * [ ]  The terms embedded and scoped contexts should be added to the list of terms in 1.4.\r\n\r\n👍 \r\n\r\n> * [ ]  I 1.4, it says \"A list object is a dictionary that has a @list key.\". Shouldn't it say \"... that has @list as a unique key.\"? I guess the same for **set**.\r\n\r\nExcept that it can also contain `@context` and `@data`, although that's not real common usage.\r\n\r\n> * [ ]  in 1.6: \"Within a directed graph, nodes with may be unnamed,...\": 'with' is probably superfluous.\r\n\r\n👍 \r\n\r\n> * [ ]  section 2: the first and third paragraphs are repetitive. I would think the first one is automatically generated by respec...\r\n\r\n👍 \r\n\r\n> * [ ]  section 2, namespace table: the only occurrence of the cred namespace is in its full expanded (URI) form, and not as a prefix. Should be removed from the table. The same holds for geojson and prov.\r\n\r\nThey're used in examples in Turtle and Tabular representations.\r\n\r\n> * [ ]  In both example 3 & 4 the comments overflow, ie, one has to scroll horizontally. Not very pleasant...\r\n\r\nHow do you think we should handle such commenting?\r\n\r\n> * [ ]  In 3.2: also in view of the separate discussion in #25 it may be a good idea to emphasize that IRI-s may also include non-URL-s, and that is absolutely fine as far as JSON-LD goes. A separate example using, for example, a `uuid` or `doi` IRI, or somethings similar, maybe helpful at that point...\r\n\r\n👍 \r\n\r\n> * [ ]  in 3.5: in the last two nodes the `@type` is not systematically marked with a `<code>`...\r\n\r\n👍 \r\n\r\n> * [ ]  in 3.5: it is difficult to understand what this quote:\r\n>   > The ability coerce a value using a term definition is distinct from setting one or more types on a node object, as the former does not result in new data being added to the graph, while the later manages node types through adding additional relationships to the graph.\r\n>   \r\n>   \r\n>   means at this point. I wonder whether it is not better placed in the section that describes type coercion...\r\n> * [ ]  Section 4.1 example 18 is the first example where the top level of the JSON-LD fragment is an array and not an object. I think this deserves a somewhat more detailed explanation, because (this is the same graph with two different objects, ie, this is a bush and not tree, etc). This also emphasizes why the fact that \"contexts may be used any time a dictionary is defined.\" makes real sense even on the top level.\r\n\r\n👍 \r\n\r\n> * [ ]  Also, in the same section: isn't what is described the in example 19 what we refer to as 'embedded context'? It may be worth naming this, it helped us in the discussions, it may help others...\r\n\r\n👍 \r\n\r\n> * [ ]  For some reasons, the link to the playground from example 24 yields a bunch of strange errors...\r\n\r\nLooks like an issue where the playground is not up to date (been some time, now 🤕  ).\r\n\r\n> * [ ]  No tabs to the various version ins example 25\r\n\r\nThe tabs for this are in example 26, which says that it is the expanded version of what is shown in 25.\r\n\r\n> * [ ]  I am not sure I understand the two paragraphs after example 30 in section 4.1.4. Is the first paragraph, ie,\r\n>   > In JSON-LD 1.0, terms may be chosen as compact IRI prefixes when compacting only if a simple term definition is used where the value ends with a URI gen-delim character (e.g, /, # and others, see [RFC3986]). The previous specification allows any term to be chosen as a compact IRI prefix, which led to a poor experience.\r\n>   \r\n>   \r\n>   The second sentence seems to contradict the first. And I looked into 1.0 and did not find such a restriction, although I may have missed it. Isn't it possible that the first sentence (which is repeated in the paragraph that follows) is what we introduce in 1.1? On the other hand, the paragraph _after_ the note seems to repeat the same information as the one _before_ the note.\r\n\r\nThis is from an [errata](https://lists.w3.org/Archives/Public/public-rdf-comments/2018Jan/0002.html), where we changed the behavior for 1.0 processors to place some restrictions on what can be used to create a prefix fo compact IRIs.\r\n\r\nWe could simplify the second paragraph to something like:\r\n\r\n> Additionally, in JSON-LD 1.1, terms may also be used as compact IRI prefixes if their expanded term definition contains a `@prefix` member with the value `true`.\r\n\r\n> * [ ]  After example 32: \"the term is a keyword are be ignored.\" the word 'be' is superfluous.\r\n\r\n👍 \r\n\r\n> * [ ]  I failed to understand, I must admit, the description after example 32. Also: as a casual reader, at this point, I do not know what 'compaction algorithm; and `@container` with a value `@set` means, so the whole paragraph, and the following example, is a mystery. Maybe this whole part should be moved to the compaction algorithm where it gets some sense...\r\n\r\nWe need something in the syntax document, as it describes legal syntax for authors to use, while the API document is targeted more at tool developers; perhaps you can suggest an alternate wording?\r\n\r\n> * [ ]  In the note \"Aliased keywords MUST NOT be used within a context, itself.\": is the comma necessary before 'itself'?\r\n\r\nI think so, but this gets into english grammar.\r\n\r\n> * [ ]  This description (after example 40):\r\n>   > When expanding, each value of @type is considered (ordering them lexographically) where that value is also a term in the active context having its own embedded context. If so, that embedded context is applied to the active context. When compacting, if a term is chosen to represent an IRI used as a value of @type where that term definition also has an embedded context, it is then applied to the active context to affect further compaction.\r\n>   \r\n>   \r\n>   would deserve its own example. It is very difficult to understand what it is (I failed...) Most notably, the first-time reader does not understand what 'Compacting' means, in fact. Maybe move that into the compaction section? (B.t.w., it should be 'lexicographically'...)\r\n\r\nWe can improve this wording and provide some examples of use. So as to not overburden the spec with examples, we might consider doing this in a separate document.\r\n\r\n> * [ ]  (still barney...) after 46 it may be worth adding _why_ the expansion of barney is different: the first occurrence is based on `@id`, hence is a relative URL, etc... Just to help the reader!\r\n\r\n👍 \r\n\r\n> * [ ]  Example 61, lists of lists... the definition does not really make it clear that `\"@container\":\"@list\"` is, sort of, recursive. At first read what it says that the immediate children are lists, but that does _not_ necessary means (from the text) that the array:\r\n>   ```\r\n>           [-10.0, -10.0],\r\n>           [10.0, -10.0],\r\n>           [10.0, 10.0],\r\n>           [-10.0, -10.0]\r\n>   ```\r\n>   is itself a list. It only says that if I have several of these groups, those constitute a list. (is this an editorial comment, actually?)\r\n\r\nI'll look at it further. Suggestions for improved wording appreciated.\r\n\r\n> * [ ]  for the first time reader, the usage of `@graph` to denote a bush does come a bit out of the blue in example 67. This explains a separate explanation (including emphasizing the difference between a tree and a bush?).\r\n\r\nWorth a further explanation.\r\n\r\n> * [ ]  end of 4.5.1 says:\r\n>   > It is worth noting that blank node identifiers may be relabeled during processing. If a developer finds that they refer to the blank node more than once, they should consider naming the node using a dereferenceable IRI so that it can also be referenced from other documents.\r\n>   \r\n>   \r\n>   Was this fact also true in JSON-LD 1.0? I thought the algorithm included an explicit way of generating the blank node id-s, which made them, essentially, fixed. If so, it may be worth emphasizing that in 1.1 the user should not expect that...\r\n\r\nIn 1.0 and 1.1, flattening and framing relabel blank nodes. And, of course, in RDF generation. You can use a blank node in JSON-LD, and it is largely honored through expansion and compaction, but otherwise, it's similar to other RDF serializations.\r\n\r\n> * [ ]  After example 71 in 4.6.1 it says:\r\n>   > This allows a developer to access the German version of the post using the following code snippet: `obj.post.de`.\r\n>   \r\n>   \r\n>   I think this should deserve a little bit more explanation as for `obj.post.de`: something whereby if the JSON-LD snippet is used by a traditional JSON processor in, e.g., Javascript, then this type of access to the values is made available, or something like that. Just say \"code snippet\" is a bit unclear for the reader and would look for something related to the JSON-LD processor code or something similar...\r\n\r\n👍 \r\n\r\n> * [ ]  I really believe that Section 4.8 should be separated from the rest of section 4. It is a very different ballgame when one begins to fiddle around with graphs...\r\n\r\nIt's an advanced concept, and making it a top-level section would actually give it more weight, so I'm not quite on the same page.\r\n" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/460362785> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/123#issuecomment-460362785"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/123> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/460362785> .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/460362785> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/460362785> <http://schema.org/startDate> "2019-02-04T18:42:05Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/460362785> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/460362785> <http://schema.org/description> "The `@id` isn't necessary in `foaf:age`, as it is in a compact IRI form, and it's ID can be determined. This may require some additional description, though." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/460367020> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/123#issuecomment-460367020"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/123> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/460367020> .
<https://api.github.com/users/pchampin> <http://schema.org/accountId> "pchampin" .
<https://api.github.com/users/pchampin> <http://schema.org/image> "https://avatars1.githubusercontent.com/u/304612?v=4" .
<https://api.github.com/users/pchampin> <http://schema.org/url> "https://github.com/pchampin"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/pchampin> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/460367020> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/460367020> <http://schema.org/startDate> "2019-02-04T18:54:22Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/460367020> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/460367020> <http://schema.org/description> "Gregg Kellogg wrote:\n\n> The @id isn't necessary in foaf:age, as it is in a compact IRI form, and\n> it's ID can be determined.\n>\nYes, but I thought that was was the text after the example was describing...\n\n> This may require some additional description, though.\n>\nIndeed. I don't grasp the difference between foaf:age and foaf:homepage\nthat the text is supposed to highlight.\n" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/460444754> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/123#issuecomment-460444754"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/123> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/460444754> .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/460444754> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/460444754> <http://schema.org/startDate> "2019-02-04T22:49:48Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/460444754> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/460444754> <http://schema.org/description> "Just above example 36 it says the following:\r\n\r\n> Compact IRIs and IRIs may be used on the left-hand side of a term definition.\r\n\r\nIn this case, `foaf:age` and `foaf:homepage` are such left-hand-side compact IRIs. As it says just below:\r\n\r\n> In the first approach, foaf:age declares both the IRI for the term (using short-form) as well as the `@type` associated with the term.\r\n\r\nThis seems pretty clear to me." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/460445683> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/123#issuecomment-460445683"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/123> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/460445683> .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/460445683> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/460445683> <http://schema.org/startDate> "2019-02-04T22:53:13Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/460445683> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/460445683> <http://schema.org/description> "@iherman said:\r\n\r\n> If the latter, we may want to consider revising this part of the algorithm and possibly disallowing certain combination. As it stands, this is the type of complication that may drive away people from JSON-LD...\r\n\r\nThis is been in since 1.0, and it seems fairly clear to me that when, say, `foaf:age` is used for the key of a term definition, that it implies an `@id`. Removing this, would break current usage and be incompatible with 1.0.\r\n\r\nHowever, I believe the use of compact IRIs as the keys of term definitions is rare, and best practice encourages the use of simple terms (e.g., `age`, and  `homepage`) which is much more idiomatic JSON." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/460579657> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/123#issuecomment-460579657"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/123> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/460579657> .
<https://api.github.com/users/pchampin> <http://schema.org/accountId> "pchampin" .
<https://api.github.com/users/pchampin> <http://schema.org/image> "https://avatars1.githubusercontent.com/u/304612?v=4" .
<https://api.github.com/users/pchampin> <http://schema.org/url> "https://github.com/pchampin"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/pchampin> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/460579657> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/460579657> <http://schema.org/startDate> "2019-02-05T10:04:23Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/460579657> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/460579657> <http://schema.org/description> "What is not clear to me, in the paragraph following example 36, is what the \"first approach\" and \"second approach\" are, and how they differ. The paragraph seems to imply that the term definition of `foaf:age` uses the first approach, and that the term definition of `foaf:homepage` uses the second approach.\r\n\r\n> In the first approach, `foaf:age` declares (...) the IRI for the term (using short-form) \r\n\r\nand then\r\n\r\n> In the second approach (...) The full IRI for `foaf:homepage` is determined by looking up the foaf prefix in the context. \r\n\r\nFor me, both stamements are equally true for both `foaf:age` and `foaf:homepage`...\r\n" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/460585868> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/116#issuecomment-460585868"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/116> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/460585868> .
<https://api.github.com/users/pchampin> <http://schema.org/accountId> "pchampin" .
<https://api.github.com/users/pchampin> <http://schema.org/image> "https://avatars1.githubusercontent.com/u/304612?v=4" .
<https://api.github.com/users/pchampin> <http://schema.org/url> "https://github.com/pchampin"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/pchampin> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/460585868> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/460585868> <http://schema.org/startDate> "2019-02-05T10:25:35Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/460585868> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/460585868> <http://schema.org/description> "I agree with Ivan, and it seems to me that we can do without this \"partial redefinition\" feature. Let me develop.\r\nConsider a seald context `http://example.org/context_a.jsonld` defined as below:\r\n```json\r\n{\r\n  \"@context\": {\r\n    \"@version\": 1.1,\r\n    \"@sealed\": true,\r\n    \"foo\": \"http://example.org/foo\",\r\n    \"ext\": {\r\n      \"@id\": \"http://example.org/ext\",\r\n      \"@context\": null\r\n  }\r\n}\r\n```\r\n`ext` is an \"extension\" property, reseting the context to allow possible redefinition of previously sealed terms.\r\nSay I want to use another context `http://example.org/context_b.jsonld` under property `ext`.\r\n\r\nThe \"partial redefinition\" feature is meant to address this use case. I would use it that way:\r\n\r\n```json\r\n{\r\n  \"@context\": [\r\n    \"http://example.org/context_a.jsonld\",\r\n    { \"ext\": { \"@context\": \"http://example.org/context_b.jsonld\" } }\r\n  ],\r\n  \"foo\": \"this is property foo as defined by context_a\",\r\n  \"ext\": {\r\n    \"foo\": \"this is property foo as defined by context_b\"\r\n  }\r\n}\r\n```\r\n\r\nBut I would argue that the following, which does not require the \"partial redefinition\" feature, is better:\r\n\r\n```json\r\n{\r\n  \"@context\": \"http://example.org/context_a.jsonld\",\r\n  \"foo\": \"this is property foo as defined by context_a\",\r\n  \"ext\": {\r\n    \"@context\": \"http://example.org/context_b.jsonld\",\r\n    \"foo\": \"this is property foo as defined by context_b\"\r\n  }\r\n}\r\n```\r\n\r\nIt is better IMO, because it makes it understandable for a non-JSON-LD processor, that the subtree under `ext` complies with the format identified by `http://example.org/context_b.jsonld`. See for example how Web Annotation manages [extensions](https://www.w3.org/TR/annotation-vocab/#extensions)." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/460589424> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/125#issuecomment-460589424"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/125> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/460589424> .
<https://api.github.com/users/iherman> <http://schema.org/accountId> "iherman" .
<https://api.github.com/users/iherman> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/520723?v=4" .
<https://api.github.com/users/iherman> <http://schema.org/url> "https://github.com/iherman"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/iherman> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/460589424> <http://schema.org/creator> <https://api.github.com/users/iherman> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/460589424> <http://schema.org/startDate> "2019-02-05T10:37:24Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/460589424> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/460589424> <http://schema.org/description> "Oops. I realized that this is exactly what `\"@container\": [\"@graph\", \"@id\"]` does. Stupid me; I am getting old and should probably be fired for incompetence...\r\n\r\nClosing." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/460681505> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/116#issuecomment-460681505"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/116> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/460681505> .
<https://api.github.com/users/dlongley> <http://schema.org/accountId> "dlongley" .
<https://api.github.com/users/dlongley> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/168137?v=4" .
<https://api.github.com/users/dlongley> <http://schema.org/url> "https://github.com/dlongley"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/dlongley> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/460681505> <http://schema.org/creator> <https://api.github.com/users/dlongley> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/460681505> <http://schema.org/startDate> "2019-02-05T15:31:18Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/460681505> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/460681505> <http://schema.org/description> "@pchampin,\r\n\r\n> But I would argue that the following, which does not require the \"partial redefinition\" feature, is better:\r\n> ```\r\n> {\r\n>   \"@context\": \"http://example.org/context_a.jsonld\",\r\n>    \"foo\": \"this is property foo as defined by context_a\",\r\n>    \"ext\": {\r\n>      \"@context\": \"http://example.org/context_b.jsonld\",\r\n>      \"foo\": \"this is property foo as defined by context_b\"\r\n>    }\r\n> }\r\n> ```\r\n\r\nI certainly think this should be one of the options -- and it solves an important use case. So +1 to this approach.\r\n\r\nHowever, I don't think it's enough on its own. For example, it does not handle the JSON-LD patch use case. The case above that achieves the same through a scoped context *does* handle that use case:\r\n\r\n```js\r\n{\r\n  \"@context\": {\r\n    \"recordPatch\": {\"@id\": \"ex:recordPatch\", \"@graph\": \"@container\"}\r\n  },\r\n  \"recordPatch\": {\r\n    \"@context\": [\r\n      \"https://w3id.org/json-ld-patch/v1\",\r\n      {\r\n        \"value\": {\r\n          // this *MUST NOT* be embedded below\r\n          \"@context\": [\r\n            \"https://w3id.org/did/v0.11\",\r\n            \"https://w3id.org/veres-one/v1\"\r\n          ]\r\n        }\r\n      }\r\n    ],\r\n    \"target\": \"did:v1:test:nym:z279yin3yjTDWAVJquwiB8jC7eMmJ7a5xwwekukh4nxGiWPF\",\r\n    \"sequence\": 0,\r\n    \"patch\": [\r\n      {\r\n        \"op\": \"add\",\r\n        \"path\": \"/service\",\r\n        \"value\": [\r\n          {\r\n            \"id\": \"urn:foo\",\r\n            \"serviceEndpoint\": \"https://agent.example.com/\",\r\n            \"type\": \"AgentService\"\r\n          }\r\n        ]\r\n      }\r\n    ]\r\n  }\r\n}\r\n```\r\n\r\nIn the above case, the terms nested inside `value` need to be defined, however, a `@context` must not be present or the patch will produce an incorrect result when applied. Here, being able to add a scoped context is the only way to achieve the desired outcome if `value` is sealed.\r\n\r\nIdeally, the ID of `value` would be sealed ... so only a scoped context could be added to it to apply definitions to what is nested underneath it. It is *possible* to require users of JSON-LD patch to define `value` entirely (and always make sure they use the proper definition), but this is more brittle." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/460702301> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/116#issuecomment-460702301"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/116> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/460702301> .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/460702301> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/460702301> <http://schema.org/startDate> "2019-02-05T16:22:39Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/460702301> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/460702301> <http://schema.org/description> "This approach should work with the update I made to the API PR, as processing a scoped context for a property acts as if the property term is not sealed." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/460826220> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/123#issuecomment-460826220"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/123> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/460826220> .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/460826220> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/460826220> <http://schema.org/startDate> "2019-02-05T22:18:09Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/460826220> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/460826220> <http://schema.org/description> "Ahh, yes, we should change `foaf:age` to just `age` to make this clear." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/460832508> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/87#issuecomment-460832508"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/87> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/460832508> .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/460832508> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/460832508> <http://schema.org/startDate> "2019-02-05T22:39:09Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/460832508> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/460832508> <http://schema.org/description> "Sealed graphs containers fall out of the API design, but to get the desired behavior, \"items\" would be sealed, but would have a scoped context of `null`:\r\n\r\n```json\r\n{\r\n  \"@context\": {\r\n    ...\r\n    \"name\": ...,\r\n    \"items\": {..., \"@context\": null}\r\n  }\r\n}\r\n```\r\n\r\nThis would really only be necessary if it was thought that extended-context.jsonld would re-define terms from sealed-context.jsonld, but IIRC, there is no notion of active context intended underneath `items` in any case." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/460833979> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/122#issuecomment-460833979"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/122> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/460833979> .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/460833979> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/460833979> <http://schema.org/startDate> "2019-02-05T22:44:05Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/460833979> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/460833979> <http://schema.org/description> "Yes, you're correct. This was based on [example 85](https://w3c.github.io/json-ld-syntax/#example-85-identifying-and-making-statements-about-a-graph), which names the graph as \"http://example.org/foaf-graph\", and there is, in fact, only one named graph.\r\n\r\nWe should probably change the example more completely to not give the wrong impression. @dlongley, perhaps there's something from claims that might be introduced here." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/460870217> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/128#issuecomment-460870217"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/128> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/460870217> .
<https://api.github.com/users/dlongley> <http://schema.org/accountId> "dlongley" .
<https://api.github.com/users/dlongley> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/168137?v=4" .
<https://api.github.com/users/dlongley> <http://schema.org/url> "https://github.com/dlongley"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/dlongley> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/460870217> <http://schema.org/creator> <https://api.github.com/users/dlongley> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/460870217> <http://schema.org/startDate> "2019-02-06T01:28:26Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/460870217> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/460870217> <http://schema.org/description> "This expresses the above using a single context:\r\n\r\n```js\r\n{\r\n  \"@context\" : {\r\n    \"a\": \"http://example.org/a\",\r\n    \"b\": \"http://example.org/b\",\r\n    \"c\":  \"http://example.org/c\",\r\n    \"b:predicate\" : { \"@type\" : \"@id\" }\r\n  },\r\n  \"@graph\": [{\r\n    \"@id\": \"http://example.org/gr1\",\r\n    \"@graph\": {\r\n      \"@id\": \"a:something\",\r\n      \"a:predicate\": \"value1\",\r\n      \"b:predicate\": \"c:something1\"\r\n    }\r\n  }, {\r\n    \"@id\": \"http://example.org/gr2\",\r\n    \"@graph\": {\r\n      \"@id\": \"a:something\",\r\n      \"a:predicate\": \"value2\",\r\n      \"b:predicate\": \"c:something2\"\r\n     }\r\n  }]\r\n}\r\n```" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/460950327> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/128#issuecomment-460950327"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/128> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/460950327> .
<https://api.github.com/users/pchampin> <http://schema.org/accountId> "pchampin" .
<https://api.github.com/users/pchampin> <http://schema.org/image> "https://avatars1.githubusercontent.com/u/304612?v=4" .
<https://api.github.com/users/pchampin> <http://schema.org/url> "https://github.com/pchampin"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/pchampin> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/460950327> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/460950327> <http://schema.org/startDate> "2019-02-06T09:11:04Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/460950327> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/460950327> <http://schema.org/description> "... which unfortunately gives the wrong impression that there are three graphs in this dataset. And I'm assuming this is why Ivan didn't naturally came up with this solution.\r\n\r\nWouldn't the following also work?\r\n```json\r\n{\r\n  \"@context\" : {\r\n    \"a\": \"http://example.org/a\",\r\n    \"b\": \"http://example.org/b\",\r\n    \"c\":  \"http://example.org/c\",\r\n    \"b:predicate\" : { \"@type\" : \"@id\" },\r\n    \"graphs\": {\r\n      \"@id\": \"@nest\",\r\n      \"@container\": [\"@graph\", \"@id\"]\r\n    }\r\n  },\r\n  \"graphs\": {\r\n    \"http://example.org/gr1\": {\r\n      \"@id\": \"a:something\",\r\n      \"a:predicate\": \"value1\",\r\n      \"b:predicate\": \"c:something1\"\r\n    },\r\n    \"http://example.org/gr2\": {\r\n      \"@id\": \"a:something\",\r\n      \"a:predicate\": \"value2\",\r\n      \"b:predicate\": \"c:something2\"\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n(the dev playground refuses it, but I'm assuming this is a missing implementations of the `@graph` container feature)...\r\n\r\nIf so, it might be worthwhile to document this \"pattern\", which might be more natural for some people?" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/460984103> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/128#issuecomment-460984103"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/128> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/460984103> .
<https://api.github.com/users/iherman> <http://schema.org/accountId> "iherman" .
<https://api.github.com/users/iherman> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/520723?v=4" .
<https://api.github.com/users/iherman> <http://schema.org/url> "https://github.com/iherman"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/iherman> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/460984103> <http://schema.org/creator> <https://api.github.com/users/iherman> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/460984103> <http://schema.org/startDate> "2019-02-06T11:04:25Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/460984103> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/460984103> <http://schema.org/description> "@dlongley indeed, https://github.com/w3c/json-ld-syntax/issues/128#issuecomment-460870217 also works but, just @pchampin remarks, it did not come naturally.\r\n\r\nThe point is a very long time grudge I have against the current syntax, namely the conflation of the term `@graph` for different usages. The outer level in this solution, in spite of its name, does _not_ define _any_ graph by itself, it is only a syntactic sugar to get around a problem imposed by JSON (and a problem that does not come in Turtle). The same is true when `@graph` is used for a single graph which has several roots (we referred to a 'bush'): it does _not_ define a graph in the RDF dataset term and the result is not really different from the shorter and friendlier way when a tree-like graph is defined.\r\n\r\nThere is still an open issue (#30) but I do realize this is a battle I am loosing. I was already messed up by the duality of the `@graph` usage in the JSON-LD 1.0 days, and I remember I was not successful either.\r\n\r\n@pchampin your example probably works, but shouldn't it be a `\"@nest\":\"graphs\"` on the top-level? I did not find a definition (or example) for `\"@id\":\"@nest\"` in the spec. But yes, otherwise the idea works, but it is just a (great) fig leaf to hide something that you are not supposed to see..." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/461053627> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/128#issuecomment-461053627"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/128> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/461053627> .
<https://api.github.com/users/dlongley> <http://schema.org/accountId> "dlongley" .
<https://api.github.com/users/dlongley> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/168137?v=4" .
<https://api.github.com/users/dlongley> <http://schema.org/url> "https://github.com/dlongley"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/dlongley> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/461053627> <http://schema.org/creator> <https://api.github.com/users/dlongley> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/461053627> <http://schema.org/startDate> "2019-02-06T14:59:17Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/461053627> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/461053627> <http://schema.org/description> "Yeah, I've never been a fan of overloading `@graph` in this way, but there were concerns about the number of keywords in JSON-LD 1.0 and I think this was compromise that was somewhat awkward but fell out of other algorithms/approaches. Its use was also considered quite rare so less of a concern." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/461076313> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/128#issuecomment-461076313"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/128> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/461076313> .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/461076313> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/461076313> <http://schema.org/startDate> "2019-02-06T15:57:35Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/461076313> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/461076313> <http://schema.org/description> "One thought that came up some time ago as to allow `@container` at the top level of a context, so you could have a processor interpret a top level object as a map of graph names.\r\n\r\n```json\r\n{\r\n  “@context”: {\r\n    “@container”: [“@graph”, “@id”]\r\n  }\r\n}\r\n```\r\n" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/461078315> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/128#issuecomment-461078315"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/128> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/461078315> .
<https://api.github.com/users/pchampin> <http://schema.org/accountId> "pchampin" .
<https://api.github.com/users/pchampin> <http://schema.org/image> "https://avatars1.githubusercontent.com/u/304612?v=4" .
<https://api.github.com/users/pchampin> <http://schema.org/url> "https://github.com/pchampin"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/pchampin> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/461078315> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/461078315> <http://schema.org/startDate> "2019-02-06T16:02:39Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/461078315> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/461078315> <http://schema.org/description> "I like that, but would it generalize to any kind of container? If not, wouldn't it be more confusing than helpful?" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/461215496> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/128#issuecomment-461215496"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/128> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/461215496> .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/461215496> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/461215496> <http://schema.org/startDate> "2019-02-06T22:35:04Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/461215496> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/461215496> <http://schema.org/description> "Yes, it would generalize, but note that it may be more confusing than its worth, as every value which is an object would then be interpreted as a graph map, unless each term redefined it, or another context changed it." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/461380685> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/108#issuecomment-461380685"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/108> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/461380685> .
<https://api.github.com/users/simonstey> <http://schema.org/accountId> "simonstey" .
<https://api.github.com/users/simonstey> <http://schema.org/image> "https://avatars2.githubusercontent.com/u/10495449?v=4" .
<https://api.github.com/users/simonstey> <http://schema.org/url> "https://github.com/simonstey"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/simonstey> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/461380685> <http://schema.org/creator> <https://api.github.com/users/simonstey> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/461380685> <http://schema.org/startDate> "2019-02-07T11:21:51Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/461380685> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/461380685> <http://schema.org/description> "> It is not yet clear in my mind how exactly we would identify a local cache, the array would be used for something like that.\r\n\r\n[maybe by using ETags?](https://developers.google.com/web/fundamentals/performance/optimizing-content-efficiency/http-caching#validating_cached_responses_with_etags)" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/461384536> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/108#issuecomment-461384536"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/108> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/461384536> .
<https://api.github.com/users/ajs6f> <http://schema.org/accountId> "ajs6f" .
<https://api.github.com/users/ajs6f> <http://schema.org/image> "https://avatars1.githubusercontent.com/u/110994?v=4" .
<https://api.github.com/users/ajs6f> <http://schema.org/url> "https://github.com/ajs6f"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/ajs6f> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/461384536> <http://schema.org/creator> <https://api.github.com/users/ajs6f> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/461384536> <http://schema.org/startDate> "2019-02-07T11:36:39Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/461384536> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/461384536> <http://schema.org/description> "@simonstey That might work in the HTTP setting, but wouldn't that be too restrictive for some IoT applications? There are some very different protocols in use there." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/461405655> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/108#issuecomment-461405655"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/108> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/461405655> .
<https://api.github.com/users/iherman> <http://schema.org/accountId> "iherman" .
<https://api.github.com/users/iherman> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/520723?v=4" .
<https://api.github.com/users/iherman> <http://schema.org/url> "https://github.com/iherman"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/iherman> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/461405655> <http://schema.org/creator> <https://api.github.com/users/iherman> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/461405655> <http://schema.org/startDate> "2019-02-07T12:47:55Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/461405655> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/461405655> <http://schema.org/description> "What about using the hash value, as described/defined by SRI? " .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/461407581> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/108#issuecomment-461407581"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/108> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/461407581> .
<https://api.github.com/users/simonstey> <http://schema.org/accountId> "simonstey" .
<https://api.github.com/users/simonstey> <http://schema.org/image> "https://avatars2.githubusercontent.com/u/10495449?v=4" .
<https://api.github.com/users/simonstey> <http://schema.org/url> "https://github.com/simonstey"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/simonstey> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/461407581> <http://schema.org/creator> <https://api.github.com/users/simonstey> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/461407581> <http://schema.org/startDate> "2019-02-07T12:54:25Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/461407581> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/461407581> <http://schema.org/description> "> @simonstey That might work in the HTTP setting, but wouldn't that be too restrictive for some IoT applications? There are some very different protocols in use there.\r\n\r\n@ajs6f true.. so why not just defer the task of identifying a local cache to implementations and add a note along the lines of [the one provided by the WoT WG](https://w3c.github.io/wot-thing-description/#sec-security-consideration-context) who also (afaik) don't define _how_ identifying a local cache has to be done, but e.g. say that _Vocabulary files should be cached whenever possible._" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/461592565> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/4#issuecomment-461592565"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/4> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/461592565> .
<https://api.github.com/users/azaroth42> <http://schema.org/accountId> "azaroth42" .
<https://api.github.com/users/azaroth42> <http://schema.org/image> "https://avatars3.githubusercontent.com/u/871868?v=4" .
<https://api.github.com/users/azaroth42> <http://schema.org/url> "https://github.com/azaroth42"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/azaroth42> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/461592565> <http://schema.org/creator> <https://api.github.com/users/azaroth42> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/461592565> <http://schema.org/startDate> "2019-02-07T20:56:31Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/461592565> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/461592565> <http://schema.org/description> "Use Case:  In the [CIDOC-CRM vocabulary](http://www.cidoc-crm.org/Version/version-6.2.4), there is a property that takes a Literal for the description of a Place.  This (thus) can take a lat,long pair as a string, or an XmlLiteral ... but not GeoJSON as a literal, as there is no JSON datatype. With a JSON data type, and support in JSON-LD for `@type:@json` in a term definition, we could thus embed the GeoJSON directly in the document, rather than unnecessarily serializing to a string.\r\n\r\n" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/462045742> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/20#issuecomment-462045742"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/20> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/462045742> .
<https://api.github.com/users/iherman> <http://schema.org/accountId> "iherman" .
<https://api.github.com/users/iherman> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/520723?v=4" .
<https://api.github.com/users/iherman> <http://schema.org/url> "https://github.com/iherman"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/iherman> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/462045742> <http://schema.org/creator> <https://api.github.com/users/iherman> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/462045742> <http://schema.org/startDate> "2019-02-09T13:45:00Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/462045742> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/462045742> <http://schema.org/description> "This issue was discussed in [a meeting](https://www.w3.org/2018/json-ld-wg/Meetings/Minutes/2019/2019-02-07-json-ld#section2).\r\n\r\n- `RESOLVED:  Adopt the following rules for sealing\r\n  1) If `@sealed:true` is encountered on a term definition in the active context, then attempts to redefine the term will fail and result in a warning.\r\n  2) If `@sealed:true` is encountered on a context, then all terms defined within the context should be treated as having `@sealed:true` in their definition\r\n  3) If `@sealed:false` is encountered on a term definition in the active context, where the context has been sealed with `@sealed:true`, then the sealing for that term is removed. {: #resolution1 .resolution}`\r\n- `RESOLVED:  Close #87, as unnecessary given above rules. {: #resolution2 .resolution}`\r\n- `RESOLVED:  Close #98, as `@context: null` clears context definitions {: #resolution3 .resolution}`\r\n- `RESOLVED:  Close #98, as `@context: null` clears context definitions {: #resolution4 .resolution}`\r\n- `RESOLVED:  if `@id` is not present in a term definition, and there is no default vocabulary, but has an expansion to an absolute IRI in the active context, then the `@id` of the new definition is taken from the active context (otherwise this is still an error) {: #resolution5 .resolution}`\r\n- `RESOLVED:  Once previous is done, we can close #116 {: #resolution6 .resolution}`\r\n- `RESOLVED:  We agree with the processing order per #61: scoped definition from property, then from type, then embedded. PR to update docs to come. {: #resolution7 .resolution}`\r\n<details><summary><i class=\"differentiate\">View the transcript</i></summary>\r\nSealed contexts<br/>\r\nIvan Herman: If we can’t get to a clear model and agreement on sealing today, I propose we defer it.<br/>\r\nAdam Soroka: If we happen to do that, what do we say to verifiable claims, etc?<br/>\r\nRob Sanderson: (reads guiding principles)<br/>\r\nRob Sanderson: <a href=\"https://www.w3.org/2018/json-ld-wg/WorkMode/guiding_principles\">https://www.w3.org/2018/json-ld-wg/WorkMode/guiding_principles</a><br/>\r\nRob Sanderson: sealed contexts - goal is to solve by end of day<br/>\r\nIvan Herman: one thing from last week’s discussions - sealing seems to be a very dangerous thing to do…<br/>\r\n… if Google decides to put a seal on schema.org, community will be unhappy …<br/>\r\nGregg Kellogg: we need to understand who we’re serving. Not there for schema.org, rather verifiable claims<br/>\r\n… specs as verifiable claims have a shared vocabulary, with some domains wide open, but people can’t change semantics<br/>\r\n… in spec, intentionally or otherwise<br/>\r\nBenjamin Young: chief aim of proposal is that json and json-ld world co-exist. Term sealing is to guarantee that …<br/>\r\n… json and json-ld authors work on exact same shape<br/>\r\n… maybe take a step back from sealing and see what other options there may be<br/>\r\n… notion of foundational shape surviving framing<br/>\r\nIvan Herman: what I understand from ver. claim. is that they have a wrapper w/ properties whose value is an object…<br/>\r\n… want to give total freedom for another vocabulary to leave locally. How about a syntax that says this is an extension point…<br/>\r\n… @context null + specific situation that is sealing + @context null<br/>\r\n… concentrate on this use case and try not to generalize<br/>\r\nRob Sanderson: sealing doesn’t solve actual shapes - just relationship between key and class. Not producing necessary structure<br/>\r\n… it is intersection of RDF semantic layer and JSON keys. Not shape thing as an API. Mapping not API<br/>\r\nPierre-Antoine Champin: goal of sealing is not to guarantee LD has same shape as plain JSON, but JSON LD that has the same shape…<br/>\r\n… has the same semantics.<br/>\r\n… agree with ivan – sealed is sealed from point to rest of subtree and not try to address unsealed point.<br/>\r\nDavid Newbury: Use case for unsealing is to insert user specified documents into structure. Unstructured JSON into LD…<br/>\r\nIvan Herman: may try to pick up json literal again<br/>\r\nIvan Herman: some examples don’t want literal, but piece of RDF graph but based on another vocabulary on its own<br/>\r\nDavid Newbury: do we need ability to interpret unsealed part in context of whole document?<br/>\r\nGregg Kellogg: yes<br/>\r\nDavid Newbury: do we have use cases where sealed and unsealed need to be interpreted?<br/>\r\nRob Sanderson: I think so<br/>\r\nRob Sanderson: Note - if we can’t solve by the end of the day, revisit the fallback position of JSON literals<br/>\r\nGregg Kellogg: We’re making this too hard. A sealed context is a collection of sealed terms – maintains original interpretation<br/>\r\n… an extension point is where you use a term that is not sealed…<br/>\r\n… say there is a named term in VC that has a given meaning, but want to be able to add other properties that aren’t sealed…<br/>\r\n… also need a “this is a place for you to put stuff” – creating a scoped context where properties can be re-interpreted.<br/>\r\n… sealed terms have fixed meaning when you use them.<br/>\r\nPierre-Antoine Champin: a term may be sealed (i.e. its meaning, esp. its IRI, can not be overridden) and an extension point (allow sealed terms to be overridden in its subtree)<br/>\r\nDavid I. Lehn: common use will be use an example, preserving semantics and adding on…<br/>\r\nAdam Soroka: we have ways to control shapes of json and RDF, but now we’re talking about a third way… controlling semantics<br/>\r\nPierre-Antoine Champin: gregg says extension points are properties that aren’t sealed — sealed means one cannot override<br/>\r\nGregg Kellogg: one approach is sealed context that allows context underneath to be unsealed…<br/>\r\nPierre-Antoine Champin: thanks @gkellogg, that’s clearer :)<br/>\r\nIvan Herman: i would like to hear a description of the exact sealing proposal<br/>\r\nGregg Kellogg: that would be pchampin’s PR<br/>\r\nIvan Herman: if we cannot explain where we are, we have a problem<br/>\r\nPierre-Antoine Champin: I agree with first 2 parts of the PR, the 3rd one is related to extension points<br/>\r\n… we don’t have the same model for unsealing<br/>\r\n… especially when it happens automatically<br/>\r\n… I think the sealed definitions in a context cannot be overwritten by anything in that context<br/>\r\nIvan Herman: if you seal a context, then the only way the terms can be overridden is in a scoped context within the sealed context?<br/>\r\nPierre-Antoine Champin: I think so<br/>\r\nGregg Kellogg: explicates example on whiteboard Test so03<br/>\r\nDavid I. Lehn: there are problems with this example because the inner context has no effect<br/>\r\nIvan Herman: we often use such examples, which I find a little unnatural<br/>\r\nHarold Solbrig: That confuses me<br/>\r\nIvan Herman: [discusses example]<br/>\r\nGregg Kellogg, Ivan Herman, Rob Sanderson: [edit and discuss example]<br/>\r\nIvan Herman: sealing seems to mean that the terms are cast in concrete<br/>\r\nIvan Herman: it is very difficult to explain exception<br/>\r\nDavid I. Lehn: Not sure why it’s unnatural?<br/>\r\nIvan Herman: if the context says “Sealed” that would seem to me to mean that everything is cast in concrete<br/>\r\n… but that doesn’t seem to be the case<br/>\r\n… we can change things with scoped contexts etc<br/>\r\nGregg Kellogg: this comes out of discussion of multiple sealed contexts<br/>\r\nHarold Solbrig: by changing this one term to add a typo, I can open up everything I thought I was sealing<br/>\r\nDavid Newbury: I would have assumed that by sealing a term, it would remain sealed<br/>\r\nGregg Kellogg: so once sealed, always sealed<br/>\r\nGregg Kellogg: that didn’t work for Verifiable Claims because they don’t want to intro a constraint on the JSON-LD within the wrapper<br/>\r\njeff mixer: can I constrain the type of value used with a term this way?<br/>\r\n<b>all:</b> no, JSON-LD has no way to constrain the types of values<br/>\r\nAdam Soroka: Agree completely. The wrapper compresses the protocol into the document<br/>\r\n… It pulls us toward sealing other things beyond just the mapping, but into complex chains<br/>\r\nHarold Solbrig: preventing people from accidentally overwriting contexts seems within our scope, but not all the further ramifications<br/>\r\nPierre-Antoine Champin: re: when terms become unsealed<br/>\r\n… it is genuinely hard to explain<br/>\r\n… I would say that a sealed term is sealed anywhere, except when the sealed context opens it<br/>\r\n… there are two situations in which one can redefine a sealed term<br/>\r\n… plain JSON users don’t expect the semantics to be sealed any more<br/>\r\n… we should leave the decision of when to unseal terms to the authors of the sealed context<br/>\r\nIvan Herman: an extension point means a combination of “context now” and “I cannot touch what is on the upper level”<br/>\r\nGregg Kellogg: {discusses Ivan’s example]<br/>\r\nIvan Herman: how about a keyword “extension” that means you cannot redefine anything you inherit?<br/>\r\nGregg Kellogg: not quite @context: null.<br/>\r\nDavid Newbury: if we have a context that defines ‘name’ within a sealed context, [points to examples]<br/>\r\nGregg Kellogg: [discusses examples]<br/>\r\n… it may be simpler in the end to say that sealed terms are always sealed except for @context:null<br/>\r\n… but subtleties arise when two sealed contexts interact<br/>\r\nRob Sanderson: can we do that example?<br/>\r\nIvan Herman: the only place where @context:null would have a nuclear option would be in the context that is sealed<br/>\r\nAdam Soroka: [discussion of various examples]<br/>\r\nGregg Kellogg: [refers to examples]<br/>\r\nDavid Newbury: ditto<br/>\r\nPierre-Antoine Champin: [example of two contexts conflicting]<br/>\r\nDavid Newbury: the confusion caused by accounting for the complex interactions outweighs the utility<br/>\r\nHarold Solbrig: what if we turned the pattern inside out and let contexts signify that they don’t intend to override?<br/>\r\n… if you want to enforce that, you do it on a vocabulary-specific basis<br/>\r\n… with rules for that particular context<br/>\r\nGregg Kellogg: so if a context lacked that flag, it would be harder to reuse it<br/>\r\nHarold Solbrig: depends on how much you care about this relationship between the contexts<br/>\r\nAdam Soroka: [discussion of what is or is not in scope for the use case and interoperability concern]<br/>\r\nGregg Kellogg: not clear how to specify that<br/>\r\nIvan Herman: going back to David’s example<br/>\r\nIvan Herman: [discusses example]<br/>\r\nRob Sanderson: [discusses example]<br/>\r\nGregg Kellogg: @context: null has a specific meaning and we are altering it<br/>\r\nIvan Herman: if we go down the road of “sealing”, then @context:null is going to conflict in some way and we will have to resolve it<br/>\r\nHarold Solbrig: that’s why I went for an extension-based approach<br/>\r\nGregg Kellogg: we have until noon!<br/>\r\nHarold Solbrig: can we get the use case in a more concrete form?<br/>\r\nDavid Newbury: I’m increasingly fond of Harold’s idea to put in an “extension” property that errors if something with it overrides a term<br/>\r\n… this allows me to write extensions that will work, but it may not be what VC need<br/>\r\nPierre-Antoine Champin: I have to think about that idea (Harold’s idea). gkellogg convinced me to try to explain again how a context becomes ineffective.<br/>\r\n… I’m in favor of saying that whenever I traverse a term that is not part of a sealed context, it’s not sealed anymore<br/>\r\n… after which a term could have been redefined: no guarantees about the semantics!<br/>\r\n… as for @context:null– maybe the “extension” idea is a better way to make extension points; it makes the unsealing specific<br/>\r\n… to make @context:null work one goes through both extension properties<br/>\r\nGregg Kellogg: let’s for the moment let’s put off the table any terms from a non-sealed context<br/>\r\n… the behavior I heard dlongley describe<br/>\r\n… is that history is wiped out and we start from scratch<br/>\r\nIvan Herman: I’m good so far<br/>\r\nGregg Kellogg: but if you do want to allow a mixture of sealed and unsealed terms, we get into the case that pchampin discussed<br/>\r\n… two ways to have an extension point: 1) an unsealed term, under which anything goes, 2) a sealed term that is defined as an extension point<br/>\r\n… and 2) doesn’t satisfy the use case<br/>\r\nIvan Herman: let’s say I have a claim, and I put into the context a @context:null to make an extension point.<br/>\r\n… the danger is that I will redefine a term from VC, accidentally or maliciously<br/>\r\n… IIUC VC, it’s a bit like Annotation<br/>\r\n… outsiders are expected to use their own vocabularies with these guys, without having to understand VC or Annotation<br/>\r\nGregg Kellogg: one case is that everything is wiped out, but the other is that you intermingle the use of properties<br/>\r\nIvan Herman: so I can add my own context<br/>\r\nGregg Kellogg: but not redefine terms<br/>\r\n… we would end up with semantics that differ between JSON and JSON-LD<br/>\r\nDavid I. Lehn: the way that Activity Streams does this is to say “You must not override or change contexts” as a normative piece (see <a href=\"https://www.w3.org/TR/activitystreams-core/#jsonld)\">https://www.w3.org/TR/activitystreams-core/#jsonld)</a><br/>\r\nRob Sanderson: people do this now by ordering the contexts<br/>\r\nRob Sanderson: [returns to examples]<br/>\r\nRob Sanderson: you can say that a sealed context can have an extension<br/>\r\n… having sealed on the context is confusing and makes more sense at the term level<br/>\r\nIvan Herman: what is the difference between sealed and extension<br/>\r\n… if extension was not true then there would be a warning<br/>\r\nIvan Herman: why not just say extension:true – it’s not setting a context?<br/>\r\nRob Sanderson: to distinguish from the case of this term being an extension<br/>\r\nGregg Kellogg: two different keywords that act on the context are unclear<br/>\r\nRob Sanderson: the change is that the default condition is “sealed”<br/>\r\nDave Longley: i’m on another call and can’t join, so i apologize… but was reading what’s here and thought i’d throw this in here… if there is a fear that schema.org (or contexts like it) might get sealed … we could allow {\"@context\": [{\"@contextref\": \"<a href=\"http://schema.org\",\">http://schema.org\",</a> \"@sealed\": false}, ...]} and the reason that would be ok for the sealed case we care about in VC community and so on, is because JSON processors would reject that … the context MUST be specified as a simple string, that’s what JSON-only processors would be looking for: {\"@context\": [\"<a href=\"https://w3id.org/credentials/v1\",\">https://w3id.org/credentials/v1\",</a> ...]}<br/>\r\nDavid Newbury: I thought we were talking about three use cases, one of which is ability to delete context, which is @context:null<br/>\r\n… are we trying to prevent people from overriding accidentally or maliciously?<br/>\r\nGregg Kellogg: we can’t prevent malice<br/>\r\nIvan Herman: it’s a clean slate… but not<br/>\r\nHarold Solbrig: @context:null is often too much<br/>\r\nAdam Soroka: gkellogg and ivan: [thrash more examples]<br/>\r\nRob Sanderson: we fundamentally don’t want the semantics to slip between JSON and JSON-lD<br/>\r\nRob Sanderson: [more examples]<br/>\r\nRob Sanderson: gkellogg: “extension” unseals everything, which is not @context:null<br/>\r\nAdam Soroka: [discusion of @context:null and whether it is a problem for the original use case]<br/>\r\nGregg Kellogg: if there’s another context with sealed terms and extension points<br/>\r\nRob Sanderson: regardless of which context has the sealing, extension overrides it.<br/>\r\nGregg Kellogg: that’s the simplest way<br/>\r\nBenjamin Young: <a href=\"https://github.com/w3c/json-ld-syntax/issues/20#issuecomment-442896360\">https://github.com/w3c/json-ld-syntax/issues/20#issuecomment-442896360</a><br/>\r\nBenjamin Young: dlongley and I discuss term ordering and inheritance<br/>\r\n… there is a problematic example there<br/>\r\n… [discusses vocabulary]<br/>\r\nBenjamin Young: <a href=\"https://github.com/w3c/json-ld-syntax/issues/20#issuecomment-454485321\">https://github.com/w3c/json-ld-syntax/issues/20#issuecomment-454485321</a><br/>\r\nBenjamin Young: this example shows how to avoid that by being verbose<br/>\r\n… [discusses problems that concern @type usage and inheritance]<br/>\r\nDavid Newbury: if I have two sealed contexts that define the same term, who wins?<br/>\r\nGregg Kellogg: last one in<br/>\r\nRob Sanderson: Reviewing the rules that we think we’re talking about.<br/>\r\nAdam Soroka: the use case is to avoid semantic slippage around terms when interpreted as JSON.<br/>\r\nRob Sanderson: If @extension:true is encountered in scoped context definition, then attempts to redefine terms from the active context will succeed.<br/>\r\nIvan Herman: If this is the rule, in the embedded context, I can also change the ID of that term?<br/>\r\nRob Sanderson: yes. You can redefine anything.<br/>\r\nIvan Herman: so if I have @extension : {}, the extension of the original key remains.<br/>\r\nGregg Kellogg: the effect of extensions: true is to update the active context and remove the sealed status of all terms within that context<br/>\r\n… allowing those terms to be renamed within the value of the extension property<br/>\r\nIvan Herman: so inside, something may be different than outside?<br/>\r\nGregg Kellogg: yes. It only makes sense within a scoped context, and only makes sense on a sealed term.<br/>\r\n… if you extend an unsealed property…<br/>\r\nGregg Kellogg: within an extension property, we can only define additional properties within that context.<br/>\r\nRob Sanderson: this is an error: [{\"extension\": { @id: extension_property, @sealed:true, @context: {@extension:true}}}}, { \"extension\":{@id: extension_propery}]<br/>\r\nRob Sanderson: extending unsealed terms is dumb, but not an error.<br/>\r\nPierre-Antoine Champin: I’m fine with this…in practice, this would mean that the plain JSON interpretation can only trust terms from the sealed context in the subtrees I defined.<br/>\r\n… because when there is a term from another context, theydon’t know anything about that term.<br/>\r\n… if we’re happy with this, we’re happy, but it seems like a lot of work to get to the same point.<br/>\r\nGregg Kellogg: I don’t think we’re at the same point.<br/>\r\n… it’s only when we transition to a property when it’s extension: true that we transition<br/>\r\nPierre-Antoine Champin: the assumption that JSON-only is the same–it’s only trustworthy when looking at sealed terms.<br/>\r\nGregg Kellogg: that’s consistent with the spec.<br/>\r\nPierre-Antoine Champin: right. that’s why I’m OK with this.<br/>\r\nRob Sanderson: the thing we’re not able to deal with is nulling out terms and then redetermining them. So it works.<br/>\r\n… so for VC, the context for the claim can start with null, which wipes out their context.<br/>\r\n… so I don’t think that VC will use extension: true.<br/>\r\nGregg Kellogg: do we have a use case for this?<br/>\r\nIvan Herman: I thought that they want to avoid that anyone includes in the claim things that redefine things within verifiable claims<br/>\r\nGregg Kellogg: I think that applies to the envelope<br/>\r\n… within the envelope, naive applications may not need to understand them.<br/>\r\n… for example, annotation properties<br/>\r\n… they come from another context<br/>\r\n… so if you introduce another term in the envelope, those envelope extensions won’t override the VC<br/>\r\nRob Sanderson: don’t mess with our stuff<br/>\r\n… vs:issuer should not be overridden, but if an extension defines ex:date, that’s fine. but the extension should not be able to override vs:issuer.<br/>\r\nGregg Kellogg: …explaining his example…<br/>\r\n… since we have both a sealed context and schema, name remains it’s context. within the extension, something could set the scoped context to null.<br/>\r\n… it could add a new context, and it could be anything.<br/>\r\n… thus, VC does not need extension<br/>\r\nIvan Herman: why are we doing this?<br/>\r\n… if this can be met with sealed and nullification, what is the use case for extension?<br/>\r\n… this is the simplest thing that can work. That’s what we should do.<br/>\r\n… do we need extension at any point?<br/>\r\nGregg Kellogg: I agree.<br/>\r\nAdam Soroka: so there’s no need for nullification<br/>\r\n… (i mean extension)<br/>\r\nGregg Kellogg: what we determined is that we’re not going to restrict @context: null. In that case, we don’t need the exceptions.<br/>\r\n… you can always do @context: null<br/>\r\n… thus, you can do it in a scoped context<br/>\r\n… meeting VC’s use case<br/>\r\nBenjamin Young: this VC is something that we haven’t discussed<br/>\r\n… We don’t have anything that addresses it .<br/>\r\n… since it’s type term usage, not property-term usage<br/>\r\n… can we describe it as a use-case?<br/>\r\n… term inheritance works…they don’t need sealing…<br/>\r\n… but the scoped context around @type breaks things<br/>\r\n… see the comment further down about getting around this by being verbose, but…this is how those things are extended.<br/>\r\n… using a base type, and adding additional types…so type ordering matters.<br/>\r\n… endorsed by handwaving, but would like a better mechanism<br/>\r\n… but this is where things are breaking<br/>\r\nBenjamin Young: example description is here <a href=\"https://github.com/w3c/json-ld-syntax/issues/20#issuecomment-442896360\">https://github.com/w3c/json-ld-syntax/issues/20#issuecomment-442896360</a><br/>\r\nBenjamin Young: verbosity “solution” is here <a href=\"https://github.com/w3c/json-ld-syntax/issues/20#issuecomment-454485321\">https://github.com/w3c/json-ld-syntax/issues/20#issuecomment-454485321</a><br/>\r\nGregg Kellogg: this example: we would process the scoped context for specificCredential…issue is defined in an example.<br/>\r\n… this is dlongley’s example, not mine<br/>\r\n… he was saying that the context ordering gets nullified by scope contexts and type…core vocabulary at the end doesn’t work, since types can override that.<br/>\r\nGregg Kellogg: scoped context would not override this if issuer is a sealed term<br/>\r\nBenjamin Young: we have two inheritance orders: CSS and FIFO<br/>\r\n… so we would flip them, so if sealing isn’t done properly, then we have problems<br/>\r\n… don’t know if there’s a solution here…other than a core vocabulary that comes first<br/>\r\nRob Sanderson: this seems to me to be application-logic-layer<br/>\r\n… so VC would have a sealed context…<br/>\r\nBenjamin Young: {\"@context\": {\"@sealed\": \"<a href=\"http://vc-data.example/\",\">http://vc-data.example/\",</a> \"@extensions\": [\"<a href=\"http://extension-1.exampe/\",\">http://extension-1.exampe/\",</a> \"<a href=\"http://other.example/extension\"]}}\">http://other.example/extension\"]}}</a><br/>\r\nRob Sanderson: …typing on the whiteboard…<br/>\r\nGregg Kellogg: so there’s a new extension keyword that imports without redefining?<br/>\r\nBenjamin Young: this is something totally different<br/>\r\nRob Sanderson: this just inverts where the properties live<br/>\r\nBenjamin Young: this means that the core is at the top, and the extensions below<br/>\r\nRob Sanderson: with would work with term definitions<br/>\r\nBenjamin Young: currently, you put the core last.<br/>\r\n… now you need to move it to the top, or potentially to both places<br/>\r\nGregg Kellogg: this means that the thing at the front and seal it, then it can’t be changed<br/>\r\nRob Sanderson: to me, sealing is the inversion of the property rules.<br/>\r\nBenjamin Young: this means that the scope documents now need to be explicitly 1.1<br/>\r\nRob Sanderson: if you’re using 1.1, but interpreting as 1.0, it will be strange.<br/>\r\nGregg Kellogg: I think we can only talk about what 1.1 will do<br/>\r\n… the reason that 1.1 is needed, so that if a 1.0 processor sees it, it will die<br/>\r\nBenjamin Young: so in 1.1 we’re inverting the order?<br/>\r\nGregg Kellogg: I don’t see it as inverting, I see it as a new effect.<br/>\r\nBenjamin Young: this sounds like !important in CSS<br/>\r\nGregg Kellogg: it continues to work<br/>\r\nBenjamin Young: even if someone else seals it first?<br/>\r\nGregg Kellogg: I think we need to table multiple contexts that seal<br/>\r\n… I don’t think it’s what we’re promoting<br/>\r\n… as a best practice, there should be only one<br/>\r\n… as a corner case, we should…<br/>\r\nIvan Herman: the usage of sealed in the grand scale of things will be minimal<br/>\r\n… if it’s awkward, then that’s OK, because this is rarely used.<br/>\r\nAdam Soroka: we don’t know this will be rare<br/>\r\nIvan Herman: our schema discussion showed us that we should not use sealed regularly.<br/>\r\n… common, vague vocabularies should not used sealed.<br/>\r\n… there are good use cases, but let’s be careful.<br/>\r\nGregg Kellogg: IMO, sealed should only be used by contexts defined in specifications where there is a dual JSON/JSON-LD processing mode, and then only rairly<br/>\r\nRob Sanderson: the other thing that’s important to put down is sealed is not a guarantee that it can’t be changed, but to prevent unintentional.<br/>\r\n… you can always put in a version 1.0…<br/>\r\nGregg Kellogg: you can’t go back<br/>\r\nIvan Herman: the @context:null option is there, so we can not defend against all malicious use<br/>\r\nRob Sanderson: so we don’t need extension: true, because there’s no use case and we can cover it by nulling and re-i porting?<br/>\r\n… so are we back to the simple rule?<br/>\r\n… If @sealed: true is encountered on a term definition, then attempts to redefine the term will fail and result in a warning.<br/>\r\nGregg Kellogg: with a note about using context:null<br/>\r\nAdam Soroka: so there’s no way that a term picks up an unintentional meaning<br/>\r\nHarold Solbrig: can I put a @sealed on the external context?<br/>\r\nGregg Kellogg: you can’t do that<br/>\r\nIvan Herman: you can’t seal someone else’s context<br/>\r\nHarold Solbrig: I would still like to be able to make sure that I don’t unintentionally reuse terms<br/>\r\nGregg Kellogg: can this be solved with SHEX?<br/>\r\nHarold Solbrig: maybe…<br/>\r\nPierre-Antoine Champin: what happened to redefining a term within a sealed context?<br/>\r\nGregg Kellogg: we said that’s not possible.<br/>\r\n… the only way to do this is to null the context<br/>\r\nPierre-Antoine Champin: so context:null could happen anywhere?<br/>\r\nRob Sanderson: correct<br/>\r\nPierre-Antoine Champin: so sealing prevents explicit redefining the sealed terms, but not guaranteeing their stability.<br/>\r\nGregg Kellogg: correct<br/>\r\nRob Sanderson: context: null is the way out of things, and you’d only do that in the VC case if you were trying to be malicious, and we’ve decided we can’t guard against that.<br/>\r\n… the intent is to avoid unintentional redefining.<br/>\r\n… to fix that, you need a preprocessor.<br/>\r\nAdam Soroka: is sealing now to strong a name?<br/>\r\nGregg Kellogg: it is sealed in the active context.<br/>\r\nPierre-Antoine Champin: I disagree; freezing (and sealing, for that matter) in JS is a quite different thing<br/>\r\nIvan Herman: let’s make a resolution, and go to lunch<br/>\r\nProposed resolution: Adopt the following rules for sealing - 1: If @sealed:true is encountered on a term definition in the active context, then attempts to redefine the term will fail and result in a warning. 2 - If @sealed:true is encountered on a context, then all terms defined within the context should be treated as having @sealed:true in their definition. 3- If @sealed:false is encountered on a term definition in the active context, where the context has been sealed with @sealed:true, then the sealing for that term is removed. (Rob Sanderson)<br/>\r\nHarold Solbrig: if there’s a sealed: false for an unsealed term, what happens?<br/>\r\nRob Sanderson: +1<br/>\r\nIvan Herman: +1<br/>\r\nGregg Kellogg: nothing–that doesn’t mean anything<br/>\r\nAdam Soroka: should we warn?<br/>\r\nGregg Kellogg: +1<br/>\r\nJeff Mixter: +1<br/>\r\nDavid Newbury: +1<br/>\r\nSimon Steyskal: +1<br/>\r\nHarold Solbrig: +1<br/>\r\nPierre-Antoine Champin: +0.5<br/>\r\nGregg Kellogg: we SHOULD<br/>\r\nAdam Soroka: +1<br/>\r\nBenjamin Young: +0 (would like to see use case mappings for all these things)<br/>\r\nDavid I. Lehn: +1<br/>\r\nResolution #1: Adopt the following rules for sealing - 1: If @sealed:true is encountered on a term definition in the active context, then attempts to redefine the term will fail and result in a warning. 2 - If @sealed:true is encountered on a context, then all terms defined within the context should be treated as having @sealed:true in their definition. 3- If @sealed:false is encountered on a term definition in the active context, where the context has been sealed with @sealed:true, then the sealing for that term is removed. {: #resolution1 .resolution}<br/>\r\nDave Longley: “If @sealed:false is encountered on a term definition in the active context, where the context has been sealed with @sealed:true, then the sealing for that term is removed.” &lt;– this sounds like a big problem as written …<br/>\r\nDave Longley: is this saying that with {\"@context\": [1, 2]} that 2 can unseal anything it wants?<br/>\r\nDave Longley: if so, that defeats the purpose of sealing … so i can only imagine that something else was meant by that text.<br/>\r\nDave Longley: it sounds like an attacker that defines 2 can get a VC to be successfully processed by a JSON-only processor in a different way from a JSON-LD processor under that condition<br/>\r\nDave Longley: i’ll check back here later to see if there’s a clarification<br/>\r\nDave Longley: if the ability to unseal a sealed context is a requirement (as opposed to just extending in an acceptable way) … it seems like we could do it without messing up JSON-only processors by using some other syntax that they would otherwise reject.<br/>\r\nDave Longley: JSON-only processors will be looking for {\"@context\": [<specific string>, <specific string>, ...ignored]}<br/>\r\nDave Longley: or could perhaps be further limited to: {\"@context\": [<specific string>, <specific string>, ...<must be a string but value is ignored>]}<br/>\r\nDave Longley: in other words, any deviation from some very rigid rules would cause a JSON-only processor to reject the input … which could be potentially used to our advantage if we need to cover other use cases where we are fearful of people sealing things that JSON-LD aware entities would like to unseal in a way that would not impact JSON-only processors.<br/>\r\nDave Longley: but what is key is that that any mechanism that is used to unseal would not impact JSON-only processors.<br/>\r\nDave Longley: if we can abide by that rule, i don’t see why i wouldn’t be supportive.<br/>\r\nRob Sanderson: dlongley: The @sealed:false would only work for the original definition, no subsequent attempt to redefine it<br/>\r\nRob Sanderson: It overrides the @sealed:true on the context<br/>\r\nRob Sanderson: But not @sealed:true on a term<br/>\r\nDave Longley: azaroth: ok, if I understand you I think that’s fine<br/>\r\nAdam Soroka: <a href=\"https://github.com/w3c/json-ld-syntax/issues/87\">https://github.com/w3c/json-ld-syntax/issues/87</a><br/>\r\n2.1. closing related issues<br/>\r\nProposed resolution: Close #87, as unnecessary given above rules. (Rob Sanderson)<br/>\r\nRob Sanderson: +1<br/>\r\nIvan Herman: +1<br/>\r\nGregg Kellogg: +1<br/>\r\nDavid Newbury: +1<br/>\r\nJeff Mixter: +1<br/>\r\nSimon Steyskal: +1<br/>\r\nDavid I. Lehn: +1<br/>\r\nResolution #2: Close #87, as unnecessary given above rules. {: #resolution2 .resolution}<br/>\r\nSimon Steyskal: <a href=\"https://github.com/w3c/json-ld-syntax/issues/98\">https://github.com/w3c/json-ld-syntax/issues/98</a><br/>\r\nProposed resolution: close #98, as unnecessary given the rules above (Ivan Herman)<br/>\r\nDavid Newbury: +1<br/>\r\nIvan Herman: +1<br/>\r\nProposed resolution: Close #98, as @context: null clears context definitions (Rob Sanderson)<br/>\r\nGregg Kellogg: +1<br/>\r\nRob Sanderson: +1<br/>\r\nHarold Solbrig: +1<br/>\r\nDavid I. Lehn: +1<br/>\r\nResolution #3: Close #98, as @context: null clears context definitions {: #resolution3 .resolution}<br/>\r\nResolution #4: Close #98, as @context: null clears context definitions {: #resolution4 .resolution}<br/>\r\nDavid I. Lehn: <a href=\"https://github.com/w3c/json-ld-syntax/issues/116\">https://github.com/w3c/json-ld-syntax/issues/116</a><br/>\r\nDavid I. Lehn: discussion of [<a href=\"https://github.com/w3c/json-ld-syntax/issues/116#issuecomment-460681505]\">https://github.com/w3c/json-ld-syntax/issues/116#issuecomment-460681505]</a><br/>\r\nDavid I. Lehn: [missed scribing much back and forth, trying to catch up on the gist]<br/>\r\nGregg Kellogg: [pointing out current algorithm could be modified based on some rules to handle the partial redefinition]<br/>\r\nIvan Herman: [concerns about backwards compatibility]<br/>\r\nGregg Kellogg: based on algorithm, 1.0 would fall through to new 1.1 behavior<br/>\r\nIvan Herman: sounds like adding more hacks<br/>\r\nDave Longley: also want it to be easier for json authors<br/>\r\nGregg Kellogg: we go towards side of being easier for authors<br/>\r\nDavid Newbury: hard to follow what is going on without knowing all the processing steps<br/>\r\nGregg Kellogg: not overriding term itself […?]<br/>\r\nRob Sanderson: more authors to explain to than people needing to understand this feature. on side of authors.<br/>\r\nDavid Newbury: issue with how things are overridden. seeing next term definition would think it fully overrode first one.<br/>\r\nIvan Herman: [worries about more complications]<br/>\r\nDavid Newbury: example seems like json in json-ld<br/>\r\nDavid I. Lehn: it’s a mix in this case, using json tools to process json-ld. would want to know the context of the data.<br/>\r\nRob Sanderson: [discussing how some examples would be processed]<br/>\r\nIvan Herman: adding new features to already complex system. really worried about it.<br/>\r\nDave Longley: understand ivan. A goal is to make ergonomics of 1.1 easier for users and better than 1.0<br/>\r\nProposed resolution: if @id is not present in a term definition, and there is no default vocabulary, but has an expansion to an absolute IRI in the active context, then the @id of the new definition is taken from the active context (otherwise this is still an error) (Rob Sanderson)<br/>\r\nRob Sanderson: +1<br/>\r\nIvan Herman: +1<br/>\r\nSimon Steyskal: +1<br/>\r\nGregg Kellogg: +1<br/>\r\nDave Longley: +1<br/>\r\nDavid I. Lehn: +1<br/>\r\nJeff Mixter: +1<br/>\r\nDavid Newbury: +0.5<br/>\r\nAdam Soroka: +1<br/>\r\nResolution #5: if @id is not present in a term definition, and there is no default vocabulary, but has an expansion to an absolute IRI in the active context, then the @id of the new definition is taken from the active context (otherwise this is still an error) {: #resolution5 .resolution}<br/>\r\nProposed resolution: Once previous is done, we can close #116 (Rob Sanderson)<br/>\r\nHarold Solbrig: +1<br/>\r\nIvan Herman: +1<br/>\r\nRob Sanderson: +1<br/>\r\nDavid Newbury: +1<br/>\r\nSimon Steyskal: +1<br/>\r\nJeff Mixter: +1<br/>\r\nDavid Newbury: +1<br/>\r\nRob Sanderson: +1<br/>\r\nHarold Solbrig: +1<br/>\r\nAdam Soroka: +1<br/>\r\nIvan Herman: +1<br/>\r\nRob Sanderson: Really 116 :)<br/>\r\nDavid I. Lehn: +1<br/>\r\nResolution #6: Once previous is done, we can close #116 {: #resolution6 .resolution}<br/>\r\nProposed resolution: We agree with the processing order per #61: scoped definition from property, then from type, then embedded. PR to update docs to come. (Rob Sanderson)<br/>\r\nIvan Herman: +1<br/>\r\nRob Sanderson: +1<br/>\r\nAdam Soroka: +1<br/>\r\nDavid I. Lehn: +1<br/>\r\nSimon Steyskal: +1<br/>\r\nDavid Newbury: +1<br/>\r\nJeff Mixter: +1<br/>\r\nHarold Solbrig: +1<br/>\r\nGregg Kellogg: +1<br/>\r\nResolution #7: We agree with the processing order per #61: scoped definition from property, then from type, then embedded. PR to update docs to come. {: #resolution7 .resolution}<br/>\r\nHarold Solbrig: scribnic hsolbrig<br/>\r\nGregg Kellogg: what if you said context null?<br/>\r\nRob Sanderson: it would wipe out all definitions<br/>\r\nGregg Kellogg: you could also seal activities<br/>\r\n</details>" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/462045800> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/87#issuecomment-462045800"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/87> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/462045800> .
<https://api.github.com/users/iherman> <http://schema.org/accountId> "iherman" .
<https://api.github.com/users/iherman> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/520723?v=4" .
<https://api.github.com/users/iherman> <http://schema.org/url> "https://github.com/iherman"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/iherman> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/462045800> <http://schema.org/creator> <https://api.github.com/users/iherman> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/462045800> <http://schema.org/startDate> "2019-02-09T13:45:39Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/462045800> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/462045800> <http://schema.org/description> "This issue was discussed in [a meeting](https://www.w3.org/2018/json-ld-wg/Meetings/Minutes/2019/2019-02-07-json-ld#section2).\r\n\r\n- `RESOLVED:  Adopt the following rules for sealing - 1: If @sealed:true is encountered on a term definition in the active context, then attempts to redefine the term will fail and result in a warning. 2 - If @sealed:true is encountered on a context, then all terms defined within the context should be treated as having @sealed:true in their definition. 3- If @sealed:false is encountered on a term definition in the active context, where the context has been sealed with @sealed:true, then the sealing for that term is removed. {: #resolution1 .resolution}`\r\n- `RESOLVED:  Close #87, as unnecessary given above rules. {: #resolution2 .resolution}`\r\n- `RESOLVED:  Close #98, as @context: null clears context definitions {: #resolution3 .resolution}`\r\n- `RESOLVED:  Close #98, as @context: null clears context definitions {: #resolution4 .resolution}`\r\n- `RESOLVED:  if @id is not present in a term definition, and there is no default vocabulary, but has an expansion to an absolute IRI in the active context, then the @id of the new definition is taken from the active context (otherwise this is still an error) {: #resolution5 .resolution}`\r\n- `RESOLVED:  Once previous is done, we can close #116 {: #resolution6 .resolution}`\r\n- `RESOLVED:  We agree with the processing order per #61: scoped definition from property, then from type, then embedded. PR to update docs to come. {: #resolution7 .resolution}`\r\n<details><summary><i class=\"differentiate\">View the transcript</i></summary>\r\nSealed contexts<br/>\r\nIvan Herman: If we can’t get to a clear model and agreement on sealing today, I propose we defer it.<br/>\r\nAdam Soroka: If we happen to do that, what do we say to verifiable claims, etc?<br/>\r\nRob Sanderson: (reads guiding principles)<br/>\r\nRob Sanderson: <a href=\"https://www.w3.org/2018/json-ld-wg/WorkMode/guiding_principles\">https://www.w3.org/2018/json-ld-wg/WorkMode/guiding_principles</a><br/>\r\nRob Sanderson: sealed contexts - goal is to solve by end of day<br/>\r\nIvan Herman: one thing from last week’s discussions - sealing seems to be a very dangerous thing to do…<br/>\r\n… if Google decides to put a seal on schema.org, community will be unhappy …<br/>\r\nGregg Kellogg: we need to understand who we’re serving. Not there for schema.org, rather verifiable claims<br/>\r\n… specs as verifiable claims have a shared vocabulary, with some domains wide open, but people can’t change semantics<br/>\r\n… in spec, intentionally or otherwise<br/>\r\nBenjamin Young: chief aim of proposal is that json and json-ld world co-exist. Term sealing is to guarantee that …<br/>\r\n… json and json-ld authors work on exact same shape<br/>\r\n… maybe take a step back from sealing and see what other options there may be<br/>\r\n… notion of foundational shape surviving framing<br/>\r\nIvan Herman: what I understand from ver. claim. is that they have a wrapper w/ properties whose value is an object…<br/>\r\n… want to give total freedom for another vocabulary to leave locally. How about a syntax that says this is an extension point…<br/>\r\n… @context null + specific situation that is sealing + @context null<br/>\r\n… concentrate on this use case and try not to generalize<br/>\r\nRob Sanderson: sealing doesn’t solve actual shapes - just relationship between key and class. Not producing necessary structure<br/>\r\n… it is intersection of RDF semantic layer and JSON keys. Not shape thing as an API. Mapping not API<br/>\r\nPierre-Antoine Champin: goal of sealing is not to guarantee LD has same shape as plain JSON, but JSON LD that has the same shape…<br/>\r\n… has the same semantics.<br/>\r\n… agree with ivan – sealed is sealed from point to rest of subtree and not try to address unsealed point.<br/>\r\nDavid Newbury: Use case for unsealing is to insert user specified documents into structure. Unstructured JSON into LD…<br/>\r\nIvan Herman: may try to pick up json literal again<br/>\r\nIvan Herman: some examples don’t want literal, but piece of RDF graph but based on another vocabulary on its own<br/>\r\nDavid Newbury: do we need ability to interpret unsealed part in context of whole document?<br/>\r\nGregg Kellogg: yes<br/>\r\nDavid Newbury: do we have use cases where sealed and unsealed need to be interpreted?<br/>\r\nRob Sanderson: I think so<br/>\r\nRob Sanderson: Note - if we can’t solve by the end of the day, revisit the fallback position of JSON literals<br/>\r\nGregg Kellogg: We’re making this too hard. A sealed context is a collection of sealed terms – maintains original interpretation<br/>\r\n… an extension point is where you use a term that is not sealed…<br/>\r\n… say there is a named term in VC that has a given meaning, but want to be able to add other properties that aren’t sealed…<br/>\r\n… also need a “this is a place for you to put stuff” – creating a scoped context where properties can be re-interpreted.<br/>\r\n… sealed terms have fixed meaning when you use them.<br/>\r\nPierre-Antoine Champin: a term may be sealed (i.e. its meaning, esp. its IRI, can not be overridden) and an extension point (allow sealed terms to be overridden in its subtree)<br/>\r\nDavid I. Lehn: common use will be use an example, preserving semantics and adding on…<br/>\r\nAdam Soroka: we have ways to control shapes of json and RDF, but now we’re talking about a third way… controlling semantics<br/>\r\nPierre-Antoine Champin: gregg says extension points are properties that aren’t sealed — sealed means one cannot override<br/>\r\nGregg Kellogg: one approach is sealed context that allows context underneath to be unsealed…<br/>\r\nPierre-Antoine Champin: thanks @gkellogg, that’s clearer :)<br/>\r\nIvan Herman: i would like to hear a description of the exact sealing proposal<br/>\r\nGregg Kellogg: that would be pchampin’s PR<br/>\r\nIvan Herman: if we cannot explain where we are, we have a problem<br/>\r\nPierre-Antoine Champin: I agree with first 2 parts of the PR, the 3rd one is related to extension points<br/>\r\n… we don’t have the same model for unsealing<br/>\r\n… especially when it happens automatically<br/>\r\n… I think the sealed definitions in a context cannot be overwritten by anything in that context<br/>\r\nIvan Herman: if you seal a context, then the only way the terms can be overridden is in a scoped context within the sealed context?<br/>\r\nPierre-Antoine Champin: I think so<br/>\r\nGregg Kellogg: explicates example on whiteboard Test so03<br/>\r\nDavid I. Lehn: there are problems with this example because the inner context has no effect<br/>\r\nIvan Herman: we often use such examples, which I find a little unnatural<br/>\r\nHarold Solbrig: That confuses me<br/>\r\nIvan Herman: [discusses example]<br/>\r\nGregg Kellogg, Ivan Herman, Rob Sanderson: [edit and discuss example]<br/>\r\nIvan Herman: sealing seems to mean that the terms are cast in concrete<br/>\r\nIvan Herman: it is very difficult to explain exception<br/>\r\nDavid I. Lehn: Not sure why it’s unnatural?<br/>\r\nIvan Herman: if the context says “Sealed” that would seem to me to mean that everything is cast in concrete<br/>\r\n… but that doesn’t seem to be the case<br/>\r\n… we can change things with scoped contexts etc<br/>\r\nGregg Kellogg: this comes out of discussion of multiple sealed contexts<br/>\r\nHarold Solbrig: by changing this one term to add a typo, I can open up everything I thought I was sealing<br/>\r\nDavid Newbury: I would have assumed that by sealing a term, it would remain sealed<br/>\r\nGregg Kellogg: so once sealed, always sealed<br/>\r\nGregg Kellogg: that didn’t work for Verifiable Claims because they don’t want to intro a constraint on the JSON-LD within the wrapper<br/>\r\njeff mixer: can I constrain the type of value used with a term this way?<br/>\r\n<b>all:</b> no, JSON-LD has no way to constrain the types of values<br/>\r\nAdam Soroka: Agree completely. The wrapper compresses the protocol into the document<br/>\r\n… It pulls us toward sealing other things beyond just the mapping, but into complex chains<br/>\r\nHarold Solbrig: preventing people from accidentally overwriting contexts seems within our scope, but not all the further ramifications<br/>\r\nPierre-Antoine Champin: re: when terms become unsealed<br/>\r\n… it is genuinely hard to explain<br/>\r\n… I would say that a sealed term is sealed anywhere, except when the sealed context opens it<br/>\r\n… there are two situations in which one can redefine a sealed term<br/>\r\n… plain JSON users don’t expect the semantics to be sealed any more<br/>\r\n… we should leave the decision of when to unseal terms to the authors of the sealed context<br/>\r\nIvan Herman: an extension point means a combination of “context now” and “I cannot touch what is on the upper level”<br/>\r\nGregg Kellogg: {discusses Ivan’s example]<br/>\r\nIvan Herman: how about a keyword “extension” that means you cannot redefine anything you inherit?<br/>\r\nGregg Kellogg: not quite @context: null.<br/>\r\nDavid Newbury: if we have a context that defines ‘name’ within a sealed context, [points to examples]<br/>\r\nGregg Kellogg: [discusses examples]<br/>\r\n… it may be simpler in the end to say that sealed terms are always sealed except for @context:null<br/>\r\n… but subtleties arise when two sealed contexts interact<br/>\r\nRob Sanderson: can we do that example?<br/>\r\nIvan Herman: the only place where @context:null would have a nuclear option would be in the context that is sealed<br/>\r\nAdam Soroka: [discussion of various examples]<br/>\r\nGregg Kellogg: [refers to examples]<br/>\r\nDavid Newbury: ditto<br/>\r\nPierre-Antoine Champin: [example of two contexts conflicting]<br/>\r\nDavid Newbury: the confusion caused by accounting for the complex interactions outweighs the utility<br/>\r\nHarold Solbrig: what if we turned the pattern inside out and let contexts signify that they don’t intend to override?<br/>\r\n… if you want to enforce that, you do it on a vocabulary-specific basis<br/>\r\n… with rules for that particular context<br/>\r\nGregg Kellogg: so if a context lacked that flag, it would be harder to reuse it<br/>\r\nHarold Solbrig: depends on how much you care about this relationship between the contexts<br/>\r\nAdam Soroka: [discussion of what is or is not in scope for the use case and interoperability concern]<br/>\r\nGregg Kellogg: not clear how to specify that<br/>\r\nIvan Herman: going back to David’s example<br/>\r\nIvan Herman: [discusses example]<br/>\r\nRob Sanderson: [discusses example]<br/>\r\nGregg Kellogg: @context: null has a specific meaning and we are altering it<br/>\r\nIvan Herman: if we go down the road of “sealing”, then @context:null is going to conflict in some way and we will have to resolve it<br/>\r\nHarold Solbrig: that’s why I went for an extension-based approach<br/>\r\nGregg Kellogg: we have until noon!<br/>\r\nHarold Solbrig: can we get the use case in a more concrete form?<br/>\r\nDavid Newbury: I’m increasingly fond of Harold’s idea to put in an “extension” property that errors if something with it overrides a term<br/>\r\n… this allows me to write extensions that will work, but it may not be what VC need<br/>\r\nPierre-Antoine Champin: I have to think about that idea (Harold’s idea). gkellogg convinced me to try to explain again how a context becomes ineffective.<br/>\r\n… I’m in favor of saying that whenever I traverse a term that is not part of a sealed context, it’s not sealed anymore<br/>\r\n… after which a term could have been redefined: no guarantees about the semantics!<br/>\r\n… as for @context:null– maybe the “extension” idea is a better way to make extension points; it makes the unsealing specific<br/>\r\n… to make @context:null work one goes through both extension properties<br/>\r\nGregg Kellogg: let’s for the moment let’s put off the table any terms from a non-sealed context<br/>\r\n… the behavior I heard dlongley describe<br/>\r\n… is that history is wiped out and we start from scratch<br/>\r\nIvan Herman: I’m good so far<br/>\r\nGregg Kellogg: but if you do want to allow a mixture of sealed and unsealed terms, we get into the case that pchampin discussed<br/>\r\n… two ways to have an extension point: 1) an unsealed term, under which anything goes, 2) a sealed term that is defined as an extension point<br/>\r\n… and 2) doesn’t satisfy the use case<br/>\r\nIvan Herman: let’s say I have a claim, and I put into the context a @context:null to make an extension point.<br/>\r\n… the danger is that I will redefine a term from VC, accidentally or maliciously<br/>\r\n… IIUC VC, it’s a bit like Annotation<br/>\r\n… outsiders are expected to use their own vocabularies with these guys, without having to understand VC or Annotation<br/>\r\nGregg Kellogg: one case is that everything is wiped out, but the other is that you intermingle the use of properties<br/>\r\nIvan Herman: so I can add my own context<br/>\r\nGregg Kellogg: but not redefine terms<br/>\r\n… we would end up with semantics that differ between JSON and JSON-LD<br/>\r\nDavid I. Lehn: the way that Activity Streams does this is to say “You must not override or change contexts” as a normative piece (see <a href=\"https://www.w3.org/TR/activitystreams-core/#jsonld)\">https://www.w3.org/TR/activitystreams-core/#jsonld)</a><br/>\r\nRob Sanderson: people do this now by ordering the contexts<br/>\r\nRob Sanderson: [returns to examples]<br/>\r\nRob Sanderson: you can say that a sealed context can have an extension<br/>\r\n… having sealed on the context is confusing and makes more sense at the term level<br/>\r\nIvan Herman: what is the difference between sealed and extension<br/>\r\n… if extension was not true then there would be a warning<br/>\r\nIvan Herman: why not just say extension:true – it’s not setting a context?<br/>\r\nRob Sanderson: to distinguish from the case of this term being an extension<br/>\r\nGregg Kellogg: two different keywords that act on the context are unclear<br/>\r\nRob Sanderson: the change is that the default condition is “sealed”<br/>\r\nDave Longley: i’m on another call and can’t join, so i apologize… but was reading what’s here and thought i’d throw this in here… if there is a fear that schema.org (or contexts like it) might get sealed … we could allow {\"@context\": [{\"@contextref\": \"<a href=\"http://schema.org\",\">http://schema.org\",</a> \"@sealed\": false}, ...]} and the reason that would be ok for the sealed case we care about in VC community and so on, is because JSON processors would reject that … the context MUST be specified as a simple string, that’s what JSON-only processors would be looking for: {\"@context\": [\"<a href=\"https://w3id.org/credentials/v1\",\">https://w3id.org/credentials/v1\",</a> ...]}<br/>\r\nDavid Newbury: I thought we were talking about three use cases, one of which is ability to delete context, which is @context:null<br/>\r\n… are we trying to prevent people from overriding accidentally or maliciously?<br/>\r\nGregg Kellogg: we can’t prevent malice<br/>\r\nIvan Herman: it’s a clean slate… but not<br/>\r\nHarold Solbrig: @context:null is often too much<br/>\r\nAdam Soroka: gkellogg and ivan: [thrash more examples]<br/>\r\nRob Sanderson: we fundamentally don’t want the semantics to slip between JSON and JSON-lD<br/>\r\nRob Sanderson: [more examples]<br/>\r\nRob Sanderson: gkellogg: “extension” unseals everything, which is not @context:null<br/>\r\nAdam Soroka: [discusion of @context:null and whether it is a problem for the original use case]<br/>\r\nGregg Kellogg: if there’s another context with sealed terms and extension points<br/>\r\nRob Sanderson: regardless of which context has the sealing, extension overrides it.<br/>\r\nGregg Kellogg: that’s the simplest way<br/>\r\nBenjamin Young: <a href=\"https://github.com/w3c/json-ld-syntax/issues/20#issuecomment-442896360\">https://github.com/w3c/json-ld-syntax/issues/20#issuecomment-442896360</a><br/>\r\nBenjamin Young: dlongley and I discuss term ordering and inheritance<br/>\r\n… there is a problematic example there<br/>\r\n… [discusses vocabulary]<br/>\r\nBenjamin Young: <a href=\"https://github.com/w3c/json-ld-syntax/issues/20#issuecomment-454485321\">https://github.com/w3c/json-ld-syntax/issues/20#issuecomment-454485321</a><br/>\r\nBenjamin Young: this example shows how to avoid that by being verbose<br/>\r\n… [discusses problems that concern @type usage and inheritance]<br/>\r\nDavid Newbury: if I have two sealed contexts that define the same term, who wins?<br/>\r\nGregg Kellogg: last one in<br/>\r\nRob Sanderson: Reviewing the rules that we think we’re talking about.<br/>\r\nAdam Soroka: the use case is to avoid semantic slippage around terms when interpreted as JSON.<br/>\r\nRob Sanderson: If @extension:true is encountered in scoped context definition, then attempts to redefine terms from the active context will succeed.<br/>\r\nIvan Herman: If this is the rule, in the embedded context, I can also change the ID of that term?<br/>\r\nRob Sanderson: yes. You can redefine anything.<br/>\r\nIvan Herman: so if I have @extension : {}, the extension of the original key remains.<br/>\r\nGregg Kellogg: the effect of extensions: true is to update the active context and remove the sealed status of all terms within that context<br/>\r\n… allowing those terms to be renamed within the value of the extension property<br/>\r\nIvan Herman: so inside, something may be different than outside?<br/>\r\nGregg Kellogg: yes. It only makes sense within a scoped context, and only makes sense on a sealed term.<br/>\r\n… if you extend an unsealed property…<br/>\r\nGregg Kellogg: within an extension property, we can only define additional properties within that context.<br/>\r\nRob Sanderson: this is an error: [{\"extension\": { @id: extension_property, @sealed:true, @context: {@extension:true}}}}, { \"extension\":{@id: extension_propery}]<br/>\r\nRob Sanderson: extending unsealed terms is dumb, but not an error.<br/>\r\nPierre-Antoine Champin: I’m fine with this…in practice, this would mean that the plain JSON interpretation can only trust terms from the sealed context in the subtrees I defined.<br/>\r\n… because when there is a term from another context, theydon’t know anything about that term.<br/>\r\n… if we’re happy with this, we’re happy, but it seems like a lot of work to get to the same point.<br/>\r\nGregg Kellogg: I don’t think we’re at the same point.<br/>\r\n… it’s only when we transition to a property when it’s extension: true that we transition<br/>\r\nPierre-Antoine Champin: the assumption that JSON-only is the same–it’s only trustworthy when looking at sealed terms.<br/>\r\nGregg Kellogg: that’s consistent with the spec.<br/>\r\nPierre-Antoine Champin: right. that’s why I’m OK with this.<br/>\r\nRob Sanderson: the thing we’re not able to deal with is nulling out terms and then redetermining them. So it works.<br/>\r\n… so for VC, the context for the claim can start with null, which wipes out their context.<br/>\r\n… so I don’t think that VC will use extension: true.<br/>\r\nGregg Kellogg: do we have a use case for this?<br/>\r\nIvan Herman: I thought that they want to avoid that anyone includes in the claim things that redefine things within verifiable claims<br/>\r\nGregg Kellogg: I think that applies to the envelope<br/>\r\n… within the envelope, naive applications may not need to understand them.<br/>\r\n… for example, annotation properties<br/>\r\n… they come from another context<br/>\r\n… so if you introduce another term in the envelope, those envelope extensions won’t override the VC<br/>\r\nRob Sanderson: don’t mess with our stuff<br/>\r\n… vs:issuer should not be overridden, but if an extension defines ex:date, that’s fine. but the extension should not be able to override vs:issuer.<br/>\r\nGregg Kellogg: …explaining his example…<br/>\r\n… since we have both a sealed context and schema, name remains it’s context. within the extension, something could set the scoped context to null.<br/>\r\n… it could add a new context, and it could be anything.<br/>\r\n… thus, VC does not need extension<br/>\r\nIvan Herman: why are we doing this?<br/>\r\n… if this can be met with sealed and nullification, what is the use case for extension?<br/>\r\n… this is the simplest thing that can work. That’s what we should do.<br/>\r\n… do we need extension at any point?<br/>\r\nGregg Kellogg: I agree.<br/>\r\nAdam Soroka: so there’s no need for nullification<br/>\r\n… (i mean extension)<br/>\r\nGregg Kellogg: what we determined is that we’re not going to restrict @context: null. In that case, we don’t need the exceptions.<br/>\r\n… you can always do @context: null<br/>\r\n… thus, you can do it in a scoped context<br/>\r\n… meeting VC’s use case<br/>\r\nBenjamin Young: this VC is something that we haven’t discussed<br/>\r\n… We don’t have anything that addresses it .<br/>\r\n… since it’s type term usage, not property-term usage<br/>\r\n… can we describe it as a use-case?<br/>\r\n… term inheritance works…they don’t need sealing…<br/>\r\n… but the scoped context around @type breaks things<br/>\r\n… see the comment further down about getting around this by being verbose, but…this is how those things are extended.<br/>\r\n… using a base type, and adding additional types…so type ordering matters.<br/>\r\n… endorsed by handwaving, but would like a better mechanism<br/>\r\n… but this is where things are breaking<br/>\r\nBenjamin Young: example description is here <a href=\"https://github.com/w3c/json-ld-syntax/issues/20#issuecomment-442896360\">https://github.com/w3c/json-ld-syntax/issues/20#issuecomment-442896360</a><br/>\r\nBenjamin Young: verbosity “solution” is here <a href=\"https://github.com/w3c/json-ld-syntax/issues/20#issuecomment-454485321\">https://github.com/w3c/json-ld-syntax/issues/20#issuecomment-454485321</a><br/>\r\nGregg Kellogg: this example: we would process the scoped context for specificCredential…issue is defined in an example.<br/>\r\n… this is dlongley’s example, not mine<br/>\r\n… he was saying that the context ordering gets nullified by scope contexts and type…core vocabulary at the end doesn’t work, since types can override that.<br/>\r\nGregg Kellogg: scoped context would not override this if issuer is a sealed term<br/>\r\nBenjamin Young: we have two inheritance orders: CSS and FIFO<br/>\r\n… so we would flip them, so if sealing isn’t done properly, then we have problems<br/>\r\n… don’t know if there’s a solution here…other than a core vocabulary that comes first<br/>\r\nRob Sanderson: this seems to me to be application-logic-layer<br/>\r\n… so VC would have a sealed context…<br/>\r\nBenjamin Young: {\"@context\": {\"@sealed\": \"<a href=\"http://vc-data.example/\",\">http://vc-data.example/\",</a> \"@extensions\": [\"<a href=\"http://extension-1.exampe/\",\">http://extension-1.exampe/\",</a> \"<a href=\"http://other.example/extension\"]}}\">http://other.example/extension\"]}}</a><br/>\r\nRob Sanderson: …typing on the whiteboard…<br/>\r\nGregg Kellogg: so there’s a new extension keyword that imports without redefining?<br/>\r\nBenjamin Young: this is something totally different<br/>\r\nRob Sanderson: this just inverts where the properties live<br/>\r\nBenjamin Young: this means that the core is at the top, and the extensions below<br/>\r\nRob Sanderson: with would work with term definitions<br/>\r\nBenjamin Young: currently, you put the core last.<br/>\r\n… now you need to move it to the top, or potentially to both places<br/>\r\nGregg Kellogg: this means that the thing at the front and seal it, then it can’t be changed<br/>\r\nRob Sanderson: to me, sealing is the inversion of the property rules.<br/>\r\nBenjamin Young: this means that the scope documents now need to be explicitly 1.1<br/>\r\nRob Sanderson: if you’re using 1.1, but interpreting as 1.0, it will be strange.<br/>\r\nGregg Kellogg: I think we can only talk about what 1.1 will do<br/>\r\n… the reason that 1.1 is needed, so that if a 1.0 processor sees it, it will die<br/>\r\nBenjamin Young: so in 1.1 we’re inverting the order?<br/>\r\nGregg Kellogg: I don’t see it as inverting, I see it as a new effect.<br/>\r\nBenjamin Young: this sounds like !important in CSS<br/>\r\nGregg Kellogg: it continues to work<br/>\r\nBenjamin Young: even if someone else seals it first?<br/>\r\nGregg Kellogg: I think we need to table multiple contexts that seal<br/>\r\n… I don’t think it’s what we’re promoting<br/>\r\n… as a best practice, there should be only one<br/>\r\n… as a corner case, we should…<br/>\r\nIvan Herman: the usage of sealed in the grand scale of things will be minimal<br/>\r\n… if it’s awkward, then that’s OK, because this is rarely used.<br/>\r\nAdam Soroka: we don’t know this will be rare<br/>\r\nIvan Herman: our schema discussion showed us that we should not use sealed regularly.<br/>\r\n… common, vague vocabularies should not used sealed.<br/>\r\n… there are good use cases, but let’s be careful.<br/>\r\nGregg Kellogg: IMO, sealed should only be used by contexts defined in specifications where there is a dual JSON/JSON-LD processing mode, and then only rairly<br/>\r\nRob Sanderson: the other thing that’s important to put down is sealed is not a guarantee that it can’t be changed, but to prevent unintentional.<br/>\r\n… you can always put in a version 1.0…<br/>\r\nGregg Kellogg: you can’t go back<br/>\r\nIvan Herman: the @context:null option is there, so we can not defend against all malicious use<br/>\r\nRob Sanderson: so we don’t need extension: true, because there’s no use case and we can cover it by nulling and re-i porting?<br/>\r\n… so are we back to the simple rule?<br/>\r\n… If @sealed: true is encountered on a term definition, then attempts to redefine the term will fail and result in a warning.<br/>\r\nGregg Kellogg: with a note about using context:null<br/>\r\nAdam Soroka: so there’s no way that a term picks up an unintentional meaning<br/>\r\nHarold Solbrig: can I put a @sealed on the external context?<br/>\r\nGregg Kellogg: you can’t do that<br/>\r\nIvan Herman: you can’t seal someone else’s context<br/>\r\nHarold Solbrig: I would still like to be able to make sure that I don’t unintentionally reuse terms<br/>\r\nGregg Kellogg: can this be solved with SHEX?<br/>\r\nHarold Solbrig: maybe…<br/>\r\nPierre-Antoine Champin: what happened to redefining a term within a sealed context?<br/>\r\nGregg Kellogg: we said that’s not possible.<br/>\r\n… the only way to do this is to null the context<br/>\r\nPierre-Antoine Champin: so context:null could happen anywhere?<br/>\r\nRob Sanderson: correct<br/>\r\nPierre-Antoine Champin: so sealing prevents explicit redefining the sealed terms, but not guaranteeing their stability.<br/>\r\nGregg Kellogg: correct<br/>\r\nRob Sanderson: context: null is the way out of things, and you’d only do that in the VC case if you were trying to be malicious, and we’ve decided we can’t guard against that.<br/>\r\n… the intent is to avoid unintentional redefining.<br/>\r\n… to fix that, you need a preprocessor.<br/>\r\nAdam Soroka: is sealing now to strong a name?<br/>\r\nGregg Kellogg: it is sealed in the active context.<br/>\r\nPierre-Antoine Champin: I disagree; freezing (and sealing, for that matter) in JS is a quite different thing<br/>\r\nIvan Herman: let’s make a resolution, and go to lunch<br/>\r\nProposed resolution: Adopt the following rules for sealing - 1: If @sealed:true is encountered on a term definition in the active context, then attempts to redefine the term will fail and result in a warning. 2 - If @sealed:true is encountered on a context, then all terms defined within the context should be treated as having @sealed:true in their definition. 3- If @sealed:false is encountered on a term definition in the active context, where the context has been sealed with @sealed:true, then the sealing for that term is removed. (Rob Sanderson)<br/>\r\nHarold Solbrig: if there’s a sealed: false for an unsealed term, what happens?<br/>\r\nRob Sanderson: +1<br/>\r\nIvan Herman: +1<br/>\r\nGregg Kellogg: nothing–that doesn’t mean anything<br/>\r\nAdam Soroka: should we warn?<br/>\r\nGregg Kellogg: +1<br/>\r\nJeff Mixter: +1<br/>\r\nDavid Newbury: +1<br/>\r\nSimon Steyskal: +1<br/>\r\nHarold Solbrig: +1<br/>\r\nPierre-Antoine Champin: +0.5<br/>\r\nGregg Kellogg: we SHOULD<br/>\r\nAdam Soroka: +1<br/>\r\nBenjamin Young: +0 (would like to see use case mappings for all these things)<br/>\r\nDavid I. Lehn: +1<br/>\r\nResolution #1: Adopt the following rules for sealing - 1: If @sealed:true is encountered on a term definition in the active context, then attempts to redefine the term will fail and result in a warning. 2 - If @sealed:true is encountered on a context, then all terms defined within the context should be treated as having @sealed:true in their definition. 3- If @sealed:false is encountered on a term definition in the active context, where the context has been sealed with @sealed:true, then the sealing for that term is removed. {: #resolution1 .resolution}<br/>\r\nDave Longley: “If @sealed:false is encountered on a term definition in the active context, where the context has been sealed with @sealed:true, then the sealing for that term is removed.” &lt;– this sounds like a big problem as written …<br/>\r\nDave Longley: is this saying that with {\"@context\": [1, 2]} that 2 can unseal anything it wants?<br/>\r\nDave Longley: if so, that defeats the purpose of sealing … so i can only imagine that something else was meant by that text.<br/>\r\nDave Longley: it sounds like an attacker that defines 2 can get a VC to be successfully processed by a JSON-only processor in a different way from a JSON-LD processor under that condition<br/>\r\nDave Longley: i’ll check back here later to see if there’s a clarification<br/>\r\nDave Longley: if the ability to unseal a sealed context is a requirement (as opposed to just extending in an acceptable way) … it seems like we could do it without messing up JSON-only processors by using some other syntax that they would otherwise reject.<br/>\r\nDave Longley: JSON-only processors will be looking for {\"@context\": [<specific string>, <specific string>, ...ignored]}<br/>\r\nDave Longley: or could perhaps be further limited to: {\"@context\": [<specific string>, <specific string>, ...<must be a string but value is ignored>]}<br/>\r\nDave Longley: in other words, any deviation from some very rigid rules would cause a JSON-only processor to reject the input … which could be potentially used to our advantage if we need to cover other use cases where we are fearful of people sealing things that JSON-LD aware entities would like to unseal in a way that would not impact JSON-only processors.<br/>\r\nDave Longley: but what is key is that that any mechanism that is used to unseal would not impact JSON-only processors.<br/>\r\nDave Longley: if we can abide by that rule, i don’t see why i wouldn’t be supportive.<br/>\r\nRob Sanderson: dlongley: The @sealed:false would only work for the original definition, no subsequent attempt to redefine it<br/>\r\nRob Sanderson: It overrides the @sealed:true on the context<br/>\r\nRob Sanderson: But not @sealed:true on a term<br/>\r\nDave Longley: azaroth: ok, if I understand you I think that’s fine<br/>\r\nAdam Soroka: <a href=\"https://github.com/w3c/json-ld-syntax/issues/87\">https://github.com/w3c/json-ld-syntax/issues/87</a><br/>\r\n2.1. closing related issues<br/>\r\nProposed resolution: Close #87, as unnecessary given above rules. (Rob Sanderson)<br/>\r\nRob Sanderson: +1<br/>\r\nIvan Herman: +1<br/>\r\nGregg Kellogg: +1<br/>\r\nDavid Newbury: +1<br/>\r\nJeff Mixter: +1<br/>\r\nSimon Steyskal: +1<br/>\r\nDavid I. Lehn: +1<br/>\r\nResolution #2: Close #87, as unnecessary given above rules. {: #resolution2 .resolution}<br/>\r\nSimon Steyskal: <a href=\"https://github.com/w3c/json-ld-syntax/issues/98\">https://github.com/w3c/json-ld-syntax/issues/98</a><br/>\r\nProposed resolution: close #98, as unnecessary given the rules above (Ivan Herman)<br/>\r\nDavid Newbury: +1<br/>\r\nIvan Herman: +1<br/>\r\nProposed resolution: Close #98, as @context: null clears context definitions (Rob Sanderson)<br/>\r\nGregg Kellogg: +1<br/>\r\nRob Sanderson: +1<br/>\r\nHarold Solbrig: +1<br/>\r\nDavid I. Lehn: +1<br/>\r\nResolution #3: Close #98, as @context: null clears context definitions {: #resolution3 .resolution}<br/>\r\nResolution #4: Close #98, as @context: null clears context definitions {: #resolution4 .resolution}<br/>\r\nDavid I. Lehn: <a href=\"https://github.com/w3c/json-ld-syntax/issues/116\">https://github.com/w3c/json-ld-syntax/issues/116</a><br/>\r\nDavid I. Lehn: discussion of [<a href=\"https://github.com/w3c/json-ld-syntax/issues/116#issuecomment-460681505]\">https://github.com/w3c/json-ld-syntax/issues/116#issuecomment-460681505]</a><br/>\r\nDavid I. Lehn: [missed scribing much back and forth, trying to catch up on the gist]<br/>\r\nGregg Kellogg: [pointing out current algorithm could be modified based on some rules to handle the partial redefinition]<br/>\r\nIvan Herman: [concerns about backwards compatibility]<br/>\r\nGregg Kellogg: based on algorithm, 1.0 would fall through to new 1.1 behavior<br/>\r\nIvan Herman: sounds like adding more hacks<br/>\r\nDave Longley: also want it to be easier for json authors<br/>\r\nGregg Kellogg: we go towards side of being easier for authors<br/>\r\nDavid Newbury: hard to follow what is going on without knowing all the processing steps<br/>\r\nGregg Kellogg: not overriding term itself […?]<br/>\r\nRob Sanderson: more authors to explain to than people needing to understand this feature. on side of authors.<br/>\r\nDavid Newbury: issue with how things are overridden. seeing next term definition would think it fully overrode first one.<br/>\r\nIvan Herman: [worries about more complications]<br/>\r\nDavid Newbury: example seems like json in json-ld<br/>\r\nDavid I. Lehn: it’s a mix in this case, using json tools to process json-ld. would want to know the context of the data.<br/>\r\nRob Sanderson: [discussing how some examples would be processed]<br/>\r\nIvan Herman: adding new features to already complex system. really worried about it.<br/>\r\nDave Longley: understand ivan. A goal is to make ergonomics of 1.1 easier for users and better than 1.0<br/>\r\nProposed resolution: if @id is not present in a term definition, and there is no default vocabulary, but has an expansion to an absolute IRI in the active context, then the @id of the new definition is taken from the active context (otherwise this is still an error) (Rob Sanderson)<br/>\r\nRob Sanderson: +1<br/>\r\nIvan Herman: +1<br/>\r\nSimon Steyskal: +1<br/>\r\nGregg Kellogg: +1<br/>\r\nDave Longley: +1<br/>\r\nDavid I. Lehn: +1<br/>\r\nJeff Mixter: +1<br/>\r\nDavid Newbury: +0.5<br/>\r\nAdam Soroka: +1<br/>\r\nResolution #5: if @id is not present in a term definition, and there is no default vocabulary, but has an expansion to an absolute IRI in the active context, then the @id of the new definition is taken from the active context (otherwise this is still an error) {: #resolution5 .resolution}<br/>\r\nProposed resolution: Once previous is done, we can close #116 (Rob Sanderson)<br/>\r\nHarold Solbrig: +1<br/>\r\nIvan Herman: +1<br/>\r\nRob Sanderson: +1<br/>\r\nDavid Newbury: +1<br/>\r\nSimon Steyskal: +1<br/>\r\nJeff Mixter: +1<br/>\r\nDavid Newbury: +1<br/>\r\nRob Sanderson: +1<br/>\r\nHarold Solbrig: +1<br/>\r\nAdam Soroka: +1<br/>\r\nIvan Herman: +1<br/>\r\nRob Sanderson: Really 116 :)<br/>\r\nDavid I. Lehn: +1<br/>\r\nResolution #6: Once previous is done, we can close #116 {: #resolution6 .resolution}<br/>\r\nProposed resolution: We agree with the processing order per #61: scoped definition from property, then from type, then embedded. PR to update docs to come. (Rob Sanderson)<br/>\r\nIvan Herman: +1<br/>\r\nRob Sanderson: +1<br/>\r\nAdam Soroka: +1<br/>\r\nDavid I. Lehn: +1<br/>\r\nSimon Steyskal: +1<br/>\r\nDavid Newbury: +1<br/>\r\nJeff Mixter: +1<br/>\r\nHarold Solbrig: +1<br/>\r\nGregg Kellogg: +1<br/>\r\nResolution #7: We agree with the processing order per #61: scoped definition from property, then from type, then embedded. PR to update docs to come. {: #resolution7 .resolution}<br/>\r\nHarold Solbrig: scribnic hsolbrig<br/>\r\nGregg Kellogg: what if you said context null?<br/>\r\nRob Sanderson: it would wipe out all definitions<br/>\r\nGregg Kellogg: you could also seal activities<br/>\r\n</details>" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/462045861> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/98#issuecomment-462045861"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/98> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/462045861> .
<https://api.github.com/users/iherman> <http://schema.org/accountId> "iherman" .
<https://api.github.com/users/iherman> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/520723?v=4" .
<https://api.github.com/users/iherman> <http://schema.org/url> "https://github.com/iherman"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/iherman> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/462045861> <http://schema.org/creator> <https://api.github.com/users/iherman> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/462045861> <http://schema.org/startDate> "2019-02-09T13:46:14Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/462045861> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/462045861> <http://schema.org/description> "This issue was discussed in [a meeting](https://www.w3.org/2018/json-ld-wg/Meetings/Minutes/2019/2019-02-07-json-ld#section2).\r\n\r\n- `RESOLVED:  Adopt the following rules for sealing - 1: If @sealed:true is encountered on a term definition in the active context, then attempts to redefine the term will fail and result in a warning. 2 - If @sealed:true is encountered on a context, then all terms defined within the context should be treated as having @sealed:true in their definition. 3- If @sealed:false is encountered on a term definition in the active context, where the context has been sealed with @sealed:true, then the sealing for that term is removed. {: #resolution1 .resolution}`\r\n- `RESOLVED:  Close #87, as unnecessary given above rules. {: #resolution2 .resolution}`\r\n- `RESOLVED:  Close #98, as @context: null clears context definitions {: #resolution3 .resolution}`\r\n- `RESOLVED:  Close #98, as @context: null clears context definitions {: #resolution4 .resolution}`\r\n- `RESOLVED:  if @id is not present in a term definition, and there is no default vocabulary, but has an expansion to an absolute IRI in the active context, then the @id of the new definition is taken from the active context (otherwise this is still an error) {: #resolution5 .resolution}`\r\n- `RESOLVED:  Once previous is done, we can close #116 {: #resolution6 .resolution}`\r\n- `RESOLVED:  We agree with the processing order per #61: scoped definition from property, then from type, then embedded. PR to update docs to come. {: #resolution7 .resolution}`\r\n<details><summary><i class=\"differentiate\">View the transcript</i></summary>\r\nSealed contexts<br/>\r\nIvan Herman: If we can’t get to a clear model and agreement on sealing today, I propose we defer it.<br/>\r\nAdam Soroka: If we happen to do that, what do we say to verifiable claims, etc?<br/>\r\nRob Sanderson: (reads guiding principles)<br/>\r\nRob Sanderson: <a href=\"https://www.w3.org/2018/json-ld-wg/WorkMode/guiding_principles\">https://www.w3.org/2018/json-ld-wg/WorkMode/guiding_principles</a><br/>\r\nRob Sanderson: sealed contexts - goal is to solve by end of day<br/>\r\nIvan Herman: one thing from last week’s discussions - sealing seems to be a very dangerous thing to do…<br/>\r\n… if Google decides to put a seal on schema.org, community will be unhappy …<br/>\r\nGregg Kellogg: we need to understand who we’re serving. Not there for schema.org, rather verifiable claims<br/>\r\n… specs as verifiable claims have a shared vocabulary, with some domains wide open, but people can’t change semantics<br/>\r\n… in spec, intentionally or otherwise<br/>\r\nBenjamin Young: chief aim of proposal is that json and json-ld world co-exist. Term sealing is to guarantee that …<br/>\r\n… json and json-ld authors work on exact same shape<br/>\r\n… maybe take a step back from sealing and see what other options there may be<br/>\r\n… notion of foundational shape surviving framing<br/>\r\nIvan Herman: what I understand from ver. claim. is that they have a wrapper w/ properties whose value is an object…<br/>\r\n… want to give total freedom for another vocabulary to leave locally. How about a syntax that says this is an extension point…<br/>\r\n… @context null + specific situation that is sealing + @context null<br/>\r\n… concentrate on this use case and try not to generalize<br/>\r\nRob Sanderson: sealing doesn’t solve actual shapes - just relationship between key and class. Not producing necessary structure<br/>\r\n… it is intersection of RDF semantic layer and JSON keys. Not shape thing as an API. Mapping not API<br/>\r\nPierre-Antoine Champin: goal of sealing is not to guarantee LD has same shape as plain JSON, but JSON LD that has the same shape…<br/>\r\n… has the same semantics.<br/>\r\n… agree with ivan – sealed is sealed from point to rest of subtree and not try to address unsealed point.<br/>\r\nDavid Newbury: Use case for unsealing is to insert user specified documents into structure. Unstructured JSON into LD…<br/>\r\nIvan Herman: may try to pick up json literal again<br/>\r\nIvan Herman: some examples don’t want literal, but piece of RDF graph but based on another vocabulary on its own<br/>\r\nDavid Newbury: do we need ability to interpret unsealed part in context of whole document?<br/>\r\nGregg Kellogg: yes<br/>\r\nDavid Newbury: do we have use cases where sealed and unsealed need to be interpreted?<br/>\r\nRob Sanderson: I think so<br/>\r\nRob Sanderson: Note - if we can’t solve by the end of the day, revisit the fallback position of JSON literals<br/>\r\nGregg Kellogg: We’re making this too hard. A sealed context is a collection of sealed terms – maintains original interpretation<br/>\r\n… an extension point is where you use a term that is not sealed…<br/>\r\n… say there is a named term in VC that has a given meaning, but want to be able to add other properties that aren’t sealed…<br/>\r\n… also need a “this is a place for you to put stuff” – creating a scoped context where properties can be re-interpreted.<br/>\r\n… sealed terms have fixed meaning when you use them.<br/>\r\nPierre-Antoine Champin: a term may be sealed (i.e. its meaning, esp. its IRI, can not be overridden) and an extension point (allow sealed terms to be overridden in its subtree)<br/>\r\nDavid I. Lehn: common use will be use an example, preserving semantics and adding on…<br/>\r\nAdam Soroka: we have ways to control shapes of json and RDF, but now we’re talking about a third way… controlling semantics<br/>\r\nPierre-Antoine Champin: gregg says extension points are properties that aren’t sealed — sealed means one cannot override<br/>\r\nGregg Kellogg: one approach is sealed context that allows context underneath to be unsealed…<br/>\r\nPierre-Antoine Champin: thanks @gkellogg, that’s clearer :)<br/>\r\nIvan Herman: i would like to hear a description of the exact sealing proposal<br/>\r\nGregg Kellogg: that would be pchampin’s PR<br/>\r\nIvan Herman: if we cannot explain where we are, we have a problem<br/>\r\nPierre-Antoine Champin: I agree with first 2 parts of the PR, the 3rd one is related to extension points<br/>\r\n… we don’t have the same model for unsealing<br/>\r\n… especially when it happens automatically<br/>\r\n… I think the sealed definitions in a context cannot be overwritten by anything in that context<br/>\r\nIvan Herman: if you seal a context, then the only way the terms can be overridden is in a scoped context within the sealed context?<br/>\r\nPierre-Antoine Champin: I think so<br/>\r\nGregg Kellogg: explicates example on whiteboard Test so03<br/>\r\nDavid I. Lehn: there are problems with this example because the inner context has no effect<br/>\r\nIvan Herman: we often use such examples, which I find a little unnatural<br/>\r\nHarold Solbrig: That confuses me<br/>\r\nIvan Herman: [discusses example]<br/>\r\nGregg Kellogg, Ivan Herman, Rob Sanderson: [edit and discuss example]<br/>\r\nIvan Herman: sealing seems to mean that the terms are cast in concrete<br/>\r\nIvan Herman: it is very difficult to explain exception<br/>\r\nDavid I. Lehn: Not sure why it’s unnatural?<br/>\r\nIvan Herman: if the context says “Sealed” that would seem to me to mean that everything is cast in concrete<br/>\r\n… but that doesn’t seem to be the case<br/>\r\n… we can change things with scoped contexts etc<br/>\r\nGregg Kellogg: this comes out of discussion of multiple sealed contexts<br/>\r\nHarold Solbrig: by changing this one term to add a typo, I can open up everything I thought I was sealing<br/>\r\nDavid Newbury: I would have assumed that by sealing a term, it would remain sealed<br/>\r\nGregg Kellogg: so once sealed, always sealed<br/>\r\nGregg Kellogg: that didn’t work for Verifiable Claims because they don’t want to intro a constraint on the JSON-LD within the wrapper<br/>\r\njeff mixer: can I constrain the type of value used with a term this way?<br/>\r\n<b>all:</b> no, JSON-LD has no way to constrain the types of values<br/>\r\nAdam Soroka: Agree completely. The wrapper compresses the protocol into the document<br/>\r\n… It pulls us toward sealing other things beyond just the mapping, but into complex chains<br/>\r\nHarold Solbrig: preventing people from accidentally overwriting contexts seems within our scope, but not all the further ramifications<br/>\r\nPierre-Antoine Champin: re: when terms become unsealed<br/>\r\n… it is genuinely hard to explain<br/>\r\n… I would say that a sealed term is sealed anywhere, except when the sealed context opens it<br/>\r\n… there are two situations in which one can redefine a sealed term<br/>\r\n… plain JSON users don’t expect the semantics to be sealed any more<br/>\r\n… we should leave the decision of when to unseal terms to the authors of the sealed context<br/>\r\nIvan Herman: an extension point means a combination of “context now” and “I cannot touch what is on the upper level”<br/>\r\nGregg Kellogg: {discusses Ivan’s example]<br/>\r\nIvan Herman: how about a keyword “extension” that means you cannot redefine anything you inherit?<br/>\r\nGregg Kellogg: not quite @context: null.<br/>\r\nDavid Newbury: if we have a context that defines ‘name’ within a sealed context, [points to examples]<br/>\r\nGregg Kellogg: [discusses examples]<br/>\r\n… it may be simpler in the end to say that sealed terms are always sealed except for @context:null<br/>\r\n… but subtleties arise when two sealed contexts interact<br/>\r\nRob Sanderson: can we do that example?<br/>\r\nIvan Herman: the only place where @context:null would have a nuclear option would be in the context that is sealed<br/>\r\nAdam Soroka: [discussion of various examples]<br/>\r\nGregg Kellogg: [refers to examples]<br/>\r\nDavid Newbury: ditto<br/>\r\nPierre-Antoine Champin: [example of two contexts conflicting]<br/>\r\nDavid Newbury: the confusion caused by accounting for the complex interactions outweighs the utility<br/>\r\nHarold Solbrig: what if we turned the pattern inside out and let contexts signify that they don’t intend to override?<br/>\r\n… if you want to enforce that, you do it on a vocabulary-specific basis<br/>\r\n… with rules for that particular context<br/>\r\nGregg Kellogg: so if a context lacked that flag, it would be harder to reuse it<br/>\r\nHarold Solbrig: depends on how much you care about this relationship between the contexts<br/>\r\nAdam Soroka: [discussion of what is or is not in scope for the use case and interoperability concern]<br/>\r\nGregg Kellogg: not clear how to specify that<br/>\r\nIvan Herman: going back to David’s example<br/>\r\nIvan Herman: [discusses example]<br/>\r\nRob Sanderson: [discusses example]<br/>\r\nGregg Kellogg: @context: null has a specific meaning and we are altering it<br/>\r\nIvan Herman: if we go down the road of “sealing”, then @context:null is going to conflict in some way and we will have to resolve it<br/>\r\nHarold Solbrig: that’s why I went for an extension-based approach<br/>\r\nGregg Kellogg: we have until noon!<br/>\r\nHarold Solbrig: can we get the use case in a more concrete form?<br/>\r\nDavid Newbury: I’m increasingly fond of Harold’s idea to put in an “extension” property that errors if something with it overrides a term<br/>\r\n… this allows me to write extensions that will work, but it may not be what VC need<br/>\r\nPierre-Antoine Champin: I have to think about that idea (Harold’s idea). gkellogg convinced me to try to explain again how a context becomes ineffective.<br/>\r\n… I’m in favor of saying that whenever I traverse a term that is not part of a sealed context, it’s not sealed anymore<br/>\r\n… after which a term could have been redefined: no guarantees about the semantics!<br/>\r\n… as for @context:null– maybe the “extension” idea is a better way to make extension points; it makes the unsealing specific<br/>\r\n… to make @context:null work one goes through both extension properties<br/>\r\nGregg Kellogg: let’s for the moment let’s put off the table any terms from a non-sealed context<br/>\r\n… the behavior I heard dlongley describe<br/>\r\n… is that history is wiped out and we start from scratch<br/>\r\nIvan Herman: I’m good so far<br/>\r\nGregg Kellogg: but if you do want to allow a mixture of sealed and unsealed terms, we get into the case that pchampin discussed<br/>\r\n… two ways to have an extension point: 1) an unsealed term, under which anything goes, 2) a sealed term that is defined as an extension point<br/>\r\n… and 2) doesn’t satisfy the use case<br/>\r\nIvan Herman: let’s say I have a claim, and I put into the context a @context:null to make an extension point.<br/>\r\n… the danger is that I will redefine a term from VC, accidentally or maliciously<br/>\r\n… IIUC VC, it’s a bit like Annotation<br/>\r\n… outsiders are expected to use their own vocabularies with these guys, without having to understand VC or Annotation<br/>\r\nGregg Kellogg: one case is that everything is wiped out, but the other is that you intermingle the use of properties<br/>\r\nIvan Herman: so I can add my own context<br/>\r\nGregg Kellogg: but not redefine terms<br/>\r\n… we would end up with semantics that differ between JSON and JSON-LD<br/>\r\nDavid I. Lehn: the way that Activity Streams does this is to say “You must not override or change contexts” as a normative piece (see <a href=\"https://www.w3.org/TR/activitystreams-core/#jsonld)\">https://www.w3.org/TR/activitystreams-core/#jsonld)</a><br/>\r\nRob Sanderson: people do this now by ordering the contexts<br/>\r\nRob Sanderson: [returns to examples]<br/>\r\nRob Sanderson: you can say that a sealed context can have an extension<br/>\r\n… having sealed on the context is confusing and makes more sense at the term level<br/>\r\nIvan Herman: what is the difference between sealed and extension<br/>\r\n… if extension was not true then there would be a warning<br/>\r\nIvan Herman: why not just say extension:true – it’s not setting a context?<br/>\r\nRob Sanderson: to distinguish from the case of this term being an extension<br/>\r\nGregg Kellogg: two different keywords that act on the context are unclear<br/>\r\nRob Sanderson: the change is that the default condition is “sealed”<br/>\r\nDave Longley: i’m on another call and can’t join, so i apologize… but was reading what’s here and thought i’d throw this in here… if there is a fear that schema.org (or contexts like it) might get sealed … we could allow {\"@context\": [{\"@contextref\": \"<a href=\"http://schema.org\",\">http://schema.org\",</a> \"@sealed\": false}, ...]} and the reason that would be ok for the sealed case we care about in VC community and so on, is because JSON processors would reject that … the context MUST be specified as a simple string, that’s what JSON-only processors would be looking for: {\"@context\": [\"<a href=\"https://w3id.org/credentials/v1\",\">https://w3id.org/credentials/v1\",</a> ...]}<br/>\r\nDavid Newbury: I thought we were talking about three use cases, one of which is ability to delete context, which is @context:null<br/>\r\n… are we trying to prevent people from overriding accidentally or maliciously?<br/>\r\nGregg Kellogg: we can’t prevent malice<br/>\r\nIvan Herman: it’s a clean slate… but not<br/>\r\nHarold Solbrig: @context:null is often too much<br/>\r\nAdam Soroka: gkellogg and ivan: [thrash more examples]<br/>\r\nRob Sanderson: we fundamentally don’t want the semantics to slip between JSON and JSON-lD<br/>\r\nRob Sanderson: [more examples]<br/>\r\nRob Sanderson: gkellogg: “extension” unseals everything, which is not @context:null<br/>\r\nAdam Soroka: [discusion of @context:null and whether it is a problem for the original use case]<br/>\r\nGregg Kellogg: if there’s another context with sealed terms and extension points<br/>\r\nRob Sanderson: regardless of which context has the sealing, extension overrides it.<br/>\r\nGregg Kellogg: that’s the simplest way<br/>\r\nBenjamin Young: <a href=\"https://github.com/w3c/json-ld-syntax/issues/20#issuecomment-442896360\">https://github.com/w3c/json-ld-syntax/issues/20#issuecomment-442896360</a><br/>\r\nBenjamin Young: dlongley and I discuss term ordering and inheritance<br/>\r\n… there is a problematic example there<br/>\r\n… [discusses vocabulary]<br/>\r\nBenjamin Young: <a href=\"https://github.com/w3c/json-ld-syntax/issues/20#issuecomment-454485321\">https://github.com/w3c/json-ld-syntax/issues/20#issuecomment-454485321</a><br/>\r\nBenjamin Young: this example shows how to avoid that by being verbose<br/>\r\n… [discusses problems that concern @type usage and inheritance]<br/>\r\nDavid Newbury: if I have two sealed contexts that define the same term, who wins?<br/>\r\nGregg Kellogg: last one in<br/>\r\nRob Sanderson: Reviewing the rules that we think we’re talking about.<br/>\r\nAdam Soroka: the use case is to avoid semantic slippage around terms when interpreted as JSON.<br/>\r\nRob Sanderson: If @extension:true is encountered in scoped context definition, then attempts to redefine terms from the active context will succeed.<br/>\r\nIvan Herman: If this is the rule, in the embedded context, I can also change the ID of that term?<br/>\r\nRob Sanderson: yes. You can redefine anything.<br/>\r\nIvan Herman: so if I have @extension : {}, the extension of the original key remains.<br/>\r\nGregg Kellogg: the effect of extensions: true is to update the active context and remove the sealed status of all terms within that context<br/>\r\n… allowing those terms to be renamed within the value of the extension property<br/>\r\nIvan Herman: so inside, something may be different than outside?<br/>\r\nGregg Kellogg: yes. It only makes sense within a scoped context, and only makes sense on a sealed term.<br/>\r\n… if you extend an unsealed property…<br/>\r\nGregg Kellogg: within an extension property, we can only define additional properties within that context.<br/>\r\nRob Sanderson: this is an error: [{\"extension\": { @id: extension_property, @sealed:true, @context: {@extension:true}}}}, { \"extension\":{@id: extension_propery}]<br/>\r\nRob Sanderson: extending unsealed terms is dumb, but not an error.<br/>\r\nPierre-Antoine Champin: I’m fine with this…in practice, this would mean that the plain JSON interpretation can only trust terms from the sealed context in the subtrees I defined.<br/>\r\n… because when there is a term from another context, theydon’t know anything about that term.<br/>\r\n… if we’re happy with this, we’re happy, but it seems like a lot of work to get to the same point.<br/>\r\nGregg Kellogg: I don’t think we’re at the same point.<br/>\r\n… it’s only when we transition to a property when it’s extension: true that we transition<br/>\r\nPierre-Antoine Champin: the assumption that JSON-only is the same–it’s only trustworthy when looking at sealed terms.<br/>\r\nGregg Kellogg: that’s consistent with the spec.<br/>\r\nPierre-Antoine Champin: right. that’s why I’m OK with this.<br/>\r\nRob Sanderson: the thing we’re not able to deal with is nulling out terms and then redetermining them. So it works.<br/>\r\n… so for VC, the context for the claim can start with null, which wipes out their context.<br/>\r\n… so I don’t think that VC will use extension: true.<br/>\r\nGregg Kellogg: do we have a use case for this?<br/>\r\nIvan Herman: I thought that they want to avoid that anyone includes in the claim things that redefine things within verifiable claims<br/>\r\nGregg Kellogg: I think that applies to the envelope<br/>\r\n… within the envelope, naive applications may not need to understand them.<br/>\r\n… for example, annotation properties<br/>\r\n… they come from another context<br/>\r\n… so if you introduce another term in the envelope, those envelope extensions won’t override the VC<br/>\r\nRob Sanderson: don’t mess with our stuff<br/>\r\n… vs:issuer should not be overridden, but if an extension defines ex:date, that’s fine. but the extension should not be able to override vs:issuer.<br/>\r\nGregg Kellogg: …explaining his example…<br/>\r\n… since we have both a sealed context and schema, name remains it’s context. within the extension, something could set the scoped context to null.<br/>\r\n… it could add a new context, and it could be anything.<br/>\r\n… thus, VC does not need extension<br/>\r\nIvan Herman: why are we doing this?<br/>\r\n… if this can be met with sealed and nullification, what is the use case for extension?<br/>\r\n… this is the simplest thing that can work. That’s what we should do.<br/>\r\n… do we need extension at any point?<br/>\r\nGregg Kellogg: I agree.<br/>\r\nAdam Soroka: so there’s no need for nullification<br/>\r\n… (i mean extension)<br/>\r\nGregg Kellogg: what we determined is that we’re not going to restrict @context: null. In that case, we don’t need the exceptions.<br/>\r\n… you can always do @context: null<br/>\r\n… thus, you can do it in a scoped context<br/>\r\n… meeting VC’s use case<br/>\r\nBenjamin Young: this VC is something that we haven’t discussed<br/>\r\n… We don’t have anything that addresses it .<br/>\r\n… since it’s type term usage, not property-term usage<br/>\r\n… can we describe it as a use-case?<br/>\r\n… term inheritance works…they don’t need sealing…<br/>\r\n… but the scoped context around @type breaks things<br/>\r\n… see the comment further down about getting around this by being verbose, but…this is how those things are extended.<br/>\r\n… using a base type, and adding additional types…so type ordering matters.<br/>\r\n… endorsed by handwaving, but would like a better mechanism<br/>\r\n… but this is where things are breaking<br/>\r\nBenjamin Young: example description is here <a href=\"https://github.com/w3c/json-ld-syntax/issues/20#issuecomment-442896360\">https://github.com/w3c/json-ld-syntax/issues/20#issuecomment-442896360</a><br/>\r\nBenjamin Young: verbosity “solution” is here <a href=\"https://github.com/w3c/json-ld-syntax/issues/20#issuecomment-454485321\">https://github.com/w3c/json-ld-syntax/issues/20#issuecomment-454485321</a><br/>\r\nGregg Kellogg: this example: we would process the scoped context for specificCredential…issue is defined in an example.<br/>\r\n… this is dlongley’s example, not mine<br/>\r\n… he was saying that the context ordering gets nullified by scope contexts and type…core vocabulary at the end doesn’t work, since types can override that.<br/>\r\nGregg Kellogg: scoped context would not override this if issuer is a sealed term<br/>\r\nBenjamin Young: we have two inheritance orders: CSS and FIFO<br/>\r\n… so we would flip them, so if sealing isn’t done properly, then we have problems<br/>\r\n… don’t know if there’s a solution here…other than a core vocabulary that comes first<br/>\r\nRob Sanderson: this seems to me to be application-logic-layer<br/>\r\n… so VC would have a sealed context…<br/>\r\nBenjamin Young: {\"@context\": {\"@sealed\": \"<a href=\"http://vc-data.example/\",\">http://vc-data.example/\",</a> \"@extensions\": [\"<a href=\"http://extension-1.exampe/\",\">http://extension-1.exampe/\",</a> \"<a href=\"http://other.example/extension\"]}}\">http://other.example/extension\"]}}</a><br/>\r\nRob Sanderson: …typing on the whiteboard…<br/>\r\nGregg Kellogg: so there’s a new extension keyword that imports without redefining?<br/>\r\nBenjamin Young: this is something totally different<br/>\r\nRob Sanderson: this just inverts where the properties live<br/>\r\nBenjamin Young: this means that the core is at the top, and the extensions below<br/>\r\nRob Sanderson: with would work with term definitions<br/>\r\nBenjamin Young: currently, you put the core last.<br/>\r\n… now you need to move it to the top, or potentially to both places<br/>\r\nGregg Kellogg: this means that the thing at the front and seal it, then it can’t be changed<br/>\r\nRob Sanderson: to me, sealing is the inversion of the property rules.<br/>\r\nBenjamin Young: this means that the scope documents now need to be explicitly 1.1<br/>\r\nRob Sanderson: if you’re using 1.1, but interpreting as 1.0, it will be strange.<br/>\r\nGregg Kellogg: I think we can only talk about what 1.1 will do<br/>\r\n… the reason that 1.1 is needed, so that if a 1.0 processor sees it, it will die<br/>\r\nBenjamin Young: so in 1.1 we’re inverting the order?<br/>\r\nGregg Kellogg: I don’t see it as inverting, I see it as a new effect.<br/>\r\nBenjamin Young: this sounds like !important in CSS<br/>\r\nGregg Kellogg: it continues to work<br/>\r\nBenjamin Young: even if someone else seals it first?<br/>\r\nGregg Kellogg: I think we need to table multiple contexts that seal<br/>\r\n… I don’t think it’s what we’re promoting<br/>\r\n… as a best practice, there should be only one<br/>\r\n… as a corner case, we should…<br/>\r\nIvan Herman: the usage of sealed in the grand scale of things will be minimal<br/>\r\n… if it’s awkward, then that’s OK, because this is rarely used.<br/>\r\nAdam Soroka: we don’t know this will be rare<br/>\r\nIvan Herman: our schema discussion showed us that we should not use sealed regularly.<br/>\r\n… common, vague vocabularies should not used sealed.<br/>\r\n… there are good use cases, but let’s be careful.<br/>\r\nGregg Kellogg: IMO, sealed should only be used by contexts defined in specifications where there is a dual JSON/JSON-LD processing mode, and then only rairly<br/>\r\nRob Sanderson: the other thing that’s important to put down is sealed is not a guarantee that it can’t be changed, but to prevent unintentional.<br/>\r\n… you can always put in a version 1.0…<br/>\r\nGregg Kellogg: you can’t go back<br/>\r\nIvan Herman: the @context:null option is there, so we can not defend against all malicious use<br/>\r\nRob Sanderson: so we don’t need extension: true, because there’s no use case and we can cover it by nulling and re-i porting?<br/>\r\n… so are we back to the simple rule?<br/>\r\n… If @sealed: true is encountered on a term definition, then attempts to redefine the term will fail and result in a warning.<br/>\r\nGregg Kellogg: with a note about using context:null<br/>\r\nAdam Soroka: so there’s no way that a term picks up an unintentional meaning<br/>\r\nHarold Solbrig: can I put a @sealed on the external context?<br/>\r\nGregg Kellogg: you can’t do that<br/>\r\nIvan Herman: you can’t seal someone else’s context<br/>\r\nHarold Solbrig: I would still like to be able to make sure that I don’t unintentionally reuse terms<br/>\r\nGregg Kellogg: can this be solved with SHEX?<br/>\r\nHarold Solbrig: maybe…<br/>\r\nPierre-Antoine Champin: what happened to redefining a term within a sealed context?<br/>\r\nGregg Kellogg: we said that’s not possible.<br/>\r\n… the only way to do this is to null the context<br/>\r\nPierre-Antoine Champin: so context:null could happen anywhere?<br/>\r\nRob Sanderson: correct<br/>\r\nPierre-Antoine Champin: so sealing prevents explicit redefining the sealed terms, but not guaranteeing their stability.<br/>\r\nGregg Kellogg: correct<br/>\r\nRob Sanderson: context: null is the way out of things, and you’d only do that in the VC case if you were trying to be malicious, and we’ve decided we can’t guard against that.<br/>\r\n… the intent is to avoid unintentional redefining.<br/>\r\n… to fix that, you need a preprocessor.<br/>\r\nAdam Soroka: is sealing now to strong a name?<br/>\r\nGregg Kellogg: it is sealed in the active context.<br/>\r\nPierre-Antoine Champin: I disagree; freezing (and sealing, for that matter) in JS is a quite different thing<br/>\r\nIvan Herman: let’s make a resolution, and go to lunch<br/>\r\nProposed resolution: Adopt the following rules for sealing - 1: If @sealed:true is encountered on a term definition in the active context, then attempts to redefine the term will fail and result in a warning. 2 - If @sealed:true is encountered on a context, then all terms defined within the context should be treated as having @sealed:true in their definition. 3- If @sealed:false is encountered on a term definition in the active context, where the context has been sealed with @sealed:true, then the sealing for that term is removed. (Rob Sanderson)<br/>\r\nHarold Solbrig: if there’s a sealed: false for an unsealed term, what happens?<br/>\r\nRob Sanderson: +1<br/>\r\nIvan Herman: +1<br/>\r\nGregg Kellogg: nothing–that doesn’t mean anything<br/>\r\nAdam Soroka: should we warn?<br/>\r\nGregg Kellogg: +1<br/>\r\nJeff Mixter: +1<br/>\r\nDavid Newbury: +1<br/>\r\nSimon Steyskal: +1<br/>\r\nHarold Solbrig: +1<br/>\r\nPierre-Antoine Champin: +0.5<br/>\r\nGregg Kellogg: we SHOULD<br/>\r\nAdam Soroka: +1<br/>\r\nBenjamin Young: +0 (would like to see use case mappings for all these things)<br/>\r\nDavid I. Lehn: +1<br/>\r\nResolution #1: Adopt the following rules for sealing - 1: If @sealed:true is encountered on a term definition in the active context, then attempts to redefine the term will fail and result in a warning. 2 - If @sealed:true is encountered on a context, then all terms defined within the context should be treated as having @sealed:true in their definition. 3- If @sealed:false is encountered on a term definition in the active context, where the context has been sealed with @sealed:true, then the sealing for that term is removed. {: #resolution1 .resolution}<br/>\r\nDave Longley: “If @sealed:false is encountered on a term definition in the active context, where the context has been sealed with @sealed:true, then the sealing for that term is removed.” &lt;– this sounds like a big problem as written …<br/>\r\nDave Longley: is this saying that with {\"@context\": [1, 2]} that 2 can unseal anything it wants?<br/>\r\nDave Longley: if so, that defeats the purpose of sealing … so i can only imagine that something else was meant by that text.<br/>\r\nDave Longley: it sounds like an attacker that defines 2 can get a VC to be successfully processed by a JSON-only processor in a different way from a JSON-LD processor under that condition<br/>\r\nDave Longley: i’ll check back here later to see if there’s a clarification<br/>\r\nDave Longley: if the ability to unseal a sealed context is a requirement (as opposed to just extending in an acceptable way) … it seems like we could do it without messing up JSON-only processors by using some other syntax that they would otherwise reject.<br/>\r\nDave Longley: JSON-only processors will be looking for {\"@context\": [<specific string>, <specific string>, ...ignored]}<br/>\r\nDave Longley: or could perhaps be further limited to: {\"@context\": [<specific string>, <specific string>, ...<must be a string but value is ignored>]}<br/>\r\nDave Longley: in other words, any deviation from some very rigid rules would cause a JSON-only processor to reject the input … which could be potentially used to our advantage if we need to cover other use cases where we are fearful of people sealing things that JSON-LD aware entities would like to unseal in a way that would not impact JSON-only processors.<br/>\r\nDave Longley: but what is key is that that any mechanism that is used to unseal would not impact JSON-only processors.<br/>\r\nDave Longley: if we can abide by that rule, i don’t see why i wouldn’t be supportive.<br/>\r\nRob Sanderson: dlongley: The @sealed:false would only work for the original definition, no subsequent attempt to redefine it<br/>\r\nRob Sanderson: It overrides the @sealed:true on the context<br/>\r\nRob Sanderson: But not @sealed:true on a term<br/>\r\nDave Longley: azaroth: ok, if I understand you I think that’s fine<br/>\r\nAdam Soroka: <a href=\"https://github.com/w3c/json-ld-syntax/issues/87\">https://github.com/w3c/json-ld-syntax/issues/87</a><br/>\r\n2.1. closing related issues<br/>\r\nProposed resolution: Close #87, as unnecessary given above rules. (Rob Sanderson)<br/>\r\nRob Sanderson: +1<br/>\r\nIvan Herman: +1<br/>\r\nGregg Kellogg: +1<br/>\r\nDavid Newbury: +1<br/>\r\nJeff Mixter: +1<br/>\r\nSimon Steyskal: +1<br/>\r\nDavid I. Lehn: +1<br/>\r\nResolution #2: Close #87, as unnecessary given above rules. {: #resolution2 .resolution}<br/>\r\nSimon Steyskal: <a href=\"https://github.com/w3c/json-ld-syntax/issues/98\">https://github.com/w3c/json-ld-syntax/issues/98</a><br/>\r\nProposed resolution: close #98, as unnecessary given the rules above (Ivan Herman)<br/>\r\nDavid Newbury: +1<br/>\r\nIvan Herman: +1<br/>\r\nProposed resolution: Close #98, as @context: null clears context definitions (Rob Sanderson)<br/>\r\nGregg Kellogg: +1<br/>\r\nRob Sanderson: +1<br/>\r\nHarold Solbrig: +1<br/>\r\nDavid I. Lehn: +1<br/>\r\nResolution #3: Close #98, as @context: null clears context definitions {: #resolution3 .resolution}<br/>\r\nResolution #4: Close #98, as @context: null clears context definitions {: #resolution4 .resolution}<br/>\r\nDavid I. Lehn: <a href=\"https://github.com/w3c/json-ld-syntax/issues/116\">https://github.com/w3c/json-ld-syntax/issues/116</a><br/>\r\nDavid I. Lehn: discussion of [<a href=\"https://github.com/w3c/json-ld-syntax/issues/116#issuecomment-460681505]\">https://github.com/w3c/json-ld-syntax/issues/116#issuecomment-460681505]</a><br/>\r\nDavid I. Lehn: [missed scribing much back and forth, trying to catch up on the gist]<br/>\r\nGregg Kellogg: [pointing out current algorithm could be modified based on some rules to handle the partial redefinition]<br/>\r\nIvan Herman: [concerns about backwards compatibility]<br/>\r\nGregg Kellogg: based on algorithm, 1.0 would fall through to new 1.1 behavior<br/>\r\nIvan Herman: sounds like adding more hacks<br/>\r\nDave Longley: also want it to be easier for json authors<br/>\r\nGregg Kellogg: we go towards side of being easier for authors<br/>\r\nDavid Newbury: hard to follow what is going on without knowing all the processing steps<br/>\r\nGregg Kellogg: not overriding term itself […?]<br/>\r\nRob Sanderson: more authors to explain to than people needing to understand this feature. on side of authors.<br/>\r\nDavid Newbury: issue with how things are overridden. seeing next term definition would think it fully overrode first one.<br/>\r\nIvan Herman: [worries about more complications]<br/>\r\nDavid Newbury: example seems like json in json-ld<br/>\r\nDavid I. Lehn: it’s a mix in this case, using json tools to process json-ld. would want to know the context of the data.<br/>\r\nRob Sanderson: [discussing how some examples would be processed]<br/>\r\nIvan Herman: adding new features to already complex system. really worried about it.<br/>\r\nDave Longley: understand ivan. A goal is to make ergonomics of 1.1 easier for users and better than 1.0<br/>\r\nProposed resolution: if @id is not present in a term definition, and there is no default vocabulary, but has an expansion to an absolute IRI in the active context, then the @id of the new definition is taken from the active context (otherwise this is still an error) (Rob Sanderson)<br/>\r\nRob Sanderson: +1<br/>\r\nIvan Herman: +1<br/>\r\nSimon Steyskal: +1<br/>\r\nGregg Kellogg: +1<br/>\r\nDave Longley: +1<br/>\r\nDavid I. Lehn: +1<br/>\r\nJeff Mixter: +1<br/>\r\nDavid Newbury: +0.5<br/>\r\nAdam Soroka: +1<br/>\r\nResolution #5: if @id is not present in a term definition, and there is no default vocabulary, but has an expansion to an absolute IRI in the active context, then the @id of the new definition is taken from the active context (otherwise this is still an error) {: #resolution5 .resolution}<br/>\r\nProposed resolution: Once previous is done, we can close #116 (Rob Sanderson)<br/>\r\nHarold Solbrig: +1<br/>\r\nIvan Herman: +1<br/>\r\nRob Sanderson: +1<br/>\r\nDavid Newbury: +1<br/>\r\nSimon Steyskal: +1<br/>\r\nJeff Mixter: +1<br/>\r\nDavid Newbury: +1<br/>\r\nRob Sanderson: +1<br/>\r\nHarold Solbrig: +1<br/>\r\nAdam Soroka: +1<br/>\r\nIvan Herman: +1<br/>\r\nRob Sanderson: Really 116 :)<br/>\r\nDavid I. Lehn: +1<br/>\r\nResolution #6: Once previous is done, we can close #116 {: #resolution6 .resolution}<br/>\r\nProposed resolution: We agree with the processing order per #61: scoped definition from property, then from type, then embedded. PR to update docs to come. (Rob Sanderson)<br/>\r\nIvan Herman: +1<br/>\r\nRob Sanderson: +1<br/>\r\nAdam Soroka: +1<br/>\r\nDavid I. Lehn: +1<br/>\r\nSimon Steyskal: +1<br/>\r\nDavid Newbury: +1<br/>\r\nJeff Mixter: +1<br/>\r\nHarold Solbrig: +1<br/>\r\nGregg Kellogg: +1<br/>\r\nResolution #7: We agree with the processing order per #61: scoped definition from property, then from type, then embedded. PR to update docs to come. {: #resolution7 .resolution}<br/>\r\nHarold Solbrig: scribnic hsolbrig<br/>\r\nGregg Kellogg: what if you said context null?<br/>\r\nRob Sanderson: it would wipe out all definitions<br/>\r\nGregg Kellogg: you could also seal activities<br/>\r\n</details>" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/462045909> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/116#issuecomment-462045909"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/116> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/462045909> .
<https://api.github.com/users/iherman> <http://schema.org/accountId> "iherman" .
<https://api.github.com/users/iherman> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/520723?v=4" .
<https://api.github.com/users/iherman> <http://schema.org/url> "https://github.com/iherman"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/iherman> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/462045909> <http://schema.org/creator> <https://api.github.com/users/iherman> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/462045909> <http://schema.org/startDate> "2019-02-09T13:47:00Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/462045909> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/462045909> <http://schema.org/description> "This issue was discussed in [a meeting](https://www.w3.org/2018/json-ld-wg/Meetings/Minutes/2019/2019-02-07-json-ld#section2).\r\n\r\n- `RESOLVED:  Adopt the following rules for sealing - 1: If @sealed:true is encountered on a term definition in the active context, then attempts to redefine the term will fail and result in a warning. 2 - If @sealed:true is encountered on a context, then all terms defined within the context should be treated as having @sealed:true in their definition. 3- If @sealed:false is encountered on a term definition in the active context, where the context has been sealed with @sealed:true, then the sealing for that term is removed. {: #resolution1 .resolution}`\r\n- `RESOLVED:  Close #87, as unnecessary given above rules. {: #resolution2 .resolution}`\r\n- `RESOLVED:  Close #98, as @context: null clears context definitions {: #resolution3 .resolution}`\r\n- `RESOLVED:  Close #98, as @context: null clears context definitions {: #resolution4 .resolution}`\r\n- `RESOLVED:  if @id is not present in a term definition, and there is no default vocabulary, but has an expansion to an absolute IRI in the active context, then the @id of the new definition is taken from the active context (otherwise this is still an error) {: #resolution5 .resolution}`\r\n- `RESOLVED:  Once previous is done, we can close #116 {: #resolution6 .resolution}`\r\n- `RESOLVED:  We agree with the processing order per #61: scoped definition from property, then from type, then embedded. PR to update docs to come. {: #resolution7 .resolution}`\r\n<details><summary><i class=\"differentiate\">View the transcript</i></summary>\r\nSealed contexts<br/>\r\nIvan Herman: If we can’t get to a clear model and agreement on sealing today, I propose we defer it.<br/>\r\nAdam Soroka: If we happen to do that, what do we say to verifiable claims, etc?<br/>\r\nRob Sanderson: (reads guiding principles)<br/>\r\nRob Sanderson: <a href=\"https://www.w3.org/2018/json-ld-wg/WorkMode/guiding_principles\">https://www.w3.org/2018/json-ld-wg/WorkMode/guiding_principles</a><br/>\r\nRob Sanderson: sealed contexts - goal is to solve by end of day<br/>\r\nIvan Herman: one thing from last week’s discussions - sealing seems to be a very dangerous thing to do…<br/>\r\n… if Google decides to put a seal on schema.org, community will be unhappy …<br/>\r\nGregg Kellogg: we need to understand who we’re serving. Not there for schema.org, rather verifiable claims<br/>\r\n… specs as verifiable claims have a shared vocabulary, with some domains wide open, but people can’t change semantics<br/>\r\n… in spec, intentionally or otherwise<br/>\r\nBenjamin Young: chief aim of proposal is that json and json-ld world co-exist. Term sealing is to guarantee that …<br/>\r\n… json and json-ld authors work on exact same shape<br/>\r\n… maybe take a step back from sealing and see what other options there may be<br/>\r\n… notion of foundational shape surviving framing<br/>\r\nIvan Herman: what I understand from ver. claim. is that they have a wrapper w/ properties whose value is an object…<br/>\r\n… want to give total freedom for another vocabulary to leave locally. How about a syntax that says this is an extension point…<br/>\r\n… @context null + specific situation that is sealing + @context null<br/>\r\n… concentrate on this use case and try not to generalize<br/>\r\nRob Sanderson: sealing doesn’t solve actual shapes - just relationship between key and class. Not producing necessary structure<br/>\r\n… it is intersection of RDF semantic layer and JSON keys. Not shape thing as an API. Mapping not API<br/>\r\nPierre-Antoine Champin: goal of sealing is not to guarantee LD has same shape as plain JSON, but JSON LD that has the same shape…<br/>\r\n… has the same semantics.<br/>\r\n… agree with ivan – sealed is sealed from point to rest of subtree and not try to address unsealed point.<br/>\r\nDavid Newbury: Use case for unsealing is to insert user specified documents into structure. Unstructured JSON into LD…<br/>\r\nIvan Herman: may try to pick up json literal again<br/>\r\nIvan Herman: some examples don’t want literal, but piece of RDF graph but based on another vocabulary on its own<br/>\r\nDavid Newbury: do we need ability to interpret unsealed part in context of whole document?<br/>\r\nGregg Kellogg: yes<br/>\r\nDavid Newbury: do we have use cases where sealed and unsealed need to be interpreted?<br/>\r\nRob Sanderson: I think so<br/>\r\nRob Sanderson: Note - if we can’t solve by the end of the day, revisit the fallback position of JSON literals<br/>\r\nGregg Kellogg: We’re making this too hard. A sealed context is a collection of sealed terms – maintains original interpretation<br/>\r\n… an extension point is where you use a term that is not sealed…<br/>\r\n… say there is a named term in VC that has a given meaning, but want to be able to add other properties that aren’t sealed…<br/>\r\n… also need a “this is a place for you to put stuff” – creating a scoped context where properties can be re-interpreted.<br/>\r\n… sealed terms have fixed meaning when you use them.<br/>\r\nPierre-Antoine Champin: a term may be sealed (i.e. its meaning, esp. its IRI, can not be overridden) and an extension point (allow sealed terms to be overridden in its subtree)<br/>\r\nDavid I. Lehn: common use will be use an example, preserving semantics and adding on…<br/>\r\nAdam Soroka: we have ways to control shapes of json and RDF, but now we’re talking about a third way… controlling semantics<br/>\r\nPierre-Antoine Champin: gregg says extension points are properties that aren’t sealed — sealed means one cannot override<br/>\r\nGregg Kellogg: one approach is sealed context that allows context underneath to be unsealed…<br/>\r\nPierre-Antoine Champin: thanks @gkellogg, that’s clearer :)<br/>\r\nIvan Herman: i would like to hear a description of the exact sealing proposal<br/>\r\nGregg Kellogg: that would be pchampin’s PR<br/>\r\nIvan Herman: if we cannot explain where we are, we have a problem<br/>\r\nPierre-Antoine Champin: I agree with first 2 parts of the PR, the 3rd one is related to extension points<br/>\r\n… we don’t have the same model for unsealing<br/>\r\n… especially when it happens automatically<br/>\r\n… I think the sealed definitions in a context cannot be overwritten by anything in that context<br/>\r\nIvan Herman: if you seal a context, then the only way the terms can be overridden is in a scoped context within the sealed context?<br/>\r\nPierre-Antoine Champin: I think so<br/>\r\nGregg Kellogg: explicates example on whiteboard Test so03<br/>\r\nDavid I. Lehn: there are problems with this example because the inner context has no effect<br/>\r\nIvan Herman: we often use such examples, which I find a little unnatural<br/>\r\nHarold Solbrig: That confuses me<br/>\r\nIvan Herman: [discusses example]<br/>\r\nGregg Kellogg, Ivan Herman, Rob Sanderson: [edit and discuss example]<br/>\r\nIvan Herman: sealing seems to mean that the terms are cast in concrete<br/>\r\nIvan Herman: it is very difficult to explain exception<br/>\r\nDavid I. Lehn: Not sure why it’s unnatural?<br/>\r\nIvan Herman: if the context says “Sealed” that would seem to me to mean that everything is cast in concrete<br/>\r\n… but that doesn’t seem to be the case<br/>\r\n… we can change things with scoped contexts etc<br/>\r\nGregg Kellogg: this comes out of discussion of multiple sealed contexts<br/>\r\nHarold Solbrig: by changing this one term to add a typo, I can open up everything I thought I was sealing<br/>\r\nDavid Newbury: I would have assumed that by sealing a term, it would remain sealed<br/>\r\nGregg Kellogg: so once sealed, always sealed<br/>\r\nGregg Kellogg: that didn’t work for Verifiable Claims because they don’t want to intro a constraint on the JSON-LD within the wrapper<br/>\r\njeff mixer: can I constrain the type of value used with a term this way?<br/>\r\n<b>all:</b> no, JSON-LD has no way to constrain the types of values<br/>\r\nAdam Soroka: Agree completely. The wrapper compresses the protocol into the document<br/>\r\n… It pulls us toward sealing other things beyond just the mapping, but into complex chains<br/>\r\nHarold Solbrig: preventing people from accidentally overwriting contexts seems within our scope, but not all the further ramifications<br/>\r\nPierre-Antoine Champin: re: when terms become unsealed<br/>\r\n… it is genuinely hard to explain<br/>\r\n… I would say that a sealed term is sealed anywhere, except when the sealed context opens it<br/>\r\n… there are two situations in which one can redefine a sealed term<br/>\r\n… plain JSON users don’t expect the semantics to be sealed any more<br/>\r\n… we should leave the decision of when to unseal terms to the authors of the sealed context<br/>\r\nIvan Herman: an extension point means a combination of “context now” and “I cannot touch what is on the upper level”<br/>\r\nGregg Kellogg: {discusses Ivan’s example]<br/>\r\nIvan Herman: how about a keyword “extension” that means you cannot redefine anything you inherit?<br/>\r\nGregg Kellogg: not quite @context: null.<br/>\r\nDavid Newbury: if we have a context that defines ‘name’ within a sealed context, [points to examples]<br/>\r\nGregg Kellogg: [discusses examples]<br/>\r\n… it may be simpler in the end to say that sealed terms are always sealed except for @context:null<br/>\r\n… but subtleties arise when two sealed contexts interact<br/>\r\nRob Sanderson: can we do that example?<br/>\r\nIvan Herman: the only place where @context:null would have a nuclear option would be in the context that is sealed<br/>\r\nAdam Soroka: [discussion of various examples]<br/>\r\nGregg Kellogg: [refers to examples]<br/>\r\nDavid Newbury: ditto<br/>\r\nPierre-Antoine Champin: [example of two contexts conflicting]<br/>\r\nDavid Newbury: the confusion caused by accounting for the complex interactions outweighs the utility<br/>\r\nHarold Solbrig: what if we turned the pattern inside out and let contexts signify that they don’t intend to override?<br/>\r\n… if you want to enforce that, you do it on a vocabulary-specific basis<br/>\r\n… with rules for that particular context<br/>\r\nGregg Kellogg: so if a context lacked that flag, it would be harder to reuse it<br/>\r\nHarold Solbrig: depends on how much you care about this relationship between the contexts<br/>\r\nAdam Soroka: [discussion of what is or is not in scope for the use case and interoperability concern]<br/>\r\nGregg Kellogg: not clear how to specify that<br/>\r\nIvan Herman: going back to David’s example<br/>\r\nIvan Herman: [discusses example]<br/>\r\nRob Sanderson: [discusses example]<br/>\r\nGregg Kellogg: @context: null has a specific meaning and we are altering it<br/>\r\nIvan Herman: if we go down the road of “sealing”, then @context:null is going to conflict in some way and we will have to resolve it<br/>\r\nHarold Solbrig: that’s why I went for an extension-based approach<br/>\r\nGregg Kellogg: we have until noon!<br/>\r\nHarold Solbrig: can we get the use case in a more concrete form?<br/>\r\nDavid Newbury: I’m increasingly fond of Harold’s idea to put in an “extension” property that errors if something with it overrides a term<br/>\r\n… this allows me to write extensions that will work, but it may not be what VC need<br/>\r\nPierre-Antoine Champin: I have to think about that idea (Harold’s idea). gkellogg convinced me to try to explain again how a context becomes ineffective.<br/>\r\n… I’m in favor of saying that whenever I traverse a term that is not part of a sealed context, it’s not sealed anymore<br/>\r\n… after which a term could have been redefined: no guarantees about the semantics!<br/>\r\n… as for @context:null– maybe the “extension” idea is a better way to make extension points; it makes the unsealing specific<br/>\r\n… to make @context:null work one goes through both extension properties<br/>\r\nGregg Kellogg: let’s for the moment let’s put off the table any terms from a non-sealed context<br/>\r\n… the behavior I heard dlongley describe<br/>\r\n… is that history is wiped out and we start from scratch<br/>\r\nIvan Herman: I’m good so far<br/>\r\nGregg Kellogg: but if you do want to allow a mixture of sealed and unsealed terms, we get into the case that pchampin discussed<br/>\r\n… two ways to have an extension point: 1) an unsealed term, under which anything goes, 2) a sealed term that is defined as an extension point<br/>\r\n… and 2) doesn’t satisfy the use case<br/>\r\nIvan Herman: let’s say I have a claim, and I put into the context a @context:null to make an extension point.<br/>\r\n… the danger is that I will redefine a term from VC, accidentally or maliciously<br/>\r\n… IIUC VC, it’s a bit like Annotation<br/>\r\n… outsiders are expected to use their own vocabularies with these guys, without having to understand VC or Annotation<br/>\r\nGregg Kellogg: one case is that everything is wiped out, but the other is that you intermingle the use of properties<br/>\r\nIvan Herman: so I can add my own context<br/>\r\nGregg Kellogg: but not redefine terms<br/>\r\n… we would end up with semantics that differ between JSON and JSON-LD<br/>\r\nDavid I. Lehn: the way that Activity Streams does this is to say “You must not override or change contexts” as a normative piece (see <a href=\"https://www.w3.org/TR/activitystreams-core/#jsonld)\">https://www.w3.org/TR/activitystreams-core/#jsonld)</a><br/>\r\nRob Sanderson: people do this now by ordering the contexts<br/>\r\nRob Sanderson: [returns to examples]<br/>\r\nRob Sanderson: you can say that a sealed context can have an extension<br/>\r\n… having sealed on the context is confusing and makes more sense at the term level<br/>\r\nIvan Herman: what is the difference between sealed and extension<br/>\r\n… if extension was not true then there would be a warning<br/>\r\nIvan Herman: why not just say extension:true – it’s not setting a context?<br/>\r\nRob Sanderson: to distinguish from the case of this term being an extension<br/>\r\nGregg Kellogg: two different keywords that act on the context are unclear<br/>\r\nRob Sanderson: the change is that the default condition is “sealed”<br/>\r\nDave Longley: i’m on another call and can’t join, so i apologize… but was reading what’s here and thought i’d throw this in here… if there is a fear that schema.org (or contexts like it) might get sealed … we could allow {\"@context\": [{\"@contextref\": \"<a href=\"http://schema.org\",\">http://schema.org\",</a> \"@sealed\": false}, ...]} and the reason that would be ok for the sealed case we care about in VC community and so on, is because JSON processors would reject that … the context MUST be specified as a simple string, that’s what JSON-only processors would be looking for: {\"@context\": [\"<a href=\"https://w3id.org/credentials/v1\",\">https://w3id.org/credentials/v1\",</a> ...]}<br/>\r\nDavid Newbury: I thought we were talking about three use cases, one of which is ability to delete context, which is @context:null<br/>\r\n… are we trying to prevent people from overriding accidentally or maliciously?<br/>\r\nGregg Kellogg: we can’t prevent malice<br/>\r\nIvan Herman: it’s a clean slate… but not<br/>\r\nHarold Solbrig: @context:null is often too much<br/>\r\nAdam Soroka: gkellogg and ivan: [thrash more examples]<br/>\r\nRob Sanderson: we fundamentally don’t want the semantics to slip between JSON and JSON-lD<br/>\r\nRob Sanderson: [more examples]<br/>\r\nRob Sanderson: gkellogg: “extension” unseals everything, which is not @context:null<br/>\r\nAdam Soroka: [discusion of @context:null and whether it is a problem for the original use case]<br/>\r\nGregg Kellogg: if there’s another context with sealed terms and extension points<br/>\r\nRob Sanderson: regardless of which context has the sealing, extension overrides it.<br/>\r\nGregg Kellogg: that’s the simplest way<br/>\r\nBenjamin Young: <a href=\"https://github.com/w3c/json-ld-syntax/issues/20#issuecomment-442896360\">https://github.com/w3c/json-ld-syntax/issues/20#issuecomment-442896360</a><br/>\r\nBenjamin Young: dlongley and I discuss term ordering and inheritance<br/>\r\n… there is a problematic example there<br/>\r\n… [discusses vocabulary]<br/>\r\nBenjamin Young: <a href=\"https://github.com/w3c/json-ld-syntax/issues/20#issuecomment-454485321\">https://github.com/w3c/json-ld-syntax/issues/20#issuecomment-454485321</a><br/>\r\nBenjamin Young: this example shows how to avoid that by being verbose<br/>\r\n… [discusses problems that concern @type usage and inheritance]<br/>\r\nDavid Newbury: if I have two sealed contexts that define the same term, who wins?<br/>\r\nGregg Kellogg: last one in<br/>\r\nRob Sanderson: Reviewing the rules that we think we’re talking about.<br/>\r\nAdam Soroka: the use case is to avoid semantic slippage around terms when interpreted as JSON.<br/>\r\nRob Sanderson: If @extension:true is encountered in scoped context definition, then attempts to redefine terms from the active context will succeed.<br/>\r\nIvan Herman: If this is the rule, in the embedded context, I can also change the ID of that term?<br/>\r\nRob Sanderson: yes. You can redefine anything.<br/>\r\nIvan Herman: so if I have @extension : {}, the extension of the original key remains.<br/>\r\nGregg Kellogg: the effect of extensions: true is to update the active context and remove the sealed status of all terms within that context<br/>\r\n… allowing those terms to be renamed within the value of the extension property<br/>\r\nIvan Herman: so inside, something may be different than outside?<br/>\r\nGregg Kellogg: yes. It only makes sense within a scoped context, and only makes sense on a sealed term.<br/>\r\n… if you extend an unsealed property…<br/>\r\nGregg Kellogg: within an extension property, we can only define additional properties within that context.<br/>\r\nRob Sanderson: this is an error: [{\"extension\": { @id: extension_property, @sealed:true, @context: {@extension:true}}}}, { \"extension\":{@id: extension_propery}]<br/>\r\nRob Sanderson: extending unsealed terms is dumb, but not an error.<br/>\r\nPierre-Antoine Champin: I’m fine with this…in practice, this would mean that the plain JSON interpretation can only trust terms from the sealed context in the subtrees I defined.<br/>\r\n… because when there is a term from another context, theydon’t know anything about that term.<br/>\r\n… if we’re happy with this, we’re happy, but it seems like a lot of work to get to the same point.<br/>\r\nGregg Kellogg: I don’t think we’re at the same point.<br/>\r\n… it’s only when we transition to a property when it’s extension: true that we transition<br/>\r\nPierre-Antoine Champin: the assumption that JSON-only is the same–it’s only trustworthy when looking at sealed terms.<br/>\r\nGregg Kellogg: that’s consistent with the spec.<br/>\r\nPierre-Antoine Champin: right. that’s why I’m OK with this.<br/>\r\nRob Sanderson: the thing we’re not able to deal with is nulling out terms and then redetermining them. So it works.<br/>\r\n… so for VC, the context for the claim can start with null, which wipes out their context.<br/>\r\n… so I don’t think that VC will use extension: true.<br/>\r\nGregg Kellogg: do we have a use case for this?<br/>\r\nIvan Herman: I thought that they want to avoid that anyone includes in the claim things that redefine things within verifiable claims<br/>\r\nGregg Kellogg: I think that applies to the envelope<br/>\r\n… within the envelope, naive applications may not need to understand them.<br/>\r\n… for example, annotation properties<br/>\r\n… they come from another context<br/>\r\n… so if you introduce another term in the envelope, those envelope extensions won’t override the VC<br/>\r\nRob Sanderson: don’t mess with our stuff<br/>\r\n… vs:issuer should not be overridden, but if an extension defines ex:date, that’s fine. but the extension should not be able to override vs:issuer.<br/>\r\nGregg Kellogg: …explaining his example…<br/>\r\n… since we have both a sealed context and schema, name remains it’s context. within the extension, something could set the scoped context to null.<br/>\r\n… it could add a new context, and it could be anything.<br/>\r\n… thus, VC does not need extension<br/>\r\nIvan Herman: why are we doing this?<br/>\r\n… if this can be met with sealed and nullification, what is the use case for extension?<br/>\r\n… this is the simplest thing that can work. That’s what we should do.<br/>\r\n… do we need extension at any point?<br/>\r\nGregg Kellogg: I agree.<br/>\r\nAdam Soroka: so there’s no need for nullification<br/>\r\n… (i mean extension)<br/>\r\nGregg Kellogg: what we determined is that we’re not going to restrict @context: null. In that case, we don’t need the exceptions.<br/>\r\n… you can always do @context: null<br/>\r\n… thus, you can do it in a scoped context<br/>\r\n… meeting VC’s use case<br/>\r\nBenjamin Young: this VC is something that we haven’t discussed<br/>\r\n… We don’t have anything that addresses it .<br/>\r\n… since it’s type term usage, not property-term usage<br/>\r\n… can we describe it as a use-case?<br/>\r\n… term inheritance works…they don’t need sealing…<br/>\r\n… but the scoped context around @type breaks things<br/>\r\n… see the comment further down about getting around this by being verbose, but…this is how those things are extended.<br/>\r\n… using a base type, and adding additional types…so type ordering matters.<br/>\r\n… endorsed by handwaving, but would like a better mechanism<br/>\r\n… but this is where things are breaking<br/>\r\nBenjamin Young: example description is here <a href=\"https://github.com/w3c/json-ld-syntax/issues/20#issuecomment-442896360\">https://github.com/w3c/json-ld-syntax/issues/20#issuecomment-442896360</a><br/>\r\nBenjamin Young: verbosity “solution” is here <a href=\"https://github.com/w3c/json-ld-syntax/issues/20#issuecomment-454485321\">https://github.com/w3c/json-ld-syntax/issues/20#issuecomment-454485321</a><br/>\r\nGregg Kellogg: this example: we would process the scoped context for specificCredential…issue is defined in an example.<br/>\r\n… this is dlongley’s example, not mine<br/>\r\n… he was saying that the context ordering gets nullified by scope contexts and type…core vocabulary at the end doesn’t work, since types can override that.<br/>\r\nGregg Kellogg: scoped context would not override this if issuer is a sealed term<br/>\r\nBenjamin Young: we have two inheritance orders: CSS and FIFO<br/>\r\n… so we would flip them, so if sealing isn’t done properly, then we have problems<br/>\r\n… don’t know if there’s a solution here…other than a core vocabulary that comes first<br/>\r\nRob Sanderson: this seems to me to be application-logic-layer<br/>\r\n… so VC would have a sealed context…<br/>\r\nBenjamin Young: {\"@context\": {\"@sealed\": \"<a href=\"http://vc-data.example/\",\">http://vc-data.example/\",</a> \"@extensions\": [\"<a href=\"http://extension-1.exampe/\",\">http://extension-1.exampe/\",</a> \"<a href=\"http://other.example/extension\"]}}\">http://other.example/extension\"]}}</a><br/>\r\nRob Sanderson: …typing on the whiteboard…<br/>\r\nGregg Kellogg: so there’s a new extension keyword that imports without redefining?<br/>\r\nBenjamin Young: this is something totally different<br/>\r\nRob Sanderson: this just inverts where the properties live<br/>\r\nBenjamin Young: this means that the core is at the top, and the extensions below<br/>\r\nRob Sanderson: with would work with term definitions<br/>\r\nBenjamin Young: currently, you put the core last.<br/>\r\n… now you need to move it to the top, or potentially to both places<br/>\r\nGregg Kellogg: this means that the thing at the front and seal it, then it can’t be changed<br/>\r\nRob Sanderson: to me, sealing is the inversion of the property rules.<br/>\r\nBenjamin Young: this means that the scope documents now need to be explicitly 1.1<br/>\r\nRob Sanderson: if you’re using 1.1, but interpreting as 1.0, it will be strange.<br/>\r\nGregg Kellogg: I think we can only talk about what 1.1 will do<br/>\r\n… the reason that 1.1 is needed, so that if a 1.0 processor sees it, it will die<br/>\r\nBenjamin Young: so in 1.1 we’re inverting the order?<br/>\r\nGregg Kellogg: I don’t see it as inverting, I see it as a new effect.<br/>\r\nBenjamin Young: this sounds like !important in CSS<br/>\r\nGregg Kellogg: it continues to work<br/>\r\nBenjamin Young: even if someone else seals it first?<br/>\r\nGregg Kellogg: I think we need to table multiple contexts that seal<br/>\r\n… I don’t think it’s what we’re promoting<br/>\r\n… as a best practice, there should be only one<br/>\r\n… as a corner case, we should…<br/>\r\nIvan Herman: the usage of sealed in the grand scale of things will be minimal<br/>\r\n… if it’s awkward, then that’s OK, because this is rarely used.<br/>\r\nAdam Soroka: we don’t know this will be rare<br/>\r\nIvan Herman: our schema discussion showed us that we should not use sealed regularly.<br/>\r\n… common, vague vocabularies should not used sealed.<br/>\r\n… there are good use cases, but let’s be careful.<br/>\r\nGregg Kellogg: IMO, sealed should only be used by contexts defined in specifications where there is a dual JSON/JSON-LD processing mode, and then only rairly<br/>\r\nRob Sanderson: the other thing that’s important to put down is sealed is not a guarantee that it can’t be changed, but to prevent unintentional.<br/>\r\n… you can always put in a version 1.0…<br/>\r\nGregg Kellogg: you can’t go back<br/>\r\nIvan Herman: the @context:null option is there, so we can not defend against all malicious use<br/>\r\nRob Sanderson: so we don’t need extension: true, because there’s no use case and we can cover it by nulling and re-i porting?<br/>\r\n… so are we back to the simple rule?<br/>\r\n… If @sealed: true is encountered on a term definition, then attempts to redefine the term will fail and result in a warning.<br/>\r\nGregg Kellogg: with a note about using context:null<br/>\r\nAdam Soroka: so there’s no way that a term picks up an unintentional meaning<br/>\r\nHarold Solbrig: can I put a @sealed on the external context?<br/>\r\nGregg Kellogg: you can’t do that<br/>\r\nIvan Herman: you can’t seal someone else’s context<br/>\r\nHarold Solbrig: I would still like to be able to make sure that I don’t unintentionally reuse terms<br/>\r\nGregg Kellogg: can this be solved with SHEX?<br/>\r\nHarold Solbrig: maybe…<br/>\r\nPierre-Antoine Champin: what happened to redefining a term within a sealed context?<br/>\r\nGregg Kellogg: we said that’s not possible.<br/>\r\n… the only way to do this is to null the context<br/>\r\nPierre-Antoine Champin: so context:null could happen anywhere?<br/>\r\nRob Sanderson: correct<br/>\r\nPierre-Antoine Champin: so sealing prevents explicit redefining the sealed terms, but not guaranteeing their stability.<br/>\r\nGregg Kellogg: correct<br/>\r\nRob Sanderson: context: null is the way out of things, and you’d only do that in the VC case if you were trying to be malicious, and we’ve decided we can’t guard against that.<br/>\r\n… the intent is to avoid unintentional redefining.<br/>\r\n… to fix that, you need a preprocessor.<br/>\r\nAdam Soroka: is sealing now to strong a name?<br/>\r\nGregg Kellogg: it is sealed in the active context.<br/>\r\nPierre-Antoine Champin: I disagree; freezing (and sealing, for that matter) in JS is a quite different thing<br/>\r\nIvan Herman: let’s make a resolution, and go to lunch<br/>\r\nProposed resolution: Adopt the following rules for sealing - 1: If @sealed:true is encountered on a term definition in the active context, then attempts to redefine the term will fail and result in a warning. 2 - If @sealed:true is encountered on a context, then all terms defined within the context should be treated as having @sealed:true in their definition. 3- If @sealed:false is encountered on a term definition in the active context, where the context has been sealed with @sealed:true, then the sealing for that term is removed. (Rob Sanderson)<br/>\r\nHarold Solbrig: if there’s a sealed: false for an unsealed term, what happens?<br/>\r\nRob Sanderson: +1<br/>\r\nIvan Herman: +1<br/>\r\nGregg Kellogg: nothing–that doesn’t mean anything<br/>\r\nAdam Soroka: should we warn?<br/>\r\nGregg Kellogg: +1<br/>\r\nJeff Mixter: +1<br/>\r\nDavid Newbury: +1<br/>\r\nSimon Steyskal: +1<br/>\r\nHarold Solbrig: +1<br/>\r\nPierre-Antoine Champin: +0.5<br/>\r\nGregg Kellogg: we SHOULD<br/>\r\nAdam Soroka: +1<br/>\r\nBenjamin Young: +0 (would like to see use case mappings for all these things)<br/>\r\nDavid I. Lehn: +1<br/>\r\nResolution #1: Adopt the following rules for sealing - 1: If @sealed:true is encountered on a term definition in the active context, then attempts to redefine the term will fail and result in a warning. 2 - If @sealed:true is encountered on a context, then all terms defined within the context should be treated as having @sealed:true in their definition. 3- If @sealed:false is encountered on a term definition in the active context, where the context has been sealed with @sealed:true, then the sealing for that term is removed. {: #resolution1 .resolution}<br/>\r\nDave Longley: “If @sealed:false is encountered on a term definition in the active context, where the context has been sealed with @sealed:true, then the sealing for that term is removed.” &lt;– this sounds like a big problem as written …<br/>\r\nDave Longley: is this saying that with {\"@context\": [1, 2]} that 2 can unseal anything it wants?<br/>\r\nDave Longley: if so, that defeats the purpose of sealing … so i can only imagine that something else was meant by that text.<br/>\r\nDave Longley: it sounds like an attacker that defines 2 can get a VC to be successfully processed by a JSON-only processor in a different way from a JSON-LD processor under that condition<br/>\r\nDave Longley: i’ll check back here later to see if there’s a clarification<br/>\r\nDave Longley: if the ability to unseal a sealed context is a requirement (as opposed to just extending in an acceptable way) … it seems like we could do it without messing up JSON-only processors by using some other syntax that they would otherwise reject.<br/>\r\nDave Longley: JSON-only processors will be looking for {\"@context\": [<specific string>, <specific string>, ...ignored]}<br/>\r\nDave Longley: or could perhaps be further limited to: {\"@context\": [<specific string>, <specific string>, ...<must be a string but value is ignored>]}<br/>\r\nDave Longley: in other words, any deviation from some very rigid rules would cause a JSON-only processor to reject the input … which could be potentially used to our advantage if we need to cover other use cases where we are fearful of people sealing things that JSON-LD aware entities would like to unseal in a way that would not impact JSON-only processors.<br/>\r\nDave Longley: but what is key is that that any mechanism that is used to unseal would not impact JSON-only processors.<br/>\r\nDave Longley: if we can abide by that rule, i don’t see why i wouldn’t be supportive.<br/>\r\nRob Sanderson: dlongley: The @sealed:false would only work for the original definition, no subsequent attempt to redefine it<br/>\r\nRob Sanderson: It overrides the @sealed:true on the context<br/>\r\nRob Sanderson: But not @sealed:true on a term<br/>\r\nDave Longley: azaroth: ok, if I understand you I think that’s fine<br/>\r\nAdam Soroka: <a href=\"https://github.com/w3c/json-ld-syntax/issues/87\">https://github.com/w3c/json-ld-syntax/issues/87</a><br/>\r\n2.1. closing related issues<br/>\r\nProposed resolution: Close #87, as unnecessary given above rules. (Rob Sanderson)<br/>\r\nRob Sanderson: +1<br/>\r\nIvan Herman: +1<br/>\r\nGregg Kellogg: +1<br/>\r\nDavid Newbury: +1<br/>\r\nJeff Mixter: +1<br/>\r\nSimon Steyskal: +1<br/>\r\nDavid I. Lehn: +1<br/>\r\nResolution #2: Close #87, as unnecessary given above rules. {: #resolution2 .resolution}<br/>\r\nSimon Steyskal: <a href=\"https://github.com/w3c/json-ld-syntax/issues/98\">https://github.com/w3c/json-ld-syntax/issues/98</a><br/>\r\nProposed resolution: close #98, as unnecessary given the rules above (Ivan Herman)<br/>\r\nDavid Newbury: +1<br/>\r\nIvan Herman: +1<br/>\r\nProposed resolution: Close #98, as @context: null clears context definitions (Rob Sanderson)<br/>\r\nGregg Kellogg: +1<br/>\r\nRob Sanderson: +1<br/>\r\nHarold Solbrig: +1<br/>\r\nDavid I. Lehn: +1<br/>\r\nResolution #3: Close #98, as @context: null clears context definitions {: #resolution3 .resolution}<br/>\r\nResolution #4: Close #98, as @context: null clears context definitions {: #resolution4 .resolution}<br/>\r\nDavid I. Lehn: <a href=\"https://github.com/w3c/json-ld-syntax/issues/116\">https://github.com/w3c/json-ld-syntax/issues/116</a><br/>\r\nDavid I. Lehn: discussion of [<a href=\"https://github.com/w3c/json-ld-syntax/issues/116#issuecomment-460681505]\">https://github.com/w3c/json-ld-syntax/issues/116#issuecomment-460681505]</a><br/>\r\nDavid I. Lehn: [missed scribing much back and forth, trying to catch up on the gist]<br/>\r\nGregg Kellogg: [pointing out current algorithm could be modified based on some rules to handle the partial redefinition]<br/>\r\nIvan Herman: [concerns about backwards compatibility]<br/>\r\nGregg Kellogg: based on algorithm, 1.0 would fall through to new 1.1 behavior<br/>\r\nIvan Herman: sounds like adding more hacks<br/>\r\nDave Longley: also want it to be easier for json authors<br/>\r\nGregg Kellogg: we go towards side of being easier for authors<br/>\r\nDavid Newbury: hard to follow what is going on without knowing all the processing steps<br/>\r\nGregg Kellogg: not overriding term itself […?]<br/>\r\nRob Sanderson: more authors to explain to than people needing to understand this feature. on side of authors.<br/>\r\nDavid Newbury: issue with how things are overridden. seeing next term definition would think it fully overrode first one.<br/>\r\nIvan Herman: [worries about more complications]<br/>\r\nDavid Newbury: example seems like json in json-ld<br/>\r\nDavid I. Lehn: it’s a mix in this case, using json tools to process json-ld. would want to know the context of the data.<br/>\r\nRob Sanderson: [discussing how some examples would be processed]<br/>\r\nIvan Herman: adding new features to already complex system. really worried about it.<br/>\r\nDave Longley: understand ivan. A goal is to make ergonomics of 1.1 easier for users and better than 1.0<br/>\r\nProposed resolution: if @id is not present in a term definition, and there is no default vocabulary, but has an expansion to an absolute IRI in the active context, then the @id of the new definition is taken from the active context (otherwise this is still an error) (Rob Sanderson)<br/>\r\nRob Sanderson: +1<br/>\r\nIvan Herman: +1<br/>\r\nSimon Steyskal: +1<br/>\r\nGregg Kellogg: +1<br/>\r\nDave Longley: +1<br/>\r\nDavid I. Lehn: +1<br/>\r\nJeff Mixter: +1<br/>\r\nDavid Newbury: +0.5<br/>\r\nAdam Soroka: +1<br/>\r\nResolution #5: if @id is not present in a term definition, and there is no default vocabulary, but has an expansion to an absolute IRI in the active context, then the @id of the new definition is taken from the active context (otherwise this is still an error) {: #resolution5 .resolution}<br/>\r\nProposed resolution: Once previous is done, we can close #116 (Rob Sanderson)<br/>\r\nHarold Solbrig: +1<br/>\r\nIvan Herman: +1<br/>\r\nRob Sanderson: +1<br/>\r\nDavid Newbury: +1<br/>\r\nSimon Steyskal: +1<br/>\r\nJeff Mixter: +1<br/>\r\nDavid Newbury: +1<br/>\r\nRob Sanderson: +1<br/>\r\nHarold Solbrig: +1<br/>\r\nAdam Soroka: +1<br/>\r\nIvan Herman: +1<br/>\r\nRob Sanderson: Really 116 :)<br/>\r\nDavid I. Lehn: +1<br/>\r\nResolution #6: Once previous is done, we can close #116 {: #resolution6 .resolution}<br/>\r\nProposed resolution: We agree with the processing order per #61: scoped definition from property, then from type, then embedded. PR to update docs to come. (Rob Sanderson)<br/>\r\nIvan Herman: +1<br/>\r\nRob Sanderson: +1<br/>\r\nAdam Soroka: +1<br/>\r\nDavid I. Lehn: +1<br/>\r\nSimon Steyskal: +1<br/>\r\nDavid Newbury: +1<br/>\r\nJeff Mixter: +1<br/>\r\nHarold Solbrig: +1<br/>\r\nGregg Kellogg: +1<br/>\r\nResolution #7: We agree with the processing order per #61: scoped definition from property, then from type, then embedded. PR to update docs to come. {: #resolution7 .resolution}<br/>\r\nHarold Solbrig: scribnic hsolbrig<br/>\r\nGregg Kellogg: what if you said context null?<br/>\r\nRob Sanderson: it would wipe out all definitions<br/>\r\nGregg Kellogg: you could also seal activities<br/>\r\n</details>" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/462046369> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/4#issuecomment-462046369"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/4> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/462046369> .
<https://api.github.com/users/iherman> <http://schema.org/accountId> "iherman" .
<https://api.github.com/users/iherman> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/520723?v=4" .
<https://api.github.com/users/iherman> <http://schema.org/url> "https://github.com/iherman"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/iherman> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/462046369> <http://schema.org/creator> <https://api.github.com/users/iherman> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/462046369> <http://schema.org/startDate> "2019-02-09T13:53:13Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/462046369> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/462046369> <http://schema.org/description> "This issue was discussed in [a meeting](https://www.w3.org/2018/json-ld-wg/Meetings/Minutes/2019/2019-02-07-json-ld#section4).\r\n\r\n- `RESOLVED:  Add JSON data type to RDF, with support in JSON-LD processors for managing parsed JSON in the internal form. We will seek feedback via blogpost, and in Berlin. {: #resolution9 .resolution}`\r\n<details><summary><i class=\"differentiate\">View the transcript</i></summary>\r\nJSON Literal<br/>\r\nHarold Solbrig: <a href=\"https://github.com/w3c/json-ld-syntax/issues/4\">https://github.com/w3c/json-ld-syntax/issues/4</a><br/>\r\nIvan Herman: to do this, we will have to define an RDF data type for JSON<br/>\r\nIvan Herman: look at RDF concepts document - 3 or 4 lines<br/>\r\nRob Sanderson: <a href=\"https://www.w3.org/TR/rdf11-concepts/#section-html\">https://www.w3.org/TR/rdf11-concepts/#section-html</a><br/>\r\nGregg Kellogg: what we need to do that those didn’t is to deal with white space…<br/>\r\nIvan Herman: the only thing we have to do is to say there is a string, declared to be JSON<br/>\r\nIvan Herman: it makes cannonicalization difficult so we’d have to find or referenc it<br/>\r\n… the fact that there are html data types that makes cannonicalization difficult or impossible<br/>\r\n… so if you want to do cannonicalization, html is the big kahuna, and json is secondary<br/>\r\n… you may want to answer question about json equality, but is that our responsibility.<br/>\r\nGregg Kellogg: when you parse html or xml, value elements preserve white space. As a result, indentation variations give different literals.<br/>\r\n… in json, parsing is done after parser is completed and parsers don’t preserve white space. Serializers can be told no unnecessary white space<br/>\r\n… which avoids html and xml problem and allows us to be relatively immune. Ordering may be different but …<br/>\r\n… parsers aren’t required to be order preserving, so literals from 2 parsers might not compare. We could state that they appear<br/>\r\n… equivalent as objects in testing infrastructure.<br/>\r\n… so we just need to state that values aren’t stored without extra white space.<br/>\r\nIvan Herman: not sure that specification should require that when not a question of testing.<br/>\r\nIvan Herman: question is whether it is up to us to define when two pieces of JSON are equal<br/>\r\nIvan Herman: we can be very pragmatic and say that someone else has to take care of this.<br/>\r\nGregg Kellogg: I think we need to say something about this. We need to say something about how that serialization is performed.<br/>\r\n… we need to say how you create that string from the objects.<br/>\r\nAdam Soroka: consider the case of GeoJSON …<br/>\r\nDavid I. Lehn: is there another solution than complete serialization?<br/>\r\nRob Sanderson: Use case p168 property has range rdf literal with all sorts of possible values, but you can’t add a json literal because there is no id.<br/>\r\n… if we want to make it easy for authors to do the right thing, then json as (readable) json is what is needed.<br/>\r\nHarold Solbrig: <a href=\"http://build.fhir.org/medicationexample0301.json.html\">http://build.fhir.org/medicationexample0301.json.html</a><br/>\r\nHarold Solbrig: <a href=\"http://build.fhir.org/medicationexample0301.ttl.html\">http://build.fhir.org/medicationexample0301.ttl.html</a><br/>\r\nRob Sanderson: spec above is completely silent about html canonicalization<br/>\r\n… we aren’t adding a new problem, but just another type that doesn’t define canonicalization<br/>\r\nRob Sanderson: can we punt on it and say will be canonicalized when there is a canonicalizatin spec for json?<br/>\r\nIvan Herman: in publishing we put out jsonld not for any reason except it has been accepted by schema.org<br/>\r\n… any author who cares about being found by schema.org will put it in jsonld vs. json literal<br/>\r\nDavid Newbury: this will allow people to progressively add semantics vs. having to do everything up front<br/>\r\nBenjamin Young: doing this without canonicalization is painfully naive and dangerous. If isn’t consistent between python and js…<br/>\r\n… we’re just asking for a world of pain.<br/>\r\nRob Sanderson: question is the extent to which … (if we don’t do complete canonicalization…) … are we doing a better or worse job than nothing?<br/>\r\nGregg Kellogg: coming around to saying it is undefined until spec exists.<br/>\r\nGregg Kellogg: signature specs will need to call out some canonicalization spec or define one that should be used by jsonld processors …<br/>\r\n… suggest that canonicalization of jsonld literals is not supported, so can’t sign graphs that contain it…<br/>\r\nDavid I. Lehn: is there a way to know which ones aren’t supported?<br/>\r\nIvan Herman: no because anyone can define a datatype in an RDF graph.<br/>\r\nDavid Newbury: unless codepaths do unicode canonicalization, we’ve still got issues…<br/>\r\nIvan Herman: are there good reasons to do this in jsonld?<br/>\r\nIvan Herman: do we want to have json literals or not?<br/>\r\nDavid I. Lehn: I’m worried about people misusing it but…<br/>\r\nGregg Kellogg: if there WAS a standard for it, we’d say it must be in that form …<br/>\r\nRob Sanderson: there are many terrible things people can do today. I’m highly reluctant to use “it could be misused” as a good reason to not do something.<br/>\r\nDavid Newbury: when we talk about misuse, do we mean security or misuse of RDF in the world (decreasing the amount of semantics in the universe)<br/>\r\nIvan Herman: From a W3C perspective… what we could do is put this into the document w/ a note that says it could be done but we want to have…<br/>\r\n… feedback from the community that we are not sure that it is a good idea and seek input.<br/>\r\nGregg Kellogg: we did something like this in spec w/ bnode identifiers and document base url …<br/>\r\nJeff Mixter: reason that WikiData chose JSON rather than JSONLD … they may have opinions about injecting into … document.<br/>\r\nProposed resolution: Add JSON data type to RDF, with support in JSON-LD processors for managing parsed JSON in the internal form. We will seek feedback via blogpost, and in Berlin. (Rob Sanderson)<br/>\r\nIvan Herman: +1<br/>\r\nGregg Kellogg: +1<br/>\r\nRob Sanderson: +1<br/>\r\nDavid Newbury: +1<br/>\r\nJeff Mixter: +1<br/>\r\nDavid I. Lehn: +0.9<br/>\r\nHarold Solbrig: +1<br/>\r\nResolution #8: Add JSON data type to RDF, with support in JSON-LD processors for managing parsed JSON in the internal form. We will seek feedback via blogpost, and in Berlin. {: #resolution9 .resolution}<br/>\r\n</details>" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/462050696> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/20#issuecomment-462050696"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/20> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/462050696> .
<https://api.github.com/users/iherman> <http://schema.org/accountId> "iherman" .
<https://api.github.com/users/iherman> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/520723?v=4" .
<https://api.github.com/users/iherman> <http://schema.org/url> "https://github.com/iherman"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/iherman> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/462050696> <http://schema.org/creator> <https://api.github.com/users/iherman> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/462050696> <http://schema.org/startDate> "2019-02-09T14:52:30Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/462050696> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/462050696> <http://schema.org/description> "This issue was discussed in [a meeting](https://www.w3.org/2018/json-ld-wg/Meetings/Minutes/2019/2019-02-08-json-ld#section1).\r\n\r\n- `RESOLVED:  After discussion, we agree on no change to sealed contexts from yesterday {: #resolution1 .resolution}`\r\n<details><summary><i class=\"differentiate\">View the transcript</i></summary>\r\nSealing … again<br/>\r\nPierre-Antoine Champin: not ok with the decision with context null being able to wipe everything. It is brittle and using a nested context that could have null. It is not necessary to seal terms<br/>\r\n… we are overwriting context null<br/>\r\n… solution is to separate the functions and create a new keyword that can be used to unseal all of the current sealed terms. @unseal no would unseal all terms for example<br/>\r\n… sealed terms would not be touched<br/>\r\n… a third benefit would make it easier to deal with the situation where you import a sealed context<br/>\r\nIvan Herman: what this means is that a context null wipes out everything except what is sealed?<br/>\r\nPierre-Antoine Champin: no opinion on how this would function but sealed terms would not be affected<br/>\r\nDavid Newbury: for the use case where you have an area in the document we would need to use unsealed and context null<br/>\r\nRob Sanderson: you could unseal everything and adding null to blow everything away<br/>\r\nGregg Kellogg: is you see the @seal today it would have problems<br/>\r\nIvan Herman: this is very similar to the extension conversation we had yesterday<br/>\r\nPierre-Antoine Champin: this is a separation of concerns to unseal terms and/or wipe the context<br/>\r\nIvan Herman: yesterday we came to this a realized that we do not have a real use case for this<br/>\r\nIvan Herman: if you look at the examples at the end we decided to seal individual terms so in the current proposal we should rather look being able to unseal individual terms<br/>\r\nGregg Kellogg: there is the asymmetry of unseal and seal - unseal unseals everything. This need does not seem to exist in the wild.<br/>\r\n… not in favor of doing this<br/>\r\nPierre-Antoine Champin: agrees that the syntax is a bit odd but regarding the use cases from yesterday we were looking for a way to unseal the entire context. the use case here is when you encounter random sealed contexts in the wild<br/>\r\nGregg Kellogg: if we allow you to fix wild sealed contexts we lower the need/concern to get the use of seal correct<br/>\r\n… better option is to have the community decide what should be sealed<br/>\r\nDavid Newbury: if we provide a mechanism to unseal sealed context that defeats the original point of this issue<br/>\r\nAdam Soroka: thought is was more of a strong suggestion to not unseal not a restriction to unseal<br/>\r\nPierre-Antoine Champin: my concern about context null we are defeating the reason for seal but in a more sneaky way. this proposal clearly defines what we are doing and can imply why we are doing it<br/>\r\nGregg Kellogg: wanted to note that we can not expect sanctity around contexts sealed, unsealed, null, etc<br/>\r\n… more comfortable with context null<br/>\r\nRob Sanderson: also prefer context null because it raises the stakes for the user as opposed to just unsealing the terms. with null, you need to start all over<br/>\r\nAdam Soroka: if you want to unseal the context terms, you need to know all of the terms to unseal but if you can unseal at the context level<br/>\r\n… it is not a huge problem<br/>\r\nIvan Herman: we should put in a proposal and move on<br/>\r\nRob Sanderson: sounds like we prefer the decision from yesterday<br/>\r\nProposed resolution: After discussion, we agree on no change to sealed contexts from yesterday (Rob Sanderson)<br/>\r\nRob Sanderson: +1<br/>\r\nGregg Kellogg: +1<br/>\r\nPierre-Antoine Champin: +1<br/>\r\nHarold Solbrig: +1<br/>\r\nJeff Mixter: +1<br/>\r\nIvan Herman: +1<br/>\r\nDavid I. Lehn: +1<br/>\r\nSimon Steyskal: +1<br/>\r\nResolution #1: After discussion, we agree on no change to sealed contexts from yesterday {: #resolution1 .resolution}<br/>\r\n</details>" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/462050780> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/108#issuecomment-462050780"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/108> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/462050780> .
<https://api.github.com/users/iherman> <http://schema.org/accountId> "iherman" .
<https://api.github.com/users/iherman> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/520723?v=4" .
<https://api.github.com/users/iherman> <http://schema.org/url> "https://github.com/iherman"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/iherman> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/462050780> <http://schema.org/creator> <https://api.github.com/users/iherman> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/462050780> <http://schema.org/startDate> "2019-02-09T14:53:42Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/462050780> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/462050780> <http://schema.org/description> "This issue was discussed in [a meeting](https://www.w3.org/2018/json-ld-wg/Meetings/Minutes/2019/2019-02-08-json-ld#section2).\r\n\r\n- `RESOLVED:  Defer the integrity/context metadata related issues, and request early horizontal review from security, privacy and TAG. {: #resolution2 .resolution}`\r\n<details><summary><i class=\"differentiate\">View the transcript</i></summary>\r\nadding metadata to contexts<br/>\r\nRob Sanderson: github: <a href=\"https://github.com/w3c/json-ld-syntax/issues/108\">https://github.com/w3c/json-ld-syntax/issues/108</a><br/>\r\nRob Sanderson: from the discussion around sealing<br/>\r\n… beyond being able to seal we want to check if a context has changed<br/>\r\n… you should be able to annotate the context to know its version or a checksum to test it<br/>\r\n… there is a spec that already does this SRI<br/>\r\n… a 1.1 processor could use this to see if a context has changed and if so do something<br/>\r\nSimon Steyskal: link to SRI <a href=\"https://www.w3.org/TR/SRI/\">https://www.w3.org/TR/SRI/</a><br/>\r\nIvan Herman: originally this type of feature was based on the desire to create a helping hand for implementations that want to use caching for contexts<br/>\r\n… this is also what SRI is used with in HTML<br/>\r\nIvan Herman: -> <a href=\"https://github.com/w3c/json-ld-syntax/issues/108#issuecomment-460201634\">https://github.com/w3c/json-ld-syntax/issues/108#issuecomment-460201634</a> another syntax<br/>\r\nIvan Herman: as an alternative we could have data that points to the nearest stored version of the context similar to how CSS works<br/>\r\n… extra metadata for the context could be added and might be useful<br/>\r\nDavid Newbury: how is this related to hash links?<br/>\r\nIvan Herman: SRI is around and tested<br/>\r\n… for SRI it is an existing implementation feature in HTML so all we have to so is refer to the SRI documentation<br/>\r\nBenjamin Young: question the value of encoding this in the context<br/>\r\n… concerned about adding all of the metadata for contexts into the context<br/>\r\nRob Sanderson: spec: <a href=\"https://tools.ietf.org/html/draft-sporny-hashlink-02\">https://tools.ietf.org/html/draft-sporny-hashlink-02</a><br/>\r\nBenjamin Young: msporny’s write up of hashlink’s value to JSON-LD (and friends) <a href=\"https://lists.w3.org/Archives/Public/public-json-ld-wg/2019Jan/0000.html\">https://lists.w3.org/Archives/Public/public-json-ld-wg/2019Jan/0000.html</a><br/>\r\nGregg Kellogg: this seems like we are in the HTML domain based on the use cases<br/>\r\n… like the idea of pathing but feel like we should not bake that into the standard<br/>\r\nBenjamin Young: +1 to gkellogg’s thoughts<br/>\r\nHarold Solbrig: this seems like a general problem not specific to JSON-LD<br/>\r\nRob Sanderson: against hashlinks because it is not normative. This is not prohibited but we do not need to explicitly say so. Do not want to focus just an a HTML approach<br/>\r\nAdam Soroka: maybe we could offer best practices<br/>\r\nRob Sanderson: +1 to best practice note<br/>\r\nAdam Soroka: should we kick this issue up for the broader community to discuss<br/>\r\nIvan Herman: do not see the relation to HTML as relevant. For SRI all we need is a clear definition of what the hash value we are using is referring to<br/>\r\nAdam Soroka: do we need to specify what to do with the hash value<br/>\r\nIvan Herman: no<br/>\r\nAdam Soroka: is this a protocol level question?<br/>\r\nDavid I. Lehn: the readability could be a concern<br/>\r\nRob Sanderson: reliance on the http headers seems not feasible. Since a document can load in multiple contexts where should that information be stored and acted upon.<br/>\r\nGregg Kellogg: if the integrity checking is not done on the processor than it will not work<br/>\r\nHarold Solbrig: this is another feature we are adding to JSON-ld<br/>\r\n… what do we gain for adding this into the spec?<br/>\r\nIvan Herman: if you want to help folks that are on a bad network connection - this could solve that problem.<br/>\r\nHarold Solbrig: what about support for current integrity versioning approaches that work and are used?<br/>\r\nDavid Newbury: to implement this we will need to add a third way to reference contexts<br/>\r\nIvan Herman: we could defer this because it opens a lot of questions that we would need to address<br/>\r\nIvan Herman: what do say to the folks that have this problem now<br/>\r\n… we do not have anything in our spec to address this use case concern<br/>\r\nGregg Kellogg: this is a resource caching issue and there is ways to solve this currently<br/>\r\nDavid Newbury: is we allow metadata in context - we could also rethink adding documentation in the context<br/>\r\nAdam Soroka: is integrity also part of the concern?<br/>\r\nIvan Herman: there are a few reference implementations. They should try to implement the best possible caching control and see how it work and document how to do it<br/>\r\nIvan Herman: all of these implementations should serve as examples on how to solve this problem<br/>\r\nBenjamin Young: current CG “best practice” for caching <a href=\"https://json-ld.org/spec/latest/json-ld-api-best-practices/#cache-context\">https://json-ld.org/spec/latest/json-ld-api-best-practices/#cache-context</a><br/>\r\nRob Sanderson: the issue of integrity is related to versioning - want to ensure that the contexts that are being loaded are not mutable<br/>\r\nHarold Solbrig: this is sort of what http expire headers are used for<br/>\r\nHarold Solbrig: if we did SRI we would need to explain how it works and what to do with it<br/>\r\nRob Sanderson: we should propose that this is an issue but we are not the folks to deal with it<br/>\r\nIvan Herman: agreed but we might want to also say that we will be more rigorous about documenting how implementors do this<br/>\r\nProposed resolution: Defer the integrity/context metadata related issues, and request early horizontal review from security, privacy and TAG. (Rob Sanderson)<br/>\r\nIvan Herman: +1<br/>\r\nGregg Kellogg: +1<br/>\r\nJeff Mixter: +1<br/>\r\nRob Sanderson: +1<br/>\r\nSimon Steyskal: +1<br/>\r\nBenjamin Young: +1<br/>\r\nDavid Newbury: +1<br/>\r\nPierre-Antoine Champin: +1<br/>\r\nResolution #2: Defer the integrity/context metadata related issues, and request early horizontal review from security, privacy and TAG. {: #resolution2 .resolution}<br/>\r\n</details>" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/462050868> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/19#issuecomment-462050868"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/19> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/462050868> .
<https://api.github.com/users/iherman> <http://schema.org/accountId> "iherman" .
<https://api.github.com/users/iherman> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/520723?v=4" .
<https://api.github.com/users/iherman> <http://schema.org/url> "https://github.com/iherman"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/iherman> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/462050868> <http://schema.org/creator> <https://api.github.com/users/iherman> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/462050868> <http://schema.org/startDate> "2019-02-09T14:54:49Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/462050868> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/462050868> <http://schema.org/description> "This issue was discussed in [a meeting](https://www.w3.org/2018/json-ld-wg/Meetings/Minutes/2019/2019-02-08-json-ld#section3).\r\n\r\n- `RESOLVED:  Continue to explore @nest with additional features, such as @container:@id, as a solution to issue #19 {: #resolution3 .resolution}`\r\n- `ACTION:  gkellogg and pchampin to explore effect of @nest+@container:@id on compaction and expansion`\r\n<details><summary><i class=\"differentiate\">View the transcript</i></summary>\r\n3. “itemref”, issue 19<br/>\r\nRob Sanderson: issue occurs when resource occurs multiple times in the graph. What would be nice that if you knew that terms got used repeatedly…<br/>\r\n… would be nice if you had references from the inclusion to included. JSON API calls it “included”<br/>\r\n… JSON Schema has $ref.<br/>\r\nDavid Newbury: <a href=\"https://jsonapi.org/format/1.1/#document-top-level\">https://jsonapi.org/format/1.1/#document-top-level</a><br/>\r\nDavid Newbury: an example of it in the JSON-API spec is here: <a href=\"https://jsonapi.org/format/1.1/#document-compound-documents\">https://jsonapi.org/format/1.1/#document-compound-documents</a><br/>\r\nRob Sanderson: useful in graph context so you can use references rather than values<br/>\r\n… is this a frame issue or syntax? We decided both - could go into framing to know that “included” is not a predicate, it is the inclusion<br/>\r\n… references block rather than &lt;base#>included.<br/>\r\nGregg Kellogg: did you consider the RDFa approach, where there is a way to output triples where after parsing there is a reasoning step?<br/>\r\nIvan Herman: I thought that was more directly done…<br/>\r\nGregg Kellogg: … that was microdata. RDFa is more directly — reasoner takes triples and outputs w/ different subject.<br/>\r\nJeff Mixter: is there a way to solve this with @graph?<br/>\r\n… I have a first block of JSON which is object outside of a graph and add subgraphs with aliased keyword<br/>\r\nIvan Herman: this is mixing levels — syntax is similar but this is not a graph<br/>\r\nGregg Kellogg: inverse properties? Included have reverse relationships to items that are included<br/>\r\n… is classificaton_of is at term that is an @reverse – achieves separation of concerns but also includes expanding, compacting and framing for round trip<br/>\r\nRob Sanderson: would still need an @nest property.<br/>\r\nIvan Herman: there are two ways to look at this:<br/>\r\n… 1) enum:c6 is an internal reference that we could handle with fragment id in graph, but I have an extra triple in the graph …<br/>\r\n… you get extra links<br/>\r\n… 2) conceptually expect value of enum:c6 to be physically replicated and put back into the node<br/>\r\n… itemref did the replication option<br/>\r\n… JSON Schema creates a fragment identifier, but is this what you are looking for?<br/>\r\nDavid Newbury: our use case is the latter case<br/>\r\n… because in a JSON only environment, knowing where to go is difficult.<br/>\r\nIvan Herman: Option 2) requires duplication and massaging in graph…<br/>\r\nRob Sanderson: gregg’s proposal w/ included : {\"@container\": \"@id\"} (sort of) works<br/>\r\nIvan Herman: included should be a nest<br/>\r\nDavid Newbury: how do I get option 2) (included under classification)?<br/>\r\nGregg Kellogg: we’d still need an inverse thing. If I have an id map but want to say it is sort of transparent…<br/>\r\nIvan Herman: if a term is defined to be @nest, does @id still work or do you ignore that once and for all?<br/>\r\nGregg Kellogg: @nest allows me to use an intermediate property to hold things which are pushed up. We want subtree to be somewhere else<br/>\r\nIvan Herman: if included is @nest, is @container: @id still valid?<br/>\r\nGregg Kellogg: round tripping is an issue as well.<br/>\r\nBenjamin Young: posted playground example above that uses “embedded”. Seems to do what you want. Note that “included” is an array in<br/>\r\n… json API not an object. Also introducing a non-JSON reference mechanism<br/>\r\nIvan Herman: what you do is define a graph, not the content of the graph<br/>\r\nRob Sanderson: there is a blank node _:b0 which has a name and a type<br/>\r\nGregg Kellogg: use a preprocessing tool or do it the way RDFa does it?<br/>\r\nDavid Newbury: I could do this but it wouldn’t be valid JSON-LD …<br/>\r\nGregg Kellogg: It would be, but it wouldn’t be the graph you are looking for<br/>\r\nHarold Solbrig: (discussion about examples on FTF document… w/ @nest and rather than containing , references object…)<br/>\r\nDavid Newbury: in practice we use @id in our main document and use a placeholder in data, but requires an addition piece of semantic ata<br/>\r\nPierre-Antoine Champin: 2 questions. 1) Do we agree that the enum term should be defined as well? (a: yes)<br/>\r\n… 2) is \"@type\": \"@nest\" the way it would be written? (a: no)<br/>\r\nRob Sanderson: nest: <a href=\"https://www.w3.org/TR/json-ld11/#ex-65-defining-property-nesting\">https://www.w3.org/TR/json-ld11/#ex-65-defining-property-nesting</a><br/>\r\nGregg Kellogg: could handle it with n3 reasoning?<br/>\r\n… it seems like we are trying to do things at a totally different level.<br/>\r\nAdam Soroka: one other wrinkle … this would play oddly with a streaming processor.<br/>\r\nGregg Kellogg: this is the reason we did rdfa the way we did<br/>\r\nIvan Herman: in rdfa we define terms and additional semantic rules, which is what we do here.<br/>\r\nGregg Kellogg: it has already been done, we could just reference it.<br/>\r\nGregg Kellogg: <a href=\"https://www.w3.org/TR/html-rdfa/#property-copying\">https://www.w3.org/TR/html-rdfa/#property-copying</a><br/>\r\nIvan Herman: done through RDF, but way too complicated…<br/>\r\nPierre-Antoine Champin: reminds me of the very first version of RDF rdf:aboutEach<br/>\r\nRob Sanderson: <a href=\"http://tinyurl.com/ydgfcgl4\">http://tinyurl.com/ydgfcgl4</a><br/>\r\nHarold Solbrig: (azaroth using playground example between jane and john…)<br/>\r\nIvan Herman: copying vs. referencing. We can say that copying stuff is outside json-ld.<br/>\r\n… reference, however, might be doable. What do we need to make the example on the screen (enum:c6, … in issue #19) work<br/>\r\n… . included is there because of bookkeeping. The approach feels natural<br/>\r\n… if included is nested, you take it out of the equation altogether…<br/>\r\nRob Sanderson: needs to be a new syntax (\"@id\": \"@nest\"?)<br/>\r\nSimon Steyskal: works as expected on playground but @id: @nest doesn’t work<br/>\r\nPierre-Antoine Champin: <a href=\"https://json-ld.org/playground-dev/#startTab=tab-nquads&amp;json-ld=%7B%22%40context%22%3A%5B%22http%3A%2F%2Fschema.org%2F%22%2C%7B%22labels%22%3A%7B%22%40id%22%3A%22%40nest%22%7D%7D%5D%2C%22%40type%22%3A%22Person%22%2C%22labels%22%3A%5B%7B%22familyName%22%3A%22Doe%22%7D%2C%7B%22givenName%22%3A%22Jane%22%7D%5D%7D\">https://json-ld.org/playground-dev/#startTab=tab-nquads&amp;json-ld=%7B%22%40context%22%3A%5B%22http%3A%2F%2Fschema.org%2F%22%2C%7B%22labels%22%3A%7B%22%40id%22%3A%22%40nest%22%7D%7D%5D%2C%22%40type%22%3A%22Person%22%2C%22labels%22%3A%5B%7B%22familyName%22%3A%22Doe%22%7D%2C%7B%22givenName%22%3A%22Jane%22%7D%5D%7D</a><br/>\r\nGregg Kellogg: is there a way through @nest to subsume @graph while defining a bush<br/>\r\nGregg Kellogg: today, nesting requires the object<br/>\r\nGregg Kellogg: There’s obviously work to be done…<br/>\r\nRob Sanderson: how much?<br/>\r\nGregg Kellogg: (waffles and ponders…) involves extending id of nesting… there a lot of angles to this, man.<br/>\r\nDavid Newbury: to clarify, we’re not addressing framing right now, correct?<br/>\r\nIvan Herman: workergnome – is this approach still ok? Does it accomplish what you want?<br/>\r\nProposed resolution: Continue to explore @nest with additional features, such as @container:@id, as a solution to issue #19 (Rob Sanderson)<br/>\r\nIvan Herman: +1<br/>\r\nSimon Steyskal: +1<br/>\r\nRob Sanderson: +1<br/>\r\nJeff Mixter: +1<br/>\r\nHarold Solbrig: +1<br/>\r\nGregg Kellogg: +1<br/>\r\nDavid I. Lehn: +1<br/>\r\nAdam Soroka: +1<br/>\r\nPierre-Antoine Champin: +1<br/>\r\nDavid Newbury: +1<br/>\r\nResolution #3: Continue to explore @nest with additional features, such as @container:@id, as a solution to issue #19 {: #resolution3 .resolution}<br/>\r\nBenjamin Young: +1<br/>\r\nAction #1: gkellogg and pchampin to explore effect of @nest+@container:@id on compaction and expansion<br/>\r\n</details>" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/462050973> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/33#issuecomment-462050973"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/33> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/462050973> .
<https://api.github.com/users/iherman> <http://schema.org/accountId> "iherman" .
<https://api.github.com/users/iherman> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/520723?v=4" .
<https://api.github.com/users/iherman> <http://schema.org/url> "https://github.com/iherman"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/iherman> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/462050973> <http://schema.org/creator> <https://api.github.com/users/iherman> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/462050973> <http://schema.org/startDate> "2019-02-09T14:56:30Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/462050973> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/462050973> <http://schema.org/description> "This issue was discussed in [a meeting](https://www.w3.org/2018/json-ld-wg/Meetings/Minutes/2019/2019-02-08-json-ld#section5-1).\r\n\r\n- `RESOLVED:  Close #33, wontfix. Extension mechanism is just to add features to the context that a processor does not understand. {: #resolution5 .resolution}`\r\n<details><summary><i class=\"differentiate\">View the transcript</i></summary>\r\n5.1. Feature Detection in JSON-LD Processors<br/>\r\nAdam Soroka: <a href=\"https://github.com/w3c/json-ld-syntax/issues/33\">https://github.com/w3c/json-ld-syntax/issues/33</a><br/>\r\nGregg Kellogg: Close won’t fix for #33?<br/>\r\nRob Sanderson: +1 to close wontfix, due to lack of time and the extent of the new work<br/>\r\nGregg Kellogg: this would injure interoperability<br/>\r\nRob Sanderson: agreed<br/>\r\n… and it’s a big ask to prescribe all the features<br/>\r\nIvan Herman: do we close it? or defer it?<br/>\r\nDavid I. Lehn: This was a while ago<br/>\r\n… we were coming up with lots of features<br/>\r\nGregg Kellogg: and then mediatypes have been used for just this<br/>\r\nDavid Newbury: I would happily close<br/>\r\n… this kind of version inspection– the complexity outweighs any benefit<br/>\r\n… we want to put the burden on implementors, this does the opposite<br/>\r\nDavid I. Lehn: one place this might help is with something like JSON literals,<br/>\r\nRob Sanderson: that goes right to the interop question<br/>\r\nGregg Kellogg: the reason we needed @version is to make a 1.0 processor die because it would not check the range of various keys<br/>\r\n… which we’ve tightened up in 1.1.<br/>\r\n… we used to leave that open<br/>\r\n… so adding something more specific to @version would be gratuitous, in that sense<br/>\r\nIvan Herman: why would this help the user?<br/>\r\n… I don’t care about the devs– they will manage<br/>\r\n… but this will complicate life for the users!<br/>\r\n… I don’t see who would gaim<br/>\r\nProposed resolution: Close #33, wontfix. Extension mechanism is just to add features to the context that a processor does not understand. (Rob Sanderson)<br/>\r\nIvan Herman: +1<br/>\r\nGregg Kellogg: +1<br/>\r\nDavid Newbury: +1<br/>\r\nJeff Mixter: +1<br/>\r\nRob Sanderson: +1<br/>\r\nSimon Steyskal: +1<br/>\r\nHarold Solbrig: +1<br/>\r\n<b>ajs6f>ajs6f:</b> has joined #json-ld<br/>\r\n<b>ajs6f>:</b> &lt;ajs6f>+1<br/>\r\nResolution #5: Close #33, wontfix. Extension mechanism is just to add features to the context that a processor does not understand. {: #resolution5 .resolution}<br/>\r\n</details>" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/462051330> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/25#issuecomment-462051330"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/25> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/462051330> .
<https://api.github.com/users/iherman> <http://schema.org/accountId> "iherman" .
<https://api.github.com/users/iherman> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/520723?v=4" .
<https://api.github.com/users/iherman> <http://schema.org/url> "https://github.com/iherman"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/iherman> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/462051330> <http://schema.org/creator> <https://api.github.com/users/iherman> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/462051330> <http://schema.org/startDate> "2019-02-09T15:00:46Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/462051330> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/462051330> <http://schema.org/description> "This issue was discussed in [a meeting](https://www.w3.org/2018/json-ld-wg/Meetings/Minutes/2019/2019-02-08-json-ld#section5-4).\r\n\r\n- `RESOLVED:  Close syntax #25 wontfix, we stick with IRI rather than using URL {: #resolution9 .resolution}`\r\n<details><summary><i class=\"differentiate\">View the transcript</i></summary>\r\nURL-s vs. IRI-s<br/>\r\nIvan Herman: <a href=\"https://github.com/w3c/json-ld-syntax/issues/25\">https://github.com/w3c/json-ld-syntax/issues/25</a><br/>\r\nProposed resolution: Close syntax #25 wontfix, we stick with IRI rather than using URL (Rob Sanderson)<br/>\r\nGregg Kellogg: +1<br/>\r\nAdam Soroka: +1<br/>\r\nRob Sanderson: +1<br/>\r\nIvan Herman: +1<br/>\r\nHarold Solbrig: +1<br/>\r\nDavid Newbury: +1<br/>\r\nSimon Steyskal: +1<br/>\r\nBenjamin Young: +1<br/>\r\nJeff Mixter: +1<br/>\r\nResolution #9: Close syntax #25 wontfix, we stick with IRI rather than using URL {: #resolution9 .resolution}<br/>\r\n</details>" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/462051437> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/121#issuecomment-462051437"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/121> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/462051437> .
<https://api.github.com/users/iherman> <http://schema.org/accountId> "iherman" .
<https://api.github.com/users/iherman> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/520723?v=4" .
<https://api.github.com/users/iherman> <http://schema.org/url> "https://github.com/iherman"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/iherman> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/462051437> <http://schema.org/creator> <https://api.github.com/users/iherman> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/462051437> <http://schema.org/startDate> "2019-02-09T15:02:21Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/462051437> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/462051437> <http://schema.org/description> "This issue was discussed in [a meeting](https://www.w3.org/2018/json-ld-wg/Meetings/Minutes/2019/2019-02-08-json-ld#section5-6).\r\n\r\n- `RESOLVED:  Close #121 wontfix, as the solution that isn’t ambiguous is very very complicated {: #resolution11 .resolution}`\r\n<details><summary><i class=\"differentiate\">View the transcript</i></summary>\r\nTerm definitions in context that support multiple values for @type?<br/>\r\nRob Sanderson: ref: <a href=\"https://github.com/w3c/json-ld-syntax/issues/121\">https://github.com/w3c/json-ld-syntax/issues/121</a><br/>\r\nRob Sanderson: this came out of the sealing discussion<br/>\r\n… timc notes that schema.org has properties that take either text or resource<br/>\r\n… should we be able to say that a property accepts either type A or type B but not type C<br/>\r\nGregg Kellogg: schema.org should have different properties for differently-typed values<br/>\r\nIvan Herman: not really practical for schema.org users<br/>\r\nRob Sanderson: you can rep this in the instance doc itself, inline<br/>\r\n… I say close won’tfix because it is unambiguous but ugly<br/>\r\nGregg Kellogg: e.g. if you have a property ‘author’ it could have values of many different types<br/>\r\nRob Sanderson: validation is not JSON-LD’s job, just mapping<br/>\r\nIvan Herman: in the context of schemo.org, can they properly define that something is say, a resource or a text?/<br/>\r\nIvan Herman: is it a case of “if it can be parsed as a URI it should be treated as such”?<br/>\r\n<b>general:</b> no, that’s too error-prone<br/>\r\nIvan Herman: they (schema.org) have a canonical order of expectation<br/>\r\nGregg Kellogg: and schema.org doesn’t really use linked data<br/>\r\nProposed resolution: Close #121 wontfix, as the solution that isn’t ambiguous is very very complicated (Rob Sanderson)<br/>\r\nIvan Herman: +1<br/>\r\nAdam Soroka: +1<br/>\r\nRob Sanderson: +1<br/>\r\nGregg Kellogg: +<br/>\r\nDavid Newbury: +1<br/>\r\nDavid I. Lehn: +1<br/>\r\nBenjamin Young: +0 (missed most of the debate)<br/>\r\nGregg Kellogg: also <a href=\"http://linter.structured-data.org,\">http://linter.structured-data.org,</a> which does it’s best to figure it out.<br/>\r\nGregg Kellogg: +1<br/>\r\nJeff Mixter: +1<br/>\r\nResolution #11: Close #121 wontfix, as the solution that isn’t ambiguous is very very complicated {: #resolution11 .resolution}<br/>\r\nHarold Solbrig: +1<br/>\r\n</details>" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/462051622> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/128#issuecomment-462051622"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/128> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/462051622> .
<https://api.github.com/users/iherman> <http://schema.org/accountId> "iherman" .
<https://api.github.com/users/iherman> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/520723?v=4" .
<https://api.github.com/users/iherman> <http://schema.org/url> "https://github.com/iherman"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/iherman> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/462051622> <http://schema.org/creator> <https://api.github.com/users/iherman> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/462051622> <http://schema.org/startDate> "2019-02-09T15:04:57Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/462051622> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/462051622> <http://schema.org/description> "This issue was discussed in [a meeting](https://www.w3.org/2018/json-ld-wg/Meetings/Minutes/2019/2019-02-08-json-ld#section5-9).\r\n\r\n- `RESOLVED:  Verify that @nest solution for #19 solves issue in #128 and defer until then {: #resolution14 .resolution}`\r\n<details><summary><i class=\"differentiate\">View the transcript</i></summary>\r\nTriG graphs in JSON-LD<br/>\r\nRob Sanderson: ref: <a href=\"https://github.com/w3c/json-ld-syntax/issues/128\">https://github.com/w3c/json-ld-syntax/issues/128</a><br/>\r\nGregg Kellogg: The concern is that TRiG does not use the value, insomuch as it’s just a set of graphs, names, etc, where JSON-LD has the object being the name of something in the default graph.<br/>\r\nIvan Herman: that’s what the issues says. What dave put in is a solution that technically works. It’s awful, and you can put in a fig leaf by aliasing @graph, but…<br/>\r\n… what did come up is that Pierre Antoine put in a proposal for a solution and the syntax was wrong, but the way that it is now after our discussion this morning it probably works, but it is consistent.<br/>\r\n… what he has here will work once we’ve done the cognates.<br/>\r\n… that’s the figleaf<br/>\r\nGregg Kellogg: I like that more than one problem is solved with a single solution<br/>\r\nRob Sanderson: should we validate that it expands correctly one the fixes are in?<br/>\r\nGregg Kellogg: something might expand oddly…<br/>\r\nIvan Herman: expanding is for machines. I don’t care. But for humans, what P.A. has put in is fine.<br/>\r\nProposed resolution: Verify that @nest solution for #19 solves issue in #128 and defer until then (Rob Sanderson)<br/>\r\nDavid Newbury: +1<br/>\r\nJeff Mixter: +1<br/>\r\nRob Sanderson: +1<br/>\r\nGregg Kellogg: +1<br/>\r\nIvan Herman: +1<br/>\r\nRob Sanderson: we should make sure it’s solved before closing<br/>\r\nHarold Solbrig: +1<br/>\r\nDavid I. Lehn: +1<br/>\r\nResolution #14: Verify that @nest solution for #19 solves issue in #128 and defer until then {: #resolution14 .resolution}<br/>\r\nAdam Soroka: +1<br/>\r\n</details>" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/462051712> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/30#issuecomment-462051712"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/30> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/462051712> .
<https://api.github.com/users/iherman> <http://schema.org/accountId> "iherman" .
<https://api.github.com/users/iherman> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/520723?v=4" .
<https://api.github.com/users/iherman> <http://schema.org/url> "https://github.com/iherman"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/iherman> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/462051712> <http://schema.org/creator> <https://api.github.com/users/iherman> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/462051712> <http://schema.org/startDate> "2019-02-09T15:06:09Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/462051712> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/462051712> <http://schema.org/description> "This issue was discussed in [a meeting](https://www.w3.org/2018/json-ld-wg/Meetings/Minutes/2019/2019-02-08-json-ld#section5-10).\r\n\r\n- No actions or resolutions\r\n<details><summary><i class=\"differentiate\">View the transcript</i></summary>\r\ndatasets and graphs<br/>\r\nRob Sanderson: ref: <a href=\"https://github.com/w3c/json-ld-syntax/issues/30\">https://github.com/w3c/json-ld-syntax/issues/30</a><br/>\r\nIvan Herman: I don’t like the way that this is done, but it turned into a philosophical argument, and I can just close it.<br/>\r\nIvan Herman: to clarify, I want to close it because it’s way too late.<br/>\r\n</details>" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/462521536> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/20#issuecomment-462521536"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/20> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/462521536> .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/462521536> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/462521536> <http://schema.org/startDate> "2019-02-11T22:31:52Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/462521536> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/462521536> <http://schema.org/description> "See #129." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/462521703> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/129#issuecomment-462521703"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/129> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/462521703> .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/462521703> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/462521703> <http://schema.org/startDate> "2019-02-11T22:32:26Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/462521703> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/462521703> <http://schema.org/description> "Fixing this will close #116." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/462971675> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/126#issuecomment-462971675"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/126> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/462971675> .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/462971675> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/462971675> <http://schema.org/startDate> "2019-02-12T22:52:48Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/462971675> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/462971675> <http://schema.org/description> "To be consistent with the description, and intent, I went back to using `foaf:age` as the term, but changed its `@id` to be an absolute IRI." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/463218320> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/119#issuecomment-463218320"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/119> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/463218320> .
<https://api.github.com/users/iherman> <http://schema.org/accountId> "iherman" .
<https://api.github.com/users/iherman> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/520723?v=4" .
<https://api.github.com/users/iherman> <http://schema.org/url> "https://github.com/iherman"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/iherman> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/463218320> <http://schema.org/creator> <https://api.github.com/users/iherman> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/463218320> <http://schema.org/startDate> "2019-02-13T14:26:46Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/463218320> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/463218320> <http://schema.org/description> "@pchampin I am perfectly fine with the content as is, thanks!\r\n\r\nHowever... after our discussion before and after the F2F I think we should _not_ use schema.org in the examples for sealing. Let us not give bad ideas... Nor should we use sealing with other 'generic' examples like foaf or dublin core. \r\n\r\nTo be honest I am not sure what example we should use; maybe some of the examples used by Digital Bazaar may be reused..." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/463234200> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/119#issuecomment-463234200"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/119> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/463234200> .
<https://api.github.com/users/pchampin> <http://schema.org/accountId> "pchampin" .
<https://api.github.com/users/pchampin> <http://schema.org/image> "https://avatars1.githubusercontent.com/u/304612?v=4" .
<https://api.github.com/users/pchampin> <http://schema.org/url> "https://github.com/pchampin"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/pchampin> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/463234200> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/463234200> <http://schema.org/startDate> "2019-02-13T15:08:59Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/463234200> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/463234200> <http://schema.org/description> "@iherman My understanding was that a *generic context*, such as the one published by schema.org, should not be sealed. On the other hand, I see no problem in sealing a term that resolves to `http://schema.org/name`, as long as the context sealing it has a very specific use case (and requires no further specification of the terms it defines). In fact, I would even argue that it is good practice, for such a context, to reuse an existing IRI rather than coining its own...\r\n\r\nBut granted, this is a rather subtle distinction, and the examples may give bad ideas to context authors, giving the false impression that it would be ok to seal schema.org ...\r\n\r\nWe could use artificial vocabularies in the examples related to sealing, but I'm afraid that would make them harder to grasp." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/463235442> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/119#issuecomment-463235442"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/119> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/463235442> .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/463235442> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/463235442> <http://schema.org/startDate> "2019-02-13T15:12:11Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/463235442> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/463235442> <http://schema.org/description> "Changes look good to me. Note that travis reports syntax errors in some examples. You should be able to use `rake` to check these before pushing now." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/463240850> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/119#issuecomment-463240850"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/119> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/463240850> .
<https://api.github.com/users/iherman> <http://schema.org/accountId> "iherman" .
<https://api.github.com/users/iherman> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/520723?v=4" .
<https://api.github.com/users/iherman> <http://schema.org/url> "https://github.com/iherman"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/iherman> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/463240850> <http://schema.org/creator> <https://api.github.com/users/iherman> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/463240850> <http://schema.org/startDate> "2019-02-13T15:25:12Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/463240850> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/463240850> <http://schema.org/description> "@pchampin, yes, I understand what you say, but I also see the subtlety... \r\n\r\nMaybe make things explicit in a note? Ie, leave the examples intact, but add a note along the lines of:\r\n\r\n> Note that sealing a term may create difficulties if the corresponding vocabulary is frequently adapted for particular applications (e.g., defining a more precise datatype, restricting the term's use to lists, etc.). Publishers of general purpose contexts should use this feature with care.\r\n\r\nWDYT?" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/463309081> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/119#issuecomment-463309081"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/119> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/463309081> .
<https://api.github.com/users/pchampin> <http://schema.org/accountId> "pchampin" .
<https://api.github.com/users/pchampin> <http://schema.org/image> "https://avatars1.githubusercontent.com/u/304612?v=4" .
<https://api.github.com/users/pchampin> <http://schema.org/url> "https://github.com/pchampin"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/pchampin> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/463309081> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/463309081> <http://schema.org/startDate> "2019-02-13T18:20:00Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/463309081> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/463309081> <http://schema.org/description> "@iherman you are right; I added such a note\r\n" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/463326891> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/124#issuecomment-463326891"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/124> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/463326891> .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/463326891> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/463326891> <http://schema.org/startDate> "2019-02-13T19:09:39Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/463326891> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/463326891> <http://schema.org/description> "> I am not sure I understand the two paragraphs after example 30 in section 4.1.4. Is the first paragraph, ie,\r\n  > In JSON-LD 1.0, terms may be chosen as compact IRI prefixes when compacting only if a simple term definition is used where the value ends with a URI gen-delim character (e.g, /, # and others, see [RFC3986]). The previous specification allows any term to be chosen as a compact IRI prefix, which led to a poor experience.\r\n\r\n>  The second sentence seems to contradict the first. And I looked into 1.0 and did not find such a restriction, although I may have missed it. Isn't it possible that the first sentence (which is repeated in the paragraph that follows) is what we introduce in 1.1? On the other hand, the paragraph _after_ the note seems to repeat the same information as the one _before_ the note.\r\n\r\nThis is the subject of an errata for 1.0 that affected the way terms are selected when compacting an IRI into a compact IRI; previously, any term would do, which led to numerous issues https://lists.w3.org/Archives/Public/public-rdf-comments/2018Jan/0002.html." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/463335008> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/124#issuecomment-463335008"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/124> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/463335008> .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/463335008> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/463335008> <http://schema.org/startDate> "2019-02-13T19:30:33Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/463335008> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/463335008> <http://schema.org/description> "> I failed to understand, I must admit, the description after example 32. Also: as a casual reader, at this point, I do not know what 'compaction algorithm; and `@container` with a value `@set` means, so the whole paragraph, and the following example, is a mystery. Maybe this whole part should be moved to the compaction algorithm where it gets some sense...\r\n\r\nPerhaps if we just remove the sentence:\r\n\r\n> This is used by the Compaction algorithm to ensure that the values of `@type` (or an alias) are always represented in an array.\r\n\r\nThe other text is necessary, as we're describing the limitations on aliasing keywords, where `@type` is an exception, and this is the aliasing keywords section. This isn't about compaction directly, but about the legal ways that `@type` can be used in the context. Moving the but about `@container: @set` later on would be out of place, IMHO." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/463438693> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/130#issuecomment-463438693"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/130> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/463438693> .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/463438693> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/463438693> <http://schema.org/startDate> "2019-02-14T00:52:23Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/463438693> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/463438693> <http://schema.org/description> "Thus far, this PR addresses comments in #124, although some changes are not made, as indicated in https://github.com/w3c/json-ld-syntax/issues/124#issuecomment-460362383 and https://github.com/w3c/json-ld-syntax/issues/124#issuecomment-463326891." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/463439288> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/127#issuecomment-463439288"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/127> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/463439288> .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/463439288> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/463439288> <http://schema.org/startDate> "2019-02-14T00:54:42Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/463439288> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/463439288> <http://schema.org/description> "> * I referred, in #124, to the problem of `@graph` appearing out of the blue in example 67. A forward reference to what `\"@graph\"` means to example 86 may be a partial solution. (Actually, example 86 is more or less the same as 67! It may be possible to change 67 so that that it makes the usage of `\"@graph\"` unnecessary. After all, cross-references within a graph with the same root is also possible.)\r\n\r\nI addressed this when describing the top-level use of arrays in the \"Describing disconnected nodes with @graph\" in 4.1; see if that helps." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/463439604> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/127#issuecomment-463439604"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/127> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/463439604> .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/463439604> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/463439604> <http://schema.org/startDate> "2019-02-14T00:55:53Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/463439604> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/463439604> <http://schema.org/description> "> * In 4.8.1. \"Strictly speaking, the value of such a term is not a named graph, rather it is the graph name associated with the named graph, which exists separately within the dataset.\" is of course true. But I have the impression that for 99% of the readers this statements is meaningless, I wonder whether it is not more harmful than helpful to have it here:-) (No strong opinion, actually)\r\n\r\nThus the \"Strictly speaking\" bit, but if it's not there RDF pedants will complain! I'll leave it for now." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/463439959> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/127#issuecomment-463439959"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/127> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/463439959> .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/463439959> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/463439959> <http://schema.org/startDate> "2019-02-14T00:57:17Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/463439959> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/463439959> <http://schema.org/description> "> * I am a little bit bothered by the formulation because, after all, it is not (only) the processor that MUST retrieve, but the server that must play game as well, ie, all this depends (also) on the correct setup server-side. This is somehow missing from the formulation, although it is clear in the example...\r\n\r\nAs this is straight 1.0 text, I'm inclined to leave as is. If you can think of a better formulation, than please suggest." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/463443662> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/127#issuecomment-463443662"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/127> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/463443662> .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/463443662> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/463443662> <http://schema.org/startDate> "2019-02-14T01:12:52Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/463443662> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/463443662> <http://schema.org/description> "> Is this correct (in 9.11)? \"If the expanded term definition contains the `@nest` keyword, its value MUST be either `@nest`, or a term which expands to `@nest`.\" This sounds circular to me; isn't the value of `@nest` a term, or an array of terms?\r\n\r\nWe went over this in the F2F, so it should be clear now. the `@nest` in a term definition is used for compaction to know where to serialize the property, thus the value of `@nest` has to be something which expands to `@nest`." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/463594682> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/124#issuecomment-463594682"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/124> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/463594682> .
<https://api.github.com/users/iherman> <http://schema.org/accountId> "iherman" .
<https://api.github.com/users/iherman> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/520723?v=4" .
<https://api.github.com/users/iherman> <http://schema.org/url> "https://github.com/iherman"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/iherman> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/463594682> <http://schema.org/creator> <https://api.github.com/users/iherman> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/463594682> <http://schema.org/startDate> "2019-02-14T11:32:33Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/463594682> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/463594682> <http://schema.org/description> "- https://github.com/w3c/json-ld-syntax/issues/124#issuecomment-463326891: I understand now, it was not clear when I read it for the first time. Didactically/visually it may be a god idea to move the subsequent Note after example 31; probably, when I read it, I did not realize that example 31 is there to help to understand it.\r\n \r\n    However, what may have also been the problem at first reading is that the paragraph before and after that note seem to convey exactly the same information. I think removing the paragraph after the note and move the note after example 31 may do the trick.\r\n    \r\n- https://github.com/w3c/json-ld-syntax/issues/124#issuecomment-463335008: I understand the intention, still finding it a bit disturbing for a first-time reader... Note that this is the _only_ place in the document where the `\"@type\":{\"@container\":\"@set\"}` idiom appears in the document and makes it hardly understandable. I would think that\r\n  1. create a separate subsection in 4.3.2. that shows the current example 33 and explains what it means\r\n  2. put a forward reference in 4.1.5 to that new subsection. This could be put at the end of the sentence \"Other than for `@type`\" saying something like\r\n   \r\n        > When processing mode is set to json-ld-1.1, there is an exception for `@type`; see section x.y.z for further details.\r\n" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/463596893> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/130#issuecomment-463596893"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/130> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/463596893> .
<https://api.github.com/users/iherman> <http://schema.org/accountId> "iherman" .
<https://api.github.com/users/iherman> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/520723?v=4" .
<https://api.github.com/users/iherman> <http://schema.org/url> "https://github.com/iherman"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/iherman> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/463596893> <http://schema.org/creator> <https://api.github.com/users/iherman> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/463596893> <http://schema.org/startDate> "2019-02-14T11:41:09Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/463596893> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/463596893> <http://schema.org/description> "Looking at the new section before the (new) example 19, shouldn't it be \"...with a `@graph` property can be useful for saving the repetition of `@context`\"? (The current sentence repeats `@graph` on both places.)" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/463601229> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/127#issuecomment-463601229"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/127> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/463601229> .
<https://api.github.com/users/iherman> <http://schema.org/accountId> "iherman" .
<https://api.github.com/users/iherman> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/520723?v=4" .
<https://api.github.com/users/iherman> <http://schema.org/url> "https://github.com/iherman"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/iherman> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/463601229> <http://schema.org/creator> <https://api.github.com/users/iherman> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/463601229> <http://schema.org/startDate> "2019-02-14T11:57:54Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/463601229> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/463601229> <http://schema.org/description> "- https://github.com/w3c/json-ld-syntax/issues/127#issuecomment-463439288: Indeed, this is helpful (but look at https://github.com/w3c/json-ld-syntax/pull/130#issuecomment-463596893).\r\n- https://github.com/w3c/json-ld-syntax/issues/127#issuecomment-463439959: what about saying something like:\r\n    > In order to use an external context with an ordinary JSON document, when retrieving an ordinary JSON document via HTTP, processors _MUST_ attempt to retrieve any JSON-LD document referenced by a Link Header with:\r\n    > ...\r\n    > if provided by the server.\r\n- https://github.com/w3c/json-ld-syntax/issues/127#issuecomment-463443662: well, I am still confused. Looking at examples #69 and #71 (in the #130 PR version) the two JSON-LD examples only differ from one another by the extra `\"@nest\":\"labels\"` but their expanded/turtle forms are absolutely identical. Which suggests that the extra `\"@nest\":\"labels\"` in the definition of `main_label` and `other_label` is superfluous...\r\n" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/463601338> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/130#issuecomment-463601338"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/130> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/463601338> .
<https://api.github.com/users/iherman> <http://schema.org/accountId> "iherman" .
<https://api.github.com/users/iherman> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/520723?v=4" .
<https://api.github.com/users/iherman> <http://schema.org/url> "https://github.com/iherman"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/iherman> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/463601338> <http://schema.org/creator> <https://api.github.com/users/iherman> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/463601338> <http://schema.org/startDate> "2019-02-14T11:58:17Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/463601338> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/463601338> <http://schema.org/description> "See also https://github.com/w3c/json-ld-syntax/issues/127#issuecomment-463601229" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/463675035> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/20#issuecomment-463675035"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/20> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/463675035> .
<https://api.github.com/users/cwebber> <http://schema.org/accountId> "cwebber" .
<https://api.github.com/users/cwebber> <http://schema.org/image> "https://avatars2.githubusercontent.com/u/55698?v=4" .
<https://api.github.com/users/cwebber> <http://schema.org/url> "https://github.com/cwebber"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/cwebber> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/463675035> <http://schema.org/creator> <https://api.github.com/users/cwebber> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/463675035> <http://schema.org/startDate> "2019-02-14T15:42:05Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/463675035> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/463675035> <http://schema.org/description> "A couple of things:\r\n - I like the wording in https://github.com/w3c/json-ld-syntax/commit/bd6f8aeff9770d7710ba2668bbafff2c66602f1d\r\n - I talked with @dlongley about whether or not there are any terms that are less \"overloaded\" than \"sealed\".  In general what we're exploring is referred to \"shadowing\" in the context of scoping in programming languages.  As such, we think that instead of  `@sealed: true` it might be much better to have `@allowShadow: false`.  What do people think?\r\n\r\nIt took me a long time to read through this and understand the conversation, but I think where it ended at is good.  I think we shouldn't make things more complicated than the current change; we should be able to explain sealing/restricting shadowing as a single rule that potentially composes with another rule, and I think the current language does that nicely.\r\n\r\nWe should be clear though that sealing or whatever doesn't help json-only applications be \"secure\" in that they know for sure that a term is going to be the term they think it is; someone could always be intentionally tricky through context nullification." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/463676519> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/20#issuecomment-463676519"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/20> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/463676519> .
<https://api.github.com/users/cwebber> <http://schema.org/accountId> "cwebber" .
<https://api.github.com/users/cwebber> <http://schema.org/image> "https://avatars2.githubusercontent.com/u/55698?v=4" .
<https://api.github.com/users/cwebber> <http://schema.org/url> "https://github.com/cwebber"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/cwebber> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/463676519> <http://schema.org/creator> <https://api.github.com/users/cwebber> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/463676519> <http://schema.org/startDate> "2019-02-14T15:45:48Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/463676519> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/463676519> <http://schema.org/description> "Now to talk about implementation.  Here's how I think it can be done:\r\n\r\n - Add a new slot/property to the active context that is something like sealedTerms or unshadowable.  This is a set of terms that can't be shadowed, and it's append-only.\r\n - At the time of adding a new term with `@allowShadow: false` (or whatever) we add it to that set.\r\n - Further attempts to define a term in that set should *throw an error* by default.  It's possible that we can configure things to warn instead, but I feel pretty strongly that an error is better behavior, otherwise we might have users unintentionally produce a different document than they thought they did.\r\n - Nullification simplify resets the entire active context to a \"fresh\" one, including the sealed terms." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/463700348> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/20#issuecomment-463700348"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/20> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/463700348> .
<https://api.github.com/users/dlongley> <http://schema.org/accountId> "dlongley" .
<https://api.github.com/users/dlongley> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/168137?v=4" .
<https://api.github.com/users/dlongley> <http://schema.org/url> "https://github.com/dlongley"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/dlongley> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/463700348> <http://schema.org/creator> <https://api.github.com/users/dlongley> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/463700348> <http://schema.org/startDate> "2019-02-14T16:46:02Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/463700348> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/463700348> <http://schema.org/description> "> We should be clear though that sealing or whatever doesn't help json-only applications be \"secure\" in that they know for sure that a term is going to be the term they think it is; someone could always be intentionally tricky through context nullification.\r\n\r\nI disagree. These rules are supposed to make it such that if you follow a specification you should be safe. If you go off into extension land with no spec that makes it clear what checks you have to run, then you aren't. We'll need to make sure that context nullification of sealed terms is only possible through the creation of a term with a nested scope (no type-based scope context nullification or embedded context nullification of existing sealed terms)." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/463709953> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/20#issuecomment-463709953"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/20> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/463709953> .
<https://api.github.com/users/dlongley> <http://schema.org/accountId> "dlongley" .
<https://api.github.com/users/dlongley> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/168137?v=4" .
<https://api.github.com/users/dlongley> <http://schema.org/url> "https://github.com/dlongley"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/dlongley> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/463709953> <http://schema.org/creator> <https://api.github.com/users/dlongley> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/463709953> <http://schema.org/startDate> "2019-02-14T17:11:04Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/463709953> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/463709953> <http://schema.org/description> "JSON developers understand \"isolated extensions\" to mean \"a new term I define that can be used to create a new branch in the JSON tree underwhich all of the term definitions are wiped clean\". This is the only place where context nullification that clears all sealed terms should be permitted. This means embedded context nullification is not permitted and terms with scoped contexts that appear in the type position cannot nullify sealed terms. Only a new term definition (with a scoped null context) where that term appears in a non-type position can nullify sealed terms -- as this matches the expectations of the core constituency of this feature." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/463858732> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/20#issuecomment-463858732"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/20> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/463858732> .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/463858732> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/463858732> <http://schema.org/startDate> "2019-02-15T00:28:16Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/463858732> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/463858732> <http://schema.org/description> "@cwebber said:\r\n> Now to talk about implementation.\r\n\r\nNote the implementation is described in w3c/json-ld-api#60, which I've implemented myself." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/463859822> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/20#issuecomment-463859822"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/20> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/463859822> .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/463859822> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/463859822> <http://schema.org/startDate> "2019-02-15T00:32:41Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/463859822> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/463859822> <http://schema.org/description> "@dlongley said:\r\n\r\n> We'll need to make sure that context nullification of sealed terms is only possible through the creation of a term with a nested scope (no type-based scope context nullification or embedded context nullification of existing sealed terms).\r\n\r\nWe discussed this at the F2F and felt that it was too onerous and complicated things. Authors are creating these documents and choosing to add the sealed contexts in the first place, which they could subvert in other ways. Trying to make this too bullet-proof is ultimately impossible, and the _nuclear option_ of nulling out the context is sufficiently rarely used now that it's not worth overly protecting. I could see generating a warning, if this is done with sealed terms in scope. Jump onto the next call to get a deeper discussion, but we spent quite a bit of time discussing this last Friday." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/463862329> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/127#issuecomment-463862329"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/127> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/463862329> .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/463862329> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/463862329> <http://schema.org/startDate> "2019-02-15T00:44:17Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/463862329> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/463862329> <http://schema.org/description> "@iherman said:\r\n> * well, I am still confused. Looking at examples #69 and #71 (in the #130 PR version) the two JSON-L\r\n\r\nI'll add a bit more to this, the distinction comes in the compaction algorithm (I probably removed that phrase, because you thought a reference to the compaction algorithm was overly complex and out of place).\r\n\r\nThe point is, that because the term definitions for `main_label` and `other_label` have `@nest: labels`, the compaction algorithm knows to place those properties under `labels`, rather than place them along with the other node properties." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/463865821> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/127#issuecomment-463865821"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/127> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/463865821> .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/463865821> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/463865821> <http://schema.org/startDate> "2019-02-15T01:01:53Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/463865821> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/463865821> <http://schema.org/description> "@iherman said:\r\n\r\n> any reasons why we use _SHOULD NOT_ and not _MUST NOT_?\r\n\r\nI can't recall specifically why _SHOULD NOT_ and not _MUST NOT_ for the first paragraph. In the second paragraph, it may be reasonable for other specifications to define keywords starting with `@` that may never get into JSON-LD itself, so it can serve as an extension point." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/463866935> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/127#issuecomment-463866935"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/127> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/463866935> .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/463866935> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/463866935> <http://schema.org/startDate> "2019-02-15T01:07:32Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/463866935> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/463866935> <http://schema.org/description> "@iherman said:\r\n\r\n> There is a bit of a discrepancy between the syntax as used and the terminology here. The only occurrence of `@nest` as a key is with a _term_ value (or possibly values, I guess) and not with objects.\r\n\r\nWhenever a term aliasing a keyword can be used, that keyword can be used itself; there's a statement at the top of 9. which describes this to avoid repetition. In the `labels` case, as it aliases to `@nest`, it would be legitimate (but not particularly useful) to use `@nest` as a key itself. But, this is a grammar section which is strict and minimal about what can be allowed where." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/463868542> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/127#issuecomment-463868542"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/127> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/463868542> .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/463868542> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/463868542> <http://schema.org/startDate> "2019-02-15T01:16:03Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/463868542> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/463868542> <http://schema.org/description> "@iherman said:\r\n\r\n> I must admit I am a little bit lost by 9.3. If I read that text, I would deduce that the content of example 85 is _not_ a graph object, because it does include a term `generatedAt`. Or is the graph object the value of `\"@graph\"`? But then the text says that I could use `\"@graph\"` within the object on example 85: what does that mean?\r\n\r\nYes, this is confusing, and I'll attempt to improve. A _graph object_ _only_ describes a named graph, if it includes other properties, it's a _node object_, but a _node object_ can also describe a named graph if it includes `@graph`, or has a property which is a graph container. It is necessary to distinguish between the different forms, as there are times when _graph objects_ can be used by API algorithms if they're not _node objects_." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/463870516> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/130#issuecomment-463870516"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/130> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/463870516> .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/463870516> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/463870516> <http://schema.org/startDate> "2019-02-15T01:25:27Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/463870516> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/463870516> <http://schema.org/description> "Should be ready to go now." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/463889643> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/20#issuecomment-463889643"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/20> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/463889643> .
<https://api.github.com/users/dlongley> <http://schema.org/accountId> "dlongley" .
<https://api.github.com/users/dlongley> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/168137?v=4" .
<https://api.github.com/users/dlongley> <http://schema.org/url> "https://github.com/dlongley"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/dlongley> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/463889643> <http://schema.org/creator> <https://api.github.com/users/dlongley> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/463889643> <http://schema.org/startDate> "2019-02-15T03:09:31Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/463889643> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/463889643> <http://schema.org/description> "@gkellogg,\r\n\r\n> We discussed this at the F2F and felt that it was too onerous and complicated things... Trying to make this too bullet-proof is ultimately impossible...\r\n\r\nI respectfully disagree. Without the above limitation the feature doesn't fully solve the use case. With it, I believe it does. I also believe it matches expectations for how one extends JSON. If we're able to make it so, the feature should provide the guarantees that the main users of the feature expect.\r\n\r\n> Authors are creating these documents and choosing to add the sealed contexts in the first place, which they could subvert in other ways.\r\n\r\nI'm not sure what you mean by this. The target use case is not potentially random combinations of contexts attached to documents floating about the Web. I agree that there should be no expectation for what you can trust there. Use a JSON-LD processor to mitigate your risk.\r\n\r\nBut we absolutely should be able to create W3C specifications that truthfully claim application developers can use JSON-LD without doing JSON-LD processing if they run a couple of simple checks. Anything short of that lends credence to the argument that you can't *really* use JSON-LD without running a JSON-LD processor.\r\n\r\n> Jump onto the next call to get a deeper discussion, but we spent quite a bit of time discussing this last Friday.\r\n\r\nOk." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/463904417> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/20#issuecomment-463904417"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/20> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/463904417> .
<https://api.github.com/users/azaroth42> <http://schema.org/accountId> "azaroth42" .
<https://api.github.com/users/azaroth42> <http://schema.org/image> "https://avatars3.githubusercontent.com/u/871868?v=4" .
<https://api.github.com/users/azaroth42> <http://schema.org/url> "https://github.com/azaroth42"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/azaroth42> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/463904417> <http://schema.org/creator> <https://api.github.com/users/azaroth42> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/463904417> <http://schema.org/startDate> "2019-02-15T04:41:18Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/463904417> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/463904417> <http://schema.org/description> "I fully support the consensus that if the feature must be watertight, then it is impossible without breaking compatibility with 1.0. 1.0 specifies that a null context wipes out all definitions, or setting a term to null wipes out that definition. See [Section 6.7](https://www.w3.org/TR/json-ld/#advanced-context-usage). We can't change that.\r\n\r\nFWIW, this topic is not on the agenda for the call on 2019-02-15.\r\n\r\nIf there is time to revisit this before CR, then we will. If not, then we can take the feature out completely or leave it as we have specified. But we are not, in the short term, going to go around the circle yet again and especially not without stakeholders being present and engaged with the work of the group." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/463907336> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/20#issuecomment-463907336"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/20> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/463907336> .
<https://api.github.com/users/azaroth42> <http://schema.org/accountId> "azaroth42" .
<https://api.github.com/users/azaroth42> <http://schema.org/image> "https://avatars3.githubusercontent.com/u/871868?v=4" .
<https://api.github.com/users/azaroth42> <http://schema.org/url> "https://github.com/azaroth42"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/azaroth42> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/463907336> <http://schema.org/creator> <https://api.github.com/users/azaroth42> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/463907336> <http://schema.org/startDate> "2019-02-15T04:59:54Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/463907336> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/463907336> <http://schema.org/description> "> But we absolutely should be able to create W3C specifications that truthfully claim application developers can use JSON-LD without doing JSON-LD processing if they run a couple of simple checks.\r\n\r\nAnd the check is that no context uses `null` to wipe out a term or the active context.\r\n" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/463976796> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/127#issuecomment-463976796"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/127> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/463976796> .
<https://api.github.com/users/iherman> <http://schema.org/accountId> "iherman" .
<https://api.github.com/users/iherman> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/520723?v=4" .
<https://api.github.com/users/iherman> <http://schema.org/url> "https://github.com/iherman"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/iherman> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/463976796> <http://schema.org/creator> <https://api.github.com/users/iherman> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/463976796> <http://schema.org/startDate> "2019-02-15T09:56:41Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/463976796> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/463976796> <http://schema.org/description> ">> Any reasons why we use _SHOULD NOT_ and not _MUST NOT_?\r\n>\r\n> I can't recall specifically why _SHOULD NOT_ and not _MUST NOT_ for the first paragraph. In the second paragraph, it may be reasonable for other specifications to define keywords starting with `@` that may never get into JSON-LD itself, so it can serve as an extension point.\r\n\r\nI am fine with the _SHOULD NOT_ for the second paragraph. I guess the only reason the first paragraph may be more reasonable to be _SHOULD NOT_, I reckon, is that a _MUST_ would require that an implementation checks the current list of IANA schemes at all times, which becomes a drag." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/463977592> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/127#issuecomment-463977592"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/127> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/463977592> .
<https://api.github.com/users/iherman> <http://schema.org/accountId> "iherman" .
<https://api.github.com/users/iherman> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/520723?v=4" .
<https://api.github.com/users/iherman> <http://schema.org/url> "https://github.com/iherman"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/iherman> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/463977592> <http://schema.org/creator> <https://api.github.com/users/iherman> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/463977592> <http://schema.org/startDate> "2019-02-15T09:58:52Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/463977592> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/463977592> <http://schema.org/description> "> The point is, that because the term definitions for `main_label` and `other_label` have `@nest: labels`, the compaction algorithm knows to place those properties under `labels`, rather than place them along with the other node properties.\r\n\r\nI presume a somewhat more explicit explanation, as well as showing possibly the result of the compaction algorithm (with due forward reference to what compaction means) would be necessary to make the result understandable. " .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/463981006> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/127#issuecomment-463981006"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/127> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/463981006> .
<https://api.github.com/users/iherman> <http://schema.org/accountId> "iherman" .
<https://api.github.com/users/iherman> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/520723?v=4" .
<https://api.github.com/users/iherman> <http://schema.org/url> "https://github.com/iherman"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/iherman> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/463981006> <http://schema.org/creator> <https://api.github.com/users/iherman> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/463981006> <http://schema.org/startDate> "2019-02-15T10:07:54Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/463981006> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/463981006> <http://schema.org/description> "For https://github.com/w3c/json-ld-syntax/issues/127#issuecomment-463868542, I will wait until the revision comes...\r\n\r\nB.t.w., the word \"include\" is repeated in the first sentence of the section..." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/463987946> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/127#issuecomment-463987946"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/127> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/463987946> .
<https://api.github.com/users/iherman> <http://schema.org/accountId> "iherman" .
<https://api.github.com/users/iherman> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/520723?v=4" .
<https://api.github.com/users/iherman> <http://schema.org/url> "https://github.com/iherman"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/iherman> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/463987946> <http://schema.org/creator> <https://api.github.com/users/iherman> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/463987946> <http://schema.org/startDate> "2019-02-15T10:27:36Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/463987946> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/463987946> <http://schema.org/description> "> For [#127 (comment)](https://github.com/w3c/json-ld-syntax/issues/127#issuecomment-463868542), I will wait until the revision comes...\r\n\r\nActually, I realized that you have made changes in #130. I _think_ it is all right now, although this discrepancy between graph objects and a node object that also describes a graph is a bit confusing. But I presume it is too late to change the full terminology.\r\n\r\n---\r\n\r\nIncidentally: I realized that the 'diff' generation in PR does not seem to refresh itself after a new commit (the preview does)...\r\n" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/464064371> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/20#issuecomment-464064371"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/20> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/464064371> .
<https://api.github.com/users/dlongley> <http://schema.org/accountId> "dlongley" .
<https://api.github.com/users/dlongley> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/168137?v=4" .
<https://api.github.com/users/dlongley> <http://schema.org/url> "https://github.com/dlongley"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/dlongley> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/464064371> <http://schema.org/creator> <https://api.github.com/users/dlongley> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/464064371> <http://schema.org/startDate> "2019-02-15T14:14:28Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/464064371> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/464064371> <http://schema.org/description> "@azaroth42,\r\n\r\n> I fully support the consensus that if the feature must be watertight, then it is impossible without breaking compatibility with 1.0. 1.0 specifies that a null context wipes out all definitions, or setting a term to null wipes out that definition. See [Section 6.7](https://www.w3.org/TR/json-ld/#advanced-context-usage). We can't change that.\r\n\r\nI don't think this position makes any sense. We *can* change 1.0 behavior regarding how select terms can be overridden but we *can't* change 1.0 behavior regarding how all such terms can be overridden at once? That reasoning sounds like it relies upon an inconsistent understanding of backwards compatibility.\r\n\r\nRather, no terms were `@sealed` in JSON-LD 1.0 because the feature did not exist. We may freely define in 1.1 how these new special terms are created and when they are overridden, cleared, or not.\r\n\r\nThese new terms should behave in the fashion that best supports their use case and best fulfills the expectations of their main users. I think this means we should make it such that they are only cleared as in the example that's in the spec today. Namely, that you *must* define a new term that explicitly clears them through a scoped `null` context and the clearing only applies when that term is used to extend the JSON tree in the data (as opposed to just augmenting data with a `type`). This makes the feature work in the best way for the users of the feature and relieves the most frustration for those exposed to JSON-LD who do not want to use a JSON-LD processor.\r\n\r\nMost importantly, it best helps deliver on a promise the community has been making since JSON-LD was created: You can easily use JSON-LD as regular JSON without having to process it.\r\n\r\n> And the check is that no context uses `null` to wipe out a term or the active context.\r\n\r\nThis check still requires JSON-LD processing which harms the purpose of the feature. It adds complexity *on the users of the feature* that is not necessary if we limit clearing `@sealed` terms to requiring the definition of a new term with a scoped `null` context that is used to extend the JSON tree. I believe the feature will behave as expected (to the users of the feature) if we do this.\r\n\r\nI haven't seen a good argument against this definition for clearing `@sealed` terms yet. As argued, I believe the above backwards compatibility argument is flawed." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/464147767> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/20#issuecomment-464147767"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/20> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/464147767> .
<https://api.github.com/users/iherman> <http://schema.org/accountId> "iherman" .
<https://api.github.com/users/iherman> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/520723?v=4" .
<https://api.github.com/users/iherman> <http://schema.org/url> "https://github.com/iherman"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/iherman> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/464147767> <http://schema.org/creator> <https://api.github.com/users/iherman> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/464147767> <http://schema.org/startDate> "2019-02-15T18:17:25Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/464147767> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/464147767> <http://schema.org/description> "This issue was discussed in [a meeting](https://www.w3.org/2018/json-ld-wg/Meetings/Minutes/2019/2019-02-15-json-ld#section3).\r\n\r\n- No actions or resolutions\r\n<details><summary><i class=\"differentiate\">View the transcript</i></summary>\r\nSealed Contexts’ timing<br/>\r\nRob Sanderson: a discussion started yesterday about the decisions made during F2F about sealed contexts<br/>\r\n… we need to see to which extent the current proposal works and does not work with existing use cases;<br/>\r\n… we have spent several week and close to half the F2F time to talk about it;<br/>\r\n… continuing is not in the interest of the group.<br/>\r\nDave Longley: We plan on implementing next week and we’ll engage on Github<br/>\r\n… we are globally happy with the decision of the F2F,<br/>\r\n… but we need sealing to be a little more restrictive.<br/>\r\n… We will come up with an implementation of what we need.<br/>\r\nRob Sanderson: this will help to assess how much additional complexity is required<br/>\r\nGregg Kellogg: what we have been looking at was doable (I did implement it),<br/>\r\n… but we still decided that it added too much complexity.<br/>\r\n… That being said, I’m happy to discuss with you about it.<br/>\r\nDave Longley: All we want to do is add constraints on when the context can be cleared with ‘null’.<br/>\r\n… We don’t think it adds that much complexity.<br/>\r\n</details>" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/464387207> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/124#issuecomment-464387207"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/124> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/464387207> .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/464387207> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/464387207> <http://schema.org/startDate> "2019-02-16T21:25:30Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/464387207> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/464387207> <http://schema.org/description> "Closed via #130." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/464387245> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/127#issuecomment-464387245"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/127> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/464387245> .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/464387245> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/464387245> <http://schema.org/startDate> "2019-02-16T21:25:47Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/464387245> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/464387245> <http://schema.org/description> "Closed via #130." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/464387499> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/120#issuecomment-464387499"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/120> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/464387499> .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/464387499> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/464387499> <http://schema.org/startDate> "2019-02-16T21:28:31Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/464387499> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/464387499> <http://schema.org/description> "From merged change, contexts aren't sealed, terms are sealed, so there is no affect on `@vocab`." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/464928912> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/131#issuecomment-464928912"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/131> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/464928912> .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/464928912> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/464928912> <http://schema.org/startDate> "2019-02-19T00:13:25Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/464928912> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/464928912> <http://schema.org/description> "Work is incomplete for more descriptions of compaction, but the bit on `@type: @none` is in. Please comment." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/465064462> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/131#issuecomment-465064462"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/131> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/465064462> .
<https://api.github.com/users/iherman> <http://schema.org/accountId> "iherman" .
<https://api.github.com/users/iherman> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/520723?v=4" .
<https://api.github.com/users/iherman> <http://schema.org/url> "https://github.com/iherman"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/iherman> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/465064462> <http://schema.org/creator> <https://api.github.com/users/iherman> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/465064462> <http://schema.org/startDate> "2019-02-19T09:54:56Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/465064462> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/465064462> <http://schema.org/description> "Mini-mini editorial comment: it would be good to use a non-breaking space character between a \"§\" and the number. I get lines with a \"§\" at the end of the line and the number at the beginning of the next line; it does look strange..." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/465066084> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/131#issuecomment-465066084"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/131> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/465066084> .
<https://api.github.com/users/iherman> <http://schema.org/accountId> "iherman" .
<https://api.github.com/users/iherman> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/520723?v=4" .
<https://api.github.com/users/iherman> <http://schema.org/url> "https://github.com/iherman"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/iherman> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/465066084> <http://schema.org/creator> <https://api.github.com/users/iherman> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/465066084> <http://schema.org/startDate> "2019-02-19T09:59:25Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/465066084> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/465066084> <http://schema.org/description> "Just an aesthetic issue... In example 105 you say:\r\n\r\n```\r\n\"http://example.com/iri\": [\r\n    {\"@id\": \"http://example.org/iri\"}\r\n  ]\r\n```\r\n\r\nMaybe it is nicer to use a different URI for the term and its value :-)" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/465067409> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/131#issuecomment-465067409"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/131> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/465067409> .
<https://api.github.com/users/iherman> <http://schema.org/accountId> "iherman" .
<https://api.github.com/users/iherman> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/520723?v=4" .
<https://api.github.com/users/iherman> <http://schema.org/url> "https://github.com/iherman"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/iherman> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/465067409> <http://schema.org/creator> <https://api.github.com/users/iherman> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/465067409> <http://schema.org/startDate> "2019-02-19T10:03:09Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/465067409> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/465067409> <http://schema.org/description> "In example 106 you say:\r\n\r\n> Note that there is no term defined for \"plain\", that is created automatically using the vocabulary mapping. \r\n\r\nI am not sure what this refers to. In the example, \"plain\" is a simple text, and stays that way. Is this a leftover from a different example?" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/465199320> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/131#issuecomment-465199320"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/131> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/465199320> .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/465199320> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/465199320> <http://schema.org/startDate> "2019-02-19T16:15:53Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/465199320> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/465199320> <http://schema.org/description> "> Mini-mini editorial comment: it would be good to use a non-breaking space character between a \"§\" and the number. I get lines with a \"§\" at the end of the line and the number at the beginning of the next line; it does look strange...\r\n\r\nThat would be an issue for ReSpec, which added the \"§” recently." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/465205822> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/131#issuecomment-465205822"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/131> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/465205822> .
<https://api.github.com/users/iherman> <http://schema.org/accountId> "iherman" .
<https://api.github.com/users/iherman> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/520723?v=4" .
<https://api.github.com/users/iherman> <http://schema.org/url> "https://github.com/iherman"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/iherman> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/465205822> <http://schema.org/creator> <https://api.github.com/users/iherman> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/465205822> <http://schema.org/startDate> "2019-02-19T16:29:35Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/465205822> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/465205822> <http://schema.org/description> "> That would be an issue for ReSpec, which added the \"§” recently.\r\n\r\nAh. I have raised https://github.com/w3c/respec/issues/2109." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/465362990> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/133#issuecomment-465362990"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/133> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/465362990> .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/465362990> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/465362990> <http://schema.org/startDate> "2019-02-20T00:03:48Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/465362990> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/465362990> <http://schema.org/description> "@dlongley Note that I took some liberties on Example 33 from vc-data-model. Once your context is updated, and published at https://www.w3.org/2018/credentials/v1, we can update this.\r\n\r\nAlso, note that the value of `issuanceDate` is out of range, you use an xsd:date, and it should be an xsd:dateTime, according to the RDFS definition." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/465432186> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/120#issuecomment-465432186"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/120> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/465432186> .
<https://api.github.com/users/azaroth42> <http://schema.org/accountId> "azaroth42" .
<https://api.github.com/users/azaroth42> <http://schema.org/image> "https://avatars3.githubusercontent.com/u/871868?v=4" .
<https://api.github.com/users/azaroth42> <http://schema.org/url> "https://github.com/azaroth42"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/azaroth42> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/465432186> <http://schema.org/creator> <https://api.github.com/users/azaroth42> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/465432186> <http://schema.org/startDate> "2019-02-20T05:37:47Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/465432186> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/465432186> <http://schema.org/description> "Closing, given above." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/465716812> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/134#issuecomment-465716812"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/134> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/465716812> .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/465716812> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/465716812> <http://schema.org/startDate> "2019-02-20T19:18:30Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/465716812> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/465716812> <http://schema.org/description> "@BigBlueHat said:\r\n\r\n> We do not yet explain how `context-file.jsonld` is resolved.\r\n\r\nThe API document is fairly clear on this. In [4.1.2 of the Context Processing Algorithm](https://www.w3.org/TR/json-ld11-api/#algorithm) step 3.2.1 says:\r\n\r\n> Set _context_ to the result of resolving _value_ against the base IRI which is established as specified in [section 5.1 Establishing a Base URI](\r\nhttps://tools.ietf.org/html/rfc3986#section-5.1) of [RFC3986]. Only the basic algorithm in [section 5.2](\r\nhttps://tools.ietf.org/html/rfc3986#section-5.2) of [RFC3986] is used; neither [Syntax-Based Normalization](\r\nhttps://tools.ietf.org/html/rfc3986#section-6.2.2) nor [Scheme-Based Normalization](\r\nhttps://tools.ietf.org/html/rfc3986#section-6.2.3) are performed. Characters additionally allowed in IRI references are treated in the same way that unreserved characters are treated in URI references, per [section 6.5](\r\nhttps://tools.ietf.org/html/rfc3987#section-6.5) of [RFC3987].\r\n\r\nHere, the _base IRI_ is that of the active context, which was either established using `@base`, or the document location, or an API option.\r\n\r\nThe only reasonable way to interpret the using of an HTML base would be in the same way, which is what RFC3987 dictates:\r\n\r\n* `<relative-reference>`\r\n* 5.1.1 Base URI embedded in the content (`@base` in a context)\r\n* 5.1.2 Base URI of the encapsulating entity (`<base>` in this case)\r\n* 5.1.3 URI used to retrieve the entity\r\n* 5.1.4 Default Base URI (application-dependent)\r\n" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/465728837> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/134#issuecomment-465728837"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/134> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/465728837> .
<https://api.github.com/users/BigBlueHat> <http://schema.org/accountId> "BigBlueHat" .
<https://api.github.com/users/BigBlueHat> <http://schema.org/image> "https://avatars1.githubusercontent.com/u/43209?v=4" .
<https://api.github.com/users/BigBlueHat> <http://schema.org/url> "https://github.com/BigBlueHat"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/BigBlueHat> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/465728837> <http://schema.org/creator> <https://api.github.com/users/BigBlueHat> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/465728837> <http://schema.org/startDate> "2019-02-20T19:51:28Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/465728837> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/465728837> <http://schema.org/description> "@gkellogg makes sense. I'd love to see us point that out in the syntax document in some way.\r\n\r\nI think given the optionally dynamic nature of both the `<base>` tag and the existence of the `<script>` content, we may also want to (more explicitly) state that the entire meaning of your JSON-LD content could change depending on the \"state\" of the DOM at the moment of processing (i.e. processing a document post `curl` is potentially drastically different than processing it post \"DOM ready\"...or even later).\r\n\r\nSome of that is likely best practice / primer stuff (/cc @ajs6f), but it'd be great to avoid subjectivity here if possible..." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/465740675> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/133#issuecomment-465740675"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/133> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/465740675> .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/465740675> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/465740675> <http://schema.org/startDate> "2019-02-20T20:26:24Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/465740675> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/465740675> <http://schema.org/description> "With apologies to @msporny, I changed the example to be a different use of quoted graphs." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/465742710> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/133#issuecomment-465742710"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/133> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/465742710> .
<https://api.github.com/users/dlongley> <http://schema.org/accountId> "dlongley" .
<https://api.github.com/users/dlongley> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/168137?v=4" .
<https://api.github.com/users/dlongley> <http://schema.org/url> "https://github.com/dlongley"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/dlongley> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/465742710> <http://schema.org/creator> <https://api.github.com/users/dlongley> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/465742710> <http://schema.org/startDate> "2019-02-20T20:32:38Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/465742710> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/465742710> <http://schema.org/description> "I guess I should also say that we should, IMO, to the best extent that we can, avoid using prefixed terms in JSON in examples (particularly new examples that we add). I think it's fine to do that in examples where we're showing that you *can* use the prefix feature, but it would be best to focus on more idiomatic JSON in all other examples as much as possible." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/465743783> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/133#issuecomment-465743783"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/133> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/465743783> .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/465743783> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/465743783> <http://schema.org/startDate> "2019-02-20T20:36:01Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/465743783> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/465743783> <http://schema.org/description> "> I guess I should also say that we should, IMO, to the best extent that we can, avoid using prefixed terms in JSON in examples (particularly new examples that we add). I think it's fine to do that in examples where we're showing that you _can_ use the prefix feature, but it would be best to focus on more idiomatic JSON in all other examples as much as possible.\r\n\r\nThat's easy enough to fix, but I was trying to keep the context size down." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/465747326> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/133#issuecomment-465747326"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/133> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/465747326> .
<https://api.github.com/users/dlongley> <http://schema.org/accountId> "dlongley" .
<https://api.github.com/users/dlongley> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/168137?v=4" .
<https://api.github.com/users/dlongley> <http://schema.org/url> "https://github.com/dlongley"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/dlongley> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/465747326> <http://schema.org/creator> <https://api.github.com/users/dlongley> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/465747326> <http://schema.org/startDate> "2019-02-20T20:46:43Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/465747326> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/465747326> <http://schema.org/description> "Another option from Manu that is less controversial: http://manu.sporny.org/2016/json-ld-context-caching/" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/465771619> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/133#issuecomment-465771619"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/133> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/465771619> .
<https://api.github.com/users/pchampin> <http://schema.org/accountId> "pchampin" .
<https://api.github.com/users/pchampin> <http://schema.org/image> "https://avatars1.githubusercontent.com/u/304612?v=4" .
<https://api.github.com/users/pchampin> <http://schema.org/url> "https://github.com/pchampin"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/pchampin> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/465771619> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/465771619> <http://schema.org/startDate> "2019-02-20T21:58:43Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/465771619> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/465771619> <http://schema.org/description> "Sorry to be nitpicking, but I don't really like the MLK example either... I don't see it as a compelling use case for a named graph. What exactly does `_:b2 :quote \"I have a dream\"` mean? Why not say `:mlk :said \"I have a dream\"`?\r\n\r\nHere is a counter-proposal:\r\n```\r\n{\r\n  \"@context\": {\r\n    \"@version\": 1.1,\r\n    \"said\": {\"@id\": \"http://example.com/said\", \"@container\": \"@graph\"},\r\n    \"Liar\": \"http://example.com/Liar\"\r\n  },\r\n  \"@id\": \"http://dbpedia.org/resource/Epimenides\",\r\n  \"said\": {\r\n    \"@id\": \"http://dbpedia.org/resource/Epimenides\",\r\n    \"@type\": \"Liar\"\r\n  }\r\n}\r\n```\r\n\r\nGranted, it is less idiomatic (explicit use of `@id` and `@type`). but this could be fixed with a heavier context...\r\n\r\n```\r\n{\r\n  \"@context\": {\r\n    \"@version\": 1.1,\r\n    \"id\": \"@id\",\r\n    \"isa\": \"@type\",\r\n    \"Epimenides\": \"http://dbpedia.org/resource/Epimenides\",\r\n    \"said\": {\"@id\": \"http://example.com/said\", \"@container\": \"@graph\"},\r\n    \"Liar\": \"http://example.com/Liar\"\r\n  },\r\n  \"id\": \"Epimenides\",\r\n  \"said\": {\r\n    \"id\": \"Epimenides\",\r\n    \"isa\": \"Liar\"\r\n  }\r\n}\r\n```\r\n\r\n" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/465799012> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/133#issuecomment-465799012"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/133> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/465799012> .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/465799012> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/465799012> <http://schema.org/startDate> "2019-02-20T23:34:55Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/465799012> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/465799012> <http://schema.org/description> "Actually, terms don't work as a value of `@id`, so it might need to be something like:\r\n\r\n```json\r\n{\r\n  \"@context\": {\r\n    \"@version\": 1.1,\r\n   \"@base\": \"http://dbpedia.org/resource/\",\r\n    \"id\": \"@id\",\r\n    \"isa\": \"@type\",\r\n    \"said\": {\"@id\": \"http://example.com/said\", \"@container\": \"@graph\"}\r\n  },\r\n  \"id\": \"Epimenides\",\r\n  \"said\": {\r\n    \"id\": \"Epimenides\",\r\n    \"isa\": \"Liar\"\r\n  }\r\n}\r\n```" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/465805424> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/133#issuecomment-465805424"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/133> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/465805424> .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/465805424> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/465805424> <http://schema.org/startDate> "2019-02-21T00:01:59Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/465805424> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/465805424> <http://schema.org/description> "Why I think the Epimenides example may be better is that it uses a contradiction, for which a named graph seems appropriate. Otherwise, why use a named graph at all?\r\n\r\nLet's leave it until tomorrow." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/465881587> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/133#issuecomment-465881587"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/133> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/465881587> .
<https://api.github.com/users/pchampin> <http://schema.org/accountId> "pchampin" .
<https://api.github.com/users/pchampin> <http://schema.org/image> "https://avatars1.githubusercontent.com/u/304612?v=4" .
<https://api.github.com/users/pchampin> <http://schema.org/url> "https://github.com/pchampin"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/pchampin> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/465881587> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/465881587> <http://schema.org/startDate> "2019-02-21T06:44:01Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/465881587> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/465881587> <http://schema.org/description> "More than the contradiction, I think it is the self-reference that's\nbothering @dlongley.\n\nHere's another example :\n\nSkakespeare said that Richard III said \"My kingdom for a horse\".\n" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/465918532> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/133#issuecomment-465918532"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/133> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/465918532> .
<https://api.github.com/users/iherman> <http://schema.org/accountId> "iherman" .
<https://api.github.com/users/iherman> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/520723?v=4" .
<https://api.github.com/users/iherman> <http://schema.org/url> "https://github.com/iherman"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/iherman> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/465918532> <http://schema.org/creator> <https://api.github.com/users/iherman> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/465918532> <http://schema.org/startDate> "2019-02-21T09:04:56Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/465918532> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/465918532> <http://schema.org/description> "An aside... I know many use the `{\"id\":\"@id\"}` in the contexts, including myself. However, when we have an example in the document, we should try to keep only those statements that have an importance in understanding the issue at hand. Everything else is an irrelevant noise that can hamper understanding. I would think we should not use such aliases in the examples. " .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/466037313> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/134#issuecomment-466037313"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/134> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/466037313> .
<https://api.github.com/users/BigBlueHat> <http://schema.org/accountId> "BigBlueHat" .
<https://api.github.com/users/BigBlueHat> <http://schema.org/image> "https://avatars1.githubusercontent.com/u/43209?v=4" .
<https://api.github.com/users/BigBlueHat> <http://schema.org/url> "https://github.com/BigBlueHat"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/BigBlueHat> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/466037313> <http://schema.org/creator> <https://api.github.com/users/BigBlueHat> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/466037313> <http://schema.org/startDate> "2019-02-21T15:15:33Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/466037313> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/466037313> <http://schema.org/description> "Seems @ajs6f filed an issue related to this in the API repo: https://github.com/w3c/json-ld-api/issues/53\r\n\r\nWe should discuss these in tandem (or succession at least)." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/466245190> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/133#issuecomment-466245190"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/133> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/466245190> .
<https://api.github.com/users/dlongley> <http://schema.org/accountId> "dlongley" .
<https://api.github.com/users/dlongley> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/168137?v=4" .
<https://api.github.com/users/dlongley> <http://schema.org/url> "https://github.com/dlongley"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/dlongley> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/466245190> <http://schema.org/creator> <https://api.github.com/users/dlongley> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/466245190> <http://schema.org/startDate> "2019-02-22T02:10:04Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/466245190> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/466245190> <http://schema.org/description> "@pchampin -- good suggestion w/Shakespeare!" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/466248003> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/136#issuecomment-466248003"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/136> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/466248003> .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/466248003> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/466248003> <http://schema.org/startDate> "2019-02-22T02:22:48Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/466248003> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/466248003> <http://schema.org/description> "This looks like a middle ground between keeping track of sealed terms from different contexts and providing some impediment to simply wiping out sealed terms, which only takes effect when you've stepped into a different part of the JSON tree." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/466349823> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/136#issuecomment-466349823"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/136> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/466349823> .
<https://api.github.com/users/iherman> <http://schema.org/accountId> "iherman" .
<https://api.github.com/users/iherman> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/520723?v=4" .
<https://api.github.com/users/iherman> <http://schema.org/url> "https://github.com/iherman"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/iherman> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/466349823> <http://schema.org/creator> <https://api.github.com/users/iherman> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/466349823> <http://schema.org/startDate> "2019-02-22T10:26:03Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/466349823> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/466349823> <http://schema.org/description> "@dlongley, thanks. Just for my understanding, can you propose alternate versions of the examples 42-44? I am. e.g., not sure what you mean by \"clearing\".\r\n\r\nLooking, e.g., in [Example 42](https://w3c.github.io/json-ld-syntax/#example-42-a-sealed-term-definition-can-not-be-overridden): does it mean that the second attempt to overwrite a term (namely as part of `\"knows\"`) _is_ acceptable in contrast to what the example say now? Or is this action permitted only for a term different from `\"knows\"`, i.e., a \"new\" term? \r\n\r\nMy _feeling_ is that you mean the second option. But I am not sure…\r\n\r\n\r\n" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/466452592> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/136#issuecomment-466452592"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/136> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/466452592> .
<https://api.github.com/users/dlongley> <http://schema.org/accountId> "dlongley" .
<https://api.github.com/users/dlongley> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/168137?v=4" .
<https://api.github.com/users/dlongley> <http://schema.org/url> "https://github.com/dlongley"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/dlongley> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/466452592> <http://schema.org/creator> <https://api.github.com/users/dlongley> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/466452592> <http://schema.org/startDate> "2019-02-22T16:15:14Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/466452592> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/466452592> <http://schema.org/description> "@iherman,\r\n\r\n> I am. e.g., not sure what you mean by \"clearing\".\r\n\r\nI mean that the active context is reset to the initial active context (a \"clean slate\" having no term definitions). If there are sealed terms in the active context when an attempt is made to reset it, this will fail unless the attempt that is made is via a term definition with a scoped context *and* that term is used as a property (as opposed to as a value for `@type`). More explanation to follow...\r\n\r\n> does it mean that the second attempt to overwrite a term (namely as part of `\"knows\"`) _is_ acceptable in contrast to what the example say now? Or is this action permitted only for a term different from `\"knows\"`, i.e., a \"new\" term?\r\n\r\nActually, the current examples in the spec don't change at all; they are still correct with this new restriction. So, no, it is still not acceptable and, yes, I mean \"the second option\" as you suspected. You *must* create a new term just like [Example 44](https://w3c.github.io/json-ld-syntax/#example-44-context-null-erases-sealed-term-definitions) does. However, this makes it more clear that the *only* acceptable way is the way Example 44 does it.\r\n\r\nFor instance, an example of something that *would not* be acceptable is this:\r\n\r\n```js\r\n{\r\n  \"@context\": [\r\n    {\r\n      \"@version\": 1.1,\r\n      \"@sealed\": true,\r\n      \"Organization\": \"http://schema.org/Organization\",\r\n      \"name\": \"http://schema.org/name\",\r\n      \"employee\": \"http://schema.org/employee\"\r\n    }\r\n  ],\r\n  \"@type\": \"Organization\",\r\n  \"name\": \"Digital Bazaar\",\r\n  \"employee\" : {\r\n    \"@context\": [\r\n       // because of \"@context\": null in an embedded context \r\n       // and not a scoped context, this `null` will fail and so\r\n       // would the override attempt of name\r\n      null,\r\n      {\r\n        \"name\": \"this_attempt_to_override_name_will_fail\"\r\n      }\r\n    ],\r\n    \"name\": \"Manu Sporny\"\r\n  }\r\n}\r\n```\r\n\r\nThis above example would continue to fail *even if* employee were not sealed or if a new term were introduced that did not use a scoped context:\r\n\r\n```js\r\n{\r\n  \"@context\": [\r\n    {\r\n      \"@version\": 1.1,\r\n      \"@sealed\": true,\r\n      \"Organization\": \"http://schema.org/Organization\",\r\n      \"name\": \"http://schema.org/name\",\r\n      \"employee\": \"http://schema.org/employee\"\r\n    },\r\n    {\r\n      \"newButNoScopedContext\": \"http://example.com/newButNoScopedContext\"\r\n    }\r\n  ],\r\n  \"@type\": \"Organization\",\r\n  \"name\": \"Digital Bazaar\",\r\n  \"newButNoScopedContext\" : {\r\n    \"@context\": [\r\n       // because of \"@context\": null in an embedded context \r\n       // and not a scoped context, this `null` will fail and so\r\n       // would the override attempt of name\r\n      null,\r\n      {\r\n        \"name\": \"this_attempt_to_override_name_will_fail\"\r\n      }\r\n    ],\r\n    \"name\": \"Manu Sporny\"\r\n  }\r\n}\r\n```\r\n\r\nSimilarly, this would fail:\r\n\r\n```js\r\n{\r\n  \"@context\": [\r\n    {\r\n      \"@version\": 1.1,\r\n      \"@sealed\": true,\r\n      \"Organization\": \"http://schema.org/Organization\",\r\n      \"name\": \"http://schema.org/name\",\r\n      \"employee\": \"http://schema.org/employee\",\r\n      \"SpecialOrganization\": {\r\n        \"@id\": \"http://example.com/SpecialOrganization\",\r\n        // if the term for this definition is used as an \"@type\",\r\n        // then this attempt to clear \"@sealed\" terms will fail\r\n        \"@context\": [\r\n          null,\r\n          {\r\n            \"name\": \"this_attempt_to_override_name_will_fail\",\r\n            \"employee\": \"this_attempt_to_override_name_will_fail\"\r\n          }\r\n        ]\r\n      }\r\n    }\r\n  ],\r\n  // because of \"@context\": null in a scoped context for\r\n  // a term used as an \"@type\" rather than as a property, its\r\n  // term definition will fail\r\n  \"@type\": [\"Organization\", \"SpecialOrganization\"],\r\n  \"name\": \"Digital Bazaar\",\r\n  \"employee\" : {\r\n    \"name\": \"Manu Sporny\"\r\n  }\r\n}\r\n```" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/466456458> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/137#issuecomment-466456458"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/137> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/466456458> .
<https://api.github.com/users/dlongley> <http://schema.org/accountId> "dlongley" .
<https://api.github.com/users/dlongley> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/168137?v=4" .
<https://api.github.com/users/dlongley> <http://schema.org/url> "https://github.com/dlongley"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/dlongley> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/466456458> <http://schema.org/creator> <https://api.github.com/users/dlongley> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/466456458> <http://schema.org/startDate> "2019-02-22T16:26:19Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/466456458> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/466456458> <http://schema.org/description> "I also recommend we include the above text (the second paragraph) in the spec itself to explain the purpose of the feature. We may want a small blurb like this for every feature presented so as to make the spec easier to consume, i.e. \"The purpose of this feature is X... here's how it works... here's an example (or two, etc).\"" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/466459022> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/136#issuecomment-466459022"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/136> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/466459022> .
<https://api.github.com/users/iherman> <http://schema.org/accountId> "iherman" .
<https://api.github.com/users/iherman> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/520723?v=4" .
<https://api.github.com/users/iherman> <http://schema.org/url> "https://github.com/iherman"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/iherman> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/466459022> <http://schema.org/creator> <https://api.github.com/users/iherman> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/466459022> <http://schema.org/startDate> "2019-02-22T16:33:43Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/466459022> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/466459022> <http://schema.org/description> "@dlongley still trying to understand... If I did the following (sorry for the ugly code, but it is legal...)\r\n\r\n```js\r\n{\r\n  \"@context\": [\r\n    {\r\n      \"@version\": 1.1,\r\n      \"@sealed\": true,\r\n      \"Organization\": \"http://schema.org/Organization\",\r\n      \"name\": \"http://schema.org/name\",\r\n      \"employee\": \"http://schema.org/employee\",\r\n      \"SpecialOrganization\": {\r\n        \"@id\": \"http://example.com/SpecialOrganization\",\r\n        // if the term for this definition is used as an \"@type\",\r\n        // then this attempt to clear \"@sealed\" terms will fail\r\n        \"@context\": [\r\n          null,\r\n          {\r\n            \"name\": \"this_attempt_to_override_name_will_fail\",\r\n            \"employee\": \"this_attempt_to_override_name_will_fail\"\r\n          }\r\n        ]\r\n      }\r\n    }\r\n  ],\r\n  // because of \"@context\": null in a scoped context for\r\n  // a term used as an \"@type\" rather than as a property, its\r\n  // term definition will fail\r\n  \"@type\": [\"Organization\", \"SpecialOrganization\"],\r\n  \"name\": \"Digital Bazaar\",\r\n  \"employee\" : {\r\n    \"name\": \"Manu Sporny\"\r\n  },\r\n  \"SpecialOrganization\" : {\r\n      \"name\" : \"somebody\"\r\n  }\r\n}\r\n```\r\n\r\nthen is it so that the second occurence of \"SpecialOrganization\" will _not_ fail because I used \"SpecialOrganization\" as a term this time?\r\n" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/466461507> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/136#issuecomment-466461507"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/136> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/466461507> .
<https://api.github.com/users/pchampin> <http://schema.org/accountId> "pchampin" .
<https://api.github.com/users/pchampin> <http://schema.org/image> "https://avatars1.githubusercontent.com/u/304612?v=4" .
<https://api.github.com/users/pchampin> <http://schema.org/url> "https://github.com/pchampin"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/pchampin> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/466461507> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/466461507> <http://schema.org/startDate> "2019-02-22T16:40:52Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/466461507> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/466461507> <http://schema.org/description> "I like this new proposal.\r\n\r\nIf we are to accept it, I would update the spec text, because the paragraph before Example 44 would not be correct anymore. It would have to make it clear why Example 44 works, and in which cases `\"@context\": null` would fail..." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/466462823> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/136#issuecomment-466462823"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/136> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/466462823> .
<https://api.github.com/users/dlongley> <http://schema.org/accountId> "dlongley" .
<https://api.github.com/users/dlongley> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/168137?v=4" .
<https://api.github.com/users/dlongley> <http://schema.org/url> "https://github.com/dlongley"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/dlongley> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/466462823> <http://schema.org/creator> <https://api.github.com/users/dlongley> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/466462823> <http://schema.org/startDate> "2019-02-22T16:44:41Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/466462823> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/466462823> <http://schema.org/description> "@iherman,\r\n\r\n> then is it so that the second occurence of \"SpecialOrganization\" will _not_ fail because I used \"SpecialOrganization\" as a term this time?\r\n\r\nYes, it would be legal there. Of course, since `SpecialOrganization` still appears in `@type` in your example, a JSON-LD processor configured to throw errors would have already thrown an error for that occurrence." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/466463802> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/137#issuecomment-466463802"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/137> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/466463802> .
<https://api.github.com/users/pchampin> <http://schema.org/accountId> "pchampin" .
<https://api.github.com/users/pchampin> <http://schema.org/image> "https://avatars1.githubusercontent.com/u/304612?v=4" .
<https://api.github.com/users/pchampin> <http://schema.org/url> "https://github.com/pchampin"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/pchampin> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/466463802> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/466463802> <http://schema.org/startDate> "2019-02-22T16:47:30Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/466463802> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/466463802> <http://schema.org/description> "@dlongley This is precisely what the first paragraph of [section 4.1.8](https://w3c.github.io/json-ld-syntax/#sealed-term-definitions) is meant to convey.\r\n\r\nThe second part of your text (\"These protections are not necessary...\") is not yet reflected, though, and I'll happily steal it for introducing the `\"@context\": null` exception." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/466466479> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/136#issuecomment-466466479"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/136> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/466466479> .
<https://api.github.com/users/iherman> <http://schema.org/accountId> "iherman" .
<https://api.github.com/users/iherman> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/520723?v=4" .
<https://api.github.com/users/iherman> <http://schema.org/url> "https://github.com/iherman"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/iherman> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/466466479> <http://schema.org/creator> <https://api.github.com/users/iherman> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/466466479> <http://schema.org/startDate> "2019-02-22T16:55:15Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/466466479> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/466466479> <http://schema.org/description> "Would that be an error, like stop processing, or a warning, like ignoring the changes?\r\n\r\nAnyway, that is another matter, I think I understand what you are getting at. (Until I am lost again, that is:-) I agree with @pchampin that the text in the spec should be updated asap, to see if the full ~`@seal`~ `@protected` feature can be explained clearly..." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/466473738> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/136#issuecomment-466473738"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/136> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/466473738> .
<https://api.github.com/users/dlongley> <http://schema.org/accountId> "dlongley" .
<https://api.github.com/users/dlongley> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/168137?v=4" .
<https://api.github.com/users/dlongley> <http://schema.org/url> "https://github.com/dlongley"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/dlongley> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/466473738> <http://schema.org/creator> <https://api.github.com/users/dlongley> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/466473738> <http://schema.org/startDate> "2019-02-22T17:15:57Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/466473738> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/466473738> <http://schema.org/description> "> Would that be an error, like stop processing, or a warning, like ignoring the changes?\r\n> \r\n> Anyway, that is another matter, I think I understand what you are getting at.\r\n\r\nI agree that's another issue. I suspect we might want processors to support two modes: a default mode that raises an error (stops processing) and an optional mode to instead issue a warning that the attempted changes were invalid and thus ignored.\r\n" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/466494910> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/134#issuecomment-466494910"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/134> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/466494910> .
<https://api.github.com/users/iherman> <http://schema.org/accountId> "iherman" .
<https://api.github.com/users/iherman> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/520723?v=4" .
<https://api.github.com/users/iherman> <http://schema.org/url> "https://github.com/iherman"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/iherman> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/466494910> <http://schema.org/creator> <https://api.github.com/users/iherman> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/466494910> <http://schema.org/startDate> "2019-02-22T18:20:10Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/466494910> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/466494910> <http://schema.org/description> "This issue was discussed in [a meeting](https://www.w3.org/2018/json-ld-wg/Meetings/Minutes/2019/2019-02-22-json-ld.html#section3-2).\r\n\r\n- `RESOLVED:  Recommend using absolute URIs or @base within JSON-LD if relative URI resolution is important, and add warnings to the spec for ramifications of using a potentially dynamic DOM for resolution or discovery of JSON-LD blocks (staying in #134)`\r\n<details><summary><i class=\"differentiate\">View the transcript</i></summary>\r\n3.2. [syntax] Does HTML’s &lt;base> effect @context IRI resolution?<br/>\r\nSimon Steyskal: <a href=\"https://github.com/w3c/json-ld-syntax/issues/134\">https://github.com/w3c/json-ld-syntax/issues/134</a><br/>\r\nRob Sanderson: which we will talk about with TAG next week<br/>\r\nRob Sanderson: [explains example in issue]<br/>\r\nBenjamin Young: the nuance here is related to the potential dynamic nature<br/>\r\n… the URI spec already outlines that base would also be resolved<br/>\r\n… as it’s HTML<br/>\r\nGregg Kellogg: I think we do need to find someone who’s more familiar with HTML<br/>\r\n… esp. wrt. dynamic changes<br/>\r\n… when I was going through this, I seem to recall that in 1.0 we discussed how to deal with a remote context which references another remote context, to what shall this context be relative to?<br/>\r\nIvan Herman: the interpretation of the json-ld content must be done on load<br/>\r\n… before anything else is done<br/>\r\nPierre-Antoine Champin: I’m not sure that we can guarantee that nothing is done before on load<br/>\r\nRob Sanderson: wanted to highlight that this is likely to be a security issue<br/>\r\n… should flag it as such<br/>\r\n… e.g. if you could change a verifiable claim<br/>\r\nRob Sanderson: not sure how we could enforce the on load stuff<br/>\r\n… or test it<br/>\r\nIvan Herman: I’m surprised that this wasn’t an issue anywhere else<br/>\r\nBenjamin Young: <a href=\"https://w3c.github.io/json-ld-syntax/#example-120-using-the-document-base-url-to-establish-the-default-base-iri\">https://w3c.github.io/json-ld-syntax/#example-120-using-the-document-base-url-to-establish-the-default-base-iri</a><br/>\r\nBenjamin Young: <a href=\"https://html.spec.whatwg.org/multipage/infrastructure.html#dynamic-changes-to-base-urls\">https://html.spec.whatwg.org/multipage/infrastructure.html#dynamic-changes-to-base-urls</a><br/>\r\nBenjamin Young: it actually was, see the links I posted<br/>\r\n… embedding the json-ld might be done with JS<br/>\r\n… search engine bots will wait until the page stops moving<br/>\r\n… but if I curl the page, I’ll take whatever is in the document<br/>\r\n… if both things are in play, I might not be able to tell what data is actually shared then<br/>\r\n… pinning down when JSON-LD processing shall be done is the actual question here<br/>\r\nGregg Kellogg: many applications use HTML as a syntax rather than a processing model<br/>\r\n… what if someone does depend on dynamic state changes<br/>\r\n… were different timings make things undecidable<br/>\r\n… if you look at pre-respec times for example<br/>\r\nBenjamin Young: <a href=\"https://github.com/w3c/respec/wiki/doJsonLd\">https://github.com/w3c/respec/wiki/doJsonLd</a><br/>\r\nDave Longley: we should probably assume that most pages add json-ld after it has loaded<br/>\r\n… we should provide clear guidance<br/>\r\nRob Sanderson: does the signature take also all expanded information into account?<br/>\r\nDave Longley: yes, the sign. requires expanding and converting to canonicalized RDF<br/>\r\n… if you don’t to this you don’t pass<br/>\r\nIvan Herman: RDFa has a very similar problem, potentially<br/>\r\n… it doesn’t say a word when processing has to be done<br/>\r\n… although I has the same issues<br/>\r\n… we should provide appropriate warnings<br/>\r\nDave Longley: +1 to what ivan said<br/>\r\nIvan Herman: I don’t think we can do anything more than that<br/>\r\nBenjamin Young: maybe not relying on the base at all?<br/>\r\nGregg Kellogg: no.. that would go against the RFC<br/>\r\nDave Longley: -1 to ignoring <base> etc — i don’t think it will fly with anyone (+1 to Gregg)… could be wrong of course.<br/>\r\nIvan Herman: +1 to gregg<br/>\r\nTim Cole: I agree with gkellogg that we have to use base<br/>\r\nGregg Kellogg: +1 to timCole Images don’t reload when base changes.<br/>\r\nIvan Herman: +1 ti timCole<br/>\r\nDave Longley: i.e. sound like an idea is to “lock in base” on read<br/>\r\nBenjamin Young: part of the reason they don’t change images is because they don’t expect things to change<br/>\r\nTim Cole: yes maybe we should adapt a similar approach<br/>\r\nDave Longley: I suspect we might want to see some use cases to understand expectations with Web Components and things of that nature to make the “right decision” here.<br/>\r\nRob Sanderson: what would we anticipate the big browsers would do if the json-ld changes<br/>\r\nIvan Herman: +1 to bigbluehat<br/>\r\nBenjamin Young: we should be careful to be not prescriptive on when and how to run processing<br/>\r\n… but as said, provide guidance/info on what would happen<br/>\r\nDave Longley: +1 … as long as people can understand what will happen when they do processing and can control when to do that processing (there is choice), i think we’re ok.<br/>\r\nRob Sanderson: +1<br/>\r\nBenjamin Young: you have a lot of options<br/>\r\n… some of it is best practices<br/>\r\n… if you targeting curl then put it directly in the document<br/>\r\n… (for example)<br/>\r\nPierre-Antoine Champin: +1 to ivan, @base keeps you safe IMO<br/>\r\nDave Longley: +1 … use absolute URIs or @base to get “stable” resolution<br/>\r\nRob Sanderson: [providing possible proposals]<br/>\r\nRob Sanderson: “if you don’t do this, this are the possible ramifications”<br/>\r\n… we should explain the different scenarios and what would happen<br/>\r\nProposed resolution: Recommend using absolute URIs or @base within JSON-LD if relative URI resolution is important, and add warnings to the spec for ramifications of using a potentially dynamic DOM for resolution or discovery of JSON-LD blocks (Rob Sanderson)<br/>\r\nGregg Kellogg: +1<br/>\r\nIvan Herman: +1<br/>\r\nRob Sanderson: +1<br/>\r\nBenjamin Young: +1<br/>\r\nDavid Newbury: +1<br/>\r\nSimon Steyskal: +1<br/>\r\nDave Longley: +1<br/>\r\nPierre-Antoine Champin: +1<br/>\r\nTim Cole: +1<br/>\r\nDavid I. Lehn: +1<br/>\r\nRob Sanderson: this should be the resolution for issue 134<br/>\r\nResolution #3: Recommend using absolute URIs or @base within JSON-LD if relative URI resolution is important, and add warnings to the spec for ramifications of using a potentially dynamic DOM for resolution or discovery of JSON-LD blocks (staying in #134)<br/>\r\n</details>" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/466682289> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/76#issuecomment-466682289"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/76> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/466682289> .
<https://api.github.com/users/lukasheinrich> <http://schema.org/accountId> "lukasheinrich" .
<https://api.github.com/users/lukasheinrich> <http://schema.org/image> "https://avatars2.githubusercontent.com/u/2318083?v=4" .
<https://api.github.com/users/lukasheinrich> <http://schema.org/url> "https://github.com/lukasheinrich"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/lukasheinrich> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/466682289> <http://schema.org/creator> <https://api.github.com/users/lukasheinrich> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/466682289> <http://schema.org/startDate> "2019-02-23T19:23:54Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/466682289> <http://example.com/ns#authorAssociation> "NONE" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/466682289> <http://schema.org/description> "just for completeness, this seems like a similar point as #31 iiuc" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/466697508> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/138#issuecomment-466697508"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/138> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/466697508> .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/466697508> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/466697508> <http://schema.org/startDate> "2019-02-23T21:27:00Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/466697508> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/466697508> <http://schema.org/description> "JSON-LD considers most values that are IRIs to be _document relative_, while properties and values of `@type` are _vocabulary relative_. When you specify `\"pred\": \"identifier\"` \"identifier\" is considered to be _document relative_, as `pred` is defined using `\"@type\": \"@id\"`. When you use the \"mv:identifier\" form, it is a _compact IRI_, not a _relative IRI_, so it is turned into an _absolute IRI_ using the value of the \"mv\" term.\r\n\r\nIf you want values of `pred` to be considered as _vocabulary relative_ IRIs, you would use `\"@type\": \"@vocab\"` in the term definition." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/466846913> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/138#issuecomment-466846913"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/138> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/466846913> .
<https://api.github.com/users/lukasheinrich> <http://schema.org/accountId> "lukasheinrich" .
<https://api.github.com/users/lukasheinrich> <http://schema.org/image> "https://avatars2.githubusercontent.com/u/2318083?v=4" .
<https://api.github.com/users/lukasheinrich> <http://schema.org/url> "https://github.com/lukasheinrich"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/lukasheinrich> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/466846913> <http://schema.org/creator> <https://api.github.com/users/lukasheinrich> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/466846913> <http://schema.org/startDate> "2019-02-25T02:06:46Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/466846913> <http://example.com/ns#authorAssociation> "NONE" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/466846913> <http://schema.org/description> "thanks -- that was exactly what I needed -- closing." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/467287934> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/76#issuecomment-467287934"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/76> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/467287934> .
<https://api.github.com/users/azaroth42> <http://schema.org/accountId> "azaroth42" .
<https://api.github.com/users/azaroth42> <http://schema.org/image> "https://avatars3.githubusercontent.com/u/871868?v=4" .
<https://api.github.com/users/azaroth42> <http://schema.org/url> "https://github.com/azaroth42"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/azaroth42> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/467287934> <http://schema.org/creator> <https://api.github.com/users/azaroth42> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/467287934> <http://schema.org/startDate> "2019-02-26T04:14:35Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/467287934> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/467287934> <http://schema.org/description> "Closing, won't fix. Transformation is out of scope for the WG. The issue was pushed to the Community Group last year (though without any movement). " .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/467288007> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/20#issuecomment-467288007"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/20> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/467288007> .
<https://api.github.com/users/azaroth42> <http://schema.org/accountId> "azaroth42" .
<https://api.github.com/users/azaroth42> <http://schema.org/image> "https://avatars3.githubusercontent.com/u/871868?v=4" .
<https://api.github.com/users/azaroth42> <http://schema.org/url> "https://github.com/azaroth42"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/azaroth42> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/467288007> <http://schema.org/creator> <https://api.github.com/users/azaroth42> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/467288007> <http://schema.org/startDate> "2019-02-26T04:15:00Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/467288007> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/467288007> <http://schema.org/description> "Resolved :)" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/467394711> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/141#issuecomment-467394711"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/141> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/467394711> .
<https://api.github.com/users/iherman> <http://schema.org/accountId> "iherman" .
<https://api.github.com/users/iherman> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/520723?v=4" .
<https://api.github.com/users/iherman> <http://schema.org/url> "https://github.com/iherman"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/iherman> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/467394711> <http://schema.org/creator> <https://api.github.com/users/iherman> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/467394711> <http://schema.org/startDate> "2019-02-26T10:59:32Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/467394711> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/467394711> <http://schema.org/description> "I think this is covered by #128. \"Covered\" means that it has been discussed, and some changes on the document may come to make this a bit easier.\r\n\r\nIf you agree with this, can you close this issue (and follow #128)?" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/467460524> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/140#issuecomment-467460524"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/140> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/467460524> .
<https://api.github.com/users/ajs6f> <http://schema.org/accountId> "ajs6f" .
<https://api.github.com/users/ajs6f> <http://schema.org/image> "https://avatars1.githubusercontent.com/u/110994?v=4" .
<https://api.github.com/users/ajs6f> <http://schema.org/url> "https://github.com/ajs6f"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/ajs6f> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/467460524> <http://schema.org/creator> <https://api.github.com/users/ajs6f> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/467460524> <http://schema.org/startDate> "2019-02-26T14:32:25Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/467460524> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/467460524> <http://schema.org/description> "@VladimirAlexiev The idea is to be able to force the shape of the resulting JSON. One of JSON-LD's most important uses is \"annotating\" vanilla JSON so that it can be understood in a semantic context. In this use case it's not always possible to decide to use an array or a single value-- that decision may have already been made.\r\nAnother way to put it: JSON-LD context authors may need to ensure that their JSON results match a certain expected JSON structure (e.g. defined by an API spec) so that clients who only understand JSON (not JSON-LD) have no more trouble than they must parsing the JSON." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/467524436> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/140#issuecomment-467524436"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/140> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/467524436> .
<https://api.github.com/users/dlongley> <http://schema.org/accountId> "dlongley" .
<https://api.github.com/users/dlongley> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/168137?v=4" .
<https://api.github.com/users/dlongley> <http://schema.org/url> "https://github.com/dlongley"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/dlongley> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/467524436> <http://schema.org/creator> <https://api.github.com/users/dlongley> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/467524436> <http://schema.org/startDate> "2019-02-26T17:05:30Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/467524436> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/467524436> <http://schema.org/description> "I recommend we have this sort of reasoning added to the feature descriptions in the spec (where possible)." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/467618631> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/128#issuecomment-467618631"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/128> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/467618631> .
<https://api.github.com/users/VladimirAlexiev> <http://schema.org/accountId> "VladimirAlexiev" .
<https://api.github.com/users/VladimirAlexiev> <http://schema.org/image> "https://avatars3.githubusercontent.com/u/536250?v=4" .
<https://api.github.com/users/VladimirAlexiev> <http://schema.org/url> "https://github.com/VladimirAlexiev"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/VladimirAlexiev> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/467618631> <http://schema.org/creator> <https://api.github.com/users/VladimirAlexiev> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/467618631> <http://schema.org/startDate> "2019-02-26T21:21:29Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/467618631> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/467618631> <http://schema.org/description> "Closing 141 as duplicate.\r\nBut we need a clarification in the section referenced there, a good example, and preferably a single way to do it." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/467618721> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/141#issuecomment-467618721"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/141> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/467618721> .
<https://api.github.com/users/VladimirAlexiev> <http://schema.org/accountId> "VladimirAlexiev" .
<https://api.github.com/users/VladimirAlexiev> <http://schema.org/image> "https://avatars3.githubusercontent.com/u/536250?v=4" .
<https://api.github.com/users/VladimirAlexiev> <http://schema.org/url> "https://github.com/VladimirAlexiev"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/VladimirAlexiev> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/467618721> <http://schema.org/creator> <https://api.github.com/users/VladimirAlexiev> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/467618721> <http://schema.org/startDate> "2019-02-26T21:21:44Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/467618721> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/467618721> <http://schema.org/description> "Agreed" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/467628006> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/140#issuecomment-467628006"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/140> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/467628006> .
<https://api.github.com/users/VladimirAlexiev> <http://schema.org/accountId> "VladimirAlexiev" .
<https://api.github.com/users/VladimirAlexiev> <http://schema.org/image> "https://avatars3.githubusercontent.com/u/536250?v=4" .
<https://api.github.com/users/VladimirAlexiev> <http://schema.org/url> "https://github.com/VladimirAlexiev"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/VladimirAlexiev> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/467628006> <http://schema.org/creator> <https://api.github.com/users/VladimirAlexiev> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/467628006> <http://schema.org/startDate> "2019-02-26T21:49:19Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/467628006> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/467628006> <http://schema.org/description> "@ajs6f without such annotation, the jsonld processor will unpack the singleton arrays. \r\n\r\nIn this case all the arrays are singletons by necessity, so what use it is to have that annotation?" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/467632560> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/140#issuecomment-467632560"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/140> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/467632560> .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/467632560> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/467632560> <http://schema.org/startDate> "2019-02-26T22:03:05Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/467632560> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/467632560> <http://schema.org/description> "Note that `[\"@id\", \"@set\"]` really only helps the compaction process. When expanding, a processor will treat a single value vs an array of that single value the same way. The need is to make sure that when framing and/or compacting, that the resulting serialization will always use the array form in this case, which makes the programming logic to access such things easier." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/467947622> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/140#issuecomment-467947622"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/140> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/467947622> .
<https://api.github.com/users/ajs6f> <http://schema.org/accountId> "ajs6f" .
<https://api.github.com/users/ajs6f> <http://schema.org/image> "https://avatars1.githubusercontent.com/u/110994?v=4" .
<https://api.github.com/users/ajs6f> <http://schema.org/url> "https://github.com/ajs6f"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/ajs6f> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/467947622> <http://schema.org/creator> <https://api.github.com/users/ajs6f> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/467947622> <http://schema.org/startDate> "2019-02-27T17:09:54Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/467947622> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/467947622> <http://schema.org/description> "@VladimirAlexiev Does that help answer the question?" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/468549953> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/139#issuecomment-468549953"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/139> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/468549953> .
<https://api.github.com/users/azaroth42> <http://schema.org/accountId> "azaroth42" .
<https://api.github.com/users/azaroth42> <http://schema.org/image> "https://avatars3.githubusercontent.com/u/871868?v=4" .
<https://api.github.com/users/azaroth42> <http://schema.org/url> "https://github.com/azaroth42"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/azaroth42> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/468549953> <http://schema.org/creator> <https://api.github.com/users/azaroth42> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/468549953> <http://schema.org/startDate> "2019-03-01T05:43:00Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/468549953> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/468549953> <http://schema.org/description> "Good catch, thanks for the close reading, Vlad!" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/468551987> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/136#issuecomment-468551987"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/136> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/468551987> .
<https://api.github.com/users/azaroth42> <http://schema.org/accountId> "azaroth42" .
<https://api.github.com/users/azaroth42> <http://schema.org/image> "https://avatars3.githubusercontent.com/u/871868?v=4" .
<https://api.github.com/users/azaroth42> <http://schema.org/url> "https://github.com/azaroth42"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/azaroth42> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/468551987> <http://schema.org/creator> <https://api.github.com/users/azaroth42> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/468551987> <http://schema.org/startDate> "2019-03-01T05:54:43Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/468551987> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/468551987> <http://schema.org/description> "I disagree that the definition provided matches the examples. You can have scoped contexts based on `@type`, so the SpecialOrganization example should NOT fail. Otherwise you're introducing even more special cases by allowing property scoped contexts to override `@protected` but type scoped contexts cannot.\r\n\r\nThis needs more work.\r\n\r\n\r\n" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/468553552> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/134#issuecomment-468553552"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/134> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/468553552> .
<https://api.github.com/users/azaroth42> <http://schema.org/accountId> "azaroth42" .
<https://api.github.com/users/azaroth42> <http://schema.org/image> "https://avatars3.githubusercontent.com/u/871868?v=4" .
<https://api.github.com/users/azaroth42> <http://schema.org/url> "https://github.com/azaroth42"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/azaroth42> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/468553552> <http://schema.org/creator> <https://api.github.com/users/azaroth42> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/468553552> <http://schema.org/startDate> "2019-03-01T06:02:33Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/468553552> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/468553552> <http://schema.org/description> "Not sure this should be closed. I think there's still editorial work to do to add the warnings?  If that has been done, then feel free to re-close :)" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/468771626> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/136#issuecomment-468771626"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/136> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/468771626> .
<https://api.github.com/users/dlongley> <http://schema.org/accountId> "dlongley" .
<https://api.github.com/users/dlongley> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/168137?v=4" .
<https://api.github.com/users/dlongley> <http://schema.org/url> "https://github.com/dlongley"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/dlongley> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/468771626> <http://schema.org/creator> <https://api.github.com/users/dlongley> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/468771626> <http://schema.org/startDate> "2019-03-01T18:55:18Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/468771626> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/468771626> <http://schema.org/description> "> You can have scoped contexts based on `@type`, so the SpecialOrganization example should NOT fail.\r\n\r\nNo, this is not permitted as it would break the protection rules.\r\n\r\n> Otherwise you're introducing even more special cases by allowing property scoped contexts to override `@protected` but type scoped contexts cannot.\r\n\r\nI disagree. There are not several special cases. There is only *one* way to override `@protected` and it is through property term scoped contexts.\r\n\r\nThis is chosen because it is the only safe way to do it -- and it matches expectations and intuitions for what \"protection\" means. The reason `@protection` is added to a term is to enable users to safely consume JSON-LD as regular JSON (i.e. idiomatically and without having to use JSON-LD processing).\r\n\r\nSince JSON developers rely on the structure of the JSON tree to understand meaning, it makes sense that adding and removing `@protection` depends on this. If `@protection` can be removed, it must only be done in a way that would not break this understanding. Therefore, protection can be safely removed by introducing a new section of the JSON tree via a scoped `@context` -- no other way. This approach mirrors how idiomatic JSON extensions are done: by extending the JSON tree." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/470609436> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/129#issuecomment-470609436"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/129> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/470609436> .
<https://api.github.com/users/azaroth42> <http://schema.org/accountId> "azaroth42" .
<https://api.github.com/users/azaroth42> <http://schema.org/image> "https://avatars3.githubusercontent.com/u/871868?v=4" .
<https://api.github.com/users/azaroth42> <http://schema.org/url> "https://github.com/azaroth42"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/azaroth42> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/470609436> <http://schema.org/creator> <https://api.github.com/users/azaroth42> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/470609436> <http://schema.org/startDate> "2019-03-07T17:04:09Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/470609436> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/470609436> <http://schema.org/description> "Misclick!" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/472408686> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/67#issuecomment-472408686"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/67> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/472408686> .
<https://api.github.com/users/cygri> <http://schema.org/accountId> "cygri" .
<https://api.github.com/users/cygri> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/92551?v=4" .
<https://api.github.com/users/cygri> <http://schema.org/url> "https://github.com/cygri"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/cygri> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/472408686> <http://schema.org/creator> <https://api.github.com/users/cygri> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/472408686> <http://schema.org/startDate> "2019-03-13T12:50:42Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/472408686> <http://example.com/ns#authorAssociation> "NONE" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/472408686> <http://schema.org/description> "Regarding syntax highlighting for Turtle, there is a PR for highlight.js that adds Turtle and SPARQL support, but has been sitting in limbo for quite some time: \r\nhttps://github.com/highlightjs/highlight.js/pull/1553/commits" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/472514730> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/67#issuecomment-472514730"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/67> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/472514730> .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/472514730> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/472514730> <http://schema.org/startDate> "2019-03-13T17:03:35Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/472514730> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/472514730> <http://schema.org/description> "Part of the problem for us using syntax highlighting is that we markup our examples with `****` and `####` which is used in a data-transform to add HTML elements with CSS highlighting. This means that by the time a syntax highlighter looks at it, either it includes the `****` or the HTML bits, so it won't be grammatically correct." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/474030501> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/4#issuecomment-474030501"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/4> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/474030501> .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/474030501> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/474030501> <http://schema.org/startDate> "2019-03-18T17:52:52Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/474030501> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/474030501> <http://schema.org/description> "For basic interoperability, and to allow implementations to pass tests, I believe we will  need to tackle canonicalization. The current version of the draft is https://tools.ietf.org/html/draft-rundgren-json-canonicalization-scheme-05, not sure when it's likely to become an RFC, so don't think we can normatively cite it (although, it looks like it will become an RFC and the core bits aren't too likely to change). We might just need to re-describe the normalization points and informatively reference the draft:\r\n\r\n* No whitespace between JSON tokens.\r\n* Within strings, code points between within the traditional ASCII control\r\n      character range (`U+0000` through `U+001F`), it **MUST** be serialized\r\n      using lowercase hexadecimal Unicode notation (`\\uhhhh`) unless it is\r\n      in the set of predefined JSON control characters `U+0008`, `U+0009`,\r\n      `U+000A`, `U+000C` or `U+000D` which **MUST** be serialized as `\\b`, `\\t`, `\\n`,\r\n      `\\f` and `\\r` respectively. If the Unicode value is outside of the ASCII control character\r\n      range, it **MUST** be serialized \"as is\" unless it is equivalent to\r\n      `U+005C` (`\\`) or `U+0022` (`\"`) which **MUST** be serialized as `\\\\` and `\\\"`\r\n      respectively.\r\n* JSON Number data **MUST* be serialized according to Section [7.1.12.1](https://www.ecma-international.org/ecma-262/6.0/index.html#sec-tostring-applied-to-the-number-type) of\r\n   [[ES6](https://www.ecma-international.org/ecma-262/6.0/index.html)] including the \"Note 2\" enhancement.\r\n* JSON Object properties MUST be sorted in a recursive manner which\r\n      means that possible JSON child Objects MUST have their properties\r\n      sorted as well.\r\n\r\nThere are [implementations available](https://github.com/cyberphone/json-canonicalization) for several languages (not Ruby, which I'll work on and contribute).\r\n" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/474263075> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/4#issuecomment-474263075"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/4> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/474263075> .
<https://api.github.com/users/iherman> <http://schema.org/accountId> "iherman" .
<https://api.github.com/users/iherman> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/520723?v=4" .
<https://api.github.com/users/iherman> <http://schema.org/url> "https://github.com/iherman"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/iherman> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/474263075> <http://schema.org/creator> <https://api.github.com/users/iherman> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/474263075> <http://schema.org/startDate> "2019-03-19T09:26:57Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/474263075> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/474263075> <http://schema.org/description> "On https://github.com/w3c/json-ld-syntax/issues/4#issuecomment-474030501: I am not sure, @gkellogg.\r\n\r\n- As referred to in the comments, the fact of introducing an RDF datatype does not _require_ to define a canonical format. Per [RDF1.1 spec](https://www.w3.org/TR/rdf11-concepts/#section-Datatypes):\r\n\r\n    > A datatype consists of a lexical space, a value space and a lexical-to-value mapping, and is denoted by one or more IRIs.\r\n\r\n    More importantly, there is an example for a datatype (i.e., rdf:HTML) that does _not_ have a canonical version for now. I understand this creates problems  and, I presume, this means that an RDF graph containing an HTML (or JSON) literal _cannot_ be properly signed, but the question is whether this creates a problem for the use cases that we have for JSON literals. Similarly, I do not see why you claim\r\n\r\n    > For basic interoperability, [...], I believe we will need to tackle canonicalization.\r\n- We may indeed need this for pass tests. But that is a fundamentally different problem, which does not require us to include a _recommendation_ for a canonicalization. We can just refer to the [IETF document](https://tools.ietf.org/html/draft-rundgren-json-canonicalization-scheme-05).\r\n- _If_ we really need something normative in our document, we should try to find out what exactly is the status of that document. _If_ it is a stable document (and we can have some sort of a clear statement from somebody of authority at IETF), then we may be able to convince the director to allow us a normative reference. That would be much better than us defining a normative canonicalization that may become in conflict with others.\r\n" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/474308771> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/4#issuecomment-474308771"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/4> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/474308771> .
<https://api.github.com/users/pchampin> <http://schema.org/accountId> "pchampin" .
<https://api.github.com/users/pchampin> <http://schema.org/image> "https://avatars1.githubusercontent.com/u/304612?v=4" .
<https://api.github.com/users/pchampin> <http://schema.org/url> "https://github.com/pchampin"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/pchampin> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/474308771> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/474308771> <http://schema.org/startDate> "2019-03-19T11:04:13Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/474308771> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/474308771> <http://schema.org/description> "@iherman JSON literals in JSON-LD might be more tricky than other literals (including HTML) in RDF. The difference is that, in other RDF serializations, literals have a fixed lexical representation. Unless some form of inference on literals is performed, this lexical representation is kept as is when processing the graph.\r\n\r\nIn JSON-LD, the JSON literal we get (*e.g.* in the expansion algorithms) is *not* a lexical representation, it is the *value* itself (a JSON object). When converting to triples (and possibly to the expanded form?), a lexical representation has to be built, and there is no unique way to do that. I think that's what @gkellogg means by \"basic interoperability problems\"." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/474337692> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/4#issuecomment-474337692"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/4> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/474337692> .
<https://api.github.com/users/iherman> <http://schema.org/accountId> "iherman" .
<https://api.github.com/users/iherman> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/520723?v=4" .
<https://api.github.com/users/iherman> <http://schema.org/url> "https://github.com/iherman"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/iherman> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/474337692> <http://schema.org/creator> <https://api.github.com/users/iherman> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/474337692> <http://schema.org/startDate> "2019-03-19T12:16:24Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/474337692> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/474337692> <http://schema.org/description> "@pchampin \r\n\r\n> In JSON-LD, the JSON literal we get (e.g. in the expansion algorithms) is not a lexical representation, it is the value itself (a JSON object). \r\n\r\nI am not sure that is a given. Going back to the RDF datatype definition: what would exactly be the [value space](https://www.w3.org/TR/rdf11-concepts/#dfn-value-space) of a JSON Literal? Maybe even more specifically: what is the definition of equality in such a space? The former _is_ something we must define if we define an RDF Datatype. Referring to the canonical representation might be indeed used for the definition of the value space, but that is not necessarily the only way to do that. We could (just from the top of my head) say that a JSON object (or an array thereof) is parsed into a JavaScript object using the JSON parsing rules, and the result is the 'value space'. Which means that two JSON objects are equal if their JavaScript objects are equal per the rules defined by JavaScript.  I am not saying that the JavaScript approach is the right one, but it has the value of relying on a standard. \r\n\r\n*If* we have such a clear value space (with equality on it) then\r\n\r\n> When converting to triples (and possibly to the expanded form?), a lexical representation has to be built, and there is no unique way to do that\r\n\r\nis not a problem anymore.\r\n\r\nTo be clear, I do not have a clear answer. But I am worried about copying an IETF document and making it part of a recommendation. That is what I would prefer to avoid..." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/474505898> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/145#issuecomment-474505898"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/145> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/474505898> .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/474505898> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/474505898> <http://schema.org/startDate> "2019-03-19T18:11:19Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/474505898> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/474505898> <http://schema.org/description> "Looks like the Travis config needs a tweak; I’ll look into that. " .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/474523858> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/142#issuecomment-474523858"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/142> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/474523858> .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/474523858> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/474523858> <http://schema.org/startDate> "2019-03-19T18:55:08Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/474523858> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/474523858> <http://schema.org/description> "@davidlehn it would be useful if you used branches on w3c/json-ld-syntax rather than your own; this makes it easier for others to contribute changes to the PR." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/474527975> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/145#issuecomment-474527975"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/145> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/474527975> .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/474527975> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/474527975> <http://schema.org/startDate> "2019-03-19T19:03:21Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/474527975> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/474527975> <http://schema.org/description> "We'll also need to update the definition of `@index` to show that it can be used in this way, and the grammar section on term definitions." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/474529183> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/142#issuecomment-474529183"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/142> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/474529183> .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/474529183> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/474529183> <http://schema.org/startDate> "2019-03-19T19:05:27Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/474529183> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/474529183> <http://schema.org/description> "Pull in 2f733d718fd4f8ee7358ca65379763bf6af2b064, which should fix build issues." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/474533132> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/142#issuecomment-474533132"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/142> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/474533132> .
<https://api.github.com/users/davidlehn> <http://schema.org/accountId> "davidlehn" .
<https://api.github.com/users/davidlehn> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/109587?v=4" .
<https://api.github.com/users/davidlehn> <http://schema.org/url> "https://github.com/davidlehn"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/davidlehn> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/474533132> <http://schema.org/creator> <https://api.github.com/users/davidlehn> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/474533132> <http://schema.org/startDate> "2019-03-19T19:12:55Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/474533132> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/474533132> <http://schema.org/description> "@gkellogg I don't have the w3c repo permissions to do that.\r\n\r\nI moved the related API repo work to a digitalbazaar repo so it wasn't my personal one.  I didn't do the same with this one to avoid the churn." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/474535214> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/142#issuecomment-474535214"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/142> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/474535214> .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/474535214> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/474535214> <http://schema.org/startDate> "2019-03-19T19:16:25Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/474535214> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/474535214> <http://schema.org/description> "@iherman can you give @davidlehn permissions on the various repos to be able to create branches?" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/474540569> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/4#issuecomment-474540569"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/4> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/474540569> .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/474540569> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/474540569> <http://schema.org/startDate> "2019-03-19T19:26:51Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/474540569> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/474540569> <http://schema.org/description> "@cyberphone, can you comment on the status of \r\nhttps://tools.ietf.org/html/draft-rundgren-json-canonicalization-scheme-05? If we are to support JSON literals, it would be best to canonicalize them. When is this expected to become an RFC? How stable is the document? Are there other specs which are normatively referencing the spec?\r\n\r\n@iherman part of testing requires an RDF transform and using dataset isomorphism. At that point, the precise lexical representation of JSON literals becomes important. Certainly, this could be left out of the spec, and used in test-suite instructions, but for many reasons, setting on a canonical form for JSON literals is going to be important, if we can overcome the normative citation issues." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/474632067> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/4#issuecomment-474632067"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/4> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/474632067> .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/474632067> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/474632067> <http://schema.org/startDate> "2019-03-20T00:06:36Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/474632067> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/474632067> <http://schema.org/description> "My Ruby version for JSON canonicalization: https://github.com/dryruby/json-canonicalization." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/474710343> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/145#issuecomment-474710343"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/145> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/474710343> .
<https://api.github.com/users/pchampin> <http://schema.org/accountId> "pchampin" .
<https://api.github.com/users/pchampin> <http://schema.org/image> "https://avatars1.githubusercontent.com/u/304612?v=4" .
<https://api.github.com/users/pchampin> <http://schema.org/url> "https://github.com/pchampin"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/pchampin> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/474710343> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/474710343> <http://schema.org/startDate> "2019-03-20T06:59:16Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/474710343> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/474710343> <http://schema.org/description> "> We'll also need to update the definition of `@index` to show that it can be used in this way, and the grammar section on term definitions.\r\n\r\nYes, but we should probably discuss before on a call whether we want to keep `@index` or introduce another key (you and @iherman seemed to have hesitation about reusing `@index` here." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/474755321> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/142#issuecomment-474755321"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/142> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/474755321> .
<https://api.github.com/users/iherman> <http://schema.org/accountId> "iherman" .
<https://api.github.com/users/iherman> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/520723?v=4" .
<https://api.github.com/users/iherman> <http://schema.org/url> "https://github.com/iherman"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/iherman> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/474755321> <http://schema.org/creator> <https://api.github.com/users/iherman> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/474755321> <http://schema.org/startDate> "2019-03-20T09:37:39Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/474755321> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/474755321> <http://schema.org/description> "@davidlehn @gkellogg \r\n\r\n> @iherman can you give @davidlehn permissions on the various repos to be able to create branches?\r\n\r\ndone." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/475162501> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/4#issuecomment-475162501"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/4> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/475162501> .
<https://api.github.com/users/cyberphone> <http://schema.org/accountId> "cyberphone" .
<https://api.github.com/users/cyberphone> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/8044211?v=4" .
<https://api.github.com/users/cyberphone> <http://schema.org/url> "https://github.com/cyberphone"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/cyberphone> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/475162501> <http://schema.org/creator> <https://api.github.com/users/cyberphone> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/475162501> <http://schema.org/startDate> "2019-03-21T09:33:45Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/475162501> <http://example.com/ns#authorAssociation> "NONE" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/475162501> <http://schema.org/description> "@gkellogg It is great to see a sixth incarnation of the proposal!\r\n\r\nRegarding progress the technical issues have (AFAICT...) been properly identified; the problem is rather that a bunch of people still consider canonicalization as pure stupidity.  OTOH, it seems that none of the current Open Banking APIs has bought into the Base64Url-concept either.\r\n\r\nFWIW, I will do a short presentation \r\nhttps://cyberphone.github.io/ietf-signed-http-requests/hotrfc-shreq.pdf\r\nat IETF-104 in Prague which shows how you can apply JCS on a mainstream application. \r\n\r\n" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/475171508> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/146#issuecomment-475171508"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/146> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/475171508> .
<https://api.github.com/users/pchampin> <http://schema.org/accountId> "pchampin" .
<https://api.github.com/users/pchampin> <http://schema.org/image> "https://avatars1.githubusercontent.com/u/304612?v=4" .
<https://api.github.com/users/pchampin> <http://schema.org/url> "https://github.com/pchampin"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/pchampin> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/475171508> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/475171508> <http://schema.org/startDate> "2019-03-21T10:05:58Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/475171508> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/475171508> <http://schema.org/description> "Well spotted, thanks." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/475720294> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/136#issuecomment-475720294"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/136> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/475720294> .
<https://api.github.com/users/azaroth42> <http://schema.org/accountId> "azaroth42" .
<https://api.github.com/users/azaroth42> <http://schema.org/image> "https://avatars3.githubusercontent.com/u/871868?v=4" .
<https://api.github.com/users/azaroth42> <http://schema.org/url> "https://github.com/azaroth42"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/azaroth42> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/475720294> <http://schema.org/creator> <https://api.github.com/users/azaroth42> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/475720294> <http://schema.org/startDate> "2019-03-22T17:57:30Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/475720294> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/475720294> <http://schema.org/description> "> Since JSON developers rely on the structure of the JSON tree to understand meaning, \r\n\r\nNot necessarily. A perfectly comprehensible JSON pattern would be to instantiate the JSON objects as objects, and then just understand the meaning based on the classes. This would imply that an `@type` based pattern is just as useful as a predicate based pattern.\r\n\r\nThe special cases are:  \r\n  * `@context: null` doesn't work as one might expect\r\n  * scoped contexts by `@type` don't work as one might expect, and would cause errors when the class is referred to by a predicate scoped context (I believe)\r\n\r\n" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/475721061> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/116#issuecomment-475721061"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/116> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/475721061> .
<https://api.github.com/users/azaroth42> <http://schema.org/accountId> "azaroth42" .
<https://api.github.com/users/azaroth42> <http://schema.org/image> "https://avatars3.githubusercontent.com/u/871868?v=4" .
<https://api.github.com/users/azaroth42> <http://schema.org/url> "https://github.com/azaroth42"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/azaroth42> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/475721061> <http://schema.org/creator> <https://api.github.com/users/azaroth42> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/475721061> <http://schema.org/startDate> "2019-03-22T17:59:43Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/475721061> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/475721061> <http://schema.org/description> "This is now #129. Closing." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/475727781> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/4#issuecomment-475727781"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/4> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/475727781> .
<https://api.github.com/users/iherman> <http://schema.org/accountId> "iherman" .
<https://api.github.com/users/iherman> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/520723?v=4" .
<https://api.github.com/users/iherman> <http://schema.org/url> "https://github.com/iherman"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/iherman> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/475727781> <http://schema.org/creator> <https://api.github.com/users/iherman> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/475727781> <http://schema.org/startDate> "2019-03-22T18:18:18Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/475727781> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/475727781> <http://schema.org/description> "This issue was discussed in [a meeting](https://www.w3.org/2018/json-ld-wg/Meetings/Minutes/2019/2019-03-22-json-ld#section1-3).\r\n\r\n- `RESOLVED:  Move forwards with a JSON native data type, with a warning that it cannot be canonicalized`\r\n<details><summary><i class=\"differentiate\">View the transcript</i></summary>\r\nJSON datatype<br/>\r\nRob Sanderson: link: <a href=\"https://github.com/w3c/json-ld-syntax/issues/4\">https://github.com/w3c/json-ld-syntax/issues/4</a><br/>\r\nRob Sanderson: PR: <a href=\"https://github.com/w3c/json-ld-api/pull/72\">https://github.com/w3c/json-ld-api/pull/72</a><br/>\r\nRob Sanderson: we also have discussed the JSON datatype on github<br/>\r\n… Gregg, you’ve been the most involved (as always)<br/>\r\n… could you summarize?<br/>\r\nGregg Kellogg: the issue comes down to representation<br/>\r\n… if you are going to describe both the lexical and value space<br/>\r\n… somewhat like HTML<br/>\r\n… the lexical space cannon be guaranteed<br/>\r\n… the JSON literal quality is lost when its turned into a native representation<br/>\r\n… you loose the original key ordering, key escaping, and lexical numerical representations<br/>\r\n… so it seems we will need to canonicalize<br/>\r\n… which has been referenced in the issue<br/>\r\n… it’s sadly not as close to done as I’d hoped<br/>\r\n… and we can’t count on it being final in time<br/>\r\n… so, do we care if two implementations use the same canonicalization<br/>\r\n… so we have done some things about do we use Integer or Doubles for numbers<br/>\r\n… so when you’d turn the JSON literal into RDF (in the toRDF space), we do need to say something about that at least<br/>\r\n… and the elimination of whitespace<br/>\r\n… and the ordering of keys<br/>\r\n… I think that can be done<br/>\r\n… there’s a lot of detail in that, but we should be able to reference ECMAScript for this<br/>\r\n… or we could do it ourselves<br/>\r\nRob Sanderson: last time we talked about the canonicalization issue<br/>\r\n… we also talked about HTML being not easily canonicalizable<br/>\r\nGregg Kellogg: HTML is a little different<br/>\r\n… they will preserve order, and whitespace<br/>\r\n… so you do have the opportunity return to that result<br/>\r\nIvan Herman: well, attribute order and things are not covered<br/>\r\n… this would be a problem if you were to attempt to sign an HTML document<br/>\r\nGregg Kellogg: if we weren’t in an era when signatures weren’t as important as they are now, then maybe we wouldn’t need to care about this so much<br/>\r\nRob Sanderson: so, is there a JSON-LD document that could include a JSON “native” data type that also needs to be signed<br/>\r\n… so if the only use case is to import GeoJSON<br/>\r\n… do we need to worry<br/>\r\nIvan Herman: I have spent time on this issue with others<br/>\r\n… aside from the canonicalization problem<br/>\r\n… if we do make a native JSON type, we will have to put it into some namespace–rdf: or jsonld:<br/>\r\nRob Sanderson: +1 to RDF namespace<br/>\r\nIvan Herman: if we do that, we’ll have to write the SWIG mailing list, to announce the new datatype, etc.<br/>\r\n… we can do this as part of our document<br/>\r\n… the other problem is<br/>\r\n… I did put a reference in the issue for the rules we have to follow when we point to something normatively<br/>\r\n… my first reading is that unfortunately, this JSON canonicalization specification cannot be referred to normatively<br/>\r\n… the second problem is bringing our own canonicalization into our document<br/>\r\n… if we do that, I can safely say the Director would say no to that<br/>\r\n… so, we can’t just take an IETF spec and put it into a W3C spec<br/>\r\n… all of these are admin problems<br/>\r\n… But I am still not convinced that we need the canonicalization as a normative part of our spec<br/>\r\n… we could say that someone else may do this and reference forthcoming work<br/>\r\n… but when the issue is that we have a JSON portion we want to store in RDF<br/>\r\n… we can state that the only expectation is that [the same processor will produce the same output]<br/>\r\n… none of the arguments that I heard is that canonicalization needs to be normative<br/>\r\nPierre-Antoine Champin: <a href=\"http://tinyurl.com/y2gmzxf8\">http://tinyurl.com/y2gmzxf8</a><br/>\r\nPierre-Antoine Champin: I was wondering about this example<br/>\r\n… there’s an Integer in the non-canonical form<br/>\r\n… would that be canonicalized or not?<br/>\r\nGregg Kellogg: yes, that would be canonicalized<br/>\r\n… I don’t know any processors that would properly serialize that with a leading zero<br/>\r\n… if you’re going to the internal representation<br/>\r\n… it is the number 42<br/>\r\n… some might do 42.0<br/>\r\n… or 42E+0<br/>\r\n… that would be fine, but I don’t think most JSON serializers would do that<br/>\r\nPierre-Antoine Champin: for the moment, we know how to sign this thing<br/>\r\nDave Longley: I think this falls into the same category as HTML<br/>\r\n… it’s a string in the JSON; it’s not native HTML<br/>\r\n… or a native number in the example’s case<br/>\r\n… if we’re storing stuff in a string, then store it as a string<br/>\r\n… but people want a native JSON object in their JSON<br/>\r\nPierre-Antoine Champin: but if you remove the leading 0 you don’t get the same signature<br/>\r\n… so I’m assuming that the signature is dealing with the order or absence of order in the object when signed<br/>\r\n… so if the object was a native JSON object, then it would already benefit<br/>\r\n… and regardless we already have this problem with other string-expressed literals<br/>\r\nRob Sanderson: if you instead make it value 42.0<br/>\r\n… since no one really serializes as 042<br/>\r\n… whatever you change here will change the signature<br/>\r\n… even though it will canonicalize as something different<br/>\r\nDave Longley: I disagree<br/>\r\nRob Sanderson: what do you disagree with?<br/>\r\nIvan Herman: I think in these examples, the current JSON-LD specification doesn’t say anything about what you put in strings<br/>\r\n… we don’t suggest any sort of mini-canonicalization for things like this<br/>\r\n… having built-in canonicalization for the native JSON representation<br/>\r\n… would be a departure from what we’ve done previously<br/>\r\nDave Longley: my response to all that is that we have very consistent rules about moving non-string data into strings<br/>\r\n… so we do have those sorts of specifications<br/>\r\n… from a native JSON value into a string<br/>\r\n… this same thing would exist for native JSON objects<br/>\r\n… for things that come in via a string, those will stay as whatever that string is<br/>\r\n… so strings have no issue<br/>\r\n… so if you take pchampin’s example, and change it to a real number: 42<br/>\r\nGregg Kellogg: 42, 42.0, 42.0E0, 4.2E+1 are all the same number<br/>\r\nDave Longley: and if you put that in the playground, check the nquads tab, you’ll find the same number<br/>\r\nIvan Herman: yep I acknowledge that<br/>\r\nRob Sanderson: maybe then it’s the playground which is at fault<br/>\r\n… I put in several examples, and the signature changes for all of these different 42’s as an integer<br/>\r\nDave Longley: you’re looking at the RSA signature, so you’ll see it change constantly<br/>\r\n… because that injects random data<br/>\r\n… what you need to look at is the N-Quads or normalized tabs<br/>\r\n… the data there stays the same<br/>\r\nGregg Kellogg: this is in the data round tripping section<br/>\r\nGregg Kellogg: so, imo, if we create a datatype for JSON<br/>\r\n… before there is a canonicalization for it<br/>\r\n… then we’re in danger of doing things too early<br/>\r\n… ultimately we need to deal with a canonicalized JSON<br/>\r\nPierre-Antoine Champin: +1<br/>\r\nGregg Kellogg: so the best thing we can do right now is nothing<br/>\r\n… and defer this until there is a canonicalized form<br/>\r\n… otherwise whitespace, object ordering, etc are all variable<br/>\r\n… and the literals really won’t be worth doing any lexical representation is important<br/>\r\n… better not to do anything until a canonicalization spec exists<br/>\r\nIvan Herman: my take would be milder<br/>\r\n… the GeoJSON example doesn’t care about canonicalization<br/>\r\nRob Sanderson: +1 to ivan<br/>\r\nIvan Herman: with the canonicalization things differed<br/>\r\n… and state that this feature is not recommended<br/>\r\n… so we differ it, and if/when the canonicalization becomes standard or whatever, then we at that point suggest that that spec gets used<br/>\r\nRob Sanderson: it would be better to have a JSON datatype and state that later we’ll do canonicalization<br/>\r\nDave Longley: let’s provide rules for how to produce the JSON string that match the draft – but that you can do something else and be very clear it’s preferred that everyone do the same thing<br/>\r\nRob Sanderson: so we should start with JSON datatypes, and just suggest that you can’t sign these<br/>\r\nJeff Mixter: +1 to ivan and azaroth<br/>\r\nGregg Kellogg: if we don’t do canonicalization now, we don’t seem to be prevented from doing it later<br/>\r\n… if we end up as a living spec, then we could do it that way<br/>\r\n… and we could also suggest that for testing purposes it is always canonicalized<br/>\r\nRob Sanderson: a warning or a note?<br/>\r\nProposed resolution: Move forwards with a JSON native data type, with a warning that it cannot be canonicalized (Rob Sanderson)<br/>\r\nRob Sanderson: I’d suggest a warning<br/>\r\nGregg Kellogg: +1<br/>\r\nJeff Mixter: +1<br/>\r\nIvan Herman: +1<br/>\r\nRob Sanderson: +1<br/>\r\nSimon Steyskal: +1<br/>\r\nPierre-Antoine Champin: +1<br/>\r\nTim Cole: +1<br/>\r\nDave Longley: +0<br/>\r\nBenjamin Young: +0 still have concerns about eager misuse<br/>\r\nDavid I. Lehn: +0.5<br/>\r\nJeff Mixter: I echo bigbluehat concerns but I also have very valid reasons to add JSON to RDF data.<br/>\r\nDave Longley: +1 to everything Benjamin is saying … but that we should really also have JSON literals … but they should also all be converted to the same strings in processors :)<br/>\r\nDavid Newbury: +1<br/>\r\nResolution #3: Move forwards with a JSON native data type, with a warning that it cannot be canonicalized<br/>\r\nDave Longley: JSON literals can be an escape hatch but ONLY an escape hatch.<br/>\r\n</details>" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/475733400> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/147#issuecomment-475733400"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/147> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/475733400> .
<https://api.github.com/users/azaroth42> <http://schema.org/accountId> "azaroth42" .
<https://api.github.com/users/azaroth42> <http://schema.org/image> "https://avatars3.githubusercontent.com/u/871868?v=4" .
<https://api.github.com/users/azaroth42> <http://schema.org/url> "https://github.com/azaroth42"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/azaroth42> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/475733400> <http://schema.org/creator> <https://api.github.com/users/azaroth42> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/475733400> <http://schema.org/startDate> "2019-03-22T18:33:31Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/475733400> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/475733400> <http://schema.org/description> "Also, once written, this should be called out for security horizontal review." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/475907669> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/145#issuecomment-475907669"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/145> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/475907669> .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/475907669> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/475907669> <http://schema.org/startDate> "2019-03-23T21:50:33Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/475907669> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/475907669> <http://schema.org/description> "As I'm implementing this, I note some other things that seem to be requirements, or if not, add much more complication:\r\n\r\nConsider the following example:\r\n\r\n```json\r\n{\r\n  \"@context\": {\r\n    \"@version\": 1.1,\r\n    \"@vocab\": \"http://example.com/\",\r\n    \"author\": {\"@container\": \"@index\", \"@index\": \"prop\"},\r\n    \"prop\": {\"@type\": \"@vocab\"}\r\n  },\r\n  \"@id\": \"http://example.com/article\",\r\n  \"author\": {\r\n    \"regular\": {\"@id\": \"http://example.org/person/1\"},\r\n    \"guest\": [\r\n      {\"@id\": \"http://example.org/person/2\"},\r\n      {\"@id\": \"http://example.org/person/3\"}\r\n    ]\r\n  }\r\n}\r\n```\r\n\r\n* We actually need to use the term definition for the `@index` value, so that we know how to interpret string values of the map. So \"regular\" and \"guest\" are expanded as vocabulary-relative IRIs.\r\n* You can't use a property to index a value object, so if in the above example, the values of \"regular\" and \"guest\" were't node objects (or strings which expand to node objects or graph objects), it would be an error.\r\n* When compacting, we need to remember \"prop\" as a term, rather than it's expanded value; this way, we can find values of that term to extract for indexing.\r\n\r\nAdditionally, a node object containing both `@graph` and some other property is not a _graph object_, as defined in the spec. Therefore, indexing can't apply if `@container` includes both `@index` and `@graph` and `@index` is defined on the term. Logically, this might work, but it would wreak havoc on the already overly complicated compaction algorithm, where the notion of _graph object_ and _simple graph object_ come into play.\r\n\r\nThere are likely more complications, and possibly some corner cases I've neglected." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/475945554> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/128#issuecomment-475945554"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/128> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/475945554> .
<https://api.github.com/users/Cold-A-Muse> <http://schema.org/accountId> "Cold-A-Muse" .
<https://api.github.com/users/Cold-A-Muse> <http://schema.org/image> "https://avatars1.githubusercontent.com/u/5823083?v=4" .
<https://api.github.com/users/Cold-A-Muse> <http://schema.org/url> "https://github.com/Cold-A-Muse"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/Cold-A-Muse> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/475945554> <http://schema.org/creator> <https://api.github.com/users/Cold-A-Muse> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/475945554> <http://schema.org/startDate> "2019-03-24T10:18:57Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/475945554> <http://example.com/ns#authorAssociation> "NONE" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/475945554> <http://schema.org/description> "Is converting TriG Graphs to JSON-LD supported? I couldn't find any documentation for this yet and ended up at this issue :sweat_smile: " .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/475974611> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/128#issuecomment-475974611"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/128> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/475974611> .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/475974611> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/475974611> <http://schema.org/startDate> "2019-03-24T16:24:42Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/475974611> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/475974611> <http://schema.org/description> "JSON-LD supports conversion to and from RDF datasets, as does TriG. This is the same for all RDF formats, either converting to graphs or datasets. The Playground doesn’t directly support it (PR to do so would be great), but you can try it on my [distiller](http://rdf.greggkellogg.net/distiller).\r\n\r\nThe key is they express the same abstract data model. In the algorithm, this is described using quads, so turn TriG into quads and use as input to JSON-LD fromRdf or do the opposite." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/476718501> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/150#issuecomment-476718501"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/150> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/476718501> .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/476718501> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/476718501> <http://schema.org/startDate> "2019-03-26T15:59:21Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/476718501> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/476718501> <http://schema.org/description> "> the following reference: https://tc39.github.io/ecma262/#sec-json-object looks like a good match\r\n\r\n@iherman that's a good match, although the value space includes arrays, numbers, boolean, and null, as well as object.\r\n\r\n> I am a bit bothered by the fact that the specification does not define when two objects in the value space are considered to be equal.\r\n\r\nYes, indeed. We have some text in the test README that could suffice:\r\n\r\n* JSON objects are compared member by member without regard to the ordering of members within the object. Each member must have a corresponding member in the object being compared to. Values are compared recursively.\r\n* JSON arrays are generally compared in order; each item within the array must be equivalent to the corresponding item in the array being compared to by using the comparison algorithm recursively.\r\n* JSON values are compared using strict equality." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/476723928> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/150#issuecomment-476723928"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/150> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/476723928> .
<https://api.github.com/users/iherman> <http://schema.org/accountId> "iherman" .
<https://api.github.com/users/iherman> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/520723?v=4" .
<https://api.github.com/users/iherman> <http://schema.org/url> "https://github.com/iherman"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/iherman> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/476723928> <http://schema.org/creator> <https://api.github.com/users/iherman> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/476723928> <http://schema.org/startDate> "2019-03-26T16:10:41Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/476723928> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/476723928> <http://schema.org/description> "@gkellogg the test Readme text if fine, but do you intend to make this normative?" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/476771910> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/150#issuecomment-476771910"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/150> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/476771910> .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/476771910> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/476771910> <http://schema.org/startDate> "2019-03-26T17:53:00Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/476771910> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/476771910> <http://schema.org/description> "That is what I was suggesting for a normative description of value equality. I’m certainly open to alternatives. " .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/476775085> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/150#issuecomment-476775085"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/150> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/476775085> .
<https://api.github.com/users/iherman> <http://schema.org/accountId> "iherman" .
<https://api.github.com/users/iherman> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/520723?v=4" .
<https://api.github.com/users/iherman> <http://schema.org/url> "https://github.com/iherman"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/iherman> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/476775085> <http://schema.org/creator> <https://api.github.com/users/iherman> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/476775085> <http://schema.org/startDate> "2019-03-26T17:59:58Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/476775085> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/476775085> <http://schema.org/description> "@gkellogg I am fine putting that into the doc normatively. We will see what the review will give." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/477222576> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/151#issuecomment-477222576"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/151> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/477222576> .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/477222576> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/477222576> <http://schema.org/startDate> "2019-03-27T15:54:24Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/477222576> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/477222576> <http://schema.org/description> "Yes, it should use `@version`, but I’d like to see why it’s not found in Travis tests first. All examples are run using a script, that is intended to find such errors." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/477229092> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/152#issuecomment-477229092"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/152> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/477229092> .
<https://api.github.com/users/iherman> <http://schema.org/accountId> "iherman" .
<https://api.github.com/users/iherman> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/520723?v=4" .
<https://api.github.com/users/iherman> <http://schema.org/url> "https://github.com/iherman"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/iherman> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/477229092> <http://schema.org/creator> <https://api.github.com/users/iherman> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/477229092> <http://schema.org/startDate> "2019-03-27T16:07:19Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/477229092> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/477229092> <http://schema.org/description> "I approve @pchampin's change, but re-reading the whole thing I wonder whether there isn't something missing (from a spec point of view). It says \"keys are identical\". Keys are strings, but we may still want to refer to the ECMAScript document as for what it means that they are identical. The reason that the equality of strings is not that obvious in a Unicode world, but the ECMAScript does the right thing talking about the code points...\r\n\r\n" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/477254990> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/152#issuecomment-477254990"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/152> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/477254990> .
<https://api.github.com/users/iherman> <http://schema.org/accountId> "iherman" .
<https://api.github.com/users/iherman> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/520723?v=4" .
<https://api.github.com/users/iherman> <http://schema.org/url> "https://github.com/iherman"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/iherman> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/477254990> <http://schema.org/creator> <https://api.github.com/users/iherman> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/477254990> <http://schema.org/startDate> "2019-03-27T17:00:24Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/477254990> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/477254990> <http://schema.org/description> "Thanks @pchampin !" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/477386690> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/151#issuecomment-477386690"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/151> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/477386690> .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/477386690> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/477386690> <http://schema.org/startDate> "2019-03-27T23:35:01Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/477386690> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/477386690> <http://schema.org/description> "It ends up, we weren't running examples using validation mode, so the lack of `@version` wasn't caught. We were also not processing HTML quite right, which goes back before there was support for HTML content in the Ruby implementation. Both fixed now, thanks for noticing!" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/477547527> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/153#issuecomment-477547527"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/153> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/477547527> .
<https://api.github.com/users/pchampin> <http://schema.org/accountId> "pchampin" .
<https://api.github.com/users/pchampin> <http://schema.org/image> "https://avatars1.githubusercontent.com/u/304612?v=4" .
<https://api.github.com/users/pchampin> <http://schema.org/url> "https://github.com/pchampin"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/pchampin> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/477547527> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/477547527> <http://schema.org/startDate> "2019-03-28T10:58:55Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/477547527> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/477547527> <http://schema.org/description> "It is indeed option 1, and I don't understand what makes you think that sealing might propagate backward. First, overriding terms (sealed or not) in contexts has always been defined as order dependant. Second, the spec reads:\r\n> It prevents *further* contexts to override this term definition.\r\n\r\nThe emphasis on \"further\" is not in the original text, but it seems explicit enough to me.\r\n\r\n**edited**: I originally wrote \"option 2\", while I meant \"option 1\", as pointed out by @gkellogg below -- thanks to him" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/477679234> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/153#issuecomment-477679234"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/153> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/477679234> .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/477679234> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/477679234> <http://schema.org/startDate> "2019-03-28T16:48:26Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/477679234> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/477679234> <http://schema.org/description> "Actually, I think you mean option 1. In the second example, the first context defines \"name\" and the second context also defines \"name\" and seals it. Note that the second context does not update the definition of \"name\" but replaces it. So, there is **No error**, as the new definition marks itself with `@sealed` and it does not bear on the fact that a term with the same key was previously defined." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/477694883> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/153#issuecomment-477694883"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/153> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/477694883> .
<https://api.github.com/users/dlongley> <http://schema.org/accountId> "dlongley" .
<https://api.github.com/users/dlongley> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/168137?v=4" .
<https://api.github.com/users/dlongley> <http://schema.org/url> "https://github.com/dlongley"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/dlongley> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/477694883> <http://schema.org/creator> <https://api.github.com/users/dlongley> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/477694883> <http://schema.org/startDate> "2019-03-28T17:27:35Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/477694883> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/477694883> <http://schema.org/description> "Yes to what @gkellogg said." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/477714805> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/153#issuecomment-477714805"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/153> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/477714805> .
<https://api.github.com/users/pchampin> <http://schema.org/accountId> "pchampin" .
<https://api.github.com/users/pchampin> <http://schema.org/image> "https://avatars1.githubusercontent.com/u/304612?v=4" .
<https://api.github.com/users/pchampin> <http://schema.org/url> "https://github.com/pchampin"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/pchampin> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/477714805> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/477714805> <http://schema.org/startDate> "2019-03-28T18:19:19Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/477714805> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/477714805> <http://schema.org/description> "Yes of course, I meant \"option 1\". I edited my comment. Thx" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/477763416> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/4#issuecomment-477763416"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/4> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/477763416> .
<https://api.github.com/users/azaroth42> <http://schema.org/accountId> "azaroth42" .
<https://api.github.com/users/azaroth42> <http://schema.org/image> "https://avatars3.githubusercontent.com/u/871868?v=4" .
<https://api.github.com/users/azaroth42> <http://schema.org/url> "https://github.com/azaroth42"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/azaroth42> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/477763416> <http://schema.org/creator> <https://api.github.com/users/azaroth42> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/477763416> <http://schema.org/startDate> "2019-03-28T20:43:03Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/477763416> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/477763416> <http://schema.org/description> "Agree done, closing :)" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/477779114> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/145#issuecomment-477779114"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/145> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/477779114> .
<https://api.github.com/users/pchampin> <http://schema.org/accountId> "pchampin" .
<https://api.github.com/users/pchampin> <http://schema.org/image> "https://avatars1.githubusercontent.com/u/304612?v=4" .
<https://api.github.com/users/pchampin> <http://schema.org/url> "https://github.com/pchampin"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/pchampin> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/477779114> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/477779114> <http://schema.org/startDate> "2019-03-28T21:32:18Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/477779114> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/477779114> <http://schema.org/description> "Gosh, I knew a bunch of worms were lurking from inside that shiny can!\r\n\r\nRegarding the values in the index map, I'm ok to contrain them to be simple object nodes (no `@graph`, non `@value`).\r\n\r\nRegarding the property used for indexing, my idea was that it would always have simple string values. It is tempting to use vocabulary-relative IRIs, but is there a real use case for that (beyond type indexing or id indexing)?\r\n\r\nI think I would prefer to keep term definitions out of the picture for the indexing property, because they would bring too much complexity and too many corner cases (`@reverse`?). We could even require the value of `@index` to be an absolute IRI. This would be ugly and inconvenient, but it would hopefully prevent users from expecting a term definition to apply (although one could of course still try to add a term definition identified by the full IRI...).\r\n\r\n> When compacting, we need to remember \"prop\" as a term, rather than it's expanded value; this way, we can find values of that term to extract for indexing.\r\n\r\nSorry, I don't get it. In the expanded form, we only have expanded values, right?" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/477786258> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/137#issuecomment-477786258"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/137> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/477786258> .
<https://api.github.com/users/azaroth42> <http://schema.org/accountId> "azaroth42" .
<https://api.github.com/users/azaroth42> <http://schema.org/image> "https://avatars3.githubusercontent.com/u/871868?v=4" .
<https://api.github.com/users/azaroth42> <http://schema.org/url> "https://github.com/azaroth42"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/azaroth42> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/477786258> <http://schema.org/creator> <https://api.github.com/users/azaroth42> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/477786258> <http://schema.org/startDate> "2019-03-28T21:57:06Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/477786258> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/477786258> <http://schema.org/description> "Lots of +1s. I don't think we need a formal resolution for the change in name. Changing to editorial." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/477790944> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/145#issuecomment-477790944"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/145> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/477790944> .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/477790944> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/477790944> <http://schema.org/startDate> "2019-03-28T22:14:43Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/477790944> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/477790944> <http://schema.org/description> "I think keeping them as term definitions works. The important thing is that, in the compact view, the value of the property is expressed as a string.\r\n\r\nThe point on prop being a term when compacting is so that we know how to compact the value of \"prop\" to use as an index. Of course, if we only allowed simple values we could avoid this, but it seems to me to be useful to allow anything that compacts as a string to be used as an index. The main complicating area is for named graph indexing, but I think this is a vanishingly small use case.\r\n\r\nI did consider that as an alternative to leveraging `\"@container\": \"@index\"`, and using an `\"@index\"` value, we could allow `\"@container\": \"prop\"`, where \"prop\" is a term or expands to an IRI. There's not a lot of shared logic in the algorithms for the property-index vs. `@index` use cases." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/477792900> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/142#issuecomment-477792900"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/142> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/477792900> .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/477792900> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/477792900> <http://schema.org/startDate> "2019-03-28T22:22:32Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/477792900> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/477792900> <http://schema.org/description> "For #137" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/478026284> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/144#issuecomment-478026284"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/144> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/478026284> .
<https://api.github.com/users/BigBlueHat> <http://schema.org/accountId> "BigBlueHat" .
<https://api.github.com/users/BigBlueHat> <http://schema.org/image> "https://avatars1.githubusercontent.com/u/43209?v=4" .
<https://api.github.com/users/BigBlueHat> <http://schema.org/url> "https://github.com/BigBlueHat"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/BigBlueHat> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/478026284> <http://schema.org/creator> <https://api.github.com/users/BigBlueHat> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/478026284> <http://schema.org/startDate> "2019-03-29T14:51:06Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/478026284> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/478026284> <http://schema.org/description> "Looks great, @gkellogg! Thanks." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/478079811> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/129#issuecomment-478079811"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/129> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/478079811> .
<https://api.github.com/users/iherman> <http://schema.org/accountId> "iherman" .
<https://api.github.com/users/iherman> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/520723?v=4" .
<https://api.github.com/users/iherman> <http://schema.org/url> "https://github.com/iherman"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/iherman> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/478079811> <http://schema.org/creator> <https://api.github.com/users/iherman> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/478079811> <http://schema.org/startDate> "2019-03-29T17:17:22Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/478079811> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/478079811> <http://schema.org/description> "This issue was discussed in [a meeting](https://www.w3.org/2018/json-ld-wg/Meetings/Minutes/2019/2019-03-29-json-ld#section4-1).\r\n\r\n- `ACTION:  make an issue for security issue on IRI as term definition (Gregg Kellogg)`\r\n<details><summary><i class=\"differentiate\">View the transcript</i></summary>\r\n4.1. Defining term without @id<br/>\r\nRob Sanderson: Link: <a href=\"https://github.com/w3c/json-ld-syntax/issues/129\">https://github.com/w3c/json-ld-syntax/issues/129</a><br/>\r\nRob Sanderson: we discussed this in the F2F in Washington DC<br/>\r\n… as part of 116 (allow redefinition of terms), but reducing it<br/>\r\nGregg Kellogg: the original issue was about redefining a term without @id in the term definition<br/>\r\n… I did a few experiment; this should be fairly straightforward<br/>\r\nIvan Herman: this would radically change the behaviour compared to 1.0,<br/>\r\n… which we are not allowed to be done.<br/>\r\nGregg Kellogg: no, it fails in 1.0, so this is not backward incompatible per se<br/>\r\nDave Longley: +1 to mark as editorial for gregg to markup (also, thanks gregg!)<br/>\r\nRob Sanderson: is it just editorial, or do we need to discuss how it works?<br/>\r\nGregg Kellogg: it should be mostly editorial<br/>\r\nPierre-Antoine Champin: if I set “foaf:knows” to an exotic URI, then redefine “foaf:knows” without an @id, does the new definition inherit the exotic URI, or is it back to what “foaf:knows” resolves to?<br/>\r\n… ex: [{\"foaf:knows\": {\"@id\": \"<a href=\"http://hahaha.org/foo\"},\">http://hahaha.org/foo\"},</a> {\"foaf:knows\": {\"@type\": \"@id\"}]<br/>\r\nGregg Kellogg: this kind of redefinition is an anti-pattern, possibly even an attack<br/>\r\n… so may be we should consider it as a bug in 1.0 and publish an errata to fix it<br/>\r\nDave Longley: I’m in favour of fixing security issues<br/>\r\nAction #2: make an issue for security issue on IRI as term definition (Gregg Kellogg)<br/>\r\nGregg Kellogg: I even think there’s some special logic when the term is an absolute IRI, which we can possibly remove<br/>\r\n</details>" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/478079813> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/153#issuecomment-478079813"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/153> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/478079813> .
<https://api.github.com/users/azaroth42> <http://schema.org/accountId> "azaroth42" .
<https://api.github.com/users/azaroth42> <http://schema.org/image> "https://avatars3.githubusercontent.com/u/871868?v=4" .
<https://api.github.com/users/azaroth42> <http://schema.org/url> "https://github.com/azaroth42"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/azaroth42> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/478079813> <http://schema.org/creator> <https://api.github.com/users/azaroth42> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/478079813> <http://schema.org/startDate> "2019-03-29T17:17:22Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/478079813> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/478079813> <http://schema.org/description> "Closed by resolution https://www.w3.org/2018/json-ld-wg/Meetings/Minutes/2019/2019-03-29-json-ld#resolution2 " .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/478079941> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/140#issuecomment-478079941"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/140> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/478079941> .
<https://api.github.com/users/azaroth42> <http://schema.org/accountId> "azaroth42" .
<https://api.github.com/users/azaroth42> <http://schema.org/image> "https://avatars3.githubusercontent.com/u/871868?v=4" .
<https://api.github.com/users/azaroth42> <http://schema.org/url> "https://github.com/azaroth42"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/azaroth42> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/478079941> <http://schema.org/creator> <https://api.github.com/users/azaroth42> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/478079941> <http://schema.org/startDate> "2019-03-29T17:17:48Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/478079941> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/478079941> <http://schema.org/description> "Closed by resolution: https://www.w3.org/2018/json-ld-wg/Meetings/Minutes/2019/2019-03-29-json-ld#resolution3 " .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/478080353> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/153#issuecomment-478080353"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/153> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/478080353> .
<https://api.github.com/users/iherman> <http://schema.org/accountId> "iherman" .
<https://api.github.com/users/iherman> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/520723?v=4" .
<https://api.github.com/users/iherman> <http://schema.org/url> "https://github.com/iherman"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/iherman> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/478080353> <http://schema.org/creator> <https://api.github.com/users/iherman> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/478080353> <http://schema.org/startDate> "2019-03-29T17:19:00Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/478080353> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/478080353> <http://schema.org/description> "This issue was discussed in [a meeting](https://www.w3.org/2018/json-ld-wg/Meetings/Minutes/2019/2019-03-29-json-ld#section4-2).\r\n\r\n- `RESOLVED:  Close #153, no issue, no editorial change needed in the spec.`\r\n<details><summary><i class=\"differentiate\">View the transcript</i></summary>\r\n4.2. Sealing and Order (propose close, no issue)<br/>\r\nRob Sanderson: Link: <a href=\"https://github.com/w3c/json-ld-syntax/issues/153\">https://github.com/w3c/json-ld-syntax/issues/153</a><br/>\r\n<b>rubenworks:</b> I was reading the new 1.1 features, including sealing (now renamed protected)<br/>\r\n… the example shows a property defined as sealed, then a second definition fails to override it<br/>\r\n… but it was not entirely clear to me whether this worked when reversing the order of the definitions<br/>\r\n… but pchampin pointed out that the spec reads “prevent further redefinitions”<br/>\r\n… may be it would still be good to add an example to make it clearer<br/>\r\nDave Longley: +1 editorial, we’re in agreement<br/>\r\nRob Sanderson: it is mostly editorial<br/>\r\nGregg Kellogg: I think there are already many examples<br/>\r\n… maybe a test case would be better here<br/>\r\nIvan Herman: this could be mentioned in the Best Practices document<br/>\r\n… I’m always the guy who asks for more examples, but in this case I agree with gkellogg<br/>\r\nProposed resolution: Close #153, no issue, no editorial change needed in the spec. (Rob Sanderson)<br/>\r\nRob Sanderson: +1<br/>\r\nRuben Taelman: +1<br/>\r\nPierre-Antoine Champin: +1<br/>\r\nGregg Kellogg: +1<br/>\r\nDave Longley: +1<br/>\r\nTim Cole: +1<br/>\r\nDavid I. Lehn: +1<br/>\r\nDavid Newbury: +1<br/>\r\nIvan Herman: +1<br/>\r\nResolution #2: Close #153, no issue, no editorial change needed in the spec.<br/>\r\n</details>" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/478080574> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/140#issuecomment-478080574"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/140> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/478080574> .
<https://api.github.com/users/iherman> <http://schema.org/accountId> "iherman" .
<https://api.github.com/users/iherman> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/520723?v=4" .
<https://api.github.com/users/iherman> <http://schema.org/url> "https://github.com/iherman"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/iherman> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/478080574> <http://schema.org/creator> <https://api.github.com/users/iherman> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/478080574> <http://schema.org/startDate> "2019-03-29T17:19:41Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/478080574> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/478080574> <http://schema.org/description> "This issue was discussed in [a meeting](https://www.w3.org/2018/json-ld-wg/Meetings/Minutes/2019/2019-03-29-json-ld#section4-3).\r\n\r\n- `RESOLVED:  Close #140 as a feature not a bug - no need to use it if you don’t want it, and gives consistency`\r\n<details><summary><i class=\"differentiate\">View the transcript</i></summary>\r\n4.3. @container [@id, @set]<br/>\r\nRob Sanderson: Link: <a href=\"https://github.com/w3c/json-ld-syntax/issues/140\">https://github.com/w3c/json-ld-syntax/issues/140</a><br/>\r\nRob Sanderson: this issue questions the relevance of @container [@id, @set]<br/>\r\n… many people have answered, in the line of “it’s a feature, not a bug”<br/>\r\nProposed resolution: Close #140 as a feature not a bug - no need to use it if you don’t want it, and gives consistency (Rob Sanderson)<br/>\r\nRob Sanderson: +1<br/>\r\nGregg Kellogg: +1<br/>\r\nDave Longley: +1<br/>\r\nTim Cole: +1<br/>\r\nDavid Newbury: +1<br/>\r\nGregg Kellogg: it is about consistency and orthogonality, despite the lack of use case<br/>\r\nPierre-Antoine Champin: +1<br/>\r\nRuben Taelman: +1<br/>\r\nAdam Soroka: +1<br/>\r\nIvan Herman: +1<br/>\r\nResolution #3: Close #140 as a feature not a bug - no need to use it if you don’t want it, and gives consistency<br/>\r\nDavid I. Lehn: +1<br/>\r\n</details>" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/478081021> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/19#issuecomment-478081021"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/19> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/478081021> .
<https://api.github.com/users/iherman> <http://schema.org/accountId> "iherman" .
<https://api.github.com/users/iherman> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/520723?v=4" .
<https://api.github.com/users/iherman> <http://schema.org/url> "https://github.com/iherman"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/iherman> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/478081021> <http://schema.org/creator> <https://api.github.com/users/iherman> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/478081021> <http://schema.org/startDate> "2019-03-29T17:21:07Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/478081021> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/478081021> <http://schema.org/description> "This issue was discussed in [a meeting](https://www.w3.org/2018/json-ld-wg/Meetings/Minutes/2019/2019-03-29-json-ld#section4-6).\r\n\r\n- `ACTION:  propose a concrete solution, considering link and nest (Rob Sanderson)`\r\n- `ACTION:  propose a concrete solution, considering link and nest (David Newbury)`\r\n<details><summary><i class=\"differentiate\">View the transcript</i></summary>\r\nIndexing without a predicate<br/>\r\nRob Sanderson: Link: <a href=\"https://github.com/w3c/json-ld-syntax/issues/19\">https://github.com/w3c/json-ld-syntax/issues/19</a><br/>\r\nRob Sanderson: we discussed at the F2F<br/>\r\n… there was an action of gkellogg and pchampin to look into it<br/>\r\nGregg Kellogg: I didn’t have time to look into it yet<br/>\r\nPierre-Antoine Champin: me neither<br/>\r\nRob Sanderson: when an item appears randomly in multiple places in the document,<br/>\r\n… it would be nice to put this item in a kind of “bucket” where its full description is stored,<br/>\r\n… rather than to have to browse the full document to find the random place where the full description is included<br/>\r\nIvan Herman: this is essentially the ‘itemref’ feature of microdata<br/>\r\n… copying that mechanism in JSON-LD seems complicated, but maybe not impossible<br/>\r\nDave Longley: sounds like a framing issue, similar to \"@anywhere\"<br/>\r\nRob Sanderson: this is not only related to framing, you need something in the context as well<br/>\r\nGregg Kellogg: this is indeed very much like ‘itemref’<br/>\r\n… my concern is that it will be complicated if we want to ensure round-trip (compaction/expansion)<br/>\r\n… like we do for other features<br/>\r\n… that could be done using default and framing, but seems like a very complex solution<br/>\r\nDave Longley: we do have special keywords in the framing compaction algorithm that are treated differently to avoid dropping undefined terms, etc.<br/>\r\nDavid Newbury: is there a way to handle this as a post-processing step?<br/>\r\nGregg Kellogg: the RDFa reference mechanism involves looking in the graph, adding triples and remove triples that were part of the pattern<br/>\r\nIvan Herman: if we do that (i.e., reproduce the RDFa ref mechanism) people will run away screaming<br/>\r\n… what we are trying to do is some sort of internal references, essentially relative URIs<br/>\r\n… it would still require to define a bush and not a tree, which forces us to use @graph,<br/>\r\n… but it might work<br/>\r\nDave Longley: if we consider working in memory, consider @link which is implemented in the Javascript processor<br/>\r\n… to ensure that an object is stored only in one place<br/>\r\nGregg Kellogg: the problem is that you would typically create cycles internally<br/>\r\n… I’m not sure relative URIs can be used without introducing a level of indirection<br/>\r\nAction #3: propose a concrete solution, considering link and nest (Rob Sanderson)<br/>\r\nAction #4: propose a concrete solution, considering link and nest (David Newbury)<br/>\r\nGregg Kellogg: if we are moving towards better support for streaming profiles<br/>\r\n… we can’t rely on in-memory storage only<br/>\r\n… You would need a lot of bookkeeping to handle this.<br/>\r\n</details>" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/478156480> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/129#issuecomment-478156480"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/129> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/478156480> .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/478156480> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/478156480> <http://schema.org/startDate> "2019-03-29T21:32:36Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/478156480> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/478156480> <http://schema.org/description> "Closed via https://github.com/w3c/json-ld-syntax/issues/155." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/480608312> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/140#issuecomment-480608312"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/140> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/480608312> .
<https://api.github.com/users/VladimirAlexiev> <http://schema.org/accountId> "VladimirAlexiev" .
<https://api.github.com/users/VladimirAlexiev> <http://schema.org/image> "https://avatars3.githubusercontent.com/u/536250?v=4" .
<https://api.github.com/users/VladimirAlexiev> <http://schema.org/url> "https://github.com/VladimirAlexiev"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/VladimirAlexiev> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/480608312> <http://schema.org/creator> <https://api.github.com/users/VladimirAlexiev> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/480608312> <http://schema.org/startDate> "2019-04-07T16:40:43Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/480608312> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/480608312> <http://schema.org/description> "@aj6f and @gkellogg thanks for the explanations!\r\nIn this case, as @dlongley said, it'd be useful to add a similar explanation to the spec.\r\n\r\nWow, the prev comment demonstrates an enviable level of automation on part of the w3c :-)" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/480891128> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/19#issuecomment-480891128"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/19> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/480891128> .
<https://api.github.com/users/azaroth42> <http://schema.org/accountId> "azaroth42" .
<https://api.github.com/users/azaroth42> <http://schema.org/image> "https://avatars3.githubusercontent.com/u/871868?v=4" .
<https://api.github.com/users/azaroth42> <http://schema.org/url> "https://github.com/azaroth42"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/azaroth42> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/480891128> <http://schema.org/creator> <https://api.github.com/users/azaroth42> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/480891128> <http://schema.org/startDate> "2019-04-08T15:54:16Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/480891128> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/480891128> <http://schema.org/description> "\r\nRequirement:  Functionality that allows resource nodes to be serialized at a particular location in the JSON tree, rather than where they are encountered. There isn't necessarily a direct relationship between the top resource node in the tree and the resource node to be serialized (similar to `@nest`) and the serialization should be a JSON object where the URI of the node is the key (similar to `@container @id`).  \r\n\r\nRationale: There are many use cases (e.g. IIIF, Linked Art, JSON-API,...) where nodes are referred to sporadically throughout the graph, but without any particular obvious first location. Embedding them always would be overkill in many situations, and the cost to find the first occurrence is arbitrarily high based on the size of the tree. Instead, having them at a knowable location makes this a single look up, rather than a tree traversal.\r\n\r\nProposed Solution:\r\n\r\nIntroduce a new keyword `@included` which may be present only as a key at the top of the serialized tree. It may be aliased. It functions like `@container @id`, in that the keys are terms that resolve to URIs, and the values are JSON objects that have the properties of the resource. Resources in the tree can refer to the URIs of nodes in the `@included` property in the normal way.\r\n\r\nLike `@nest`, `@included` in instance data does not generate a triple during expansion, instead expansion simply descends into the JSON object and processes each key/value into the graph.\r\n\r\nAnd now the solution splits into two options for discussion:\r\n\r\nOption A - framing:\r\n\r\nIn framing, `@included` is a new value for the `@embed` directive.  `@embed: @included` means to instead embed the resource encountered in the `@included` instance data property, rather than where it is currently encountered.  \r\n\r\nOption B - compaction:\r\n\r\nIn a context, a property may be defined as `@type: @included`. This means that all of the values of the property are to be compacted into the `@included` structure and the (compacted) URI of the resource is used where the reference to the resource is encountered. As `@included` only works for resources, in these situations it also has the same meaning as `@type: @id` in that the value is a URI. \r\n" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/481328138> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/136#issuecomment-481328138"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/136> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/481328138> .
<https://api.github.com/users/dlongley> <http://schema.org/accountId> "dlongley" .
<https://api.github.com/users/dlongley> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/168137?v=4" .
<https://api.github.com/users/dlongley> <http://schema.org/url> "https://github.com/dlongley"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/dlongley> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/481328138> <http://schema.org/creator> <https://api.github.com/users/dlongley> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/481328138> <http://schema.org/startDate> "2019-04-09T16:38:22Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/481328138> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/481328138> <http://schema.org/description> "I think an `@type` based pattern is fine, however, when there are conflicts with existing `@protected` terms, processing will fail. You cannot mix types with existing meaning, just like you'd have trouble doing multiple inheritance (or it is prohibited in many languages). So you can't erase existing `@protected` terms using `@type` scoped term definitions." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/483137083> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/136#issuecomment-483137083"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/136> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/483137083> .
<https://api.github.com/users/iherman> <http://schema.org/accountId> "iherman" .
<https://api.github.com/users/iherman> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/520723?v=4" .
<https://api.github.com/users/iherman> <http://schema.org/url> "https://github.com/iherman"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/iherman> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/483137083> <http://schema.org/creator> <https://api.github.com/users/iherman> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/483137083> <http://schema.org/startDate> "2019-04-15T07:22:37Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/483137083> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/483137083> <http://schema.org/description> "This issue was discussed in [a meeting](https://www.w3.org/2018/json-ld-wg/Meetings/Minutes/2019/2019-04-12-json-ld#section2).\r\n\r\n- `RESOLVED:  Allow @protected terms to be changed only via property scoped contexts, and not via setting the active context to null`\r\n- `RESOLVED:  Any attempt to change or clear a @protected term results in an error being raised, other than as provided for already`\r\n<details><summary><i class=\"differentiate\">View the transcript</i></summary>\r\nAdditional restriction to @sealed term clearing<br/>\r\nIvan Herman: link: <a href=\"https://github.com/w3c/json-ld-syntax/issues/136\">https://github.com/w3c/json-ld-syntax/issues/136</a><br/>\r\nBenjamin Young: Protected Term Definition - <a href=\"https://w3c.github.io/json-ld-syntax/#protected-term-definitions\">https://w3c.github.io/json-ld-syntax/#protected-term-definitions</a><br/>\r\nBenjamin Young: we’re discussing 136. There are some already-merged PRs and there are some tests<br/>\r\n… this topic is our exclusive focus for today<br/>\r\n… because this would really help VCWG<br/>\r\n… this piece of work is valuable to support them NOT taking JSON-LD out of the spec<br/>\r\n… let’s start with a summary of the editorial work<br/>\r\nGregg Kellogg: I think there are some PRs that have been completed on the syntax side<br/>\r\nPierre-Antoine Champin: all related PRs have been merged<br/>\r\nGregg Kellogg: I think we still need to add the mechanism that would disallow unsealing via @context:null<br/>\r\nDave Longley: we’re just looking exactly what gkellogg said<br/>\r\n… what’s currently there would allow for the protection to be removed merely via @context:null anywhere in the doc<br/>\r\n… which doesn’t do what we actually need from the feature<br/>\r\n… the point is to be able to call out terms so that people using the context can be minimal with processing on those terms<br/>\r\n… with but one little change, we can accomplish that<br/>\r\n… just by restricting to a scoped context<br/>\r\n… that will provide the needed assurance<br/>\r\nPierre-Antoine Champin: to be clear, the @context:null could be on any protected definition?<br/>\r\nDave Longley: correct<br/>\r\n… should not complicate implementations<br/>\r\nRob Sanderson: if a @context:null is encountered elsewhere than in a property-scoped context, it changes from wiping out everything to just wiping out non-protected terms?<br/>\r\nDave Longley: no, that should be an error under our change<br/>\r\n… because that would be trying to remove protection illegally<br/>\r\nRob Sanderson: that seems backwards-incompatible<br/>\r\n… it changes the meaning of @context:null<br/>\r\nDave Longley: well, no, because there were never protected terms before<br/>\r\nRob Sanderson: 2nd opinion would be desirable<br/>\r\nGregg Kellogg: what we had done before was not throw errors but issue warnings<br/>\r\nDavid I. Lehn: protectedMode and tests here: <a href=\"https://github.com/w3c/json-ld-api/pull/69\">https://github.com/w3c/json-ld-api/pull/69</a><br/>\r\nGregg Kellogg: dlehn has an issue for a “protected mode” flag which would switch between errors and warnings<br/>\r\n… are you putting those together or something totally new?<br/>\r\nDave Longley: we’ve implemented both, and we’re okay with either, but we think that throwing an error would be cleaner, but we can default to the warning<br/>\r\n… and in that case, the protected terms would just not be redefined<br/>\r\n… we have tests for either case<br/>\r\n… but we thought that defaulting to error would be cleaner<br/>\r\nPierre-Antoine Champin: just wanted to point out that property-scoped context aren’t in 1.0<br/>\r\n… @context:null in a property-scoped definitions simply doesn’t exist now,<br/>\r\n… so we can’t break extant JSON-LD<br/>\r\n… [then changes his mind]<br/>\r\nGregg Kellogg: the only way to provoke this is via a protected term, which didn’t exist in 1.0<br/>\r\n… so you couldn’t produce this error that way<br/>\r\n… I think that adding flags to the API is waffling<br/>\r\n… we should choose a party to go to<br/>\r\n… in my own processor I run testing in a “validation” mode which is strict<br/>\r\n… this might be such a thing<br/>\r\n… but for conformance, maybe we should just pick a road here<br/>\r\nRob Sanderson: Here’s when it breaks 1.0: { @context: [ \"1.1-context-with-protected\", \"existing-´1.0-context-with-null\"] ... }<br/>\r\nRob Sanderson: if the intent is that extant 1.0 contexts work as written<br/>\r\n… then adding “protected” that can’t be reset via @context:null<br/>\r\n… won’t work if a 1.0 context began with @context:null but is used at a point where protected terms are in scope<br/>\r\nGregg Kellogg: it used to be that we run in 1.0 until we see a marker for 1.1, but we now start in 1.1<br/>\r\nBenjamin Young: current processing model triggering definition <a href=\"https://w3c.github.io/json-ld-syntax/#dfn-processing-mode\">https://w3c.github.io/json-ld-syntax/#dfn-processing-mode</a><br/>\r\nRob Sanderson: so 1.0 contexts still work as expected and danbri won’t come gunning for us?<br/>\r\n… or not?<br/>\r\n… are we going to get objections from Google or MS ?<br/>\r\n… if we can put this into the set of allowable incompatibilities<br/>\r\n… I won’t stand in the way<br/>\r\nIvan Herman: to prepare for a possible objection, is it worth to add a note to the document making that clear?<br/>\r\nRob Sanderson: +1 from me to calling it out specifically<br/>\r\nGregg Kellogg: to say that this is a 1.1 feature?<br/>\r\nIvan Herman: question may come up, and we can preempt them in this case<br/>\r\n… either in the spec or the best practices doc<br/>\r\nBenjamin Young: if it risks a formal objection we should put it in the docs<br/>\r\nGregg Kellogg: it’s not necessary to qualify generating an error if the attempt to clear out the context with a protected-mode term in scope for 1.1.<br/>\r\nAdam Soroka: [and I lost the end of the thought]<br/>\r\nGregg Kellogg: that might be a point at which we could add a note<br/>\r\n… that this error cannot be generated from a proc running in 1.0 mode<br/>\r\nDavid Newbury: when we’re talking about 1.0 v 1.1 mode for compatibility<br/>\r\nAdam Soroka: .. we’re talking about the doc being processed<br/>\r\nDavid Newbury: not the context of the context<br/>\r\nGregg Kellogg: documents aren’t 1.0 or 1.1<br/>\r\n… the processing is 1.0 or 1.1<br/>\r\n… contriolled by @version in the context<br/>\r\nBenjamin Young: the @version definition <a href=\"https://w3c.github.io/json-ld-syntax/#h-note-1\">https://w3c.github.io/json-ld-syntax/#h-note-1</a><br/>\r\nGregg Kellogg: but that can happen in any context<br/>\r\nDavid Newbury: right, but that doesn’t change the context, right, just its interpretation in the context (different use of the word) in which it is being processed?<br/>\r\nRob Sanderson: I understand the pattern of restricting to property-scoped contexts<br/>\r\n… but is that the limit?<br/>\r\nDave Longley: it’s acceptable to put protected type-scoped definition<br/>\r\n… but you can’t clear terms there<br/>\r\n… that would lead to multiple inheritance<br/>\r\n… think of protected terms as a “base class” for anything in the doc<br/>\r\n… appending a type to any node would change the semantics<br/>\r\n… which misses the whole point, which is to make processing easier<br/>\r\nRob Sanderson: we can’t limit the types assigned to a resource<br/>\r\n… and type-scoped defns in this way could lead to collisions.<br/>\r\nGregg Kellogg: I implied something like this in an earlier version<br/>\r\n… what would happen is<br/>\r\n… when you expand based on a property which is a protected term<br/>\r\n… that is when you look for embedded context associated with that term<br/>\r\n… . that is when you could see @contxt:null<br/>\r\n… you detect that by calling expansion with some option that includes the term at hand<br/>\r\nDave Longley: we ran into no gotchas<br/>\r\n… we did it with both warning and error<br/>\r\n… it was simple, the hardest part was the warning<br/>\r\n… tracking when you can clear protection or not was actually fairly simple<br/>\r\nGregg Kellogg: ready with a Pull Request?<br/>\r\nDave Longley: not quite, but quite close<br/>\r\nBenjamin Young: <a href=\"https://github.com/w3c/json-ld-api/pull/69\">https://github.com/w3c/json-ld-api/pull/69</a><br/>\r\nBenjamin Young: Add @protected tests and a protectedMode flag.<br/>\r\nDave Longley: yeah, that looks like the right PR<br/>\r\nDavid I. Lehn: the related is implementation PR is here: <a href=\"https://github.com/digitalbazaar/jsonld.js/pull/289\">https://github.com/digitalbazaar/jsonld.js/pull/289</a><br/>\r\nPierre-Antoine Champin: I can edit the current section on “protected” in the syntax document, to reflect those changes<br/>\r\nDave Longley: that PR should cover all the bases<br/>\r\n… clearing things when you should be bale to, when you shouldn’t…<br/>\r\nGregg Kellogg: some updates look to be needed<br/>\r\n… some test are failing and it’s coming from Digital Bazaar’s repo<br/>\r\nDave Longley: we can move the PR, np<br/>\r\nBenjamin Young: this PR has the protected mode warning/error flag on the API<br/>\r\n… we can massage that independent of the PR<br/>\r\nIvan Herman: firstly we should formally resolve the issue in a very clear way<br/>\r\n… but also we need a statement or something from this WG making it clear that this is a feature that is frozen and will not be removed<br/>\r\nDave Longley: yes, we need that reassurance<br/>\r\nIvan Herman: we have to produce that<br/>\r\n… a similar situation (JSON-LD being behind) can happen with WoT WG as well<br/>\r\n… they will need the same kind of things<br/>\r\n… we could produce a blog<br/>\r\n… saying that all features in the document are stable in the sense that<br/>\r\n… we don’t expect to remove them<br/>\r\n… would that work for you?<br/>\r\nDave Longley: my understanding is that it would<br/>\r\nGregg Kellogg: when we talked about freezing before, I said then that we need to get out a WD<br/>\r\n… I don’t think we can point at an editor’s draft for such an assurance<br/>\r\n… so what’s the timing for that?<br/>\r\nIvan Herman: for a CR, for which you are running right now<br/>\r\n… having a fresh WD from JSON-LD WG should be enough<br/>\r\n… but getting to Rec would mean that isn’t enough<br/>\r\n… we have a publishing process through which to go, and it could take 2-3 weeks<br/>\r\nDave Longley: We’re already in CR<br/>\r\n… 2-3 weeks doesn’t change anything<br/>\r\n… we prefer sooner rather than later<br/>\r\n… this will help us get through a number of issues<br/>\r\nIvan Herman: and helps you with the discussion you are having with commenters<br/>\r\nRob Sanderson: let’s say we have a WD within 1-2 weeks<br/>\r\n… and get the feedback<br/>\r\n… then write the blog post saying “No more new features”<br/>\r\n… would be 3-4 weeks<br/>\r\nDave Longley: yes, but TBC all we need is “these features won’t be taken out”, not “no new features”<br/>\r\nRob Sanderson: if we do hit timeline issues, we could offer something more than a blog post for VCWG in particular<br/>\r\nDave Longley: a simple statement would be acceptable<br/>\r\nGregg Kellogg: we do need to resolve “warnings vs. errors”<br/>\r\nRob Sanderson: we need to discuss that beforehand<br/>\r\nDave Longley: I don’t want to prevent people from writing nonstandard implementations that use warnings,<br/>\r\n… I was concerned by not having this behavior be configurable<br/>\r\nProposed resolution: attempts to override @protected terms will throw an error during processing in 1.1 mode (Benjamin Young)<br/>\r\nAdam Soroka: +1<br/>\r\nAdam Soroka: me oh, good point<br/>\r\nAdam Soroka: [general discussion about how to advance the wording of this propsoal]<br/>\r\nDave Longley: don’t want to confuse people with wording about when you can use @context:null<br/>\r\nGregg Kellogg: also, terms aren’t really changed by that action, they are cleared<br/>\r\n… @context:null doesn’t change terms, it clears them<br/>\r\nRob Sanderson: I thought you didn’t need to set @context:null to alter a term<br/>\r\nGregg Kellogg: what if you set a term defintion to null?<br/>\r\nRob Sanderson: we can put that off until later<br/>\r\nRob Sanderson: {\"@context\": {\"protected\": {\"@id\": \"something\", \"@protected\": True}, \"extension\": {\"@context\": {\"protected\": {\"@id\": \"something else\"}}}<br/>\r\nRob Sanderson: I believe that given our current definitions, that ^^^ would be acceptable<br/>\r\n… you should be able to set a term directly to something else<br/>\r\nDave Longley: as long as you are property-scoped, you can wipe out everything, but yes, you could go at only a single term<br/>\r\nGregg Kellogg: and 1.0 does allow setting a single term to null<br/>\r\nProposed resolution: Allow @protected terms to be changed only via property scoped contexts, and not via setting the active context to null (Benjamin Young)<br/>\r\nDave Longley: +1 (of course, setting the context to null within a property scoped context is also allowed)<br/>\r\nGregg Kellogg: +1<br/>\r\nRob Sanderson: +1<br/>\r\nRob Sanderson: we could make that a bit clearer as pointed out by dlongely<br/>\r\nJeff Mixter: +1<br/>\r\nBenjamin Young: +1<br/>\r\nDavid Newbury: +1<br/>\r\nIvan Herman: +1<br/>\r\nPierre-Antoine Champin: +1<br/>\r\nTim Cole: +1<br/>\r\nRuben Taelman: +1<br/>\r\nDavid I. Lehn: +1<br/>\r\nAdam Soroka: +1<br/>\r\nResolution #2: Allow @protected terms to be changed only via property scoped contexts, and not via setting the active context to null<br/>\r\nAdam Soroka: the proposal, just the text; I am on board with the idea<br/>\r\nGregg Kellogg: other than as previously provided<br/>\r\nDave Longley: +1 to Gregg<br/>\r\nDave Longley: +1 to the proposal<br/>\r\nBenjamin Young: what we’re saying is that it is indeed an error, not a warning<br/>\r\nIvan Herman: +1<br/>\r\nProposed resolution: Any attempt to change or clear a @protected term results in an error being raised, other than as provided for already (Rob Sanderson)<br/>\r\nDavid Newbury: +1<br/>\r\nGregg Kellogg: +1<br/>\r\nJeff Mixter: +1<br/>\r\nRob Sanderson: +1<br/>\r\nAdam Soroka: +1<br/>\r\nDave Longley: +1<br/>\r\nIvan Herman: +1<br/>\r\nTim Cole: +1<br/>\r\nPierre-Antoine Champin: +1<br/>\r\nRuben Taelman: +1<br/>\r\nBenjamin Young: +1<br/>\r\nDavid I. Lehn: +1<br/>\r\nResolution #3: Any attempt to change or clear a @protected term results in an error being raised, other than as provided for already<br/>\r\nGregg Kellogg: for the purpose of best time use we should look at issues on the GitHub management console to find what we need to do to get to a new WD<br/>\r\nIvan Herman: different topic?<br/>\r\nBenjamin Young: yeah, I have no other issues<br/>\r\n</details>" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/483306227> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/156#issuecomment-483306227"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/156> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/483306227> .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/483306227> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/483306227> <http://schema.org/startDate> "2019-04-15T15:42:38Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/483306227> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/483306227> <http://schema.org/description> "Looks like PR Preview isn't working again :(." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/483363148> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/157#issuecomment-483363148"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/157> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/483363148> .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/483363148> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/483363148> <http://schema.org/startDate> "2019-04-15T18:20:56Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/483363148> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/483363148> <http://schema.org/description> "For this to build cleanly, changes need to be synced to json-ld-wg/common. And, of course, eventually need to be deployed to other repos. I'll make the change I suggested above and do just that." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/483445552> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/158#issuecomment-483445552"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/158> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/483445552> .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/483445552> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/483445552> <http://schema.org/startDate> "2019-04-15T22:42:36Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/483445552> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/483445552> <http://schema.org/description> "Terms expand to IRIs, so it's not possible to define an alias for \"en-gb\" which is anything other than an IRI. The exception is for aliases to keywords, so `@none` works.\r\n\r\nThe algorithm does try to expand keys for all maps, including language maps, which is why `@none` aliasing works, but we're limited by how terms can be defined." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/483447455> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/158#issuecomment-483447455"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/158> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/483447455> .
<https://api.github.com/users/azaroth42> <http://schema.org/accountId> "azaroth42" .
<https://api.github.com/users/azaroth42> <http://schema.org/image> "https://avatars3.githubusercontent.com/u/871868?v=4" .
<https://api.github.com/users/azaroth42> <http://schema.org/url> "https://github.com/azaroth42"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/azaroth42> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/483447455> <http://schema.org/creator> <https://api.github.com/users/azaroth42> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/483447455> <http://schema.org/startDate> "2019-04-15T22:50:48Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/483447455> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/483447455> <http://schema.org/description> "\r\nYup, agreed that we can't do it now (because I tried, and got the error :) ) but is it valuable enough to add it?\r\n" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/483596846> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/158#issuecomment-483596846"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/158> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/483596846> .
<https://api.github.com/users/pchampin> <http://schema.org/accountId> "pchampin" .
<https://api.github.com/users/pchampin> <http://schema.org/image> "https://avatars1.githubusercontent.com/u/304612?v=4" .
<https://api.github.com/users/pchampin> <http://schema.org/url> "https://github.com/pchampin"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/pchampin> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/483596846> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/483596846> <http://schema.org/startDate> "2019-04-16T10:07:31Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/483596846> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/483596846> <http://schema.org/description> "I can sympathize with the argument that \"en-gb\" is not usable as a JS property, but I think that a general aliasing mechanism would add too much complexity.\r\n\r\nWhat about creating a special case for language maps, replacing all underscores in the keys by dashes (if I'm correct, BCP 47 tags can not contain underscores)?\r\n\r\nThis does add complexity to the overall spec (but much smaller than a general alias mechanism), and it does create a backward incompatibility (but only for cases which are somehow invalid anyway). Also, we this would create round-tripping problems...\r\n\r\nIs it really worth it?" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/483597714> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/158#issuecomment-483597714"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/158> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/483597714> .
<https://api.github.com/users/pchampin> <http://schema.org/accountId> "pchampin" .
<https://api.github.com/users/pchampin> <http://schema.org/image> "https://avatars1.githubusercontent.com/u/304612?v=4" .
<https://api.github.com/users/pchampin> <http://schema.org/url> "https://github.com/pchampin"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/pchampin> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/483597714> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/483597714> <http://schema.org/startDate> "2019-04-16T10:10:11Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/483597714> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/483597714> <http://schema.org/description> "Note also that it is always possible (although not as convenient) to use an index map:\r\n```json\r\n{\r\n  \"@context\": {\r\n    \"label\": { \"@id\": \"http://example.org/label\", \"@container\": \"@index\" }\r\n  },\r\n  \"label\": {\r\n    \"en_gb\": {\r\n      \"@value\": \"hello\",\r\n      \"@language\": \"en-gb\"\r\n    }\r\n  }\r\n}\r\n```" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/483704315> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/160#issuecomment-483704315"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/160> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/483704315> .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/483704315> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/483704315> <http://schema.org/startDate> "2019-04-16T15:13:20Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/483704315> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/483704315> <http://schema.org/description> "Note that node objects may contain `@graph`. Really graph objects purely define named graphs, either with an explicit id, or implicit. If properties are defined on the graph name, it’s a node object.  This is, of course, pretty messy, as it evolved over time, particularly with graph containers and maps. We should focus on cleaning up such nomenclature. " .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/484145382> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/161#issuecomment-484145382"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/161> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/484145382> .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/484145382> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/484145382> <http://schema.org/startDate> "2019-04-17T15:42:33Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/484145382> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/484145382> <http://schema.org/description> "This corresponds to https://github.com/w3c/json-ld-api/pull/79, and is a practical consideration of round-tripping issues. In theory, JSON numbers can be of arbitrary length, but in practice, implementations use IEEE floating point representations for numbers (JS in particular, but also Ruby). Consequently, there is a limit to the size of an integer that JSON can represent with fidelity to be < `1e21`.\r\n\r\nHowever, it may be that we don't need to reflect such interoperability issues in the Syntax document." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/484214752> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/145#issuecomment-484214752"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/145> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/484214752> .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/484214752> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/484214752> <http://schema.org/startDate> "2019-04-17T18:46:48Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/484214752> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/484214752> <http://schema.org/description> "Okay, I think that this, and w3c/json-ld-api#78 are ready. We can always tweak further." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/484350083> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/159#issuecomment-484350083"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/159> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/484350083> .
<https://api.github.com/users/azaroth42> <http://schema.org/accountId> "azaroth42" .
<https://api.github.com/users/azaroth42> <http://schema.org/image> "https://avatars3.githubusercontent.com/u/871868?v=4" .
<https://api.github.com/users/azaroth42> <http://schema.org/url> "https://github.com/azaroth42"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/azaroth42> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/484350083> <http://schema.org/creator> <https://api.github.com/users/azaroth42> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/484350083> <http://schema.org/startDate> "2019-04-18T04:17:56Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/484350083> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/484350083> <http://schema.org/description> "Propose that this is editorial, doesn't need discussion on a call." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/484350244> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/160#issuecomment-484350244"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/160> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/484350244> .
<https://api.github.com/users/azaroth42> <http://schema.org/accountId> "azaroth42" .
<https://api.github.com/users/azaroth42> <http://schema.org/image> "https://avatars3.githubusercontent.com/u/871868?v=4" .
<https://api.github.com/users/azaroth42> <http://schema.org/url> "https://github.com/azaroth42"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/azaroth42> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/484350244> <http://schema.org/creator> <https://api.github.com/users/azaroth42> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/484350244> <http://schema.org/startDate> "2019-04-18T04:18:57Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/484350244> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/484350244> <http://schema.org/description> "Seems like editorial work only? Or need to discuss on a call?" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/484353129> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/159#issuecomment-484353129"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/159> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/484353129> .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/484353129> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/484353129> <http://schema.org/startDate> "2019-04-18T04:38:46Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/484353129> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/484353129> <http://schema.org/description> "RDFa used “dc” for DC Terms, which was probably not a great idea in retrospect. I’d favor settling on dc11 and dct." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/484379581> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/159#issuecomment-484379581"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/159> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/484379581> .
<https://api.github.com/users/iherman> <http://schema.org/accountId> "iherman" .
<https://api.github.com/users/iherman> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/520723?v=4" .
<https://api.github.com/users/iherman> <http://schema.org/url> "https://github.com/iherman"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/iherman> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/484379581> <http://schema.org/creator> <https://api.github.com/users/iherman> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/484379581> <http://schema.org/startDate> "2019-04-18T06:55:53Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/484379581> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/484379581> <http://schema.org/description> "I have seen `dct` or `dcterms` a lot, not much `dc11`. I would opt for `dct`." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/484540176> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/159#issuecomment-484540176"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/159> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/484540176> .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/484540176> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/484540176> <http://schema.org/startDate> "2019-04-18T14:44:32Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/484540176> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/484540176> <http://schema.org/description> "I see you changed the “dc” term in the JSON-LD recommended context from terms to elements. I think there is a danger that our using “dc” for elements could be confusing because of this history. I’ve also seen “dce” used for elements." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/484568484> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/159#issuecomment-484568484"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/159> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/484568484> .
<https://api.github.com/users/iherman> <http://schema.org/accountId> "iherman" .
<https://api.github.com/users/iherman> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/520723?v=4" .
<https://api.github.com/users/iherman> <http://schema.org/url> "https://github.com/iherman"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/iherman> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/484568484> <http://schema.org/creator> <https://api.github.com/users/iherman> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/484568484> <http://schema.org/startDate> "2019-04-18T15:47:34Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/484568484> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/484568484> <http://schema.org/description> "The reason I changed `dc` was because [the schema.org context file](https://schema.org/docs/jsonldcontext.json) has\r\n\r\n```json\r\n\"dc\": \"http://purl.org/dc/elements/1.1/\",\r\n\"dcterms\": \"http://purl.org/dc/terms\"\r\n```\r\n\r\nI thought it is important to be in line with schema.org; lots of people may use these two already this way. I have added\r\n\r\n```json\r\n\"dct\" : \"http://purl.org/dc/terms\",\r\n\"dc11\": \"http://purl.org/dc/elements/1.1/\"\r\n```\r\n\r\nbecause I saw them somewhere else.\r\n\r\nUnless this really creates problems, I would propose we would align ourselves on the schema.org usage.\r\n" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/484572281> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/159#issuecomment-484572281"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/159> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/484572281> .
<https://api.github.com/users/azaroth42> <http://schema.org/accountId> "azaroth42" .
<https://api.github.com/users/azaroth42> <http://schema.org/image> "https://avatars3.githubusercontent.com/u/871868?v=4" .
<https://api.github.com/users/azaroth42> <http://schema.org/url> "https://github.com/azaroth42"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/azaroth42> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/484572281> <http://schema.org/creator> <https://api.github.com/users/azaroth42> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/484572281> <http://schema.org/startDate> "2019-04-18T15:58:02Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/484572281> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/484572281> <http://schema.org/description> "We (annos, and elsewhere, see below) have also used \"dc\" for elements and \"dcterms\" for terms.  I don't like \"dct\" as there's also a Dublin Core Types ontology.\r\n\r\nSee: \r\n * https://www.w3.org/ns/anno.jsonld\r\n * https://iiif.io/api/presentation/2/context.json\r\n * https://linked.art/ns/v1/linked-art.json \r\n\r\n\r\n" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/485058132> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/158#issuecomment-485058132"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/158> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/485058132> .
<https://api.github.com/users/iherman> <http://schema.org/accountId> "iherman" .
<https://api.github.com/users/iherman> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/520723?v=4" .
<https://api.github.com/users/iherman> <http://schema.org/url> "https://github.com/iherman"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/iherman> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/485058132> <http://schema.org/creator> <https://api.github.com/users/iherman> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/485058132> <http://schema.org/startDate> "2019-04-20T04:41:36Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/485058132> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/485058132> <http://schema.org/description> "This issue was discussed in [a meeting](https://www.w3.org/2018/json-ld-wg/Meetings/Minutes/2019/2019-04-19-json-ld#section4-1).\r\n\r\n- `RESOLVED:  Close syntax #158 won’t fix, too complicated for the value gained`\r\n<details><summary><i class=\"differentiate\">View the transcript</i></summary>\r\nlanguage aliasing<br/>\r\nRob Sanderson: link: <a href=\"https://github.com/w3c/json-ld-syntax/issues/158\">https://github.com/w3c/json-ld-syntax/issues/158</a><br/>\r\nRob Sanderson: Unless there are other people that are interested in this particular topic, I’m happy to close it.<br/>\r\n… We can alias @none to just none to get rid of @.<br/>\r\nGregg Kellogg: Aliasing lets us alias IRIs and keywords, but that’s it.<br/>\r\nGregg Kellogg: Because @none is a keyword, we can alias it but we can’t alias arbitrary string values.<br/>\r\nRob Sanderson: Yes, the thought was if we wanted to let some way of aliasing more things then en-us could be aliased to en_us for example. But as Gregg said that means introducing a new feature to do this. Unless there’s interest, I’m ready to close.<br/>\r\nProposed resolution: Close syntax #158 won’t fix, too complicated for the value gained (Rob Sanderson)<br/>\r\nRob Sanderson: +1<br/>\r\nGregg Kellogg: +1<br/>\r\nRuben Taelman: +1<br/>\r\nIvan Herman: +1<br/>\r\nDave Longley: +1<br/>\r\nResolution #2: Close syntax #158 won’t fix, too complicated for the value gained<br/>\r\nDavid I. Lehn: +1<br/>\r\n</details>" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/485578473> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/19#issuecomment-485578473"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/19> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/485578473> .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/485578473> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/485578473> <http://schema.org/startDate> "2019-04-22T22:46:40Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/485578473> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/485578473> <http://schema.org/description> "I think that flattening/folding included blocks needs to be done as part of expansion. I don't think the logic works for compaction, as there is no a-priori knowledge of what is in the include blocks. It might work in framing, though:\r\n\r\nIf the frame includes an `@include` block, then each node object which is framed is compared against the contents of each include object and replaced with a reference to that include block. However, the only way to know what term to use as the reference to the include block is to rely on the nesting defined for the properties contained in that block. This is particularly an issue for `@type`, which can't use this. In your examples, the same properties are used in each included block, so you can't rely on nesting here either.\r\n\r\nIt might be that you need to just use a single property, such as \"included\" (as defined in the context/frame somehow) so that each included block is a reference from this common property. This shouldn't affect expansion, but I don't see how to figure this out during framing.\r\n\r\nSo, for example, if you have something based on the original example from above:\r\n\r\n```json\r\n{\r\n  \"@context\": {\r\n    \"@vocab\": \"http://example/\",\r\n    \"@base\": \"http://example/\",\r\n    \"id\": \"@id\", \r\n    \"type\": \"@type\",\r\n    \"eg\": \"http://example/\",\r\n    \"classification\": {\"@type\": \"@included\"},\r\n    \"service\": {\"@type\": \"@included\"},\r\n    \"included\": \"@included\"\r\n  },\r\n  \"id\": \"1\",\r\n  \"type\": \"eg:Thing-with-Items\",\r\n  \"eg:items\": [\r\n    {\r\n      \"id\":\"2\",\r\n      \"classification\": \"enum:c6\",\r\n      \"service\": \"enum:s2\"\r\n    },\r\n    {\r\n      \"id\": \"27\",\r\n      \"classification\": \"enum:c6\"\r\n    }    \r\n  ],\r\n  \"included\": {\r\n    \"enum:c6\": {\"type\": \"eg:Type\", \"label\": \"Classification 6\"},\r\n    \"enum:p1\": {\"type\": \"eg:Person\", \"label\": \"Person 1\"},\r\n    \"enum:s2\": {\"type\": \"eg:Service\", \"label\": \"Login Service\"}\r\n  }  \r\n}\r\n```\r\n\r\nThis could expand as follows:\r\n\r\n```json\r\n[{\r\n  \"@id\": \"http://example/1\",\r\n  \"@type\": [\"http://example/Thing-with-Items\"],\r\n  \"http://example/items\": [{\r\n    \"@id\": \"http://example/2\",\r\n    \"@type\": [\"http:/example/Type\", \"http://example/Service\"],\r\n    \"http://example/label\": [\r\n      {\"@value\": \"Classification 6\"},\r\n      {\"@value\": \"Login Service\"}\r\n    ]\r\n  }, {\r\n    \"@id\": \"http://example/27\",\r\n    \"@type\": [\"http:/example/Type\"],\r\n    \"http://example/label\": [\r\n      {\"@value\": \"Classification 6\"}\r\n    ]\r\n  }]\r\n}]\r\n```\r\n\r\nA frame to get back close might look like the following:\r\n\r\n```json\r\n{\r\n  \"@context\": {\r\n    \"@vocab\": \"http://example/\",\r\n    \"@base\": \"http://example/\",\r\n    \"id\": \"@id\", \r\n    \"type\": \"@type\",\r\n    \"eg\": \"http://example/\",\r\n    \"classification\": {\"@type\": \"@included\"},\r\n    \"service\": {\"@type\": \"@included\"},\r\n    \"included\": \"@included\"\r\n  },\r\n  \"type\": \"eg:Thing-with-Items\",\r\n  \"eg:items\": {},\r\n  \"included\": {\r\n    \"enum:c6\": {\"type\": \"eg:Type\", \"label\": \"Classification 6\"},\r\n    \"enum:p1\": {\"type\": \"eg:Person\", \"label\": \"Person 1\"},\r\n    \"enum:s2\": {\"type\": \"eg:Service\", \"label\": \"Login Service\"}\r\n  }  \r\n}\r\n```\r\n\r\nThis could get you back to the following, but it would choose just one of \"classification\" or \"service\" to contain the references.\r\n\r\n```json\r\n{\r\n  \"@context\": {\r\n    \"@vocab\": \"http://example/\",\r\n    \"@base\": \"http://example/\",\r\n    \"id\": \"@id\", \r\n    \"type\": \"@type\",\r\n    \"eg\": \"http://example/\",\r\n    \"classification\": {\"@type\": \"@included\"},\r\n    \"service\": {\"@type\": \"@included\"},\r\n    \"included\": \"@included\"\r\n  },\r\n  \"id\": \"1\",\r\n  \"type\": \"eg:Thing-with-Items\",\r\n  \"eg:items\": [\r\n    {\r\n      \"id\":\"2\",\r\n      \"classification\": [\"enum:c6\", \"enum:s2\"]\r\n    },\r\n    {\r\n      \"id\": \"27\",\r\n      \"classification\": \"enum:c6\"\r\n    }    \r\n  ],\r\n  \"included\": {\r\n    \"enum:c6\": {\"type\": \"eg:Type\", \"label\": \"Classification 6\"},\r\n    \"enum:p1\": {\"type\": \"eg:Person\", \"label\": \"Person 1\"},\r\n    \"enum:s2\": {\"type\": \"eg:Service\", \"label\": \"Login Service\"}\r\n  }  \r\n}\r\n```\r\n" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/485936521> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/155#issuecomment-485936521"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/155> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/485936521> .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/485936521> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/485936521> <http://schema.org/startDate> "2019-04-23T19:11:27Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/485936521> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/485936521> <http://schema.org/description> "Reported in https://lists.w3.org/Archives/Public/public-rdf-comments/2019Apr/0000.html and added as an erratum in https://www.w3.org/2001/sw/wiki/JSON_LD_Errata." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/485940557> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/165#issuecomment-485940557"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/165> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/485940557> .
<https://api.github.com/users/azaroth42> <http://schema.org/accountId> "azaroth42" .
<https://api.github.com/users/azaroth42> <http://schema.org/image> "https://avatars3.githubusercontent.com/u/871868?v=4" .
<https://api.github.com/users/azaroth42> <http://schema.org/url> "https://github.com/azaroth42"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/azaroth42> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/485940557> <http://schema.org/creator> <https://api.github.com/users/azaroth42> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/485940557> <http://schema.org/startDate> "2019-04-23T19:24:11Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/485940557> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/485940557> <http://schema.org/description> "Yup, this is a common misunderstanding unfortunately. One that I have had in the past from reading the specs!  You can't add an `@type` value into a context where the type is a class, and thus have the class added to the triples. That level of transformation of content is outside of the scope of JSON-LD in its currently chartered work.\r\n\r\nSee also: https://github.com/w3c/json-ld-syntax/issues/76 and #31. Similarly #7 and #15 are transformations, though not around `@type`.\r\n\r\nThanks!\r\n\r\n\r\n\r\n\r\n" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/485989950> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/166#issuecomment-485989950"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/166> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/485989950> .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/485989950> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/485989950> <http://schema.org/startDate> "2019-04-23T21:56:51Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/485989950> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/485989950> <http://schema.org/description> "Note that this still allows the use of absolute IRIs as term definition keys, which was specifically called out in 1.0. [The erratum](https://www.w3.org/2001/sw/wiki/JSON_LD_Errata) suggests that this be disallowed, so I'd like feedback on that particular component.\r\n\r\ncc/ @msporny" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/485998111> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/166#issuecomment-485998111"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/166> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/485998111> .
<https://api.github.com/users/dlongley> <http://schema.org/accountId> "dlongley" .
<https://api.github.com/users/dlongley> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/168137?v=4" .
<https://api.github.com/users/dlongley> <http://schema.org/url> "https://github.com/dlongley"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/dlongley> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/485998111> <http://schema.org/creator> <https://api.github.com/users/dlongley> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/485998111> <http://schema.org/startDate> "2019-04-23T22:29:16Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/485998111> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/485998111> <http://schema.org/description> "@gkellogg,\r\n\r\nA data point I found... the current [schema.org context](https://schema.org/docs/jsonldcontext.jsonld) has the following set of absolute IRI term definitions (that map to themselves) at the end:\r\n\r\n```\r\n        \"http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#Automotive_Ontology_Working_Group\": {\"@id\": \"http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#Automotive_Ontology_Working_Group\"},\r\n        \"http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#FIBO\": {\"@id\": \"http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#FIBO\"},\r\n        \"http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#GLEIF\": {\"@id\": \"http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#GLEIF\"},\r\n        \"http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#IIT-CNR.it\": {\"@id\": \"http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#IIT-CNR.it\"},\r\n        \"http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#MBZ\": {\"@id\": \"http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#MBZ\"},\r\n        \"http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#Tourism\": {\"@id\": \"http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#Tourism\"},\r\n        \"http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_ActionCollabClass\": {\"@id\": \"http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_ActionCollabClass\"},\r\n        \"http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_DatasetClass\": {\"@id\": \"http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_DatasetClass\"},\r\n        \"http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsClass\": {\"@id\": \"http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsClass\"},\r\n        \"http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms\": {\"@id\": \"http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_GoodRelationsTerms\"},\r\n        \"http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_LRMIClass\": {\"@id\": \"http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_LRMIClass\"},\r\n        \"http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_QAStackExchange\": {\"@id\": \"http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_QAStackExchange\"},\r\n        \"http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_WikiDoc\": {\"@id\": \"http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_WikiDoc\"},\r\n        \"http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_bibex\": {\"@id\": \"http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_bibex\"},\r\n        \"http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_rNews\": {\"@id\": \"http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_rNews\"},\r\n        \"https://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#STI_Accommodation_Ontology\": {\"@id\": \"https://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#STI_Accommodation_Ontology\"},\r\n        \"https://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#TP\": {\"@id\": \"https://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#TP\"},\r\n        \"https://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#TP-draws\": {\"@id\": \"https://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#TP-draws\"}\r\n```\r\n\r\nI don't know why." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/486020528> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/166#issuecomment-486020528"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/166> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/486020528> .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/486020528> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/486020528> <http://schema.org/startDate> "2019-04-24T00:19:10Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/486020528> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/486020528> <http://schema.org/description> "They don’t seem to violate the principle of creating a term which expands to something other than the key, but they seem nonsensical. My guess is that they’re an artifact of the production. @danbri? @RichardWallis?" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/486176957> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/166#issuecomment-486176957"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/166> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/486176957> .
<https://api.github.com/users/RichardWallis> <http://schema.org/accountId> "RichardWallis" .
<https://api.github.com/users/RichardWallis> <http://schema.org/image> "https://avatars1.githubusercontent.com/u/13315406?v=4" .
<https://api.github.com/users/RichardWallis> <http://schema.org/url> "https://github.com/RichardWallis"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/RichardWallis> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/486176957> <http://schema.org/creator> <https://api.github.com/users/RichardWallis> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/486176957> <http://schema.org/startDate> "2019-04-24T11:04:28Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/486176957> <http://example.com/ns#authorAssociation> "NONE" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/486176957> <http://schema.org/description> "> My guess is that they’re an artifact of the production. @danbri? @RichardWallis?\r\n\r\nYes they are.  They are placeholders in the vocabulary definition to associate acknowledgement of contribution message.  eg.\r\n```schema:AudioObject a rdfs:Class ;\r\n    rdfs:label \"AudioObject\" ;\r\n    dcterms:source <http://www.w3.org/wiki/WebSchemas/SchemaDotOrgSources#source_rNews> ;\r\n    rdfs:comment \"An audio file.\" ;\r\n    rdfs:subClassOf schema:MediaObject .\r\n```\r\n " .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/486243847> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/165#issuecomment-486243847"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/165> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/486243847> .
<https://api.github.com/users/keyvan-m-sadeghi> <http://schema.org/accountId> "keyvan-m-sadeghi" .
<https://api.github.com/users/keyvan-m-sadeghi> <http://schema.org/image> "https://avatars1.githubusercontent.com/u/1758649?v=4" .
<https://api.github.com/users/keyvan-m-sadeghi> <http://schema.org/url> "https://github.com/keyvan-m-sadeghi"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/keyvan-m-sadeghi> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/486243847> <http://schema.org/creator> <https://api.github.com/users/keyvan-m-sadeghi> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/486243847> <http://schema.org/startDate> "2019-04-24T13:56:52Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/486243847> <http://example.com/ns#authorAssociation> "NONE" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/486243847> <http://schema.org/description> "Makes perfect sense. Thanks @azaroth42 " .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/486867749> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/167#issuecomment-486867749"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/167> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/486867749> .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/486867749> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/486867749> <http://schema.org/startDate> "2019-04-25T23:01:35Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/486867749> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/486867749> <http://schema.org/description> "SpecGen is having some problems, you can find a preview [here](https://raw.githack.com/w3c/json-ld-syntax/issue-66-html-context/index.html), sorry, no diffs, but changes are mostly in the \"Using an HTML document as a Context\" section and a paragraph at the end of \"Framed Document Form\"." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/486956728> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/167#issuecomment-486956728"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/167> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/486956728> .
<https://api.github.com/users/deniak> <http://schema.org/accountId> "deniak" .
<https://api.github.com/users/deniak> <http://schema.org/image> "https://avatars2.githubusercontent.com/u/1696128?v=4" .
<https://api.github.com/users/deniak> <http://schema.org/url> "https://github.com/deniak"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/deniak> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/486956728> <http://schema.org/creator> <https://api.github.com/users/deniak> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/486956728> <http://schema.org/startDate> "2019-04-26T07:28:46Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/486956728> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/486956728> <http://schema.org/description> "spec-generator is indeed timing out on large documents. I submitted a PR to increase the timeout:\r\nhttps://github.com/w3c/spec-generator/pull/210\r\nWill deploy after Marcos reviews it." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/486960832> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/167#issuecomment-486960832"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/167> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/486960832> .
<https://api.github.com/users/deniak> <http://schema.org/accountId> "deniak" .
<https://api.github.com/users/deniak> <http://schema.org/image> "https://avatars2.githubusercontent.com/u/1696128?v=4" .
<https://api.github.com/users/deniak> <http://schema.org/url> "https://github.com/deniak"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/deniak> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/486960832> <http://schema.org/creator> <https://api.github.com/users/deniak> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/486960832> <http://schema.org/startDate> "2019-04-26T07:43:00Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/486960832> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/486960832> <http://schema.org/description> "It's now merged and deployed." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/487263151> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/108#issuecomment-487263151"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/108> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/487263151> .
<https://api.github.com/users/iherman> <http://schema.org/accountId> "iherman" .
<https://api.github.com/users/iherman> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/520723?v=4" .
<https://api.github.com/users/iherman> <http://schema.org/url> "https://github.com/iherman"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/iherman> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/487263151> <http://schema.org/creator> <https://api.github.com/users/iherman> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/487263151> <http://schema.org/startDate> "2019-04-27T07:24:04Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/487263151> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/487263151> <http://schema.org/description> "This issue was discussed in [a meeting](https://www.w3.org/2018/json-ld-wg/Meetings/Minutes/2019/2019-04-26-json-ld.html#section3-3).\r\n\r\n- `RESOLVED:  Defer syntax #108 to future WG, too large a syntactic change for 1.1, refer in HR to other ongoing work`\r\n<details><summary><i class=\"differentiate\">View the transcript</i></summary>\r\ncontext by reference with metadata<br/>\r\nRob Sanderson: link: <a href=\"https://github.com/w3c/json-ld-syntax/issues/108\">https://github.com/w3c/json-ld-syntax/issues/108</a><br/>\r\nRob Sanderson: metadata specified in a document without context<br/>\r\n… this has been asked for and discussed (as it has some privacy/security implications)<br/>\r\n… we need to have a good answer for not doing it, if we do so<br/>\r\nIvan Herman: the example given in the issue is now outdated<br/>\r\n… is there any other example that would require this? (other than the SRI one)<br/>\r\nRob Sanderson: I don’t.. other than comment, description, etc.<br/>\r\nGregg Kellogg: by providing metadata one might not to have to download a context<br/>\r\n… just verify that the remote context hasn’t changed<br/>\r\nDavid Newbury: the other thing we talked about was finding documentation about contexts<br/>\r\nIvan Herman: back to the various URI schemes, if we use that argument then some people might raise some eyebrows<br/>\r\n… as most of those schemes are more or less experimental<br/>\r\n… but we can say that it would require fundamentally new syntax to be able to handle those metadata, hence deferring<br/>\r\nRob Sanderson: +1 that this would be a bigger change than a .1 ; and to refer abstractly to other work<br/>\r\nDave Longley: I think we can refer to other work that’s going on in that space<br/>\r\n… not necessarily say one has to use them<br/>\r\nProposed resolution: Defer syntax #108 to future WG, too large a syntactic change for 1.1, refer in HR to other ongoing work (Rob Sanderson)<br/>\r\nGregg Kellogg: +1<br/>\r\nRuben Taelman: +1<br/>\r\nRob Sanderson: +1<br/>\r\nTim Cole: +1<br/>\r\nBenjamin Young: +1<br/>\r\nDave Longley: +1<br/>\r\nIvan Herman: +1<br/>\r\nSimon Steyskal: +1<br/>\r\nDavid I. Lehn: +1<br/>\r\nAdam Soroka: +1<br/>\r\nResolution #4: Defer syntax #108 to future WG, too large a syntactic change for 1.1, refer in HR to other ongoing work<br/>\r\n</details>" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/487263195> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/86#issuecomment-487263195"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/86> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/487263195> .
<https://api.github.com/users/iherman> <http://schema.org/accountId> "iherman" .
<https://api.github.com/users/iherman> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/520723?v=4" .
<https://api.github.com/users/iherman> <http://schema.org/url> "https://github.com/iherman"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/iherman> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/487263195> <http://schema.org/creator> <https://api.github.com/users/iherman> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/487263195> <http://schema.org/startDate> "2019-04-27T07:24:54Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/487263195> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/487263195> <http://schema.org/description> "This issue was discussed in [a meeting](https://www.w3.org/2018/json-ld-wg/Meetings/Minutes/2019/2019-04-26-json-ld.html#section3-4).\r\n\r\n- `RESOLVED:  Close syntax #86, as being dependent on deferred #108, and duplicates only use case for it`\r\n<details><summary><i class=\"differentiate\">View the transcript</i></summary>\r\nCan SRI be used in JSON-LD and for which use cases?<br/>\r\nIvan Herman: <a href=\"https://github.com/w3c/json-ld-syntax/issues/86\">https://github.com/w3c/json-ld-syntax/issues/86</a><br/>\r\nRob Sanderson: answer is no<br/>\r\nIvan Herman: I propose this issue can simply be closed by referring to the previous issue<br/>\r\nProposed resolution: Close syntax #86, as being dependent on deferred #108, and duplicates only use case for it (Rob Sanderson)<br/>\r\nGregg Kellogg: +1<br/>\r\nBenjamin Young: +1<br/>\r\nRob Sanderson: +1<br/>\r\nRuben Taelman: +1<br/>\r\nSimon Steyskal: +1<br/>\r\nTim Cole: +1<br/>\r\nPierre-Antoine Champin: +1<br/>\r\nDave Longley: +1<br/>\r\nDavid Newbury: +1<br/>\r\nIvan Herman: +1<br/>\r\nDavid I. Lehn: +1<br/>\r\nResolution #5: Close syntax #86, as being dependent on deferred #108, and duplicates only use case for it<br/>\r\n</details>" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/487263207> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/86#issuecomment-487263207"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/86> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/487263207> .
<https://api.github.com/users/iherman> <http://schema.org/accountId> "iherman" .
<https://api.github.com/users/iherman> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/520723?v=4" .
<https://api.github.com/users/iherman> <http://schema.org/url> "https://github.com/iherman"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/iherman> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/487263207> <http://schema.org/creator> <https://api.github.com/users/iherman> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/487263207> <http://schema.org/startDate> "2019-04-27T07:25:13Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/487263207> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/487263207> <http://schema.org/description> "Ref #108 " .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/487263259> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/128#issuecomment-487263259"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/128> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/487263259> .
<https://api.github.com/users/iherman> <http://schema.org/accountId> "iherman" .
<https://api.github.com/users/iherman> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/520723?v=4" .
<https://api.github.com/users/iherman> <http://schema.org/url> "https://github.com/iherman"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/iherman> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/487263259> <http://schema.org/creator> <https://api.github.com/users/iherman> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/487263259> <http://schema.org/startDate> "2019-04-27T07:25:58Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/487263259> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/487263259> <http://schema.org/description> "This issue was discussed in [a meeting](https://www.w3.org/2018/json-ld-wg/Meetings/Minutes/2019/2019-04-26-json-ld.html#section3-5).\r\n\r\n- `RESOLVED:  Leave #128 open until we can determine the effects of @container / @nest`\r\n<details><summary><i class=\"differentiate\">View the transcript</i></summary>\r\nTriG graphs in JSON-LD<br/>\r\nRob Sanderson: link: <a href=\"https://github.com/w3c/json-ld-syntax/issues/128\">https://github.com/w3c/json-ld-syntax/issues/128</a><br/>\r\nSimon Steyskal: [ivan contemplating about issue 128]<br/>\r\nIvan Herman: there was some activity on this issue in February<br/>\r\n… there is a comment on it from pchampin providing a solution and asking whether that’s valid<br/>\r\n… idk though<br/>\r\nGregg Kellogg: I think I had an action on looking into interaction with nest/container stuff<br/>\r\n… we def. need a dedicated section on graphs/trig etc. in the bpr document<br/>\r\nIvan Herman: then let’s leave it open for now<br/>\r\nProposed resolution: Leave #128 open until we can determine the effects of @container / @nest (Rob Sanderson)<br/>\r\nRuben Taelman: +1<br/>\r\nRob Sanderson: +1<br/>\r\nPierre-Antoine Champin: +1<br/>\r\nGregg Kellogg: +1<br/>\r\nTim Cole: +1<br/>\r\nSimon Steyskal: +1<br/>\r\nIvan Herman: +1<br/>\r\nDave Longley: +0<br/>\r\nAdam Soroka: +1<br/>\r\nDavid Newbury: +1<br/>\r\nDavid I. Lehn: +1<br/>\r\nResolution #6: Leave #128 open until we can determine the effects of @container / @nest<br/>\r\n</details>" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/487672707> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/168#issuecomment-487672707"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/168> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/487672707> .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/487672707> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/487672707> <http://schema.org/startDate> "2019-04-29T17:34:41Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/487672707> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/487672707> <http://schema.org/description> "Thanks Ivan, this looks promising. Note that files in the common directory are expected to be replicated (by hand) to all of the different repositories. If these files are \"common\", in the sense that they are used _for_ all the repositories, but not expected to reside _within_ those repositories, maybe we should use a different directory.\r\n\r\nI note that Rob Sanderson, David Longley and David Lehn appear in both sections, somewhat differently, and without their organizational attribution; presumably these should be the same.\r\n\r\nThe wording indicates that the members of the WG section would exclude those in the significant contributors section (because of the \"Additionally\"), and probably shouldn't include the editors.\r\n\r\nIt also might be nice to flag Rob and Benjamin as chairs, as you've got that info in the JSON config file." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/487702508> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/168#issuecomment-487702508"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/168> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/487702508> .
<https://api.github.com/users/iherman> <http://schema.org/accountId> "iherman" .
<https://api.github.com/users/iherman> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/520723?v=4" .
<https://api.github.com/users/iherman> <http://schema.org/url> "https://github.com/iherman"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/iherman> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/487702508> <http://schema.org/creator> <https://api.github.com/users/iherman> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/487702508> <http://schema.org/startDate> "2019-04-29T19:00:20Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/487702508> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/487702508> <http://schema.org/description> "@gkellogg, I will look at the minor issues there. I suspect the reason Rob and others to appear twice is that their name in the official database is different than what I used in the curated file.\r\n\r\nAs for the place in the repo, please change it as you prefer. They are indeed not common; they can differ from one document to the other. Eg, PA would have to appear in the manually created list in the frame document because he is not an editor of that one." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/487737294> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/168#issuecomment-487737294"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/168> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/487737294> .
<https://api.github.com/users/BigBlueHat> <http://schema.org/accountId> "BigBlueHat" .
<https://api.github.com/users/BigBlueHat> <http://schema.org/image> "https://avatars1.githubusercontent.com/u/43209?v=4" .
<https://api.github.com/users/BigBlueHat> <http://schema.org/url> "https://github.com/BigBlueHat"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/BigBlueHat> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/487737294> <http://schema.org/creator> <https://api.github.com/users/BigBlueHat> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/487737294> <http://schema.org/startDate> "2019-04-29T20:45:28Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/487737294> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/487737294> <http://schema.org/description> "Looks great overall, @iherman!\r\n\r\nThis probably won't shock anyone that I'm wishing we could somehow overlap the `nicknames.json` and the new `separate_acks.json` file. Maybe there's cause for a new WG-level `people.json` file in JSON-LD that could more completely (as needed) contain these various relationships with the various docs.\r\n\r\nIf the answer is \"nah, that's too much work.\" We should (re)consider the value claims we use when promoting JSON-LD...and/or improve the tooling...\r\n\r\nI'm happy to help craft such a thing (if it's wanted), fwiw. 😃 " .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/487840576> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/159#issuecomment-487840576"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/159> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/487840576> .
<https://api.github.com/users/pchampin> <http://schema.org/accountId> "pchampin" .
<https://api.github.com/users/pchampin> <http://schema.org/image> "https://avatars1.githubusercontent.com/u/304612?v=4" .
<https://api.github.com/users/pchampin> <http://schema.org/url> "https://github.com/pchampin"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/pchampin> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/487840576> <http://schema.org/creator> <https://api.github.com/users/pchampin> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/487840576> <http://schema.org/startDate> "2019-04-30T07:03:16Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/487840576> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/487840576> <http://schema.org/description> "Looking good in the spec texts now. However, I just noticed that the \"Library\" example in the playground uses the `dcterms` for `http://purl.org/dc/elements/1.1/`... @davidlehn \r\nSorry, but I couldn't find any repo specific to the playground to file this issue." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/487843472> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/168#issuecomment-487843472"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/168> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/487843472> .
<https://api.github.com/users/iherman> <http://schema.org/accountId> "iherman" .
<https://api.github.com/users/iherman> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/520723?v=4" .
<https://api.github.com/users/iherman> <http://schema.org/url> "https://github.com/iherman"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/iherman> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/487843472> <http://schema.org/creator> <https://api.github.com/users/iherman> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/487843472> <http://schema.org/startDate> "2019-04-30T07:16:29Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/487843472> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/487843472> <http://schema.org/description> "@BigBlueHat \r\n\r\n> This probably won't shock anyone that I'm wishing we could somehow overlap the nicknames.json and the new separate_acks.json file. Maybe there's cause for a new WG-level people.json file in JSON-LD that could more completely (as needed) contain these various relationships with the various docs.\r\n\r\nThis may become a bit complex. The `nicknames.json` file is to have and maintain per group. The `separate_acks.json` file is per document. It *can* of course be done, but it may lead to some refactorization of several things with a slightly more complex JSON structure.\r\n\r\nSuch a grand unification would make sense, of course, but it is quite a lot of work and should be done in a larger framework of tools to handle WG tasks which goes beyond what I should do (there are dedicated people for that at W3C...)." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/487935790> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/168#issuecomment-487935790"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/168> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/487935790> .
<https://api.github.com/users/iherman> <http://schema.org/accountId> "iherman" .
<https://api.github.com/users/iherman> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/520723?v=4" .
<https://api.github.com/users/iherman> <http://schema.org/url> "https://github.com/iherman"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/iherman> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/487935790> <http://schema.org/creator> <https://api.github.com/users/iherman> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/487935790> <http://schema.org/startDate> "2019-04-30T12:41:04Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/487935790> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/487935790> <http://schema.org/description> "@gkellogg I have \r\n\r\n- made some changes (and handled a bug) in the script, the result has the chairs properly flagged\r\n- the ack file had to be improved; the names in the list _must_ be identical to the name used in the W3C user database (and some of those were slightly different, like 'Robert Sanderson' as opposed to 'Rob Sanderson'...)\r\n- I have added an extra possible flag for 'editors' in the ack file; those names are removed from the global listing, but not displayed in the first, explicit list either\r\n\r\nI have updated the results. I have not changed the place in the file hierarchy, I let you decide what you would prefer to have. I can then generate the relevant files for the API and the Frames' documents, too." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/487936092> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/168#issuecomment-487936092"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/168> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/487936092> .
<https://api.github.com/users/iherman> <http://schema.org/accountId> "iherman" .
<https://api.github.com/users/iherman> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/520723?v=4" .
<https://api.github.com/users/iherman> <http://schema.org/url> "https://github.com/iherman"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/iherman> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/487936092> <http://schema.org/creator> <https://api.github.com/users/iherman> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/487936092> <http://schema.org/startDate> "2019-04-30T12:42:07Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/487936092> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/487936092> <http://schema.org/description> "One question: there was a feature in the script that I documented out, namely that one could get all the WG members in the listing, _including_ the former WG members. I am not sure that is necessary. WDYT?" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/487994152> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/issues/159#issuecomment-487994152"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/159> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/487994152> .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/487994152> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/487994152> <http://schema.org/startDate> "2019-04-30T15:17:32Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/487994152> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/487994152> <http://schema.org/description> "I must have broken that, it’s in github.com/json-ld/json-ld.org." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/488121400> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/167#issuecomment-488121400"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/167> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/488121400> .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/488121400> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/488121400> <http://schema.org/startDate> "2019-04-30T21:26:08Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/488121400> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/488121400> <http://schema.org/description> "@iherman, I put the Processor Levels section within Conformance, which I think is appropriate." .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/488126878> <http://schema.org/url> "https://github.com/w3c/json-ld-syntax/pull/168#issuecomment-488126878"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/168> <http://example.com/ns#comment> <https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/488126878> .
<https://api.github.com/users/gkellogg> <http://schema.org/accountId> "gkellogg" .
<https://api.github.com/users/gkellogg> <http://schema.org/image> "https://avatars0.githubusercontent.com/u/46296?v=4" .
<https://api.github.com/users/gkellogg> <http://schema.org/url> "https://github.com/gkellogg"^^<http://www.w3.org/2001/XMLSchema#anyURI> .
<https://api.github.com/users/gkellogg> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://example.com/ns#User> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/488126878> <http://schema.org/creator> <https://api.github.com/users/gkellogg> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/488126878> <http://schema.org/startDate> "2019-04-30T21:46:33Z"^^<http://www.w3.org/2001/XMLSchema#dateTimeStamp> .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/488126878> <http://example.com/ns#authorAssociation> "MEMBER" .
<https://api.github.com/repos/w3c/json-ld-syntax/issues/comments/488126878> <http://schema.org/description> "I think it's reasonable that acknowledgements are limited to this WG and the CG without invoking all of the acknowledgements from the 1.0 WG, which of course, live on in that document.\r\n\r\nI've integrated it into the ReSpec doc for people to inspect in place." .

